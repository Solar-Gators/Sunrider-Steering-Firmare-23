
SteeringWheel2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018f4c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001974  0801911c  0801911c  0002911c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801aa90  0801aa90  000300c8  2**0
                  CONTENTS
  4 .ARM          00000008  0801aa90  0801aa90  0002aa90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801aa98  0801aa98  000300c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801aa98  0801aa98  0002aa98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801aaa0  0801aaa0  0002aaa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0801aaa8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000063d0  200000c8  0801ab70  000300c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006498  0801ab70  00036498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005d066  00000000  00000000  000300f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a508  00000000  00000000  0008d15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000037c8  00000000  00000000  00097668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003568  00000000  00000000  0009ae30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030bc9  00000000  00000000  0009e398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003abae  00000000  00000000  000cef61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109c34  00000000  00000000  00109b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00213743  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00010170  00000000  00000000  00213794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019104 	.word	0x08019104

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000cc 	.word	0x200000cc
 800020c:	08019104 	.word	0x08019104

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__gedf2>:
 800087c:	f04f 3cff 	mov.w	ip, #4294967295
 8000880:	e006      	b.n	8000890 <__cmpdf2+0x4>
 8000882:	bf00      	nop

08000884 <__ledf2>:
 8000884:	f04f 0c01 	mov.w	ip, #1
 8000888:	e002      	b.n	8000890 <__cmpdf2+0x4>
 800088a:	bf00      	nop

0800088c <__cmpdf2>:
 800088c:	f04f 0c01 	mov.w	ip, #1
 8000890:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800089c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008a0:	bf18      	it	ne
 80008a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008a6:	d01b      	beq.n	80008e0 <__cmpdf2+0x54>
 80008a8:	b001      	add	sp, #4
 80008aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008ae:	bf0c      	ite	eq
 80008b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008b4:	ea91 0f03 	teqne	r1, r3
 80008b8:	bf02      	ittt	eq
 80008ba:	ea90 0f02 	teqeq	r0, r2
 80008be:	2000      	moveq	r0, #0
 80008c0:	4770      	bxeq	lr
 80008c2:	f110 0f00 	cmn.w	r0, #0
 80008c6:	ea91 0f03 	teq	r1, r3
 80008ca:	bf58      	it	pl
 80008cc:	4299      	cmppl	r1, r3
 80008ce:	bf08      	it	eq
 80008d0:	4290      	cmpeq	r0, r2
 80008d2:	bf2c      	ite	cs
 80008d4:	17d8      	asrcs	r0, r3, #31
 80008d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008da:	f040 0001 	orr.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008e8:	d102      	bne.n	80008f0 <__cmpdf2+0x64>
 80008ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ee:	d107      	bne.n	8000900 <__cmpdf2+0x74>
 80008f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008f8:	d1d6      	bne.n	80008a8 <__cmpdf2+0x1c>
 80008fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008fe:	d0d3      	beq.n	80008a8 <__cmpdf2+0x1c>
 8000900:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <__aeabi_cdrcmple>:
 8000908:	4684      	mov	ip, r0
 800090a:	4610      	mov	r0, r2
 800090c:	4662      	mov	r2, ip
 800090e:	468c      	mov	ip, r1
 8000910:	4619      	mov	r1, r3
 8000912:	4663      	mov	r3, ip
 8000914:	e000      	b.n	8000918 <__aeabi_cdcmpeq>
 8000916:	bf00      	nop

08000918 <__aeabi_cdcmpeq>:
 8000918:	b501      	push	{r0, lr}
 800091a:	f7ff ffb7 	bl	800088c <__cmpdf2>
 800091e:	2800      	cmp	r0, #0
 8000920:	bf48      	it	mi
 8000922:	f110 0f00 	cmnmi.w	r0, #0
 8000926:	bd01      	pop	{r0, pc}

08000928 <__aeabi_dcmpeq>:
 8000928:	f84d ed08 	str.w	lr, [sp, #-8]!
 800092c:	f7ff fff4 	bl	8000918 <__aeabi_cdcmpeq>
 8000930:	bf0c      	ite	eq
 8000932:	2001      	moveq	r0, #1
 8000934:	2000      	movne	r0, #0
 8000936:	f85d fb08 	ldr.w	pc, [sp], #8
 800093a:	bf00      	nop

0800093c <__aeabi_dcmplt>:
 800093c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000940:	f7ff ffea 	bl	8000918 <__aeabi_cdcmpeq>
 8000944:	bf34      	ite	cc
 8000946:	2001      	movcc	r0, #1
 8000948:	2000      	movcs	r0, #0
 800094a:	f85d fb08 	ldr.w	pc, [sp], #8
 800094e:	bf00      	nop

08000950 <__aeabi_dcmple>:
 8000950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000954:	f7ff ffe0 	bl	8000918 <__aeabi_cdcmpeq>
 8000958:	bf94      	ite	ls
 800095a:	2001      	movls	r0, #1
 800095c:	2000      	movhi	r0, #0
 800095e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000962:	bf00      	nop

08000964 <__aeabi_dcmpge>:
 8000964:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000968:	f7ff ffce 	bl	8000908 <__aeabi_cdrcmple>
 800096c:	bf94      	ite	ls
 800096e:	2001      	movls	r0, #1
 8000970:	2000      	movhi	r0, #0
 8000972:	f85d fb08 	ldr.w	pc, [sp], #8
 8000976:	bf00      	nop

08000978 <__aeabi_dcmpgt>:
 8000978:	f84d ed08 	str.w	lr, [sp, #-8]!
 800097c:	f7ff ffc4 	bl	8000908 <__aeabi_cdrcmple>
 8000980:	bf34      	ite	cc
 8000982:	2001      	movcc	r0, #1
 8000984:	2000      	movcs	r0, #0
 8000986:	f85d fb08 	ldr.w	pc, [sp], #8
 800098a:	bf00      	nop

0800098c <__aeabi_d2f>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000994:	bf24      	itt	cs
 8000996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800099a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800099e:	d90d      	bls.n	80009bc <__aeabi_d2f+0x30>
 80009a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b4:	bf08      	it	eq
 80009b6:	f020 0001 	biceq.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009c0:	d121      	bne.n	8000a06 <__aeabi_d2f+0x7a>
 80009c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009c6:	bfbc      	itt	lt
 80009c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	4770      	bxlt	lr
 80009ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d6:	f1c2 0218 	rsb	r2, r2, #24
 80009da:	f1c2 0c20 	rsb	ip, r2, #32
 80009de:	fa10 f30c 	lsls.w	r3, r0, ip
 80009e2:	fa20 f002 	lsr.w	r0, r0, r2
 80009e6:	bf18      	it	ne
 80009e8:	f040 0001 	orrne.w	r0, r0, #1
 80009ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f8:	ea40 000c 	orr.w	r0, r0, ip
 80009fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a04:	e7cc      	b.n	80009a0 <__aeabi_d2f+0x14>
 8000a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a0a:	d107      	bne.n	8000a1c <__aeabi_d2f+0x90>
 8000a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a10:	bf1e      	ittt	ne
 8000a12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a1a:	4770      	bxne	lr
 8000a1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_frsub>:
 8000a2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a30:	e002      	b.n	8000a38 <__addsf3>
 8000a32:	bf00      	nop

08000a34 <__aeabi_fsub>:
 8000a34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a38 <__addsf3>:
 8000a38:	0042      	lsls	r2, r0, #1
 8000a3a:	bf1f      	itttt	ne
 8000a3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a40:	ea92 0f03 	teqne	r2, r3
 8000a44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a4c:	d06a      	beq.n	8000b24 <__addsf3+0xec>
 8000a4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a56:	bfc1      	itttt	gt
 8000a58:	18d2      	addgt	r2, r2, r3
 8000a5a:	4041      	eorgt	r1, r0
 8000a5c:	4048      	eorgt	r0, r1
 8000a5e:	4041      	eorgt	r1, r0
 8000a60:	bfb8      	it	lt
 8000a62:	425b      	neglt	r3, r3
 8000a64:	2b19      	cmp	r3, #25
 8000a66:	bf88      	it	hi
 8000a68:	4770      	bxhi	lr
 8000a6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a86:	bf18      	it	ne
 8000a88:	4249      	negne	r1, r1
 8000a8a:	ea92 0f03 	teq	r2, r3
 8000a8e:	d03f      	beq.n	8000b10 <__addsf3+0xd8>
 8000a90:	f1a2 0201 	sub.w	r2, r2, #1
 8000a94:	fa41 fc03 	asr.w	ip, r1, r3
 8000a98:	eb10 000c 	adds.w	r0, r0, ip
 8000a9c:	f1c3 0320 	rsb	r3, r3, #32
 8000aa0:	fa01 f103 	lsl.w	r1, r1, r3
 8000aa4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aa8:	d502      	bpl.n	8000ab0 <__addsf3+0x78>
 8000aaa:	4249      	negs	r1, r1
 8000aac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ab0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ab4:	d313      	bcc.n	8000ade <__addsf3+0xa6>
 8000ab6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aba:	d306      	bcc.n	8000aca <__addsf3+0x92>
 8000abc:	0840      	lsrs	r0, r0, #1
 8000abe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ac2:	f102 0201 	add.w	r2, r2, #1
 8000ac6:	2afe      	cmp	r2, #254	; 0xfe
 8000ac8:	d251      	bcs.n	8000b6e <__addsf3+0x136>
 8000aca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ace:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ad2:	bf08      	it	eq
 8000ad4:	f020 0001 	biceq.w	r0, r0, #1
 8000ad8:	ea40 0003 	orr.w	r0, r0, r3
 8000adc:	4770      	bx	lr
 8000ade:	0049      	lsls	r1, r1, #1
 8000ae0:	eb40 0000 	adc.w	r0, r0, r0
 8000ae4:	3a01      	subs	r2, #1
 8000ae6:	bf28      	it	cs
 8000ae8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000aec:	d2ed      	bcs.n	8000aca <__addsf3+0x92>
 8000aee:	fab0 fc80 	clz	ip, r0
 8000af2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000af6:	ebb2 020c 	subs.w	r2, r2, ip
 8000afa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000afe:	bfaa      	itet	ge
 8000b00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b04:	4252      	neglt	r2, r2
 8000b06:	4318      	orrge	r0, r3
 8000b08:	bfbc      	itt	lt
 8000b0a:	40d0      	lsrlt	r0, r2
 8000b0c:	4318      	orrlt	r0, r3
 8000b0e:	4770      	bx	lr
 8000b10:	f092 0f00 	teq	r2, #0
 8000b14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b18:	bf06      	itte	eq
 8000b1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b1e:	3201      	addeq	r2, #1
 8000b20:	3b01      	subne	r3, #1
 8000b22:	e7b5      	b.n	8000a90 <__addsf3+0x58>
 8000b24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b2c:	bf18      	it	ne
 8000b2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b32:	d021      	beq.n	8000b78 <__addsf3+0x140>
 8000b34:	ea92 0f03 	teq	r2, r3
 8000b38:	d004      	beq.n	8000b44 <__addsf3+0x10c>
 8000b3a:	f092 0f00 	teq	r2, #0
 8000b3e:	bf08      	it	eq
 8000b40:	4608      	moveq	r0, r1
 8000b42:	4770      	bx	lr
 8000b44:	ea90 0f01 	teq	r0, r1
 8000b48:	bf1c      	itt	ne
 8000b4a:	2000      	movne	r0, #0
 8000b4c:	4770      	bxne	lr
 8000b4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b52:	d104      	bne.n	8000b5e <__addsf3+0x126>
 8000b54:	0040      	lsls	r0, r0, #1
 8000b56:	bf28      	it	cs
 8000b58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	4770      	bx	lr
 8000b5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b62:	bf3c      	itt	cc
 8000b64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bxcc	lr
 8000b6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b76:	4770      	bx	lr
 8000b78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b7c:	bf16      	itet	ne
 8000b7e:	4608      	movne	r0, r1
 8000b80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b84:	4601      	movne	r1, r0
 8000b86:	0242      	lsls	r2, r0, #9
 8000b88:	bf06      	itte	eq
 8000b8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b8e:	ea90 0f01 	teqeq	r0, r1
 8000b92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_ui2f>:
 8000b98:	f04f 0300 	mov.w	r3, #0
 8000b9c:	e004      	b.n	8000ba8 <__aeabi_i2f+0x8>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_i2f>:
 8000ba0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	bf48      	it	mi
 8000ba6:	4240      	negmi	r0, r0
 8000ba8:	ea5f 0c00 	movs.w	ip, r0
 8000bac:	bf08      	it	eq
 8000bae:	4770      	bxeq	lr
 8000bb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bb4:	4601      	mov	r1, r0
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	e01c      	b.n	8000bf6 <__aeabi_l2f+0x2a>

08000bbc <__aeabi_ul2f>:
 8000bbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000bc0:	bf08      	it	eq
 8000bc2:	4770      	bxeq	lr
 8000bc4:	f04f 0300 	mov.w	r3, #0
 8000bc8:	e00a      	b.n	8000be0 <__aeabi_l2f+0x14>
 8000bca:	bf00      	nop

08000bcc <__aeabi_l2f>:
 8000bcc:	ea50 0201 	orrs.w	r2, r0, r1
 8000bd0:	bf08      	it	eq
 8000bd2:	4770      	bxeq	lr
 8000bd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bd8:	d502      	bpl.n	8000be0 <__aeabi_l2f+0x14>
 8000bda:	4240      	negs	r0, r0
 8000bdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be0:	ea5f 0c01 	movs.w	ip, r1
 8000be4:	bf02      	ittt	eq
 8000be6:	4684      	moveq	ip, r0
 8000be8:	4601      	moveq	r1, r0
 8000bea:	2000      	moveq	r0, #0
 8000bec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bf0:	bf08      	it	eq
 8000bf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bfa:	fabc f28c 	clz	r2, ip
 8000bfe:	3a08      	subs	r2, #8
 8000c00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c04:	db10      	blt.n	8000c28 <__aeabi_l2f+0x5c>
 8000c06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c0a:	4463      	add	r3, ip
 8000c0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c10:	f1c2 0220 	rsb	r2, r2, #32
 8000c14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c18:	fa20 f202 	lsr.w	r2, r0, r2
 8000c1c:	eb43 0002 	adc.w	r0, r3, r2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f102 0220 	add.w	r2, r2, #32
 8000c2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c30:	f1c2 0220 	rsb	r2, r2, #32
 8000c34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c38:	fa21 f202 	lsr.w	r2, r1, r2
 8000c3c:	eb43 0002 	adc.w	r0, r3, r2
 8000c40:	bf08      	it	eq
 8000c42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b994 	b.w	8000f88 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f826 	bl	8000cb8 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_f2ulz>:
 8000c78:	b5d0      	push	{r4, r6, r7, lr}
 8000c7a:	f7ff fda7 	bl	80007cc <__aeabi_f2d>
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__aeabi_f2ulz+0x38>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	4606      	mov	r6, r0
 8000c84:	460f      	mov	r7, r1
 8000c86:	f7ff fb13 	bl	80002b0 <__aeabi_dmul>
 8000c8a:	f000 f97f 	bl	8000f8c <__aeabi_d2uiz>
 8000c8e:	4604      	mov	r4, r0
 8000c90:	f7ff fd7a 	bl	8000788 <__aeabi_ui2d>
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <__aeabi_f2ulz+0x3c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f7ff fb0a 	bl	80002b0 <__aeabi_dmul>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	4639      	mov	r1, r7
 8000ca4:	f7ff fc32 	bl	800050c <__aeabi_dsub>
 8000ca8:	f000 f970 	bl	8000f8c <__aeabi_d2uiz>
 8000cac:	4621      	mov	r1, r4
 8000cae:	bdd0      	pop	{r4, r6, r7, pc}
 8000cb0:	3df00000 	.word	0x3df00000
 8000cb4:	41f00000 	.word	0x41f00000

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__aeabi_d2uiz>:
 8000f8c:	004a      	lsls	r2, r1, #1
 8000f8e:	d211      	bcs.n	8000fb4 <__aeabi_d2uiz+0x28>
 8000f90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f94:	d211      	bcs.n	8000fba <__aeabi_d2uiz+0x2e>
 8000f96:	d50d      	bpl.n	8000fb4 <__aeabi_d2uiz+0x28>
 8000f98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fa0:	d40e      	bmi.n	8000fc0 <__aeabi_d2uiz+0x34>
 8000fa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000faa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fae:	fa23 f002 	lsr.w	r0, r3, r2
 8000fb2:	4770      	bx	lr
 8000fb4:	f04f 0000 	mov.w	r0, #0
 8000fb8:	4770      	bx	lr
 8000fba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fbe:	d102      	bne.n	8000fc6 <__aeabi_d2uiz+0x3a>
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	4770      	bx	lr
 8000fc6:	f04f 0000 	mov.w	r0, #0
 8000fca:	4770      	bx	lr

08000fcc <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a2e      	ldr	r2, [pc, #184]	; (8001094 <GetSector+0xc8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d806      	bhi.n	8000fee <GetSector+0x22>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000fe6:	d302      	bcc.n	8000fee <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	e04b      	b.n	8001086 <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a29      	ldr	r2, [pc, #164]	; (8001098 <GetSector+0xcc>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d806      	bhi.n	8001004 <GetSector+0x38>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a28      	ldr	r2, [pc, #160]	; (800109c <GetSector+0xd0>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d302      	bcc.n	8001004 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8000ffe:	2301      	movs	r3, #1
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	e040      	b.n	8001086 <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a26      	ldr	r2, [pc, #152]	; (80010a0 <GetSector+0xd4>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d806      	bhi.n	800101a <GetSector+0x4e>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a25      	ldr	r2, [pc, #148]	; (80010a4 <GetSector+0xd8>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d302      	bcc.n	800101a <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8001014:	2302      	movs	r3, #2
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e035      	b.n	8001086 <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a22      	ldr	r2, [pc, #136]	; (80010a8 <GetSector+0xdc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d206      	bcs.n	8001030 <GetSector+0x64>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a21      	ldr	r2, [pc, #132]	; (80010ac <GetSector+0xe0>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d302      	bcc.n	8001030 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 800102a:	2303      	movs	r3, #3
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e02a      	b.n	8001086 <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a1f      	ldr	r2, [pc, #124]	; (80010b0 <GetSector+0xe4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d206      	bcs.n	8001046 <GetSector+0x7a>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a1b      	ldr	r2, [pc, #108]	; (80010a8 <GetSector+0xdc>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d902      	bls.n	8001046 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8001040:	2304      	movs	r3, #4
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	e01f      	b.n	8001086 <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a1a      	ldr	r2, [pc, #104]	; (80010b4 <GetSector+0xe8>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d206      	bcs.n	800105c <GetSector+0x90>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a17      	ldr	r2, [pc, #92]	; (80010b0 <GetSector+0xe4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d902      	bls.n	800105c <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8001056:	2305      	movs	r3, #5
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e014      	b.n	8001086 <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a16      	ldr	r2, [pc, #88]	; (80010b8 <GetSector+0xec>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d206      	bcs.n	8001072 <GetSector+0xa6>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a13      	ldr	r2, [pc, #76]	; (80010b4 <GetSector+0xe8>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d902      	bls.n	8001072 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 800106c:	2306      	movs	r3, #6
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	e009      	b.n	8001086 <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a11      	ldr	r2, [pc, #68]	; (80010bc <GetSector+0xf0>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d205      	bcs.n	8001086 <GetSector+0xba>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <GetSector+0xec>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d901      	bls.n	8001086 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 8001082:	2307      	movs	r3, #7
 8001084:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 8001086:	68fb      	ldr	r3, [r7, #12]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	08003ffe 	.word	0x08003ffe
 8001098:	08007ffe 	.word	0x08007ffe
 800109c:	08004000 	.word	0x08004000
 80010a0:	0800bffe 	.word	0x0800bffe
 80010a4:	08008000 	.word	0x08008000
 80010a8:	0800ffff 	.word	0x0800ffff
 80010ac:	0800c000 	.word	0x0800c000
 80010b0:	0801ffff 	.word	0x0801ffff
 80010b4:	0803ffff 	.word	0x0803ffff
 80010b8:	0805ffff 	.word	0x0805ffff
 80010bc:	0807ffff 	.word	0x0807ffff

080010c0 <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 80010c0:	b5b0      	push	{r4, r5, r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	4613      	mov	r3, r2
 80010cc:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80010d2:	f005 ffb1 	bl	8007038 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f7ff ff78 	bl	8000fcc <GetSector>
 80010dc:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 80010ea:	69f8      	ldr	r0, [r7, #28]
 80010ec:	f7ff ff6e 	bl	8000fcc <GetSector>
 80010f0:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <Flash_Write_Data+0xb8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80010f8:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <Flash_Write_Data+0xb8>)
 80010fa:	2202      	movs	r2, #2
 80010fc:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 80010fe:	4a1e      	ldr	r2, [pc, #120]	; (8001178 <Flash_Write_Data+0xb8>)
 8001100:	6a3b      	ldr	r3, [r7, #32]
 8001102:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	3301      	adds	r3, #1
 800110c:	4a1a      	ldr	r2, [pc, #104]	; (8001178 <Flash_Write_Data+0xb8>)
 800110e:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	4818      	ldr	r0, [pc, #96]	; (8001178 <Flash_Write_Data+0xb8>)
 8001118:	f006 f90c 	bl	8007334 <HAL_FLASHEx_Erase>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d01f      	beq.n	8001162 <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 8001122:	f005 ffbb 	bl	800709c <HAL_FLASH_GetError>
 8001126:	4603      	mov	r3, r0
 8001128:	e022      	b.n	8001170 <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	4413      	add	r3, r2
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2200      	movs	r2, #0
 8001136:	461c      	mov	r4, r3
 8001138:	4615      	mov	r5, r2
 800113a:	4622      	mov	r2, r4
 800113c:	462b      	mov	r3, r5
 800113e:	68f9      	ldr	r1, [r7, #12]
 8001140:	2002      	movs	r0, #2
 8001142:	f005 ff25 	bl	8006f90 <HAL_FLASH_Program>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d106      	bne.n	800115a <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3304      	adds	r3, #4
 8001150:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	3301      	adds	r3, #1
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
 8001158:	e003      	b.n	8001162 <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 800115a:	f005 ff9f 	bl	800709c <HAL_FLASH_GetError>
 800115e:	4603      	mov	r3, r0
 8001160:	e006      	b.n	8001170 <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001166:	429a      	cmp	r2, r3
 8001168:	dbdf      	blt.n	800112a <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 800116a:	f005 ff87 	bl	800707c <HAL_FLASH_Lock>

	   return 0;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bdb0      	pop	{r4, r5, r7, pc}
 8001178:	200000e4 	.word	0x200000e4

0800117c <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	4613      	mov	r3, r2
 8001188:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3304      	adds	r3, #4
 8001196:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	3304      	adds	r3, #4
 800119c:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	1e5a      	subs	r2, r3, #1
 80011a2:	80fa      	strh	r2, [r7, #6]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d000      	beq.n	80011aa <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80011a8:	e7ef      	b.n	800118a <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 80011aa:	bf00      	nop
	}
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	2120      	movs	r1, #32
 80011c0:	4803      	ldr	r0, [pc, #12]	; (80011d0 <SELECT+0x18>)
 80011c2:	f006 fb85 	bl	80078d0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80011c6:	2001      	movs	r0, #1
 80011c8:	f004 fde8 	bl	8005d9c <HAL_Delay>
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40020400 	.word	0x40020400

080011d4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	2120      	movs	r1, #32
 80011dc:	4803      	ldr	r0, [pc, #12]	; (80011ec <DESELECT+0x18>)
 80011de:	f006 fb77 	bl	80078d0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80011e2:	2001      	movs	r0, #1
 80011e4:	f004 fdda 	bl	8005d9c <HAL_Delay>
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40020400 	.word	0x40020400

080011f0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80011fa:	bf00      	nop
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <SPI_TxByte+0x30>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b02      	cmp	r3, #2
 8001208:	d1f8      	bne.n	80011fc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800120a:	1df9      	adds	r1, r7, #7
 800120c:	2364      	movs	r3, #100	; 0x64
 800120e:	2201      	movs	r2, #1
 8001210:	4803      	ldr	r0, [pc, #12]	; (8001220 <SPI_TxByte+0x30>)
 8001212:	f007 f9b2 	bl	800857a <HAL_SPI_Transmit>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200001a8 	.word	0x200001a8

08001224 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001230:	bf00      	nop
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <SPI_TxBuffer+0x30>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b02      	cmp	r3, #2
 800123e:	d1f8      	bne.n	8001232 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001240:	887a      	ldrh	r2, [r7, #2]
 8001242:	2364      	movs	r3, #100	; 0x64
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	4803      	ldr	r0, [pc, #12]	; (8001254 <SPI_TxBuffer+0x30>)
 8001248:	f007 f997 	bl	800857a <HAL_SPI_Transmit>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200001a8 	.word	0x200001a8

08001258 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800125e:	23ff      	movs	r3, #255	; 0xff
 8001260:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001262:	bf00      	nop
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <SPI_RxByte+0x34>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b02      	cmp	r3, #2
 8001270:	d1f8      	bne.n	8001264 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001272:	1dba      	adds	r2, r7, #6
 8001274:	1df9      	adds	r1, r7, #7
 8001276:	2364      	movs	r3, #100	; 0x64
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	4803      	ldr	r0, [pc, #12]	; (800128c <SPI_RxByte+0x34>)
 800127e:	f007 fab8 	bl	80087f2 <HAL_SPI_TransmitReceive>

  return data;
 8001282:	79bb      	ldrb	r3, [r7, #6]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200001a8 	.word	0x200001a8

08001290 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001298:	f7ff ffde 	bl	8001258 <SPI_RxByte>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	701a      	strb	r2, [r3, #0]
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  SD_Timer2 = 500;
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <SD_ReadyWait+0x30>)
 80012b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012b8:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80012ba:	f7ff ffcd 	bl	8001258 <SPI_RxByte>
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && SD_Timer2);
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2bff      	cmp	r3, #255	; 0xff
 80012c6:	d003      	beq.n	80012d0 <SD_ReadyWait+0x24>
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <SD_ReadyWait+0x30>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f4      	bne.n	80012ba <SD_ReadyWait+0xe>

  return res;
 80012d0:	79fb      	ldrb	r3, [r7, #7]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200000fa 	.word	0x200000fa

080012e0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80012e6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80012ea:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 80012ec:	f7ff ff72 	bl	80011d4 <DESELECT>
  for(int i = 0; i < 10; i++)
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	e005      	b.n	8001302 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80012f6:	20ff      	movs	r0, #255	; 0xff
 80012f8:	f7ff ff7a 	bl	80011f0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	3301      	adds	r3, #1
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	2b09      	cmp	r3, #9
 8001306:	ddf6      	ble.n	80012f6 <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8001308:	f7ff ff56 	bl	80011b8 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800130c:	2340      	movs	r3, #64	; 0x40
 800130e:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8001320:	2395      	movs	r3, #149	; 0x95
 8001322:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8001324:	463b      	mov	r3, r7
 8001326:	2106      	movs	r1, #6
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff7b 	bl	8001224 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800132e:	e002      	b.n	8001336 <SD_PowerOn+0x56>
  {
    cnt--;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	3b01      	subs	r3, #1
 8001334:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8001336:	f7ff ff8f 	bl	8001258 <SPI_RxByte>
 800133a:	4603      	mov	r3, r0
 800133c:	2b01      	cmp	r3, #1
 800133e:	d002      	beq.n	8001346 <SD_PowerOn+0x66>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f4      	bne.n	8001330 <SD_PowerOn+0x50>
  }

  DESELECT();
 8001346:	f7ff ff45 	bl	80011d4 <DESELECT>
  SPI_TxByte(0XFF);
 800134a:	20ff      	movs	r0, #255	; 0xff
 800134c:	f7ff ff50 	bl	80011f0 <SPI_TxByte>

  PowerFlag = 1;
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <SD_PowerOn+0x80>)
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200000fd 	.word	0x200000fd

08001364 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <SD_PowerOff+0x14>)
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	200000fd 	.word	0x200000fd

0800137c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return PowerFlag;
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <SD_CheckPower+0x14>)
 8001382:	781b      	ldrb	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	200000fd 	.word	0x200000fd

08001394 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  SD_Timer1 = 200;
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <SD_RxDataBlock+0x58>)
 80013a0:	22c8      	movs	r2, #200	; 0xc8
 80013a2:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80013a4:	f7ff ff58 	bl	8001258 <SPI_RxByte>
 80013a8:	4603      	mov	r3, r0
 80013aa:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && SD_Timer1);
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	2bff      	cmp	r3, #255	; 0xff
 80013b0:	d103      	bne.n	80013ba <SD_RxDataBlock+0x26>
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <SD_RxDataBlock+0x58>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f4      	bne.n	80013a4 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	2bfe      	cmp	r3, #254	; 0xfe
 80013be:	d001      	beq.n	80013c4 <SD_RxDataBlock+0x30>
 80013c0:	2300      	movs	r3, #0
 80013c2:	e00f      	b.n	80013e4 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ff60 	bl	8001290 <SPI_RxBytePtr>
  } while(len--);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	1e5a      	subs	r2, r3, #1
 80013d4:	603a      	str	r2, [r7, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f4      	bne.n	80013c4 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 80013da:	f7ff ff3d 	bl	8001258 <SPI_RxByte>
  SPI_RxByte();
 80013de:	f7ff ff3b 	bl	8001258 <SPI_RxByte>

  return TRUE;
 80013e2:	2301      	movs	r3, #1
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200000f8 	.word	0x200000f8

080013f0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8001400:	f7ff ff54 	bl	80012ac <SD_ReadyWait>
 8001404:	4603      	mov	r3, r0
 8001406:	2bff      	cmp	r3, #255	; 0xff
 8001408:	d001      	beq.n	800140e <SD_TxDataBlock+0x1e>
 800140a:	2300      	movs	r3, #0
 800140c:	e02f      	b.n	800146e <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 800140e:	78fb      	ldrb	r3, [r7, #3]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff feed 	bl	80011f0 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8001416:	78fb      	ldrb	r3, [r7, #3]
 8001418:	2bfd      	cmp	r3, #253	; 0xfd
 800141a:	d020      	beq.n	800145e <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 800141c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff feff 	bl	8001224 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 8001426:	f7ff ff17 	bl	8001258 <SPI_RxByte>
    SPI_RxByte();
 800142a:	f7ff ff15 	bl	8001258 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 800142e:	e00b      	b.n	8001448 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8001430:	f7ff ff12 	bl	8001258 <SPI_RxByte>
 8001434:	4603      	mov	r3, r0
 8001436:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	f003 031f 	and.w	r3, r3, #31
 800143e:	2b05      	cmp	r3, #5
 8001440:	d006      	beq.n	8001450 <SD_TxDataBlock+0x60>
      i++;
 8001442:	7bbb      	ldrb	r3, [r7, #14]
 8001444:	3301      	adds	r3, #1
 8001446:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8001448:	7bbb      	ldrb	r3, [r7, #14]
 800144a:	2b40      	cmp	r3, #64	; 0x40
 800144c:	d9f0      	bls.n	8001430 <SD_TxDataBlock+0x40>
 800144e:	e000      	b.n	8001452 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8001450:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8001452:	bf00      	nop
 8001454:	f7ff ff00 	bl	8001258 <SPI_RxByte>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0fa      	beq.n	8001454 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	f003 031f 	and.w	r3, r3, #31
 8001464:	2b05      	cmp	r3, #5
 8001466:	d101      	bne.n	800146c <SD_TxDataBlock+0x7c>
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <SD_TxDataBlock+0x7e>

  return FALSE;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	6039      	str	r1, [r7, #0]
 8001480:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001482:	f7ff ff13 	bl	80012ac <SD_ReadyWait>
 8001486:	4603      	mov	r3, r0
 8001488:	2bff      	cmp	r3, #255	; 0xff
 800148a:	d001      	beq.n	8001490 <SD_SendCmd+0x1a>
 800148c:	23ff      	movs	r3, #255	; 0xff
 800148e:	e042      	b.n	8001516 <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff feac 	bl	80011f0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	0e1b      	lsrs	r3, r3, #24
 800149c:	b2db      	uxtb	r3, r3
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fea6 	bl	80011f0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	0c1b      	lsrs	r3, r3, #16
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fea0 	bl	80011f0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	0a1b      	lsrs	r3, r3, #8
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fe9a 	bl	80011f0 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fe95 	bl	80011f0 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	2b40      	cmp	r3, #64	; 0x40
 80014ca:	d102      	bne.n	80014d2 <SD_SendCmd+0x5c>
 80014cc:	2395      	movs	r3, #149	; 0x95
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	e007      	b.n	80014e2 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	2b48      	cmp	r3, #72	; 0x48
 80014d6:	d102      	bne.n	80014de <SD_SendCmd+0x68>
 80014d8:	2387      	movs	r3, #135	; 0x87
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	e001      	b.n	80014e2 <SD_SendCmd+0x6c>
  else crc = 1;
 80014de:	2301      	movs	r3, #1
 80014e0:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fe83 	bl	80011f0 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b4c      	cmp	r3, #76	; 0x4c
 80014ee:	d101      	bne.n	80014f4 <SD_SendCmd+0x7e>
 80014f0:	f7ff feb2 	bl	8001258 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 80014f4:	230a      	movs	r3, #10
 80014f6:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 80014f8:	f7ff feae 	bl	8001258 <SPI_RxByte>
 80014fc:	4603      	mov	r3, r0
 80014fe:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001500:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001504:	2b00      	cmp	r3, #0
 8001506:	da05      	bge.n	8001514 <SD_SendCmd+0x9e>
 8001508:	7bbb      	ldrb	r3, [r7, #14]
 800150a:	3b01      	subs	r3, #1
 800150c:	73bb      	strb	r3, [r7, #14]
 800150e:	7bbb      	ldrb	r3, [r7, #14]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f1      	bne.n	80014f8 <SD_SendCmd+0x82>

  return res;
 8001514:	7b7b      	ldrb	r3, [r7, #13]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SD_disk_initialize+0x14>
 8001530:	2301      	movs	r3, #1
 8001532:	e0d1      	b.n	80016d8 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8001534:	4b6a      	ldr	r3, [pc, #424]	; (80016e0 <SD_disk_initialize+0x1c0>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <SD_disk_initialize+0x2a>
 8001542:	4b67      	ldr	r3, [pc, #412]	; (80016e0 <SD_disk_initialize+0x1c0>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	e0c6      	b.n	80016d8 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 800154a:	f7ff fec9 	bl	80012e0 <SD_PowerOn>

  /* slave select */
  SELECT();
 800154e:	f7ff fe33 	bl	80011b8 <SELECT>

  /* check disk type */
  type = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001556:	2100      	movs	r1, #0
 8001558:	2040      	movs	r0, #64	; 0x40
 800155a:	f7ff ff8c 	bl	8001476 <SD_SendCmd>
 800155e:	4603      	mov	r3, r0
 8001560:	2b01      	cmp	r3, #1
 8001562:	f040 80a1 	bne.w	80016a8 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    SD_Timer1 = 1000;
 8001566:	4b5f      	ldr	r3, [pc, #380]	; (80016e4 <SD_disk_initialize+0x1c4>)
 8001568:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800156c:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800156e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001572:	2048      	movs	r0, #72	; 0x48
 8001574:	f7ff ff7f 	bl	8001476 <SD_SendCmd>
 8001578:	4603      	mov	r3, r0
 800157a:	2b01      	cmp	r3, #1
 800157c:	d155      	bne.n	800162a <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]
 8001582:	e00c      	b.n	800159e <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8001584:	7bfc      	ldrb	r4, [r7, #15]
 8001586:	f7ff fe67 	bl	8001258 <SPI_RxByte>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	f104 0310 	add.w	r3, r4, #16
 8001592:	443b      	add	r3, r7
 8001594:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	3301      	adds	r3, #1
 800159c:	73fb      	strb	r3, [r7, #15]
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d9ef      	bls.n	8001584 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80015a4:	7abb      	ldrb	r3, [r7, #10]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d17e      	bne.n	80016a8 <SD_disk_initialize+0x188>
 80015aa:	7afb      	ldrb	r3, [r7, #11]
 80015ac:	2baa      	cmp	r3, #170	; 0xaa
 80015ae:	d17b      	bne.n	80016a8 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80015b0:	2100      	movs	r1, #0
 80015b2:	2077      	movs	r0, #119	; 0x77
 80015b4:	f7ff ff5f 	bl	8001476 <SD_SendCmd>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d807      	bhi.n	80015ce <SD_disk_initialize+0xae>
 80015be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80015c2:	2069      	movs	r0, #105	; 0x69
 80015c4:	f7ff ff57 	bl	8001476 <SD_SendCmd>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d004      	beq.n	80015d8 <SD_disk_initialize+0xb8>
        } while (SD_Timer1);
 80015ce:	4b45      	ldr	r3, [pc, #276]	; (80016e4 <SD_disk_initialize+0x1c4>)
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1ec      	bne.n	80015b0 <SD_disk_initialize+0x90>
 80015d6:	e000      	b.n	80015da <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80015d8:	bf00      	nop

        /* READ_OCR */
        if (SD_Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80015da:	4b42      	ldr	r3, [pc, #264]	; (80016e4 <SD_disk_initialize+0x1c4>)
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d062      	beq.n	80016a8 <SD_disk_initialize+0x188>
 80015e2:	2100      	movs	r1, #0
 80015e4:	207a      	movs	r0, #122	; 0x7a
 80015e6:	f7ff ff46 	bl	8001476 <SD_SendCmd>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d15b      	bne.n	80016a8 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	73fb      	strb	r3, [r7, #15]
 80015f4:	e00c      	b.n	8001610 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 80015f6:	7bfc      	ldrb	r4, [r7, #15]
 80015f8:	f7ff fe2e 	bl	8001258 <SPI_RxByte>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	f104 0310 	add.w	r3, r4, #16
 8001604:	443b      	add	r3, r7
 8001606:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	3301      	adds	r3, #1
 800160e:	73fb      	strb	r3, [r7, #15]
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	2b03      	cmp	r3, #3
 8001614:	d9ef      	bls.n	80015f6 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001616:	7a3b      	ldrb	r3, [r7, #8]
 8001618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SD_disk_initialize+0x104>
 8001620:	230c      	movs	r3, #12
 8001622:	e000      	b.n	8001626 <SD_disk_initialize+0x106>
 8001624:	2304      	movs	r3, #4
 8001626:	73bb      	strb	r3, [r7, #14]
 8001628:	e03e      	b.n	80016a8 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800162a:	2100      	movs	r1, #0
 800162c:	2077      	movs	r0, #119	; 0x77
 800162e:	f7ff ff22 	bl	8001476 <SD_SendCmd>
 8001632:	4603      	mov	r3, r0
 8001634:	2b01      	cmp	r3, #1
 8001636:	d808      	bhi.n	800164a <SD_disk_initialize+0x12a>
 8001638:	2100      	movs	r1, #0
 800163a:	2069      	movs	r0, #105	; 0x69
 800163c:	f7ff ff1b 	bl	8001476 <SD_SendCmd>
 8001640:	4603      	mov	r3, r0
 8001642:	2b01      	cmp	r3, #1
 8001644:	d801      	bhi.n	800164a <SD_disk_initialize+0x12a>
 8001646:	2302      	movs	r3, #2
 8001648:	e000      	b.n	800164c <SD_disk_initialize+0x12c>
 800164a:	2301      	movs	r3, #1
 800164c:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 800164e:	7bbb      	ldrb	r3, [r7, #14]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d10e      	bne.n	8001672 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001654:	2100      	movs	r1, #0
 8001656:	2077      	movs	r0, #119	; 0x77
 8001658:	f7ff ff0d 	bl	8001476 <SD_SendCmd>
 800165c:	4603      	mov	r3, r0
 800165e:	2b01      	cmp	r3, #1
 8001660:	d80e      	bhi.n	8001680 <SD_disk_initialize+0x160>
 8001662:	2100      	movs	r1, #0
 8001664:	2069      	movs	r0, #105	; 0x69
 8001666:	f7ff ff06 	bl	8001476 <SD_SendCmd>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d107      	bne.n	8001680 <SD_disk_initialize+0x160>
 8001670:	e00c      	b.n	800168c <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001672:	2100      	movs	r1, #0
 8001674:	2041      	movs	r0, #65	; 0x41
 8001676:	f7ff fefe 	bl	8001476 <SD_SendCmd>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d004      	beq.n	800168a <SD_disk_initialize+0x16a>
        }

      } while (SD_Timer1);
 8001680:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <SD_disk_initialize+0x1c4>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1e2      	bne.n	800164e <SD_disk_initialize+0x12e>
 8001688:	e000      	b.n	800168c <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800168a:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!SD_Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800168c:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <SD_disk_initialize+0x1c4>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d007      	beq.n	80016a4 <SD_disk_initialize+0x184>
 8001694:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001698:	2050      	movs	r0, #80	; 0x50
 800169a:	f7ff feec 	bl	8001476 <SD_SendCmd>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <SD_disk_initialize+0x188>
 80016a4:	2300      	movs	r3, #0
 80016a6:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 80016a8:	4a0f      	ldr	r2, [pc, #60]	; (80016e8 <SD_disk_initialize+0x1c8>)
 80016aa:	7bbb      	ldrb	r3, [r7, #14]
 80016ac:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 80016ae:	f7ff fd91 	bl	80011d4 <DESELECT>
  SPI_RxByte();
 80016b2:	f7ff fdd1 	bl	8001258 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 80016b6:	7bbb      	ldrb	r3, [r7, #14]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d008      	beq.n	80016ce <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <SD_disk_initialize+0x1c0>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	f023 0301 	bic.w	r3, r3, #1
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <SD_disk_initialize+0x1c0>)
 80016ca:	701a      	strb	r2, [r3, #0]
 80016cc:	e001      	b.n	80016d2 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80016ce:	f7ff fe49 	bl	8001364 <SD_PowerOff>
  }

  return Stat;
 80016d2:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <SD_disk_initialize+0x1c0>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b2db      	uxtb	r3, r3
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd90      	pop	{r4, r7, pc}
 80016e0:	20000000 	.word	0x20000000
 80016e4:	200000f8 	.word	0x200000f8
 80016e8:	200000fc 	.word	0x200000fc

080016ec <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <SD_disk_status+0x14>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e002      	b.n	8001706 <SD_disk_status+0x1a>
  return Stat;
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <SD_disk_status+0x28>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	b2db      	uxtb	r3, r3
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000000 	.word	0x20000000

08001718 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	4603      	mov	r3, r0
 8001726:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d102      	bne.n	8001734 <SD_disk_read+0x1c>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <SD_disk_read+0x20>
 8001734:	2304      	movs	r3, #4
 8001736:	e051      	b.n	80017dc <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001738:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <SD_disk_read+0xcc>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SD_disk_read+0x32>
 8001746:	2303      	movs	r3, #3
 8001748:	e048      	b.n	80017dc <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800174a:	4b27      	ldr	r3, [pc, #156]	; (80017e8 <SD_disk_read+0xd0>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	2b00      	cmp	r3, #0
 8001754:	d102      	bne.n	800175c <SD_disk_read+0x44>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	025b      	lsls	r3, r3, #9
 800175a:	607b      	str	r3, [r7, #4]

  SELECT();
 800175c:	f7ff fd2c 	bl	80011b8 <SELECT>

  if (count == 1)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d111      	bne.n	800178a <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	2051      	movs	r0, #81	; 0x51
 800176a:	f7ff fe84 	bl	8001476 <SD_SendCmd>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d129      	bne.n	80017c8 <SD_disk_read+0xb0>
 8001774:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001778:	68b8      	ldr	r0, [r7, #8]
 800177a:	f7ff fe0b 	bl	8001394 <SD_RxDataBlock>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d021      	beq.n	80017c8 <SD_disk_read+0xb0>
 8001784:	2300      	movs	r3, #0
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	e01e      	b.n	80017c8 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	2052      	movs	r0, #82	; 0x52
 800178e:	f7ff fe72 	bl	8001476 <SD_SendCmd>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d117      	bne.n	80017c8 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8001798:	f44f 7100 	mov.w	r1, #512	; 0x200
 800179c:	68b8      	ldr	r0, [r7, #8]
 800179e:	f7ff fdf9 	bl	8001394 <SD_RxDataBlock>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00a      	beq.n	80017be <SD_disk_read+0xa6>
        buff += 512;
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80017ae:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1ed      	bne.n	8001798 <SD_disk_read+0x80>
 80017bc:	e000      	b.n	80017c0 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 80017be:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80017c0:	2100      	movs	r1, #0
 80017c2:	204c      	movs	r0, #76	; 0x4c
 80017c4:	f7ff fe57 	bl	8001476 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 80017c8:	f7ff fd04 	bl	80011d4 <DESELECT>
  SPI_RxByte();
 80017cc:	f7ff fd44 	bl	8001258 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	bf14      	ite	ne
 80017d6:	2301      	movne	r3, #1
 80017d8:	2300      	moveq	r3, #0
 80017da:	b2db      	uxtb	r3, r3
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000000 	.word	0x20000000
 80017e8:	200000fc 	.word	0x200000fc

080017ec <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	4603      	mov	r3, r0
 80017fa:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <SD_disk_write+0x1c>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <SD_disk_write+0x20>
 8001808:	2304      	movs	r3, #4
 800180a:	e06b      	b.n	80018e4 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800180c:	4b37      	ldr	r3, [pc, #220]	; (80018ec <SD_disk_write+0x100>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <SD_disk_write+0x32>
 800181a:	2303      	movs	r3, #3
 800181c:	e062      	b.n	80018e4 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800181e:	4b33      	ldr	r3, [pc, #204]	; (80018ec <SD_disk_write+0x100>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <SD_disk_write+0x44>
 800182c:	2302      	movs	r3, #2
 800182e:	e059      	b.n	80018e4 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001830:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <SD_disk_write+0x104>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <SD_disk_write+0x56>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	025b      	lsls	r3, r3, #9
 8001840:	607b      	str	r3, [r7, #4]

  SELECT();
 8001842:	f7ff fcb9 	bl	80011b8 <SELECT>

  if (count == 1)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d110      	bne.n	800186e <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	2058      	movs	r0, #88	; 0x58
 8001850:	f7ff fe11 	bl	8001476 <SD_SendCmd>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d13a      	bne.n	80018d0 <SD_disk_write+0xe4>
 800185a:	21fe      	movs	r1, #254	; 0xfe
 800185c:	68b8      	ldr	r0, [r7, #8]
 800185e:	f7ff fdc7 	bl	80013f0 <SD_TxDataBlock>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d033      	beq.n	80018d0 <SD_disk_write+0xe4>
      count = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	e030      	b.n	80018d0 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <SD_disk_write+0x104>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d007      	beq.n	800188a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800187a:	2100      	movs	r1, #0
 800187c:	2077      	movs	r0, #119	; 0x77
 800187e:	f7ff fdfa 	bl	8001476 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001882:	6839      	ldr	r1, [r7, #0]
 8001884:	2057      	movs	r0, #87	; 0x57
 8001886:	f7ff fdf6 	bl	8001476 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	2059      	movs	r0, #89	; 0x59
 800188e:	f7ff fdf2 	bl	8001476 <SD_SendCmd>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d11b      	bne.n	80018d0 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001898:	21fc      	movs	r1, #252	; 0xfc
 800189a:	68b8      	ldr	r0, [r7, #8]
 800189c:	f7ff fda8 	bl	80013f0 <SD_TxDataBlock>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00a      	beq.n	80018bc <SD_disk_write+0xd0>
        buff += 512;
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80018ac:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1ee      	bne.n	8001898 <SD_disk_write+0xac>
 80018ba:	e000      	b.n	80018be <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80018bc:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80018be:	21fd      	movs	r1, #253	; 0xfd
 80018c0:	2000      	movs	r0, #0
 80018c2:	f7ff fd95 	bl	80013f0 <SD_TxDataBlock>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <SD_disk_write+0xe4>
      {
        count = 1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 80018d0:	f7ff fc80 	bl	80011d4 <DESELECT>
  SPI_RxByte();
 80018d4:	f7ff fcc0 	bl	8001258 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	bf14      	ite	ne
 80018de:	2301      	movne	r3, #1
 80018e0:	2300      	moveq	r3, #0
 80018e2:	b2db      	uxtb	r3, r3
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000000 	.word	0x20000000
 80018f0:	200000fc 	.word	0x200000fc

080018f4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b08b      	sub	sp, #44	; 0x2c
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	603a      	str	r2, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
 8001900:	460b      	mov	r3, r1
 8001902:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SD_disk_ioctl+0x1e>
 800190e:	2304      	movs	r3, #4
 8001910:	e115      	b.n	8001b3e <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001918:	79bb      	ldrb	r3, [r7, #6]
 800191a:	2b05      	cmp	r3, #5
 800191c:	d124      	bne.n	8001968 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d012      	beq.n	800194c <SD_disk_ioctl+0x58>
 8001926:	2b02      	cmp	r3, #2
 8001928:	dc1a      	bgt.n	8001960 <SD_disk_ioctl+0x6c>
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <SD_disk_ioctl+0x40>
 800192e:	2b01      	cmp	r3, #1
 8001930:	d006      	beq.n	8001940 <SD_disk_ioctl+0x4c>
 8001932:	e015      	b.n	8001960 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001934:	f7ff fd16 	bl	8001364 <SD_PowerOff>
      res = RES_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800193e:	e0fc      	b.n	8001b3a <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 8001940:	f7ff fcce 	bl	80012e0 <SD_PowerOn>
      res = RES_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800194a:	e0f6      	b.n	8001b3a <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	1c5c      	adds	r4, r3, #1
 8001950:	f7ff fd14 	bl	800137c <SD_CheckPower>
 8001954:	4603      	mov	r3, r0
 8001956:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8001958:	2300      	movs	r3, #0
 800195a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800195e:	e0ec      	b.n	8001b3a <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 8001960:	2304      	movs	r3, #4
 8001962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001966:	e0e8      	b.n	8001b3a <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001968:	4b77      	ldr	r3, [pc, #476]	; (8001b48 <SD_disk_ioctl+0x254>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <SD_disk_ioctl+0x86>
 8001976:	2303      	movs	r3, #3
 8001978:	e0e1      	b.n	8001b3e <SD_disk_ioctl+0x24a>

    SELECT();
 800197a:	f7ff fc1d 	bl	80011b8 <SELECT>

    switch (ctrl)
 800197e:	79bb      	ldrb	r3, [r7, #6]
 8001980:	2b0d      	cmp	r3, #13
 8001982:	f200 80cb 	bhi.w	8001b1c <SD_disk_ioctl+0x228>
 8001986:	a201      	add	r2, pc, #4	; (adr r2, 800198c <SD_disk_ioctl+0x98>)
 8001988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198c:	08001a87 	.word	0x08001a87
 8001990:	080019c5 	.word	0x080019c5
 8001994:	08001a77 	.word	0x08001a77
 8001998:	08001b1d 	.word	0x08001b1d
 800199c:	08001b1d 	.word	0x08001b1d
 80019a0:	08001b1d 	.word	0x08001b1d
 80019a4:	08001b1d 	.word	0x08001b1d
 80019a8:	08001b1d 	.word	0x08001b1d
 80019ac:	08001b1d 	.word	0x08001b1d
 80019b0:	08001b1d 	.word	0x08001b1d
 80019b4:	08001b1d 	.word	0x08001b1d
 80019b8:	08001a99 	.word	0x08001a99
 80019bc:	08001abd 	.word	0x08001abd
 80019c0:	08001ae1 	.word	0x08001ae1
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80019c4:	2100      	movs	r1, #0
 80019c6:	2049      	movs	r0, #73	; 0x49
 80019c8:	f7ff fd55 	bl	8001476 <SD_SendCmd>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f040 80a8 	bne.w	8001b24 <SD_disk_ioctl+0x230>
 80019d4:	f107 030c 	add.w	r3, r7, #12
 80019d8:	2110      	movs	r1, #16
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fcda 	bl	8001394 <SD_RxDataBlock>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 809e 	beq.w	8001b24 <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 80019e8:	7b3b      	ldrb	r3, [r7, #12]
 80019ea:	099b      	lsrs	r3, r3, #6
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d10e      	bne.n	8001a10 <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80019f2:	7d7b      	ldrb	r3, [r7, #21]
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	7d3b      	ldrb	r3, [r7, #20]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	4413      	add	r3, r2
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	3301      	adds	r3, #1
 8001a04:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001a06:	8bfb      	ldrh	r3, [r7, #30]
 8001a08:	029a      	lsls	r2, r3, #10
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	e02e      	b.n	8001a6e <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001a10:	7c7b      	ldrb	r3, [r7, #17]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	7dbb      	ldrb	r3, [r7, #22]
 8001a1a:	09db      	lsrs	r3, r3, #7
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	7d7b      	ldrb	r3, [r7, #21]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f003 0306 	and.w	r3, r3, #6
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	4413      	add	r3, r2
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	3302      	adds	r3, #2
 8001a34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001a38:	7d3b      	ldrb	r3, [r7, #20]
 8001a3a:	099b      	lsrs	r3, r3, #6
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	7cfb      	ldrb	r3, [r7, #19]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	4413      	add	r3, r2
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	7cbb      	ldrb	r3, [r7, #18]
 8001a4e:	029b      	lsls	r3, r3, #10
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	4413      	add	r3, r2
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001a60:	8bfa      	ldrh	r2, [r7, #30]
 8001a62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a66:	3b09      	subs	r3, #9
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001a74:	e056      	b.n	8001b24 <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a7c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001a84:	e055      	b.n	8001b32 <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001a86:	f7ff fc11 	bl	80012ac <SD_ReadyWait>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2bff      	cmp	r3, #255	; 0xff
 8001a8e:	d14b      	bne.n	8001b28 <SD_disk_ioctl+0x234>
 8001a90:	2300      	movs	r3, #0
 8001a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001a96:	e047      	b.n	8001b28 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2049      	movs	r0, #73	; 0x49
 8001a9c:	f7ff fceb 	bl	8001476 <SD_SendCmd>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d142      	bne.n	8001b2c <SD_disk_ioctl+0x238>
 8001aa6:	2110      	movs	r1, #16
 8001aa8:	6a38      	ldr	r0, [r7, #32]
 8001aaa:	f7ff fc73 	bl	8001394 <SD_RxDataBlock>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d03b      	beq.n	8001b2c <SD_disk_ioctl+0x238>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001aba:	e037      	b.n	8001b2c <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001abc:	2100      	movs	r1, #0
 8001abe:	204a      	movs	r0, #74	; 0x4a
 8001ac0:	f7ff fcd9 	bl	8001476 <SD_SendCmd>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d132      	bne.n	8001b30 <SD_disk_ioctl+0x23c>
 8001aca:	2110      	movs	r1, #16
 8001acc:	6a38      	ldr	r0, [r7, #32]
 8001ace:	f7ff fc61 	bl	8001394 <SD_RxDataBlock>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d02b      	beq.n	8001b30 <SD_disk_ioctl+0x23c>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001ade:	e027      	b.n	8001b30 <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	207a      	movs	r0, #122	; 0x7a
 8001ae4:	f7ff fcc7 	bl	8001476 <SD_SendCmd>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d116      	bne.n	8001b1c <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001af4:	e00b      	b.n	8001b0e <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 8001af6:	6a3c      	ldr	r4, [r7, #32]
 8001af8:	1c63      	adds	r3, r4, #1
 8001afa:	623b      	str	r3, [r7, #32]
 8001afc:	f7ff fbac 	bl	8001258 <SPI_RxByte>
 8001b00:	4603      	mov	r3, r0
 8001b02:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001b04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b08:	3301      	adds	r3, #1
 8001b0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d9ef      	bls.n	8001af6 <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b22:	e006      	b.n	8001b32 <SD_disk_ioctl+0x23e>
      break;
 8001b24:	bf00      	nop
 8001b26:	e004      	b.n	8001b32 <SD_disk_ioctl+0x23e>
      break;
 8001b28:	bf00      	nop
 8001b2a:	e002      	b.n	8001b32 <SD_disk_ioctl+0x23e>
      break;
 8001b2c:	bf00      	nop
 8001b2e:	e000      	b.n	8001b32 <SD_disk_ioctl+0x23e>
      break;
 8001b30:	bf00      	nop
    }

    DESELECT();
 8001b32:	f7ff fb4f 	bl	80011d4 <DESELECT>
    SPI_RxByte();
 8001b36:	f7ff fb8f 	bl	8001258 <SPI_RxByte>
  }

  return res;
 8001b3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	372c      	adds	r7, #44	; 0x2c
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd90      	pop	{r4, r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000000 	.word	0x20000000

08001b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b50:	f004 f8b2 	bl	8005cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b54:	f000 f832 	bl	8001bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b58:	f000 fa0a 	bl	8001f70 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b5c:	f000 f9e8 	bl	8001f30 <MX_DMA_Init>
  MX_CAN1_Init();
 8001b60:	f000 f89c 	bl	8001c9c <MX_CAN1_Init>
  MX_SPI1_Init();
 8001b64:	f000 f914 	bl	8001d90 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001b68:	f00f f81c 	bl	8010ba4 <MX_FATFS_Init>
  MX_TIM2_Init();
 8001b6c:	f000 f946 	bl	8001dfc <MX_TIM2_Init>
  MX_DAC_Init();
 8001b70:	f000 f8ca 	bl	8001d08 <MX_DAC_Init>
  MX_TIM3_Init();
 8001b74:	f000 f98e 	bl	8001e94 <MX_TIM3_Init>
  MX_IWDG_Init();
 8001b78:	f000 f8f0 	bl	8001d5c <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
//  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
//  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_vals, 100, DAC_ALIGN_12B_R);
  osKernelInitialize();
 8001b7c:	f011 fe36 	bl	80137ec <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b80:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <main+0x60>)
 8001b82:	2100      	movs	r1, #0
 8001b84:	480a      	ldr	r0, [pc, #40]	; (8001bb0 <main+0x64>)
 8001b86:	f011 fe90 	bl	80138aa <osThreadNew>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4a09      	ldr	r2, [pc, #36]	; (8001bb4 <main+0x68>)
 8001b8e:	6013      	str	r3, [r2, #0]
  CPP_UserSetup();
 8001b90:	f000 fffe 	bl	8002b90 <CPP_UserSetup>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 8001b94:	f011 fe4e 	bl	8013834 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	HAL_GPIO_TogglePin(STM_OK_GPIO_Port, STM_OK_Pin);
 8001b98:	2101      	movs	r1, #1
 8001b9a:	4807      	ldr	r0, [pc, #28]	; (8001bb8 <main+0x6c>)
 8001b9c:	f005 feb1 	bl	8007902 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8001ba0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ba4:	f004 f8fa 	bl	8005d9c <HAL_Delay>
	HAL_GPIO_TogglePin(STM_OK_GPIO_Port, STM_OK_Pin);
 8001ba8:	e7f6      	b.n	8001b98 <main+0x4c>
 8001baa:	bf00      	nop
 8001bac:	0801a1e0 	.word	0x0801a1e0
 8001bb0:	080021e5 	.word	0x080021e5
 8001bb4:	20000290 	.word	0x20000290
 8001bb8:	40020400 	.word	0x40020400

08001bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b094      	sub	sp, #80	; 0x50
 8001bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	2234      	movs	r2, #52	; 0x34
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f016 fad8 	bl	8018180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd0:	f107 0308 	add.w	r3, r7, #8
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be0:	2300      	movs	r3, #0
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <SystemClock_Config+0xd8>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	4a2a      	ldr	r2, [pc, #168]	; (8001c94 <SystemClock_Config+0xd8>)
 8001bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bee:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf0:	4b28      	ldr	r3, [pc, #160]	; (8001c94 <SystemClock_Config+0xd8>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <SystemClock_Config+0xdc>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c08:	4a23      	ldr	r2, [pc, #140]	; (8001c98 <SystemClock_Config+0xdc>)
 8001c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <SystemClock_Config+0xdc>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001c1c:	230a      	movs	r3, #10
 8001c1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c20:	2301      	movs	r3, #1
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c24:	2310      	movs	r3, #16
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c30:	2300      	movs	r3, #0
 8001c32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c34:	2308      	movs	r3, #8
 8001c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8001c38:	235a      	movs	r3, #90	; 0x5a
 8001c3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001c40:	2306      	movs	r3, #6
 8001c42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c44:	2302      	movs	r3, #2
 8001c46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c48:	f107 031c 	add.w	r3, r7, #28
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f006 f96d 	bl	8007f2c <HAL_RCC_OscConfig>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001c58:	f000 fad4 	bl	8002204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c5c:	230f      	movs	r3, #15
 8001c5e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c60:	2302      	movs	r3, #2
 8001c62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001c6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c72:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c74:	f107 0308 	add.w	r3, r7, #8
 8001c78:	2102      	movs	r1, #2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f005 fec6 	bl	8007a0c <HAL_RCC_ClockConfig>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001c86:	f000 fabd 	bl	8002204 <Error_Handler>
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	3750      	adds	r7, #80	; 0x50
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40007000 	.word	0x40007000

08001c9c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001ca0:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <MX_CAN1_Init+0x64>)
 8001ca2:	4a18      	ldr	r2, [pc, #96]	; (8001d04 <MX_CAN1_Init+0x68>)
 8001ca4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001ca6:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <MX_CAN1_Init+0x64>)
 8001ca8:	2205      	movs	r2, #5
 8001caa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001cac:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <MX_CAN1_Init+0x64>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <MX_CAN1_Init+0x64>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <MX_CAN1_Init+0x64>)
 8001cba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001cbe:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <MX_CAN1_Init+0x64>)
 8001cc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cc6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <MX_CAN1_Init+0x64>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <MX_CAN1_Init+0x64>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001cd4:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <MX_CAN1_Init+0x64>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <MX_CAN1_Init+0x64>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <MX_CAN1_Init+0x64>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <MX_CAN1_Init+0x64>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001cec:	4804      	ldr	r0, [pc, #16]	; (8001d00 <MX_CAN1_Init+0x64>)
 8001cee:	f004 f879 	bl	8005de4 <HAL_CAN_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001cf8:	f000 fa84 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  /* USER CODE END CAN1_Init 2 */

}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000100 	.word	0x20000100
 8001d04:	40006400 	.word	0x40006400

08001d08 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001d0e:	463b      	mov	r3, r7
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001d16:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <MX_DAC_Init+0x4c>)
 8001d18:	4a0f      	ldr	r2, [pc, #60]	; (8001d58 <MX_DAC_Init+0x50>)
 8001d1a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001d1c:	480d      	ldr	r0, [pc, #52]	; (8001d54 <MX_DAC_Init+0x4c>)
 8001d1e:	f004 fddc 	bl	80068da <HAL_DAC_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001d28:	f000 fa6c 	bl	8002204 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001d2c:	2324      	movs	r3, #36	; 0x24
 8001d2e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001d34:	463b      	mov	r3, r7
 8001d36:	2200      	movs	r2, #0
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4806      	ldr	r0, [pc, #24]	; (8001d54 <MX_DAC_Init+0x4c>)
 8001d3c:	f004 fdef 	bl	800691e <HAL_DAC_ConfigChannel>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001d46:	f000 fa5d 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000128 	.word	0x20000128
 8001d58:	40007400 	.word	0x40007400

08001d5c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <MX_IWDG_Init+0x2c>)
 8001d62:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <MX_IWDG_Init+0x30>)
 8001d64:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <MX_IWDG_Init+0x2c>)
 8001d68:	2205      	movs	r2, #5
 8001d6a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1023;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <MX_IWDG_Init+0x2c>)
 8001d6e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001d72:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001d74:	4804      	ldr	r0, [pc, #16]	; (8001d88 <MX_IWDG_Init+0x2c>)
 8001d76:	f005 fdf7 	bl	8007968 <HAL_IWDG_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001d80:	f000 fa40 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	2000019c 	.word	0x2000019c
 8001d8c:	40003000 	.word	0x40003000

08001d90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d94:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001d96:	4a18      	ldr	r2, [pc, #96]	; (8001df8 <MX_SPI1_Init+0x68>)
 8001d98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d9a:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001d9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001da0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001da2:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dba:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dc8:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd4:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001ddc:	220a      	movs	r2, #10
 8001dde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001de0:	4804      	ldr	r0, [pc, #16]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001de2:	f006 fb41 	bl	8008468 <HAL_SPI_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001dec:	f000 fa0a 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	200001a8 	.word	0x200001a8
 8001df8:	40013000 	.word	0x40013000

08001dfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e02:	f107 0308 	add.w	r3, r7, #8
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e10:	463b      	mov	r3, r7
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e18:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <MX_TIM2_Init+0x94>)
 8001e1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8001e20:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <MX_TIM2_Init+0x94>)
 8001e22:	221f      	movs	r2, #31
 8001e24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e26:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <MX_TIM2_Init+0x94>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001e2c:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <MX_TIM2_Init+0x94>)
 8001e2e:	2264      	movs	r2, #100	; 0x64
 8001e30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e32:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <MX_TIM2_Init+0x94>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e38:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <MX_TIM2_Init+0x94>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e3e:	4814      	ldr	r0, [pc, #80]	; (8001e90 <MX_TIM2_Init+0x94>)
 8001e40:	f006 ff44 	bl	8008ccc <HAL_TIM_Base_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001e4a:	f000 f9db 	bl	8002204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e54:	f107 0308 	add.w	r3, r7, #8
 8001e58:	4619      	mov	r1, r3
 8001e5a:	480d      	ldr	r0, [pc, #52]	; (8001e90 <MX_TIM2_Init+0x94>)
 8001e5c:	f007 f88d 	bl	8008f7a <HAL_TIM_ConfigClockSource>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001e66:	f000 f9cd 	bl	8002204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e72:	463b      	mov	r3, r7
 8001e74:	4619      	mov	r1, r3
 8001e76:	4806      	ldr	r0, [pc, #24]	; (8001e90 <MX_TIM2_Init+0x94>)
 8001e78:	f007 faa8 	bl	80093cc <HAL_TIMEx_MasterConfigSynchronization>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001e82:	f000 f9bf 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000200 	.word	0x20000200

08001e94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e9a:	f107 0308 	add.w	r3, r7, #8
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <MX_TIM3_Init+0x94>)
 8001eb2:	4a1e      	ldr	r2, [pc, #120]	; (8001f2c <MX_TIM3_Init+0x98>)
 8001eb4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4095;
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <MX_TIM3_Init+0x94>)
 8001eb8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001ebc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <MX_TIM3_Init+0x94>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 275;
 8001ec4:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <MX_TIM3_Init+0x94>)
 8001ec6:	f240 1213 	movw	r2, #275	; 0x113
 8001eca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ecc:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <MX_TIM3_Init+0x94>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <MX_TIM3_Init+0x94>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ed8:	4813      	ldr	r0, [pc, #76]	; (8001f28 <MX_TIM3_Init+0x94>)
 8001eda:	f006 fef7 	bl	8008ccc <HAL_TIM_Base_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001ee4:	f000 f98e 	bl	8002204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001eee:	f107 0308 	add.w	r3, r7, #8
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480c      	ldr	r0, [pc, #48]	; (8001f28 <MX_TIM3_Init+0x94>)
 8001ef6:	f007 f840 	bl	8008f7a <HAL_TIM_ConfigClockSource>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001f00:	f000 f980 	bl	8002204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f04:	2300      	movs	r3, #0
 8001f06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f0c:	463b      	mov	r3, r7
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4805      	ldr	r0, [pc, #20]	; (8001f28 <MX_TIM3_Init+0x94>)
 8001f12:	f007 fa5b 	bl	80093cc <HAL_TIMEx_MasterConfigSynchronization>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001f1c:	f000 f972 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000248 	.word	0x20000248
 8001f2c:	40000400 	.word	0x40000400

08001f30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <MX_DMA_Init+0x3c>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <MX_DMA_Init+0x3c>)
 8001f40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <MX_DMA_Init+0x3c>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2105      	movs	r1, #5
 8001f56:	2010      	movs	r0, #16
 8001f58:	f004 fc89 	bl	800686e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001f5c:	2010      	movs	r0, #16
 8001f5e:	f004 fca2 	bl	80068a6 <HAL_NVIC_EnableIRQ>

}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800

08001f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	; 0x28
 8001f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	4b8a      	ldr	r3, [pc, #552]	; (80021b4 <MX_GPIO_Init+0x244>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4a89      	ldr	r2, [pc, #548]	; (80021b4 <MX_GPIO_Init+0x244>)
 8001f90:	f043 0304 	orr.w	r3, r3, #4
 8001f94:	6313      	str	r3, [r2, #48]	; 0x30
 8001f96:	4b87      	ldr	r3, [pc, #540]	; (80021b4 <MX_GPIO_Init+0x244>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	4b83      	ldr	r3, [pc, #524]	; (80021b4 <MX_GPIO_Init+0x244>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	4a82      	ldr	r2, [pc, #520]	; (80021b4 <MX_GPIO_Init+0x244>)
 8001fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb2:	4b80      	ldr	r3, [pc, #512]	; (80021b4 <MX_GPIO_Init+0x244>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	4b7c      	ldr	r3, [pc, #496]	; (80021b4 <MX_GPIO_Init+0x244>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a7b      	ldr	r2, [pc, #492]	; (80021b4 <MX_GPIO_Init+0x244>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b79      	ldr	r3, [pc, #484]	; (80021b4 <MX_GPIO_Init+0x244>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	4b75      	ldr	r3, [pc, #468]	; (80021b4 <MX_GPIO_Init+0x244>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a74      	ldr	r2, [pc, #464]	; (80021b4 <MX_GPIO_Init+0x244>)
 8001fe4:	f043 0302 	orr.w	r3, r3, #2
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b72      	ldr	r3, [pc, #456]	; (80021b4 <MX_GPIO_Init+0x244>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D7_Pin|GPIO_PIN_14|D5_Pin|D2_Pin
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f24e 011f 	movw	r1, #57375	; 0xe01f
 8001ffc:	486e      	ldr	r0, [pc, #440]	; (80021b8 <MX_GPIO_Init+0x248>)
 8001ffe:	f005 fc67 	bl	80078d0 <HAL_GPIO_WritePin>
                          |D1_Pin|D0_Pin|Backlight_PWM_Pin|Display_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, D4_Pin|D3_Pin, GPIO_PIN_RESET);
 8002002:	2200      	movs	r2, #0
 8002004:	2103      	movs	r1, #3
 8002006:	486d      	ldr	r0, [pc, #436]	; (80021bc <MX_GPIO_Init+0x24c>)
 8002008:	f005 fc62 	bl	80078d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|RD_Pin|WR_Pin|C_D_Pin
 800200c:	2200      	movs	r2, #0
 800200e:	f248 410f 	movw	r1, #33807	; 0x840f
 8002012:	486b      	ldr	r0, [pc, #428]	; (80021c0 <MX_GPIO_Init+0x250>)
 8002014:	f005 fc5c 	bl	80078d0 <HAL_GPIO_WritePin>
                          |D_C_Pin|TRIP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STM_OK_Pin|ERROR_Pin|CAN_FAULT_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 8002018:	2200      	movs	r2, #0
 800201a:	2127      	movs	r1, #39	; 0x27
 800201c:	4869      	ldr	r0, [pc, #420]	; (80021c4 <MX_GPIO_Init+0x254>)
 800201e:	f005 fc57 	bl	80078d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D7_Pin PC14 D5_Pin D2_Pin
                           D1_Pin D0_Pin Backlight_PWM_Pin Display_CS_Pin */
  GPIO_InitStruct.Pin = D7_Pin|GPIO_PIN_14|D5_Pin|D2_Pin
 8002022:	f24e 031f 	movw	r3, #57375	; 0xe01f
 8002026:	617b      	str	r3, [r7, #20]
                          |D1_Pin|D0_Pin|Backlight_PWM_Pin|Display_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002028:	2301      	movs	r3, #1
 800202a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002030:	2300      	movs	r3, #0
 8002032:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	4619      	mov	r1, r3
 800203a:	485f      	ldr	r0, [pc, #380]	; (80021b8 <MX_GPIO_Init+0x248>)
 800203c:	f005 fa9c 	bl	8007578 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D3_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D3_Pin;
 8002040:	2303      	movs	r3, #3
 8002042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002044:	2301      	movs	r3, #1
 8002046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	4619      	mov	r1, r3
 8002056:	4859      	ldr	r0, [pc, #356]	; (80021bc <MX_GPIO_Init+0x24c>)
 8002058:	f005 fa8e 	bl	8007578 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin RD_Pin WR_Pin C_D_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|RD_Pin|WR_Pin|C_D_Pin;
 800205c:	230f      	movs	r3, #15
 800205e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002060:	2301      	movs	r3, #1
 8002062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002068:	2300      	movs	r3, #0
 800206a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	4619      	mov	r1, r3
 8002072:	4853      	ldr	r0, [pc, #332]	; (80021c0 <MX_GPIO_Init+0x250>)
 8002074:	f005 fa80 	bl	8007578 <HAL_GPIO_Init>

  /*Configure GPIO pins : STM_OK_Pin ERROR_Pin CAN_FAULT_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = STM_OK_Pin|ERROR_Pin|CAN_FAULT_Pin|SD_CS_Pin;
 8002078:	2327      	movs	r3, #39	; 0x27
 800207a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207c:	2301      	movs	r3, #1
 800207e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002084:	2300      	movs	r3, #0
 8002086:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002088:	f107 0314 	add.w	r3, r7, #20
 800208c:	4619      	mov	r1, r3
 800208e:	484d      	ldr	r0, [pc, #308]	; (80021c4 <MX_GPIO_Init+0x254>)
 8002090:	f005 fa72 	bl	8007578 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN2_Pin|BTN3_Pin;
 8002094:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8002098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800209a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800209e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020a0:	2301      	movs	r3, #1
 80020a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	4619      	mov	r1, r3
 80020aa:	4846      	ldr	r0, [pc, #280]	; (80021c4 <MX_GPIO_Init+0x254>)
 80020ac:	f005 fa64 	bl	8007578 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 80020b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020bc:	2301      	movs	r3, #1
 80020be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4619      	mov	r1, r3
 80020c6:	483f      	ldr	r0, [pc, #252]	; (80021c4 <MX_GPIO_Init+0x254>)
 80020c8:	f005 fa56 	bl	8007578 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN4_Pin BTN5_Pin BTN6_Pin */
  GPIO_InitStruct.Pin = BTN4_Pin|BTN5_Pin|BTN6_Pin;
 80020cc:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80020d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80020d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020d8:	2301      	movs	r3, #1
 80020da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	4619      	mov	r1, r3
 80020e2:	4835      	ldr	r0, [pc, #212]	; (80021b8 <MX_GPIO_Init+0x248>)
 80020e4:	f005 fa48 	bl	8007578 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN7_Pin */
  GPIO_InitStruct.Pin = BTN7_Pin;
 80020e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020f2:	2301      	movs	r3, #1
 80020f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN7_GPIO_Port, &GPIO_InitStruct);
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	4619      	mov	r1, r3
 80020fc:	482e      	ldr	r0, [pc, #184]	; (80021b8 <MX_GPIO_Init+0x248>)
 80020fe:	f005 fa3b 	bl	8007578 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN8_Pin */
  GPIO_InitStruct.Pin = BTN8_Pin;
 8002102:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002108:	2300      	movs	r3, #0
 800210a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800210c:	2301      	movs	r3, #1
 800210e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN8_GPIO_Port, &GPIO_InitStruct);
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	4619      	mov	r1, r3
 8002116:	482a      	ldr	r0, [pc, #168]	; (80021c0 <MX_GPIO_Init+0x250>)
 8002118:	f005 fa2e 	bl	8007578 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN9_Pin */
  GPIO_InitStruct.Pin = BTN9_Pin;
 800211c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002122:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002128:	2301      	movs	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN9_GPIO_Port, &GPIO_InitStruct);
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	4619      	mov	r1, r3
 8002132:	4823      	ldr	r0, [pc, #140]	; (80021c0 <MX_GPIO_Init+0x250>)
 8002134:	f005 fa20 	bl	8007578 <HAL_GPIO_Init>

  /*Configure GPIO pin : D_C_Pin */
  GPIO_InitStruct.Pin = D_C_Pin;
 8002138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800213c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213e:	2301      	movs	r3, #1
 8002140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002142:	2301      	movs	r3, #1
 8002144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D_C_GPIO_Port, &GPIO_InitStruct);
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	4619      	mov	r1, r3
 8002150:	481b      	ldr	r0, [pc, #108]	; (80021c0 <MX_GPIO_Init+0x250>)
 8002152:	f005 fa11 	bl	8007578 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIP_Pin */
  GPIO_InitStruct.Pin = TRIP_Pin;
 8002156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800215a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800215c:	2301      	movs	r3, #1
 800215e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002160:	2302      	movs	r3, #2
 8002162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002164:	2300      	movs	r3, #0
 8002166:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIP_GPIO_Port, &GPIO_InitStruct);
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	4619      	mov	r1, r3
 800216e:	4814      	ldr	r0, [pc, #80]	; (80021c0 <MX_GPIO_Init+0x250>)
 8002170:	f005 fa02 	bl	8007578 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8002174:	2340      	movs	r3, #64	; 0x40
 8002176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002178:	2300      	movs	r3, #0
 800217a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	4619      	mov	r1, r3
 8002186:	480f      	ldr	r0, [pc, #60]	; (80021c4 <MX_GPIO_Init+0x254>)
 8002188:	f005 f9f6 	bl	8007578 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800218c:	2200      	movs	r2, #0
 800218e:	2105      	movs	r1, #5
 8002190:	2017      	movs	r0, #23
 8002192:	f004 fb6c 	bl	800686e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002196:	2017      	movs	r0, #23
 8002198:	f004 fb85 	bl	80068a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800219c:	2200      	movs	r2, #0
 800219e:	2105      	movs	r1, #5
 80021a0:	2028      	movs	r0, #40	; 0x28
 80021a2:	f004 fb64 	bl	800686e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80021a6:	2028      	movs	r0, #40	; 0x28
 80021a8:	f004 fb7d 	bl	80068a6 <HAL_NVIC_EnableIRQ>

}
 80021ac:	bf00      	nop
 80021ae:	3728      	adds	r7, #40	; 0x28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40020800 	.word	0x40020800
 80021bc:	40021c00 	.word	0x40021c00
 80021c0:	40020000 	.word	0x40020000
 80021c4:	40020400 	.word	0x40020400

080021c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	80fb      	strh	r3, [r7, #6]
  // Call into C++ Domain
  CPP_HandleGPIOInterrupt(GPIO_Pin);
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f001 fb0d 	bl	80037f4 <CPP_HandleGPIOInterrupt>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(STM_OK_GPIO_Port, STM_OK_Pin);
 80021ec:	2101      	movs	r1, #1
 80021ee:	4804      	ldr	r0, [pc, #16]	; (8002200 <StartDefaultTask+0x1c>)
 80021f0:	f005 fb87 	bl	8007902 <HAL_GPIO_TogglePin>
	// HAL_GPIO_TogglePin(DAC_OUT1_GPIO_Port, DAC_OUT1_Pin);
	osDelay(500);
 80021f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021f8:	f011 fbe9 	bl	80139ce <osDelay>
	HAL_GPIO_TogglePin(STM_OK_GPIO_Port, STM_OK_Pin);
 80021fc:	e7f6      	b.n	80021ec <StartDefaultTask+0x8>
 80021fe:	bf00      	nop
 8002200:	40020400 	.word	0x40020400

08002204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002208:	b672      	cpsid	i
}
 800220a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(STM_OK_GPIO_Port, STM_OK_Pin, GPIO_PIN_RESET);
 800220c:	2200      	movs	r2, #0
 800220e:	2101      	movs	r1, #1
 8002210:	4804      	ldr	r0, [pc, #16]	; (8002224 <Error_Handler+0x20>)
 8002212:	f005 fb5d 	bl	80078d0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ERROR_GPIO_Port, ERROR_Pin, GPIO_PIN_SET);
 8002216:	2201      	movs	r2, #1
 8002218:	2102      	movs	r1, #2
 800221a:	4802      	ldr	r0, [pc, #8]	; (8002224 <Error_Handler+0x20>)
 800221c:	f005 fb58 	bl	80078d0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(STM_OK_GPIO_Port, STM_OK_Pin, GPIO_PIN_RESET);
 8002220:	e7f4      	b.n	800220c <Error_Handler+0x8>
 8002222:	bf00      	nop
 8002224:	40020400 	.word	0x40020400

08002228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <HAL_MspInit+0x54>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	4a11      	ldr	r2, [pc, #68]	; (800227c <HAL_MspInit+0x54>)
 8002238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800223c:	6453      	str	r3, [r2, #68]	; 0x44
 800223e:	4b0f      	ldr	r3, [pc, #60]	; (800227c <HAL_MspInit+0x54>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	603b      	str	r3, [r7, #0]
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_MspInit+0x54>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a0a      	ldr	r2, [pc, #40]	; (800227c <HAL_MspInit+0x54>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002258:	6413      	str	r3, [r2, #64]	; 0x40
 800225a:	4b08      	ldr	r3, [pc, #32]	; (800227c <HAL_MspInit+0x54>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	210f      	movs	r1, #15
 800226a:	f06f 0001 	mvn.w	r0, #1
 800226e:	f004 fafe 	bl	800686e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800

08002280 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08a      	sub	sp, #40	; 0x28
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a19      	ldr	r2, [pc, #100]	; (8002304 <HAL_CAN_MspInit+0x84>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d12c      	bne.n	80022fc <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	4b18      	ldr	r3, [pc, #96]	; (8002308 <HAL_CAN_MspInit+0x88>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	4a17      	ldr	r2, [pc, #92]	; (8002308 <HAL_CAN_MspInit+0x88>)
 80022ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022b0:	6413      	str	r3, [r2, #64]	; 0x40
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_CAN_MspInit+0x88>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_CAN_MspInit+0x88>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a10      	ldr	r2, [pc, #64]	; (8002308 <HAL_CAN_MspInit+0x88>)
 80022c8:	f043 0302 	orr.w	r3, r3, #2
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <HAL_CAN_MspInit+0x88>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e8:	2303      	movs	r3, #3
 80022ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80022ec:	2309      	movs	r3, #9
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	4619      	mov	r1, r3
 80022f6:	4805      	ldr	r0, [pc, #20]	; (800230c <HAL_CAN_MspInit+0x8c>)
 80022f8:	f005 f93e 	bl	8007578 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80022fc:	bf00      	nop
 80022fe:	3728      	adds	r7, #40	; 0x28
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40006400 	.word	0x40006400
 8002308:	40023800 	.word	0x40023800
 800230c:	40020400 	.word	0x40020400

08002310 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	; 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a2f      	ldr	r2, [pc, #188]	; (80023ec <HAL_DAC_MspInit+0xdc>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d158      	bne.n	80023e4 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	4b2e      	ldr	r3, [pc, #184]	; (80023f0 <HAL_DAC_MspInit+0xe0>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	4a2d      	ldr	r2, [pc, #180]	; (80023f0 <HAL_DAC_MspInit+0xe0>)
 800233c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002340:	6413      	str	r3, [r2, #64]	; 0x40
 8002342:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <HAL_DAC_MspInit+0xe0>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <HAL_DAC_MspInit+0xe0>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a26      	ldr	r2, [pc, #152]	; (80023f0 <HAL_DAC_MspInit+0xe0>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <HAL_DAC_MspInit+0xe0>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800236a:	2310      	movs	r3, #16
 800236c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800236e:	2303      	movs	r3, #3
 8002370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	4619      	mov	r1, r3
 800237c:	481d      	ldr	r0, [pc, #116]	; (80023f4 <HAL_DAC_MspInit+0xe4>)
 800237e:	f005 f8fb 	bl	8007578 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8002382:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_DAC_MspInit+0xe8>)
 8002384:	4a1d      	ldr	r2, [pc, #116]	; (80023fc <HAL_DAC_MspInit+0xec>)
 8002386:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_DAC_MspInit+0xe8>)
 800238a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800238e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_DAC_MspInit+0xe8>)
 8002392:	2240      	movs	r2, #64	; 0x40
 8002394:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002396:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <HAL_DAC_MspInit+0xe8>)
 8002398:	2200      	movs	r2, #0
 800239a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800239c:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <HAL_DAC_MspInit+0xe8>)
 800239e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023a2:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023a4:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <HAL_DAC_MspInit+0xe8>)
 80023a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023aa:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023ac:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <HAL_DAC_MspInit+0xe8>)
 80023ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023b2:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80023b4:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <HAL_DAC_MspInit+0xe8>)
 80023b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ba:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80023bc:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <HAL_DAC_MspInit+0xe8>)
 80023be:	2200      	movs	r2, #0
 80023c0:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023c2:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <HAL_DAC_MspInit+0xe8>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80023c8:	480b      	ldr	r0, [pc, #44]	; (80023f8 <HAL_DAC_MspInit+0xe8>)
 80023ca:	f004 faf7 	bl	80069bc <HAL_DMA_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80023d4:	f7ff ff16 	bl	8002204 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a07      	ldr	r2, [pc, #28]	; (80023f8 <HAL_DAC_MspInit+0xe8>)
 80023dc:	609a      	str	r2, [r3, #8]
 80023de:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <HAL_DAC_MspInit+0xe8>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80023e4:	bf00      	nop
 80023e6:	3728      	adds	r7, #40	; 0x28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40007400 	.word	0x40007400
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40020000 	.word	0x40020000
 80023f8:	2000013c 	.word	0x2000013c
 80023fc:	40026088 	.word	0x40026088

08002400 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	; 0x28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002408:	f107 0314 	add.w	r3, r7, #20
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a19      	ldr	r2, [pc, #100]	; (8002484 <HAL_SPI_MspInit+0x84>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d12b      	bne.n	800247a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	4b18      	ldr	r3, [pc, #96]	; (8002488 <HAL_SPI_MspInit+0x88>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	4a17      	ldr	r2, [pc, #92]	; (8002488 <HAL_SPI_MspInit+0x88>)
 800242c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002430:	6453      	str	r3, [r2, #68]	; 0x44
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <HAL_SPI_MspInit+0x88>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	4b11      	ldr	r3, [pc, #68]	; (8002488 <HAL_SPI_MspInit+0x88>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	4a10      	ldr	r2, [pc, #64]	; (8002488 <HAL_SPI_MspInit+0x88>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6313      	str	r3, [r2, #48]	; 0x30
 800244e:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <HAL_SPI_MspInit+0x88>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800245a:	23e0      	movs	r3, #224	; 0xe0
 800245c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	2302      	movs	r3, #2
 8002460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002466:	2303      	movs	r3, #3
 8002468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800246a:	2305      	movs	r3, #5
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246e:	f107 0314 	add.w	r3, r7, #20
 8002472:	4619      	mov	r1, r3
 8002474:	4805      	ldr	r0, [pc, #20]	; (800248c <HAL_SPI_MspInit+0x8c>)
 8002476:	f005 f87f 	bl	8007578 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800247a:	bf00      	nop
 800247c:	3728      	adds	r7, #40	; 0x28
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40013000 	.word	0x40013000
 8002488:	40023800 	.word	0x40023800
 800248c:	40020000 	.word	0x40020000

08002490 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a0:	d10e      	bne.n	80024c0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	4b16      	ldr	r3, [pc, #88]	; (8002500 <HAL_TIM_Base_MspInit+0x70>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	4a15      	ldr	r2, [pc, #84]	; (8002500 <HAL_TIM_Base_MspInit+0x70>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6413      	str	r3, [r2, #64]	; 0x40
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <HAL_TIM_Base_MspInit+0x70>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024be:	e01a      	b.n	80024f6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a0f      	ldr	r2, [pc, #60]	; (8002504 <HAL_TIM_Base_MspInit+0x74>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d115      	bne.n	80024f6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <HAL_TIM_Base_MspInit+0x70>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	4a0b      	ldr	r2, [pc, #44]	; (8002500 <HAL_TIM_Base_MspInit+0x70>)
 80024d4:	f043 0302 	orr.w	r3, r3, #2
 80024d8:	6413      	str	r3, [r2, #64]	; 0x40
 80024da:	4b09      	ldr	r3, [pc, #36]	; (8002500 <HAL_TIM_Base_MspInit+0x70>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2105      	movs	r1, #5
 80024ea:	201d      	movs	r0, #29
 80024ec:	f004 f9bf 	bl	800686e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024f0:	201d      	movs	r0, #29
 80024f2:	f004 f9d8 	bl	80068a6 <HAL_NVIC_EnableIRQ>
}
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	40000400 	.word	0x40000400

08002508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800250c:	e7fe      	b.n	800250c <NMI_Handler+0x4>
	...

08002510 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(STM_OK_GPIO_Port, STM_OK_Pin, GPIO_PIN_RESET);
 8002514:	2200      	movs	r2, #0
 8002516:	2101      	movs	r1, #1
 8002518:	4804      	ldr	r0, [pc, #16]	; (800252c <HardFault_Handler+0x1c>)
 800251a:	f005 f9d9 	bl	80078d0 <HAL_GPIO_WritePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_WritePin(ERROR_GPIO_Port, ERROR_Pin, GPIO_PIN_SET);
 800251e:	2201      	movs	r2, #1
 8002520:	2102      	movs	r1, #2
 8002522:	4802      	ldr	r0, [pc, #8]	; (800252c <HardFault_Handler+0x1c>)
 8002524:	f005 f9d4 	bl	80078d0 <HAL_GPIO_WritePin>
 8002528:	e7f9      	b.n	800251e <HardFault_Handler+0xe>
 800252a:	bf00      	nop
 800252c:	40020400 	.word	0x40020400

08002530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002534:	e7fe      	b.n	8002534 <MemManage_Handler+0x4>

08002536 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800253a:	e7fe      	b.n	800253a <BusFault_Handler+0x4>

0800253c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002540:	e7fe      	b.n	8002540 <UsageFault_Handler+0x4>

08002542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (SD_Timer1 > 0) {
 8002554:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <SysTick_Handler+0x44>)
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <SysTick_Handler+0x18>
		SD_Timer1--;
 800255c:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <SysTick_Handler+0x44>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <SysTick_Handler+0x44>)
 8002566:	801a      	strh	r2, [r3, #0]
	}
	if (SD_Timer2 > 0) {
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <SysTick_Handler+0x48>)
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <SysTick_Handler+0x2c>
		SD_Timer2--;
 8002570:	4b09      	ldr	r3, [pc, #36]	; (8002598 <SysTick_Handler+0x48>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	4b07      	ldr	r3, [pc, #28]	; (8002598 <SysTick_Handler+0x48>)
 800257a:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800257c:	f003 fbee 	bl	8005d5c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002580:	f014 fa98 	bl	8016ab4 <xTaskGetSchedulerState>
 8002584:	4603      	mov	r3, r0
 8002586:	2b01      	cmp	r3, #1
 8002588:	d001      	beq.n	800258e <SysTick_Handler+0x3e>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800258a:	f015 fa6d 	bl	8017a68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	200000f8 	.word	0x200000f8
 8002598:	200000fa 	.word	0x200000fa

0800259c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80025a0:	4802      	ldr	r0, [pc, #8]	; (80025ac <DMA1_Stream5_IRQHandler+0x10>)
 80025a2:	f004 fab9 	bl	8006b18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	2000013c 	.word	0x2000013c

080025b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 80025b4:	2040      	movs	r0, #64	; 0x40
 80025b6:	f005 f9bf 	bl	8007938 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN5_Pin);
 80025ba:	2080      	movs	r0, #128	; 0x80
 80025bc:	f005 f9bc 	bl	8007938 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN6_Pin);
 80025c0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80025c4:	f005 f9b8 	bl	8007938 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN9_Pin);
 80025c8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80025cc:	f005 f9b4 	bl	8007938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80025d0:	bf00      	nop
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025d8:	4802      	ldr	r0, [pc, #8]	; (80025e4 <TIM3_IRQHandler+0x10>)
 80025da:	f006 fbc6 	bl	8008d6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000248 	.word	0x20000248

080025e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN0_Pin);
 80025ec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80025f0:	f005 f9a2 	bl	8007938 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 80025f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025f8:	f005 f99e 	bl	8007938 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 80025fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002600:	f005 f99a 	bl	8007938 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 8002604:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002608:	f005 f996 	bl	8007938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
//		HAL_TIM_Base_Stop_IT(&htim3);
//		stop = 0;
//	} else {
//		stop = 1;
//	}
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return 1;
 8002628:	2301      	movs	r3, #1
}
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <_kill>:

int _kill(int pid, int sig)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800263e:	f015 fd33 	bl	80180a8 <__errno>
 8002642:	4603      	mov	r3, r0
 8002644:	2216      	movs	r2, #22
 8002646:	601a      	str	r2, [r3, #0]
  return -1;
 8002648:	f04f 33ff 	mov.w	r3, #4294967295
}
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <_exit>:

void _exit (int status)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800265c:	f04f 31ff 	mov.w	r1, #4294967295
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ffe7 	bl	8002634 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002666:	e7fe      	b.n	8002666 <_exit+0x12>

08002668 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	e00a      	b.n	8002690 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800267a:	f3af 8000 	nop.w
 800267e:	4601      	mov	r1, r0
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	60ba      	str	r2, [r7, #8]
 8002686:	b2ca      	uxtb	r2, r1
 8002688:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	3301      	adds	r3, #1
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	429a      	cmp	r2, r3
 8002696:	dbf0      	blt.n	800267a <_read+0x12>
  }

  return len;
 8002698:	687b      	ldr	r3, [r7, #4]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	e009      	b.n	80026c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	60ba      	str	r2, [r7, #8]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	3301      	adds	r3, #1
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	dbf1      	blt.n	80026b4 <_write+0x12>
  }
  return len;
 80026d0:	687b      	ldr	r3, [r7, #4]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <_close>:

int _close(int file)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002702:	605a      	str	r2, [r3, #4]
  return 0;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <_isatty>:

int _isatty(int file)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800271a:	2301      	movs	r3, #1
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <_sbrk+0x5c>)
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <_sbrk+0x60>)
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002758:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <_sbrk+0x64>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <_sbrk+0x64>)
 8002762:	4a12      	ldr	r2, [pc, #72]	; (80027ac <_sbrk+0x68>)
 8002764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002766:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <_sbrk+0x64>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	429a      	cmp	r2, r3
 8002772:	d207      	bcs.n	8002784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002774:	f015 fc98 	bl	80180a8 <__errno>
 8002778:	4603      	mov	r3, r0
 800277a:	220c      	movs	r2, #12
 800277c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	e009      	b.n	8002798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <_sbrk+0x64>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <_sbrk+0x64>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <_sbrk+0x64>)
 8002794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20020000 	.word	0x20020000
 80027a4:	00000400 	.word	0x00000400
 80027a8:	20000294 	.word	0x20000294
 80027ac:	20006498 	.word	0x20006498

080027b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027b4:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <SystemInit+0x20>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ba:	4a05      	ldr	r2, [pc, #20]	; (80027d0 <SystemInit+0x20>)
 80027bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	ed87 0a01 	vstr	s0, [r7, #4]
 80027de:	ed97 0a01 	vldr	s0, [r7, #4]
 80027e2:	f015 fbd5 	bl	8017f90 <floorf>
 80027e6:	eef0 7a40 	vmov.f32	s15, s0
 80027ea:	eeb0 0a67 	vmov.f32	s0, s15
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <_ZSt5isinff>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80027fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002802:	eef0 7ae7 	vabs.f32	s15, s15
 8002806:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002838 <_ZSt5isinff+0x44>
 800280a:	eef4 7a47 	vcmp.f32	s15, s14
 800280e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002812:	bfd4      	ite	le
 8002814:	2301      	movle	r3, #1
 8002816:	2300      	movgt	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	f083 0301 	eor.w	r3, r3, #1
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	bf14      	ite	ne
 8002824:	2301      	movne	r3, #1
 8002826:	2300      	moveq	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	7f7fffff 	.word	0x7f7fffff

0800283c <_ZSt5isnanf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	ed87 0a01 	vstr	s0, [r7, #4]
 8002846:	ed97 7a01 	vldr	s14, [r7, #4]
 800284a:	edd7 7a01 	vldr	s15, [r7, #4]
 800284e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002856:	bf6c      	ite	vs
 8002858:	2301      	movvs	r3, #1
 800285a:	2300      	movvc	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	bf14      	ite	ne
 8002862:	2301      	movne	r3, #1
 8002864:	2300      	moveq	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	ed87 0a01 	vstr	s0, [r7, #4]
 800287e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002882:	f015 fbc7 	bl	8018014 <roundf>
 8002886:	eef0 7a40 	vmov.f32	s15, s0
 800288a:	eeb0 0a67 	vmov.f32	s0, s15
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <_ZN3etl12memory_clearEPVcj>:
  ///\param p Pointer to the memory.
  ///\param n Size of the memory.
  ///\ingroup memory
  //*****************************************************************************
  inline void memory_clear(volatile char* p, size_t n)
  {
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
    while (n--)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	1e5a      	subs	r2, r3, #1
 80028a2:	603a      	str	r2, [r7, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	bf14      	ite	ne
 80028a8:	2301      	movne	r3, #1
 80028aa:	2300      	moveq	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <_ZN3etl12memory_clearEPVcj+0x2a>
    {
      *p++ = 0;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]
    while (n--)
 80028bc:	e7ef      	b.n	800289e <_ZN3etl12memory_clearEPVcj+0xa>
    }
  }
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <_ZN11SolarGators11DataModules10DataModuleD1Ev>:
    {
      #ifndef IS_TELEMETRY
      mutex_id_ = osMutexNew(&mutex_attributes_);
      #endif
    };
  virtual ~DataModule() {};
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <_ZN11SolarGators11DataModules10DataModuleD1Ev+0x1c>)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	0801a2a8 	.word	0x0801a2a8

080028ec <_ZN11SolarGators11DataModules10DataModuleD0Ev>:
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff ffe9 	bl	80028cc <_ZN11SolarGators11DataModules10DataModuleD1Ev>
 80028fa:	2178      	movs	r1, #120	; 0x78
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f015 fb2d 	bl	8017f5c <_ZdlPvj>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <_ZN11SolarGators11DataModules11OrionBMSRx0D1Ev>:
{
  class OrionBMSRx0 final: public DataModule
  {
  public:
    OrionBMSRx0(uint32_t can_id, uint32_t telem_id);
    ~OrionBMSRx0() {};
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	4a05      	ldr	r2, [pc, #20]	; (800292c <_ZN11SolarGators11DataModules11OrionBMSRx0D1Ev+0x20>)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ffd5 	bl	80028cc <_ZN11SolarGators11DataModules10DataModuleD1Ev>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	0801a388 	.word	0x0801a388

08002930 <_ZN11SolarGators11DataModules11OrionBMSRx0D0Ev>:
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ffe7 	bl	800290c <_ZN11SolarGators11DataModules11OrionBMSRx0D1Ev>
 800293e:	2180      	movs	r1, #128	; 0x80
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f015 fb0b 	bl	8017f5c <_ZdlPvj>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <_ZN11SolarGators11DataModules11OrionBMSRx1D1Ev>:

  class OrionBMSRx1 final: public DataModule
  {
  public:
    OrionBMSRx1(uint32_t can_id, uint32_t telem_id);
    ~OrionBMSRx1() {};
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	4a05      	ldr	r2, [pc, #20]	; (8002970 <_ZN11SolarGators11DataModules11OrionBMSRx1D1Ev+0x20>)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ffb3 	bl	80028cc <_ZN11SolarGators11DataModules10DataModuleD1Ev>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	0801a370 	.word	0x0801a370

08002974 <_ZN11SolarGators11DataModules11OrionBMSRx1D0Ev>:
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff ffe7 	bl	8002950 <_ZN11SolarGators11DataModules11OrionBMSRx1D1Ev>
 8002982:	2180      	movs	r1, #128	; 0x80
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f015 fae9 	bl	8017f5c <_ZdlPvj>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <_ZN11SolarGators11DataModules11OrionBMSRx2D1Ev>:

  class OrionBMSRx2 final: public DataModule
  {
  public:
    OrionBMSRx2(uint32_t can_id, uint32_t telem_id);
    ~OrionBMSRx2() {};
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <_ZN11SolarGators11DataModules11OrionBMSRx2D1Ev+0x20>)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff91 	bl	80028cc <_ZN11SolarGators11DataModules10DataModuleD1Ev>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	0801a358 	.word	0x0801a358

080029b8 <_ZN11SolarGators11DataModules11OrionBMSRx2D0Ev>:
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ffe7 	bl	8002994 <_ZN11SolarGators11DataModules11OrionBMSRx2D1Ev>
 80029c6:	2180      	movs	r1, #128	; 0x80
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f015 fac7 	bl	8017f5c <_ZdlPvj>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <_ZN11SolarGators11DataModules11OrionBMSRx4D1Ev>:

  class OrionBMSRx4 final: public DataModule
  {
  public:
    OrionBMSRx4(uint32_t can_id, uint32_t telem_id);
    ~OrionBMSRx4() {};
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	4a05      	ldr	r2, [pc, #20]	; (80029f8 <_ZN11SolarGators11DataModules11OrionBMSRx4D1Ev+0x20>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff ff6f 	bl	80028cc <_ZN11SolarGators11DataModules10DataModuleD1Ev>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	0801a340 	.word	0x0801a340

080029fc <_ZN11SolarGators11DataModules11OrionBMSRx4D0Ev>:
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff ffe7 	bl	80029d8 <_ZN11SolarGators11DataModules11OrionBMSRx4D1Ev>
 8002a0a:	2194      	movs	r1, #148	; 0x94
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f015 faa5 	bl	8017f5c <_ZdlPvj>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <_ZNK3etl11string_base9is_secureEv>:
    }

    //*************************************************************************
    /// Gets the 'secure' state flag.
    //*************************************************************************
    bool is_secure() const
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
    {
      return flags.test<CLEAR_AFTER_USE>();
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3308      	adds	r3, #8
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f001 fc93 	bl	8004354 <_ZNK3etl5flagsIhLh255EE4testILh2EEEbv>
 8002a2e:	4603      	mov	r3, r0
    }
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <_ZN3etl11string_baseC1Ej>:
  protected:

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    string_base(size_type max_size_)
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
      : current_size(0)
      , CAPACITY(max_size_)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3308      	adds	r3, #8
 8002a52:	4618      	mov	r0, r3
 8002a54:	f001 fc91 	bl	800437a <_ZN3etl5flagsIhLh255EEC1Ev>
    {
    }
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <_ZN3etl5flagsIhLh255EE3setILh1EEERS1_b>:
      return *this;
    }

    //*******************************************
    template <value_type pattern>
    ETL_CONSTEXPR14 flags<T, MASK>& set(bool value) ETL_NOEXCEPT
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	70fb      	strb	r3, [r7, #3]
    {
      value ? data |= (pattern & MASK) : data &= (~pattern & MASK);
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d007      	beq.n	8002a84 <_ZN3etl5flagsIhLh255EE3setILh1EEERS1_b+0x22>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	e006      	b.n	8002a92 <_ZN3etl5flagsIhLh255EE3setILh1EEERS1_b+0x30>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	701a      	strb	r2, [r3, #0]

      return *this;
 8002a92:	687b      	ldr	r3, [r7, #4]
    }
 8002a94:	4618      	mov	r0, r3
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <_ZN3etl11string_base13set_truncatedEb>:

#if ETL_STRING_TRUNCATION_CHECKS_ENABLED
    //*************************************************************************
    /// Sets the 'truncated' flag.
    //*************************************************************************
    void set_truncated(bool status)
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	70fb      	strb	r3, [r7, #3]
    {
      flags.set<IS_TRUNCATED>(status);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3308      	adds	r3, #8
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ffd4 	bl	8002a62 <_ZN3etl5flagsIhLh255EE3setILh1EEERS1_b>
    }
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <_ZN3etl11string_baseD1Ev>:
#endif

    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~string_base()
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
    {
    }
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <_ZN3etl3minIjEERKT_S3_S3_>:
  }

  template <typename T>
  ETL_NODISCARD
  ETL_CONSTEXPR 
  const T& min(const T& a, const T& b)
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  {
    typedef etl::less<T> compare;

    return etl::min(a, b, compare());
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	6839      	ldr	r1, [r7, #0]
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f81a 	bl	8002b20 <_ZN3etl3minIjNS_4lessIjEEEERKT_S5_S5_T0_>
 8002aec:	4603      	mov	r3, r0
  }
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <_ZNK3etl4lessIjEclERKjS3_>:
  template <typename T = void>
  struct less : public etl::binary_function<T, T, bool>
  {
    typedef T value_type;

    ETL_CONSTEXPR bool operator()(const T &lhs, const T &rhs) const
 8002af6:	b480      	push	{r7}
 8002af8:	b085      	sub	sp, #20
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
    {
      return (lhs < rhs);
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	bf34      	ite	cc
 8002b0e:	2301      	movcc	r3, #1
 8002b10:	2300      	movcs	r3, #0
 8002b12:	b2db      	uxtb	r3, r3
    }
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <_ZN3etl3minIjNS_4lessIjEEEERKT_S5_S5_T0_>:
  const T& min(const T& a, const T& b, TCompare compare)
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	713a      	strb	r2, [r7, #4]
    return (compare(a, b)) ? a : b;
 8002b2c:	1d3b      	adds	r3, r7, #4
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	68f9      	ldr	r1, [r7, #12]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff ffdf 	bl	8002af6 <_ZNK3etl4lessIjEclERKjS3_>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <_ZN3etl3minIjNS_4lessIjEEEERKT_S5_S5_T0_+0x22>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	e000      	b.n	8002b44 <_ZN3etl3minIjNS_4lessIjEEEERKT_S5_S5_T0_+0x24>
 8002b42:	68bb      	ldr	r3, [r7, #8]
  }
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <_ZN11SolarGators11DataModules6Mpptx1D1Ev>:
	};

	class Mpptx1 final: public DataModule {
	public:
		Mpptx1(uint32_t can_id);
		~Mpptx1() {};
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	4a05      	ldr	r2, [pc, #20]	; (8002b6c <_ZN11SolarGators11DataModules6Mpptx1D1Ev+0x20>)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff feb5 	bl	80028cc <_ZN11SolarGators11DataModules10DataModuleD1Ev>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	0801a328 	.word	0x0801a328

08002b70 <_ZN11SolarGators11DataModules6Mpptx1D0Ev>:
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ffe7 	bl	8002b4c <_ZN11SolarGators11DataModules6Mpptx1D1Ev>
 8002b7e:	2180      	movs	r1, #128	; 0x80
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f015 f9eb 	bl	8017f5c <_ZdlPvj>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <CPP_UserSetup>:
SolarGators::DataModules::DataModule* MPPT0_ptr;
SolarGators::DataModules::DataModule* MPPT1_ptr;
SolarGators::DataModules::DataModule* MPPT2_ptr;

void CPP_UserSetup(void)
{
 8002b90:	b590      	push	{r4, r7, lr}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
  // Note: No longer using binds, using etl::delegate should solve our stack problem but still
  //       needs to be tested. This is compile time determined so hoping for better performance also.
  {
    using namespace SolarGators::DataModules;
    // Left Side
    left_turn.action_ = etl::delegate<void(void)>::create<SteeringController, LightsState, &SteeringController::ToggleLeftTurnSignal>();
 8002b96:	4ca0      	ldr	r4, [pc, #640]	; (8002e18 <CPP_UserSetup+0x288>)
 8002b98:	463b      	mov	r3, r7
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f001 fc3c 	bl	8004418 <_ZN3etl8delegateIFvvEE6createIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_20ToggleLeftTurnSignalEvEEEES2_v>
 8002ba0:	4622      	mov	r2, r4
 8002ba2:	463b      	mov	r3, r7
 8002ba4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ba8:	e882 0003 	stmia.w	r2, {r0, r1}
    cruise_minus.action_ = etl::delegate<void(void)>::create<SteeringController, LightsState, &SteeringController::DecreaseCruiseSpeed>();
 8002bac:	4c9b      	ldr	r4, [pc, #620]	; (8002e1c <CPP_UserSetup+0x28c>)
 8002bae:	463b      	mov	r3, r7
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f001 fc3f 	bl	8004434 <_ZN3etl8delegateIFvvEE6createIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_19DecreaseCruiseSpeedEvEEEES2_v>
 8002bb6:	4622      	mov	r2, r4
 8002bb8:	463b      	mov	r3, r7
 8002bba:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002bbe:	e882 0003 	stmia.w	r2, {r0, r1}
    //eco.action_ = etl::delegate<void(void)>::create<HandleEco>();
    headlights.action_ = etl::delegate<void(void)>::create<HandleHeadLights>();
 8002bc2:	4c97      	ldr	r4, [pc, #604]	; (8002e20 <CPP_UserSetup+0x290>)
 8002bc4:	463b      	mov	r3, r7
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f001 fc42 	bl	8004450 <_ZN3etl8delegateIFvvEE6createIXadL_Z16HandleHeadLightsvEEEES2_v>
 8002bcc:	4622      	mov	r2, r4
 8002bce:	463b      	mov	r3, r7
 8002bd0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002bd4:	e882 0003 	stmia.w	r2, {r0, r1}
    hazards.action_ = etl::delegate<void(void)>::create<SteeringController, LightsState, &SteeringController::ToggleHazards>();
 8002bd8:	4c92      	ldr	r4, [pc, #584]	; (8002e24 <CPP_UserSetup+0x294>)
 8002bda:	463b      	mov	r3, r7
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f001 fc47 	bl	8004470 <_ZN3etl8delegateIFvvEE6createIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_13ToggleHazardsEvEEEES2_v>
 8002be2:	4622      	mov	r2, r4
 8002be4:	463b      	mov	r3, r7
 8002be6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002bea:	e882 0003 	stmia.w	r2, {r0, r1}
    // Right Side
    right_turn.action_ = etl::delegate<void(void)>::create<SteeringController, LightsState, &SteeringController::ToggleRightTurnSignal>();
 8002bee:	4c8e      	ldr	r4, [pc, #568]	; (8002e28 <CPP_UserSetup+0x298>)
 8002bf0:	463b      	mov	r3, r7
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f001 fc4a 	bl	800448c <_ZN3etl8delegateIFvvEE6createIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_21ToggleRightTurnSignalEvEEEES2_v>
 8002bf8:	4622      	mov	r2, r4
 8002bfa:	463b      	mov	r3, r7
 8002bfc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002c00:	e882 0003 	stmia.w	r2, {r0, r1}
    cruise_plus.action_ = etl::delegate<void(void)>::create<SteeringController, LightsState, &SteeringController::IncreaseCruiseSpeed>();
 8002c04:	4c89      	ldr	r4, [pc, #548]	; (8002e2c <CPP_UserSetup+0x29c>)
 8002c06:	463b      	mov	r3, r7
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f001 fc4d 	bl	80044a8 <_ZN3etl8delegateIFvvEE6createIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_19IncreaseCruiseSpeedEvEEEES2_v>
 8002c0e:	4622      	mov	r2, r4
 8002c10:	463b      	mov	r3, r7
 8002c12:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002c16:	e882 0003 	stmia.w	r2, {r0, r1}
    //horn.action_ = etl::delegate<void(void)>::create<SteeringController, LightsState, &SteeringController::ToggleHorn>();
    cruise.action_ = etl::delegate<void(void)>::create<HandleCruise>();
 8002c1a:	4c85      	ldr	r4, [pc, #532]	; (8002e30 <CPP_UserSetup+0x2a0>)
 8002c1c:	463b      	mov	r3, r7
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f001 fc50 	bl	80044c4 <_ZN3etl8delegateIFvvEE6createIXadL_Z12HandleCruisevEEEES2_v>
 8002c24:	4622      	mov	r2, r4
 8002c26:	463b      	mov	r3, r7
 8002c28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002c2c:	e882 0003 	stmia.w	r2, {r0, r1}
    reverse.action_ = etl::delegate<void(void)>::create<HandleReverse>();
 8002c30:	4c80      	ldr	r4, [pc, #512]	; (8002e34 <CPP_UserSetup+0x2a4>)
 8002c32:	463b      	mov	r3, r7
 8002c34:	4618      	mov	r0, r3
 8002c36:	f001 fc55 	bl	80044e4 <_ZN3etl8delegateIFvvEE6createIXadL_Z13HandleReversevEEEES2_v>
 8002c3a:	4622      	mov	r2, r4
 8002c3c:	463b      	mov	r3, r7
 8002c3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002c42:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  // Add to Button Group
  // Left side
  LightsState.AddButton(&left_turn);
 8002c46:	4974      	ldr	r1, [pc, #464]	; (8002e18 <CPP_UserSetup+0x288>)
 8002c48:	487b      	ldr	r0, [pc, #492]	; (8002e38 <CPP_UserSetup+0x2a8>)
 8002c4a:	f009 fb61 	bl	800c310 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  LightsState.AddButton(&cruise_minus);
 8002c4e:	4973      	ldr	r1, [pc, #460]	; (8002e1c <CPP_UserSetup+0x28c>)
 8002c50:	4879      	ldr	r0, [pc, #484]	; (8002e38 <CPP_UserSetup+0x2a8>)
 8002c52:	f009 fb5d 	bl	800c310 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  //LightsState.AddButton(&eco);
  LightsState.AddButton(&headlights);
 8002c56:	4972      	ldr	r1, [pc, #456]	; (8002e20 <CPP_UserSetup+0x290>)
 8002c58:	4877      	ldr	r0, [pc, #476]	; (8002e38 <CPP_UserSetup+0x2a8>)
 8002c5a:	f009 fb59 	bl	800c310 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  LightsState.AddButton(&hazards);
 8002c5e:	4971      	ldr	r1, [pc, #452]	; (8002e24 <CPP_UserSetup+0x294>)
 8002c60:	4875      	ldr	r0, [pc, #468]	; (8002e38 <CPP_UserSetup+0x2a8>)
 8002c62:	f009 fb55 	bl	800c310 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  // Right side
  LightsState.AddButton(&right_turn);
 8002c66:	4970      	ldr	r1, [pc, #448]	; (8002e28 <CPP_UserSetup+0x298>)
 8002c68:	4873      	ldr	r0, [pc, #460]	; (8002e38 <CPP_UserSetup+0x2a8>)
 8002c6a:	f009 fb51 	bl	800c310 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  LightsState.AddButton(&cruise_plus);
 8002c6e:	496f      	ldr	r1, [pc, #444]	; (8002e2c <CPP_UserSetup+0x29c>)
 8002c70:	4871      	ldr	r0, [pc, #452]	; (8002e38 <CPP_UserSetup+0x2a8>)
 8002c72:	f009 fb4d 	bl	800c310 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  //LightsState.AddButton(&horn);
  LightsState.AddButton(&cruise);
 8002c76:	496e      	ldr	r1, [pc, #440]	; (8002e30 <CPP_UserSetup+0x2a0>)
 8002c78:	486f      	ldr	r0, [pc, #444]	; (8002e38 <CPP_UserSetup+0x2a8>)
 8002c7a:	f009 fb49 	bl	800c310 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  LightsState.AddButton(&reverse);
 8002c7e:	496d      	ldr	r1, [pc, #436]	; (8002e34 <CPP_UserSetup+0x2a4>)
 8002c80:	486d      	ldr	r0, [pc, #436]	; (8002e38 <CPP_UserSetup+0x2a8>)
 8002c82:	f009 fb45 	bl	800c310 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
//   Load the CAN Controller
  CANController.AddRxModule(&BMS_Rx_0);
 8002c86:	496d      	ldr	r1, [pc, #436]	; (8002e3c <CPP_UserSetup+0x2ac>)
 8002c88:	486d      	ldr	r0, [pc, #436]	; (8002e40 <CPP_UserSetup+0x2b0>)
 8002c8a:	f00a ffc4 	bl	800dc16 <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>
  BMS_Rx_0_ptr = &BMS_Rx_0;
 8002c8e:	4b6d      	ldr	r3, [pc, #436]	; (8002e44 <CPP_UserSetup+0x2b4>)
 8002c90:	4a6a      	ldr	r2, [pc, #424]	; (8002e3c <CPP_UserSetup+0x2ac>)
 8002c92:	601a      	str	r2, [r3, #0]
  CANController.AddRxModule(&BMS_Rx_1);
 8002c94:	496c      	ldr	r1, [pc, #432]	; (8002e48 <CPP_UserSetup+0x2b8>)
 8002c96:	486a      	ldr	r0, [pc, #424]	; (8002e40 <CPP_UserSetup+0x2b0>)
 8002c98:	f00a ffbd 	bl	800dc16 <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>
  BMS_Rx_1_ptr = &BMS_Rx_1;
 8002c9c:	4b6b      	ldr	r3, [pc, #428]	; (8002e4c <CPP_UserSetup+0x2bc>)
 8002c9e:	4a6a      	ldr	r2, [pc, #424]	; (8002e48 <CPP_UserSetup+0x2b8>)
 8002ca0:	601a      	str	r2, [r3, #0]
  CANController.AddRxModule(&BMS_Rx_2);
 8002ca2:	496b      	ldr	r1, [pc, #428]	; (8002e50 <CPP_UserSetup+0x2c0>)
 8002ca4:	4866      	ldr	r0, [pc, #408]	; (8002e40 <CPP_UserSetup+0x2b0>)
 8002ca6:	f00a ffb6 	bl	800dc16 <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>
  BMS_Rx_2_ptr = &BMS_Rx_2;
 8002caa:	4b6a      	ldr	r3, [pc, #424]	; (8002e54 <CPP_UserSetup+0x2c4>)
 8002cac:	4a68      	ldr	r2, [pc, #416]	; (8002e50 <CPP_UserSetup+0x2c0>)
 8002cae:	601a      	str	r2, [r3, #0]
  CANController.AddRxModule(&BMS_Rx_4);
 8002cb0:	4969      	ldr	r1, [pc, #420]	; (8002e58 <CPP_UserSetup+0x2c8>)
 8002cb2:	4863      	ldr	r0, [pc, #396]	; (8002e40 <CPP_UserSetup+0x2b0>)
 8002cb4:	f00a ffaf 	bl	800dc16 <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>
  BMS_Rx_4_ptr = &BMS_Rx_4;
 8002cb8:	4b68      	ldr	r3, [pc, #416]	; (8002e5c <CPP_UserSetup+0x2cc>)
 8002cba:	4a67      	ldr	r2, [pc, #412]	; (8002e58 <CPP_UserSetup+0x2c8>)
 8002cbc:	601a      	str	r2, [r3, #0]
  CANController.AddRxModule(&Motor_Rx_0);
 8002cbe:	4968      	ldr	r1, [pc, #416]	; (8002e60 <CPP_UserSetup+0x2d0>)
 8002cc0:	485f      	ldr	r0, [pc, #380]	; (8002e40 <CPP_UserSetup+0x2b0>)
 8002cc2:	f00a ffa8 	bl	800dc16 <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>
  Motor_Rx_0_ptr = &Motor_Rx_0;
 8002cc6:	4b67      	ldr	r3, [pc, #412]	; (8002e64 <CPP_UserSetup+0x2d4>)
 8002cc8:	4a65      	ldr	r2, [pc, #404]	; (8002e60 <CPP_UserSetup+0x2d0>)
 8002cca:	601a      	str	r2, [r3, #0]
  CANController.AddRxModule(&Motor_Rx_2);
 8002ccc:	4966      	ldr	r1, [pc, #408]	; (8002e68 <CPP_UserSetup+0x2d8>)
 8002cce:	485c      	ldr	r0, [pc, #368]	; (8002e40 <CPP_UserSetup+0x2b0>)
 8002cd0:	f00a ffa1 	bl	800dc16 <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>
  Motor_Rx_2_ptr = &Motor_Rx_2;
 8002cd4:	4b65      	ldr	r3, [pc, #404]	; (8002e6c <CPP_UserSetup+0x2dc>)
 8002cd6:	4a64      	ldr	r2, [pc, #400]	; (8002e68 <CPP_UserSetup+0x2d8>)
 8002cd8:	601a      	str	r2, [r3, #0]
  CANController.AddRxModule(&PowerBoard);
 8002cda:	4965      	ldr	r1, [pc, #404]	; (8002e70 <CPP_UserSetup+0x2e0>)
 8002cdc:	4858      	ldr	r0, [pc, #352]	; (8002e40 <CPP_UserSetup+0x2b0>)
 8002cde:	f00a ff9a 	bl	800dc16 <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>
  PowerBoard_ptr = &PowerBoard;
 8002ce2:	4b64      	ldr	r3, [pc, #400]	; (8002e74 <CPP_UserSetup+0x2e4>)
 8002ce4:	4a62      	ldr	r2, [pc, #392]	; (8002e70 <CPP_UserSetup+0x2e0>)
 8002ce6:	601a      	str	r2, [r3, #0]
  CANController.AddRxModule(&FLights);
 8002ce8:	4963      	ldr	r1, [pc, #396]	; (8002e78 <CPP_UserSetup+0x2e8>)
 8002cea:	4855      	ldr	r0, [pc, #340]	; (8002e40 <CPP_UserSetup+0x2b0>)
 8002cec:	f00a ff93 	bl	800dc16 <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>
  FLights_ptr = &FLights;
 8002cf0:	4b62      	ldr	r3, [pc, #392]	; (8002e7c <CPP_UserSetup+0x2ec>)
 8002cf2:	4a61      	ldr	r2, [pc, #388]	; (8002e78 <CPP_UserSetup+0x2e8>)
 8002cf4:	601a      	str	r2, [r3, #0]
  CANController.AddRxModule(&RLights);
 8002cf6:	4962      	ldr	r1, [pc, #392]	; (8002e80 <CPP_UserSetup+0x2f0>)
 8002cf8:	4851      	ldr	r0, [pc, #324]	; (8002e40 <CPP_UserSetup+0x2b0>)
 8002cfa:	f00a ff8c 	bl	800dc16 <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>
  RLights_ptr = &RLights;
 8002cfe:	4b61      	ldr	r3, [pc, #388]	; (8002e84 <CPP_UserSetup+0x2f4>)
 8002d00:	4a5f      	ldr	r2, [pc, #380]	; (8002e80 <CPP_UserSetup+0x2f0>)
 8002d02:	601a      	str	r2, [r3, #0]
  CANController.AddRxModule(&MPPT0_Rx_1);
 8002d04:	4960      	ldr	r1, [pc, #384]	; (8002e88 <CPP_UserSetup+0x2f8>)
 8002d06:	484e      	ldr	r0, [pc, #312]	; (8002e40 <CPP_UserSetup+0x2b0>)
 8002d08:	f00a ff85 	bl	800dc16 <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>
  MPPT0_ptr = &MPPT0_Rx_1;
 8002d0c:	4b5f      	ldr	r3, [pc, #380]	; (8002e8c <CPP_UserSetup+0x2fc>)
 8002d0e:	4a5e      	ldr	r2, [pc, #376]	; (8002e88 <CPP_UserSetup+0x2f8>)
 8002d10:	601a      	str	r2, [r3, #0]
  CANController.AddRxModule(&MPPT1_Rx_1);
 8002d12:	495f      	ldr	r1, [pc, #380]	; (8002e90 <CPP_UserSetup+0x300>)
 8002d14:	484a      	ldr	r0, [pc, #296]	; (8002e40 <CPP_UserSetup+0x2b0>)
 8002d16:	f00a ff7e 	bl	800dc16 <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>
  MPPT1_ptr = &MPPT1_Rx_1;
 8002d1a:	4b5e      	ldr	r3, [pc, #376]	; (8002e94 <CPP_UserSetup+0x304>)
 8002d1c:	4a5c      	ldr	r2, [pc, #368]	; (8002e90 <CPP_UserSetup+0x300>)
 8002d1e:	601a      	str	r2, [r3, #0]
  CANController.AddRxModule(&MPPT2_Rx_1);
 8002d20:	495d      	ldr	r1, [pc, #372]	; (8002e98 <CPP_UserSetup+0x308>)
 8002d22:	4847      	ldr	r0, [pc, #284]	; (8002e40 <CPP_UserSetup+0x2b0>)
 8002d24:	f00a ff77 	bl	800dc16 <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>
  MPPT2_ptr = &MPPT2_Rx_1;
 8002d28:	4b5c      	ldr	r3, [pc, #368]	; (8002e9c <CPP_UserSetup+0x30c>)
 8002d2a:	4a5b      	ldr	r2, [pc, #364]	; (8002e98 <CPP_UserSetup+0x308>)
 8002d2c:	601a      	str	r2, [r3, #0]
  CANController.Init();
 8002d2e:	4844      	ldr	r0, [pc, #272]	; (8002e40 <CPP_UserSetup+0x2b0>)
 8002d30:	f00a fcb4 	bl	800d69c <_ZN11SolarGators7Drivers9CANDriver4InitEv>

  // Start Thread that Handles Turn Signal LEDs
  signal_timer_id = osTimerNew((osThreadFunc_t)UpdateSignals, osTimerPeriodic, NULL, &signal_timer_attr);
 8002d34:	4b5a      	ldr	r3, [pc, #360]	; (8002ea0 <CPP_UserSetup+0x310>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	2101      	movs	r1, #1
 8002d3a:	485a      	ldr	r0, [pc, #360]	; (8002ea4 <CPP_UserSetup+0x314>)
 8002d3c:	f010 fe78 	bl	8013a30 <osTimerNew>
 8002d40:	4603      	mov	r3, r0
 8002d42:	4a59      	ldr	r2, [pc, #356]	; (8002ea8 <CPP_UserSetup+0x318>)
 8002d44:	6013      	str	r3, [r2, #0]
  if (signal_timer_id == NULL)
 8002d46:	4b58      	ldr	r3, [pc, #352]	; (8002ea8 <CPP_UserSetup+0x318>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <CPP_UserSetup+0x1c2>
  {
      Error_Handler();
 8002d4e:	f7ff fa59 	bl	8002204 <Error_Handler>
  }
  osTimerStart(signal_timer_id, 500);
 8002d52:	4b55      	ldr	r3, [pc, #340]	; (8002ea8 <CPP_UserSetup+0x318>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f010 fee4 	bl	8013b28 <osTimerStart>
  // Start Thread that updates screen
  ui_thread_id = osThreadNew((osThreadFunc_t)UpdateUI, NULL, &ui_thread_attributes);
 8002d60:	4a52      	ldr	r2, [pc, #328]	; (8002eac <CPP_UserSetup+0x31c>)
 8002d62:	2100      	movs	r1, #0
 8002d64:	4852      	ldr	r0, [pc, #328]	; (8002eb0 <CPP_UserSetup+0x320>)
 8002d66:	f010 fda0 	bl	80138aa <osThreadNew>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4a51      	ldr	r2, [pc, #324]	; (8002eb4 <CPP_UserSetup+0x324>)
 8002d6e:	6013      	str	r3, [r2, #0]
  if (ui_thread_id == NULL)
 8002d70:	4b50      	ldr	r3, [pc, #320]	; (8002eb4 <CPP_UserSetup+0x324>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <CPP_UserSetup+0x1ec>
  {
      Error_Handler();
 8002d78:	f7ff fa44 	bl	8002204 <Error_Handler>
  }
  // Start Thread for SD logger
    sd_thread_id = osThreadNew((osThreadFunc_t)ProcessSD, NULL, &sd_thread_attributes);
 8002d7c:	4a4e      	ldr	r2, [pc, #312]	; (8002eb8 <CPP_UserSetup+0x328>)
 8002d7e:	2100      	movs	r1, #0
 8002d80:	484e      	ldr	r0, [pc, #312]	; (8002ebc <CPP_UserSetup+0x32c>)
 8002d82:	f010 fd92 	bl	80138aa <osThreadNew>
 8002d86:	4603      	mov	r3, r0
 8002d88:	4a4d      	ldr	r2, [pc, #308]	; (8002ec0 <CPP_UserSetup+0x330>)
 8002d8a:	6013      	str	r3, [r2, #0]
    if (sd_thread_id == NULL)
 8002d8c:	4b4c      	ldr	r3, [pc, #304]	; (8002ec0 <CPP_UserSetup+0x330>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <CPP_UserSetup+0x208>
    {
        Error_Handler();
 8002d94:	f7ff fa36 	bl	8002204 <Error_Handler>
    }
  // Start Thread that sends CAN Data
  can_tx_timer_id = osTimerNew((osThreadFunc_t)SendCanMsgs, osTimerPeriodic, NULL, &can_tx_timer_attr);
 8002d98:	4b4a      	ldr	r3, [pc, #296]	; (8002ec4 <CPP_UserSetup+0x334>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	484a      	ldr	r0, [pc, #296]	; (8002ec8 <CPP_UserSetup+0x338>)
 8002da0:	f010 fe46 	bl	8013a30 <osTimerNew>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4a49      	ldr	r2, [pc, #292]	; (8002ecc <CPP_UserSetup+0x33c>)
 8002da8:	6013      	str	r3, [r2, #0]
  if (can_tx_timer_id == NULL)
 8002daa:	4b48      	ldr	r3, [pc, #288]	; (8002ecc <CPP_UserSetup+0x33c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <CPP_UserSetup+0x226>
  {
      Error_Handler();
 8002db2:	f7ff fa27 	bl	8002204 <Error_Handler>
  }
  osTimerStart(can_tx_timer_id, 100);
 8002db6:	4b45      	ldr	r3, [pc, #276]	; (8002ecc <CPP_UserSetup+0x33c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2164      	movs	r1, #100	; 0x64
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f010 feb3 	bl	8013b28 <osTimerStart>

  // Start Thread that checks for button presses
  btn_thread_id = osThreadNew((osThreadFunc_t)ReadButtonHold, NULL, &btn_thread_attributes);
 8002dc2:	4a43      	ldr	r2, [pc, #268]	; (8002ed0 <CPP_UserSetup+0x340>)
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4843      	ldr	r0, [pc, #268]	; (8002ed4 <CPP_UserSetup+0x344>)
 8002dc8:	f010 fd6f 	bl	80138aa <osThreadNew>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4a42      	ldr	r2, [pc, #264]	; (8002ed8 <CPP_UserSetup+0x348>)
 8002dd0:	6013      	str	r3, [r2, #0]
  if (btn_thread_id == NULL)
 8002dd2:	4b41      	ldr	r3, [pc, #260]	; (8002ed8 <CPP_UserSetup+0x348>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <CPP_UserSetup+0x24e>
  {
	  Error_Handler();
 8002dda:	f7ff fa13 	bl	8002204 <Error_Handler>
  }

  // Start efficiency calcs thread
  efficiency_timer_id = osTimerNew((osThreadFunc_t)EfficiencyCalc, osTimerPeriodic, NULL, &efficiency_timer_attr);
 8002dde:	4b3f      	ldr	r3, [pc, #252]	; (8002edc <CPP_UserSetup+0x34c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	2101      	movs	r1, #1
 8002de4:	483e      	ldr	r0, [pc, #248]	; (8002ee0 <CPP_UserSetup+0x350>)
 8002de6:	f010 fe23 	bl	8013a30 <osTimerNew>
 8002dea:	4603      	mov	r3, r0
 8002dec:	4a3d      	ldr	r2, [pc, #244]	; (8002ee4 <CPP_UserSetup+0x354>)
 8002dee:	6013      	str	r3, [r2, #0]
  if (efficiency_timer_id == NULL)
 8002df0:	4b3c      	ldr	r3, [pc, #240]	; (8002ee4 <CPP_UserSetup+0x354>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <CPP_UserSetup+0x26c>
  {
      Error_Handler();
 8002df8:	f7ff fa04 	bl	8002204 <Error_Handler>
  }
  osTimerStart(efficiency_timer_id, 1000);
 8002dfc:	4b39      	ldr	r3, [pc, #228]	; (8002ee4 <CPP_UserSetup+0x354>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e04:	4618      	mov	r0, r3
 8002e06:	f010 fe8f 	bl	8013b28 <osTimerStart>

  // For now, ECO will always be on. There is no button for it.
  LightsState.EnableEco();
 8002e0a:	480b      	ldr	r0, [pc, #44]	; (8002e38 <CPP_UserSetup+0x2a8>)
 8002e0c:	f009 fa3e 	bl	800c28c <_ZN11SolarGators11DataModules18SteeringController9EnableEcoEv>

}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd90      	pop	{r4, r7, pc}
 8002e18:	20001554 	.word	0x20001554
 8002e1c:	20001650 	.word	0x20001650
 8002e20:	20001578 	.word	0x20001578
 8002e24:	200015e4 	.word	0x200015e4
 8002e28:	200015c0 	.word	0x200015c0
 8002e2c:	2000162c 	.word	0x2000162c
 8002e30:	20001608 	.word	0x20001608
 8002e34:	2000159c 	.word	0x2000159c
 8002e38:	20000298 	.word	0x20000298
 8002e3c:	200008e0 	.word	0x200008e0
 8002e40:	20000f68 	.word	0x20000f68
 8002e44:	20004a20 	.word	0x20004a20
 8002e48:	20000960 	.word	0x20000960
 8002e4c:	20004a24 	.word	0x20004a24
 8002e50:	200009e0 	.word	0x200009e0
 8002e54:	20004a28 	.word	0x20004a28
 8002e58:	20000a60 	.word	0x20000a60
 8002e5c:	20004a2c 	.word	0x20004a2c
 8002e60:	20000af4 	.word	0x20000af4
 8002e64:	20004a30 	.word	0x20004a30
 8002e68:	20000b7c 	.word	0x20000b7c
 8002e6c:	20004a34 	.word	0x20004a34
 8002e70:	20000c08 	.word	0x20000c08
 8002e74:	20004a40 	.word	0x20004a40
 8002e78:	20000c88 	.word	0x20000c88
 8002e7c:	20004a38 	.word	0x20004a38
 8002e80:	20000d6c 	.word	0x20000d6c
 8002e84:	20004a3c 	.word	0x20004a3c
 8002e88:	20000de8 	.word	0x20000de8
 8002e8c:	20004a44 	.word	0x20004a44
 8002e90:	20000e68 	.word	0x20000e68
 8002e94:	20004a48 	.word	0x20004a48
 8002e98:	20000ee8 	.word	0x20000ee8
 8002e9c:	20004a4c 	.word	0x20004a4c
 8002ea0:	20000010 	.word	0x20000010
 8002ea4:	080030e5 	.word	0x080030e5
 8002ea8:	20003ff4 	.word	0x20003ff4
 8002eac:	0801a214 	.word	0x0801a214
 8002eb0:	080032c1 	.word	0x080032c1
 8002eb4:	20003ff8 	.word	0x20003ff8
 8002eb8:	0801a238 	.word	0x0801a238
 8002ebc:	080038cd 	.word	0x080038cd
 8002ec0:	20004458 	.word	0x20004458
 8002ec4:	20000020 	.word	0x20000020
 8002ec8:	080037c1 	.word	0x080037c1
 8002ecc:	20004a18 	.word	0x20004a18
 8002ed0:	0801a25c 	.word	0x0801a25c
 8002ed4:	0800302d 	.word	0x0800302d
 8002ed8:	200048b8 	.word	0x200048b8
 8002edc:	20000030 	.word	0x20000030
 8002ee0:	08002ee9 	.word	0x08002ee9
 8002ee4:	20004a1c 	.word	0x20004a1c

08002ee8 <_Z14EfficiencyCalcv>:
float prev_speed = 0;
float current_watts = 0;
uint32_t prev_time = 0;
float efficiency = 0;

void EfficiencyCalc() {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	ed2d 8b02 	vpush	{d8}
 8002eee:	af00      	add	r7, sp, #0

	current_watts = BMS_Rx_0.getPackSumVolt() * BMS_Rx_2.getPackCurrent();
 8002ef0:	4843      	ldr	r0, [pc, #268]	; (8003000 <_Z14EfficiencyCalcv+0x118>)
 8002ef2:	f007 fb25 	bl	800a540 <_ZNK11SolarGators11DataModules11OrionBMSRx014getPackSumVoltEv>
 8002ef6:	eeb0 8a40 	vmov.f32	s16, s0
 8002efa:	4842      	ldr	r0, [pc, #264]	; (8003004 <_Z14EfficiencyCalcv+0x11c>)
 8002efc:	f007 fca0 	bl	800a840 <_ZNK11SolarGators11DataModules11OrionBMSRx214getPackCurrentEv>
 8002f00:	eef0 7a40 	vmov.f32	s15, s0
 8002f04:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002f08:	4b3f      	ldr	r3, [pc, #252]	; (8003008 <_Z14EfficiencyCalcv+0x120>)
 8002f0a:	edc3 7a00 	vstr	s15, [r3]

	// calculate energy used in watt-hours
//	float debug1 = ((prev_watts + current_watts) / 2);
//	float debug2 = (float)(xTaskGetTickCount() - prev_time);
//	float debug3 = float(debug2 / (1000 * 3600));
	energy_used += ((prev_watts + current_watts) / 2) *
 8002f0e:	4b3f      	ldr	r3, [pc, #252]	; (800300c <_Z14EfficiencyCalcv+0x124>)
 8002f10:	ed93 7a00 	vldr	s14, [r3]
 8002f14:	4b3c      	ldr	r3, [pc, #240]	; (8003008 <_Z14EfficiencyCalcv+0x120>)
 8002f16:	edd3 7a00 	vldr	s15, [r3]
 8002f1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f1e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002f22:	ee87 8a87 	vdiv.f32	s16, s15, s14
			(((float)(xTaskGetTickCount() - prev_time)) / (float(1000 * 3600)));
 8002f26:	f013 f9cf 	bl	80162c8 <xTaskGetTickCount>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4b38      	ldr	r3, [pc, #224]	; (8003010 <_Z14EfficiencyCalcv+0x128>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	ee07 3a90 	vmov	s15, r3
 8002f36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f3a:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003014 <_Z14EfficiencyCalcv+0x12c>
 8002f3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
	energy_used += ((prev_watts + current_watts) / 2) *
 8002f42:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002f46:	4b34      	ldr	r3, [pc, #208]	; (8003018 <_Z14EfficiencyCalcv+0x130>)
 8002f48:	edd3 7a00 	vldr	s15, [r3]
 8002f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f50:	4b31      	ldr	r3, [pc, #196]	; (8003018 <_Z14EfficiencyCalcv+0x130>)
 8002f52:	edc3 7a00 	vstr	s15, [r3]

	// calculate the distance traveled since function has last run
	miles_driven += ((prev_speed + speed) / 2) *
 8002f56:	4b31      	ldr	r3, [pc, #196]	; (800301c <_Z14EfficiencyCalcv+0x134>)
 8002f58:	ed93 7a00 	vldr	s14, [r3]
 8002f5c:	4b30      	ldr	r3, [pc, #192]	; (8003020 <_Z14EfficiencyCalcv+0x138>)
 8002f5e:	edd3 7a00 	vldr	s15, [r3]
 8002f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f66:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002f6a:	ee87 8a87 	vdiv.f32	s16, s15, s14
			(((float)(xTaskGetTickCount() - prev_time)) / (float(1000 * 3600)));
 8002f6e:	f013 f9ab 	bl	80162c8 <xTaskGetTickCount>
 8002f72:	4602      	mov	r2, r0
 8002f74:	4b26      	ldr	r3, [pc, #152]	; (8003010 <_Z14EfficiencyCalcv+0x128>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	ee07 3a90 	vmov	s15, r3
 8002f7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f82:	eddf 6a24 	vldr	s13, [pc, #144]	; 8003014 <_Z14EfficiencyCalcv+0x12c>
 8002f86:	eec7 7a26 	vdiv.f32	s15, s14, s13
	miles_driven += ((prev_speed + speed) / 2) *
 8002f8a:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002f8e:	4b25      	ldr	r3, [pc, #148]	; (8003024 <_Z14EfficiencyCalcv+0x13c>)
 8002f90:	edd3 7a00 	vldr	s15, [r3]
 8002f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f98:	4b22      	ldr	r3, [pc, #136]	; (8003024 <_Z14EfficiencyCalcv+0x13c>)
 8002f9a:	edc3 7a00 	vstr	s15, [r3]

	prev_time = xTaskGetTickCount();
 8002f9e:	f013 f993 	bl	80162c8 <xTaskGetTickCount>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	4a1a      	ldr	r2, [pc, #104]	; (8003010 <_Z14EfficiencyCalcv+0x128>)
 8002fa6:	6013      	str	r3, [r2, #0]
	prev_watts = current_watts;
 8002fa8:	4b17      	ldr	r3, [pc, #92]	; (8003008 <_Z14EfficiencyCalcv+0x120>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a17      	ldr	r2, [pc, #92]	; (800300c <_Z14EfficiencyCalcv+0x124>)
 8002fae:	6013      	str	r3, [r2, #0]
	prev_speed = speed;
 8002fb0:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <_Z14EfficiencyCalcv+0x138>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a19      	ldr	r2, [pc, #100]	; (800301c <_Z14EfficiencyCalcv+0x134>)
 8002fb6:	6013      	str	r3, [r2, #0]

	if (miles_driven >= 1.0) {
 8002fb8:	4b1a      	ldr	r3, [pc, #104]	; (8003024 <_Z14EfficiencyCalcv+0x13c>)
 8002fba:	edd3 7a00 	vldr	s15, [r3]
 8002fbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fca:	da00      	bge.n	8002fce <_Z14EfficiencyCalcv+0xe6>
		energy_used = 0;
		miles_driven = 0;

	}

}
 8002fcc:	e012      	b.n	8002ff4 <_Z14EfficiencyCalcv+0x10c>
		efficiency = energy_used / miles_driven;
 8002fce:	4b12      	ldr	r3, [pc, #72]	; (8003018 <_Z14EfficiencyCalcv+0x130>)
 8002fd0:	edd3 6a00 	vldr	s13, [r3]
 8002fd4:	4b13      	ldr	r3, [pc, #76]	; (8003024 <_Z14EfficiencyCalcv+0x13c>)
 8002fd6:	ed93 7a00 	vldr	s14, [r3]
 8002fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <_Z14EfficiencyCalcv+0x140>)
 8002fe0:	edc3 7a00 	vstr	s15, [r3]
		energy_used = 0;
 8002fe4:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <_Z14EfficiencyCalcv+0x130>)
 8002fe6:	f04f 0200 	mov.w	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
		miles_driven = 0;
 8002fec:	4b0d      	ldr	r3, [pc, #52]	; (8003024 <_Z14EfficiencyCalcv+0x13c>)
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	ecbd 8b02 	vpop	{d8}
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	200008e0 	.word	0x200008e0
 8003004:	200009e0 	.word	0x200009e0
 8003008:	20004a60 	.word	0x20004a60
 800300c:	20004a58 	.word	0x20004a58
 8003010:	20004a64 	.word	0x20004a64
 8003014:	4a5bba00 	.word	0x4a5bba00
 8003018:	20004a54 	.word	0x20004a54
 800301c:	20004a5c 	.word	0x20004a5c
 8003020:	20003ff0 	.word	0x20003ff0
 8003024:	20004a50 	.word	0x20004a50
 8003028:	20004a68 	.word	0x20004a68

0800302c <_Z14ReadButtonHoldv>:

void ReadButtonHold() {
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0

	while(1) {

		// Check if horn is pressed
		GPIO_PinState horn = HAL_GPIO_ReadPin(BTN7_GPIO_Port, BTN7_Pin);
 8003032:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003036:	4824      	ldr	r0, [pc, #144]	; (80030c8 <_Z14ReadButtonHoldv+0x9c>)
 8003038:	f004 fc32 	bl	80078a0 <HAL_GPIO_ReadPin>
 800303c:	4603      	mov	r3, r0
 800303e:	71fb      	strb	r3, [r7, #7]
		if(horn == GPIO_PIN_SET) {
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d103      	bne.n	800304e <_Z14ReadButtonHoldv+0x22>
			LightsState.EnableHorn();
 8003046:	4821      	ldr	r0, [pc, #132]	; (80030cc <_Z14ReadButtonHoldv+0xa0>)
 8003048:	f009 f82f 	bl	800c0aa <_ZN11SolarGators11DataModules18SteeringController10EnableHornEv>
 800304c:	e002      	b.n	8003054 <_Z14ReadButtonHoldv+0x28>
		} else {
			LightsState.DisableHorn();
 800304e:	481f      	ldr	r0, [pc, #124]	; (80030cc <_Z14ReadButtonHoldv+0xa0>)
 8003050:	f009 f839 	bl	800c0c6 <_ZN11SolarGators11DataModules18SteeringController11DisableHornEv>
		}

		// Check if regen is pressed:
		GPIO_PinState regen = HAL_GPIO_ReadPin(BTN8_GPIO_Port, BTN8_Pin);
 8003054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003058:	481d      	ldr	r0, [pc, #116]	; (80030d0 <_Z14ReadButtonHoldv+0xa4>)
 800305a:	f004 fc21 	bl	80078a0 <HAL_GPIO_ReadPin>
 800305e:	4603      	mov	r3, r0
 8003060:	71bb      	strb	r3, [r7, #6]
		if ((regen == GPIO_PIN_SET) && (BMS_Rx_1.getHighTemp() < CHRG_TEMP_LIM) && (BMS_Rx_4.getPackSoc() < CHRG_SOC_LIM)) {
 8003062:	79bb      	ldrb	r3, [r7, #6]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d11e      	bne.n	80030a6 <_Z14ReadButtonHoldv+0x7a>
 8003068:	481a      	ldr	r0, [pc, #104]	; (80030d4 <_Z14ReadButtonHoldv+0xa8>)
 800306a:	f007 fb2c 	bl	800a6c6 <_ZNK11SolarGators11DataModules11OrionBMSRx111getHighTempEv>
 800306e:	4603      	mov	r3, r0
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003078:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <_Z14ReadButtonHoldv+0xac>)
 800307a:	edd3 7a00 	vldr	s15, [r3]
 800307e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003086:	d50e      	bpl.n	80030a6 <_Z14ReadButtonHoldv+0x7a>
 8003088:	4814      	ldr	r0, [pc, #80]	; (80030dc <_Z14ReadButtonHoldv+0xb0>)
 800308a:	f007 ffcd 	bl	800b028 <_ZNK11SolarGators11DataModules11OrionBMSRx410getPackSocEv>
 800308e:	eeb0 7a40 	vmov.f32	s14, s0
 8003092:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <_Z14ReadButtonHoldv+0xb4>)
 8003094:	edd3 7a00 	vldr	s15, [r3]
 8003098:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800309c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a0:	d501      	bpl.n	80030a6 <_Z14ReadButtonHoldv+0x7a>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <_Z14ReadButtonHoldv+0x7c>
 80030a6:	2300      	movs	r3, #0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d006      	beq.n	80030ba <_Z14ReadButtonHoldv+0x8e>
			LightsState.DisableCruise();
 80030ac:	4807      	ldr	r0, [pc, #28]	; (80030cc <_Z14ReadButtonHoldv+0xa0>)
 80030ae:	f008 ffaa 	bl	800c006 <_ZN11SolarGators11DataModules18SteeringController13DisableCruiseEv>
			LightsState.EnableRegen();
 80030b2:	4806      	ldr	r0, [pc, #24]	; (80030cc <_Z14ReadButtonHoldv+0xa0>)
 80030b4:	f009 f898 	bl	800c1e8 <_ZN11SolarGators11DataModules18SteeringController11EnableRegenEv>
 80030b8:	e002      	b.n	80030c0 <_Z14ReadButtonHoldv+0x94>
		} else {
			LightsState.DisableRegen();
 80030ba:	4804      	ldr	r0, [pc, #16]	; (80030cc <_Z14ReadButtonHoldv+0xa0>)
 80030bc:	f009 f8a7 	bl	800c20e <_ZN11SolarGators11DataModules18SteeringController12DisableRegenEv>
		}

		osDelay(15);
 80030c0:	200f      	movs	r0, #15
 80030c2:	f010 fc84 	bl	80139ce <osDelay>

	}
 80030c6:	e7b4      	b.n	8003032 <_Z14ReadButtonHoldv+0x6>
 80030c8:	40020800 	.word	0x40020800
 80030cc:	20000298 	.word	0x20000298
 80030d0:	40020000 	.word	0x40020000
 80030d4:	20000960 	.word	0x20000960
 80030d8:	20000008 	.word	0x20000008
 80030dc:	20000a60 	.word	0x20000a60
 80030e0:	2000000c 	.word	0x2000000c

080030e4 <_Z13UpdateSignalsv>:

}


void UpdateSignals()
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
	if (LightsState.GetLeftTurnStatus() || LightsState.GetRightTurnStatus() || LightsState.GetHazardsStatus()) {
 80030e8:	4868      	ldr	r0, [pc, #416]	; (800328c <_Z13UpdateSignalsv+0x1a8>)
 80030ea:	f008 f9bb 	bl	800b464 <_ZNK11SolarGators11DataModules8Steering17GetLeftTurnStatusEv>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10b      	bne.n	800310c <_Z13UpdateSignalsv+0x28>
 80030f4:	4865      	ldr	r0, [pc, #404]	; (800328c <_Z13UpdateSignalsv+0x1a8>)
 80030f6:	f008 f9c2 	bl	800b47e <_ZNK11SolarGators11DataModules8Steering18GetRightTurnStatusEv>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d105      	bne.n	800310c <_Z13UpdateSignalsv+0x28>
 8003100:	4862      	ldr	r0, [pc, #392]	; (800328c <_Z13UpdateSignalsv+0x1a8>)
 8003102:	f008 f9c9 	bl	800b498 <_ZNK11SolarGators11DataModules8Steering16GetHazardsStatusEv>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <_Z13UpdateSignalsv+0x2c>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <_Z13UpdateSignalsv+0x2e>
 8003110:	2300      	movs	r3, #0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00b      	beq.n	800312e <_Z13UpdateSignalsv+0x4a>

//		osMutexAcquire(spkrSem, osWaitForever);

		if (indicators_on) {
 8003116:	4b5e      	ldr	r3, [pc, #376]	; (8003290 <_Z13UpdateSignalsv+0x1ac>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <_Z13UpdateSignalsv+0x42>
//			__HAL_TIM_SET_PRESCALER(&htim2, 20);
			indicators_on = false;
 800311e:	4b5c      	ldr	r3, [pc, #368]	; (8003290 <_Z13UpdateSignalsv+0x1ac>)
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
 8003124:	e006      	b.n	8003134 <_Z13UpdateSignalsv+0x50>
		} else {
//			__HAL_TIM_SET_PRESCALER(&htim2, 10);
			indicators_on = true;
 8003126:	4b5a      	ldr	r3, [pc, #360]	; (8003290 <_Z13UpdateSignalsv+0x1ac>)
 8003128:	2201      	movs	r2, #1
 800312a:	701a      	strb	r2, [r3, #0]
 800312c:	e002      	b.n	8003134 <_Z13UpdateSignalsv+0x50>

	} else {
//		osMutexAcquire(spkrSem, osWaitForever);
//		HAL_TIM_Base_Stop(&htim2);
//		__HAL_TIM_SET_PRESCALER(&htim2, 10);
		indicators_on = false;
 800312e:	4b58      	ldr	r3, [pc, #352]	; (8003290 <_Z13UpdateSignalsv+0x1ac>)
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]
//		osMutexRelease(spkrSem);
	}


	// Check if the car has tripped
	if (BMS_Rx_4.isInternalCellCommunicationFault() ||
 8003134:	4857      	ldr	r0, [pc, #348]	; (8003294 <_Z13UpdateSignalsv+0x1b0>)
 8003136:	f007 fee8 	bl	800af0a <_ZNK11SolarGators11DataModules11OrionBMSRx432isInternalCellCommunicationFaultEv>
 800313a:	4603      	mov	r3, r0
		BMS_Rx_4.isInternalHardwareFault() ||
		BMS_Rx_4.isInternalHeatsinkThermistorFault() ||
		BMS_Rx_4.isInternalLogicFault() ||
		BMS_Rx_4.isHighestCellVoltageTooHighFault() ||
		BMS_Rx_4.isLowestCellVoltageTooLowFault() ||
		BMS_Rx_4.isPackTooHotFault() ||
 800313c:	2b00      	cmp	r3, #0
 800313e:	f040 808f 	bne.w	8003260 <_Z13UpdateSignalsv+0x17c>
		BMS_Rx_4.isCellBalancingStuckOffFault() ||
 8003142:	4854      	ldr	r0, [pc, #336]	; (8003294 <_Z13UpdateSignalsv+0x1b0>)
 8003144:	f007 fe52 	bl	800adec <_ZNK11SolarGators11DataModules11OrionBMSRx428isCellBalancingStuckOffFaultEv>
 8003148:	4603      	mov	r3, r0
	if (BMS_Rx_4.isInternalCellCommunicationFault() ||
 800314a:	2b00      	cmp	r3, #0
 800314c:	f040 8088 	bne.w	8003260 <_Z13UpdateSignalsv+0x17c>
		BMS_Rx_4.isWeakCellFault() ||
 8003150:	4850      	ldr	r0, [pc, #320]	; (8003294 <_Z13UpdateSignalsv+0x1b0>)
 8003152:	f007 ff4f 	bl	800aff4 <_ZNK11SolarGators11DataModules11OrionBMSRx415isWeakCellFaultEv>
 8003156:	4603      	mov	r3, r0
		BMS_Rx_4.isCellBalancingStuckOffFault() ||
 8003158:	2b00      	cmp	r3, #0
 800315a:	f040 8081 	bne.w	8003260 <_Z13UpdateSignalsv+0x17c>
		BMS_Rx_4.isLowCellVoltageFault() ||
 800315e:	484d      	ldr	r0, [pc, #308]	; (8003294 <_Z13UpdateSignalsv+0x1b0>)
 8003160:	f007 ff14 	bl	800af8c <_ZNK11SolarGators11DataModules11OrionBMSRx421isLowCellVoltageFaultEv>
 8003164:	4603      	mov	r3, r0
		BMS_Rx_4.isWeakCellFault() ||
 8003166:	2b00      	cmp	r3, #0
 8003168:	d17a      	bne.n	8003260 <_Z13UpdateSignalsv+0x17c>
		BMS_Rx_4.isCellOpenWiringFault() ||
 800316a:	484a      	ldr	r0, [pc, #296]	; (8003294 <_Z13UpdateSignalsv+0x1b0>)
 800316c:	f007 fe58 	bl	800ae20 <_ZNK11SolarGators11DataModules11OrionBMSRx421isCellOpenWiringFaultEv>
 8003170:	4603      	mov	r3, r0
		BMS_Rx_4.isLowCellVoltageFault() ||
 8003172:	2b00      	cmp	r3, #0
 8003174:	d174      	bne.n	8003260 <_Z13UpdateSignalsv+0x17c>
		BMS_Rx_4.isCurrentSensorFault() ||
 8003176:	4847      	ldr	r0, [pc, #284]	; (8003294 <_Z13UpdateSignalsv+0x1b0>)
 8003178:	f007 fe86 	bl	800ae88 <_ZNK11SolarGators11DataModules11OrionBMSRx420isCurrentSensorFaultEv>
 800317c:	4603      	mov	r3, r0
		BMS_Rx_4.isCellOpenWiringFault() ||
 800317e:	2b00      	cmp	r3, #0
 8003180:	d16e      	bne.n	8003260 <_Z13UpdateSignalsv+0x17c>
		BMS_Rx_4.isCellVoltageOver5vFault() ||
 8003182:	4844      	ldr	r0, [pc, #272]	; (8003294 <_Z13UpdateSignalsv+0x1b0>)
 8003184:	f007 fe59 	bl	800ae3a <_ZNK11SolarGators11DataModules11OrionBMSRx424isCellVoltageOver5vFaultEv>
 8003188:	4603      	mov	r3, r0
		BMS_Rx_4.isCurrentSensorFault() ||
 800318a:	2b00      	cmp	r3, #0
 800318c:	d168      	bne.n	8003260 <_Z13UpdateSignalsv+0x17c>
		BMS_Rx_4.isCellBankFault() ||
 800318e:	4841      	ldr	r0, [pc, #260]	; (8003294 <_Z13UpdateSignalsv+0x1b0>)
 8003190:	f007 fe39 	bl	800ae06 <_ZNK11SolarGators11DataModules11OrionBMSRx415isCellBankFaultEv>
 8003194:	4603      	mov	r3, r0
		BMS_Rx_4.isCellVoltageOver5vFault() ||
 8003196:	2b00      	cmp	r3, #0
 8003198:	d162      	bne.n	8003260 <_Z13UpdateSignalsv+0x17c>
		BMS_Rx_4.isWeakPackFault() ||
 800319a:	483e      	ldr	r0, [pc, #248]	; (8003294 <_Z13UpdateSignalsv+0x1b0>)
 800319c:	f007 ff37 	bl	800b00e <_ZNK11SolarGators11DataModules11OrionBMSRx415isWeakPackFaultEv>
 80031a0:	4603      	mov	r3, r0
		BMS_Rx_4.isCellBankFault() ||
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d15c      	bne.n	8003260 <_Z13UpdateSignalsv+0x17c>
		BMS_Rx_4.isFanMonitorFault() ||
 80031a6:	483b      	ldr	r0, [pc, #236]	; (8003294 <_Z13UpdateSignalsv+0x1b0>)
 80031a8:	f007 fe88 	bl	800aebc <_ZNK11SolarGators11DataModules11OrionBMSRx417isFanMonitorFaultEv>
 80031ac:	4603      	mov	r3, r0
		BMS_Rx_4.isWeakPackFault() ||
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d156      	bne.n	8003260 <_Z13UpdateSignalsv+0x17c>
		BMS_Rx_4.isCanCommunicationFault() ||
 80031b2:	4838      	ldr	r0, [pc, #224]	; (8003294 <_Z13UpdateSignalsv+0x1b0>)
 80031b4:	f007 fe0d 	bl	800add2 <_ZNK11SolarGators11DataModules11OrionBMSRx423isCanCommunicationFaultEv>
 80031b8:	4603      	mov	r3, r0
		BMS_Rx_4.isFanMonitorFault() ||
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d150      	bne.n	8003260 <_Z13UpdateSignalsv+0x17c>
		BMS_Rx_4.isRedundantPowerSupplyFault() ||
 80031be:	4835      	ldr	r0, [pc, #212]	; (8003294 <_Z13UpdateSignalsv+0x1b0>)
 80031c0:	f007 ff0b 	bl	800afda <_ZNK11SolarGators11DataModules11OrionBMSRx427isRedundantPowerSupplyFaultEv>
 80031c4:	4603      	mov	r3, r0
		BMS_Rx_4.isCanCommunicationFault() ||
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d14a      	bne.n	8003260 <_Z13UpdateSignalsv+0x17c>
		BMS_Rx_4.isHighVoltageIsolationFault() ||
 80031ca:	4832      	ldr	r0, [pc, #200]	; (8003294 <_Z13UpdateSignalsv+0x1b0>)
 80031cc:	f007 fe83 	bl	800aed6 <_ZNK11SolarGators11DataModules11OrionBMSRx427isHighVoltageIsolationFaultEv>
 80031d0:	4603      	mov	r3, r0
		BMS_Rx_4.isRedundantPowerSupplyFault() ||
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d144      	bne.n	8003260 <_Z13UpdateSignalsv+0x17c>
		BMS_Rx_4.isInvalidInputSupplyVoltageFault() ||
 80031d6:	482f      	ldr	r0, [pc, #188]	; (8003294 <_Z13UpdateSignalsv+0x1b0>)
 80031d8:	f007 fecb 	bl	800af72 <_ZNK11SolarGators11DataModules11OrionBMSRx432isInvalidInputSupplyVoltageFaultEv>
 80031dc:	4603      	mov	r3, r0
		BMS_Rx_4.isHighVoltageIsolationFault() ||
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d13e      	bne.n	8003260 <_Z13UpdateSignalsv+0x17c>
		BMS_Rx_4.isChargeenableRelayFault() ||
 80031e2:	482c      	ldr	r0, [pc, #176]	; (8003294 <_Z13UpdateSignalsv+0x1b0>)
 80031e4:	f007 fe36 	bl	800ae54 <_ZNK11SolarGators11DataModules11OrionBMSRx424isChargeenableRelayFaultEv>
 80031e8:	4603      	mov	r3, r0
		BMS_Rx_4.isInvalidInputSupplyVoltageFault() ||
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d138      	bne.n	8003260 <_Z13UpdateSignalsv+0x17c>
		BMS_Rx_4.isDischargeenableRelayFault() ||
 80031ee:	4829      	ldr	r0, [pc, #164]	; (8003294 <_Z13UpdateSignalsv+0x1b0>)
 80031f0:	f007 fe57 	bl	800aea2 <_ZNK11SolarGators11DataModules11OrionBMSRx427isDischargeenableRelayFaultEv>
 80031f4:	4603      	mov	r3, r0
		BMS_Rx_4.isChargeenableRelayFault() ||
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d132      	bne.n	8003260 <_Z13UpdateSignalsv+0x17c>
		BMS_Rx_4.isChargerSafetyRelayFault() ||
 80031fa:	4826      	ldr	r0, [pc, #152]	; (8003294 <_Z13UpdateSignalsv+0x1b0>)
 80031fc:	f007 fe37 	bl	800ae6e <_ZNK11SolarGators11DataModules11OrionBMSRx425isChargerSafetyRelayFaultEv>
 8003200:	4603      	mov	r3, r0
		BMS_Rx_4.isDischargeenableRelayFault() ||
 8003202:	2b00      	cmp	r3, #0
 8003204:	d12c      	bne.n	8003260 <_Z13UpdateSignalsv+0x17c>
		BMS_Rx_4.isInternalHardwareFault() ||
 8003206:	4823      	ldr	r0, [pc, #140]	; (8003294 <_Z13UpdateSignalsv+0x1b0>)
 8003208:	f007 fe8c 	bl	800af24 <_ZNK11SolarGators11DataModules11OrionBMSRx423isInternalHardwareFaultEv>
 800320c:	4603      	mov	r3, r0
		BMS_Rx_4.isChargerSafetyRelayFault() ||
 800320e:	2b00      	cmp	r3, #0
 8003210:	d126      	bne.n	8003260 <_Z13UpdateSignalsv+0x17c>
		BMS_Rx_4.isInternalHeatsinkThermistorFault() ||
 8003212:	4820      	ldr	r0, [pc, #128]	; (8003294 <_Z13UpdateSignalsv+0x1b0>)
 8003214:	f007 fe93 	bl	800af3e <_ZNK11SolarGators11DataModules11OrionBMSRx433isInternalHeatsinkThermistorFaultEv>
 8003218:	4603      	mov	r3, r0
		BMS_Rx_4.isInternalHardwareFault() ||
 800321a:	2b00      	cmp	r3, #0
 800321c:	d120      	bne.n	8003260 <_Z13UpdateSignalsv+0x17c>
		BMS_Rx_4.isInternalLogicFault() ||
 800321e:	481d      	ldr	r0, [pc, #116]	; (8003294 <_Z13UpdateSignalsv+0x1b0>)
 8003220:	f007 fe9a 	bl	800af58 <_ZNK11SolarGators11DataModules11OrionBMSRx420isInternalLogicFaultEv>
 8003224:	4603      	mov	r3, r0
		BMS_Rx_4.isInternalHeatsinkThermistorFault() ||
 8003226:	2b00      	cmp	r3, #0
 8003228:	d11a      	bne.n	8003260 <_Z13UpdateSignalsv+0x17c>
		BMS_Rx_4.isHighestCellVoltageTooHighFault() ||
 800322a:	481a      	ldr	r0, [pc, #104]	; (8003294 <_Z13UpdateSignalsv+0x1b0>)
 800322c:	f007 fe60 	bl	800aef0 <_ZNK11SolarGators11DataModules11OrionBMSRx432isHighestCellVoltageTooHighFaultEv>
 8003230:	4603      	mov	r3, r0
		BMS_Rx_4.isInternalLogicFault() ||
 8003232:	2b00      	cmp	r3, #0
 8003234:	d114      	bne.n	8003260 <_Z13UpdateSignalsv+0x17c>
		BMS_Rx_4.isLowestCellVoltageTooLowFault() ||
 8003236:	4817      	ldr	r0, [pc, #92]	; (8003294 <_Z13UpdateSignalsv+0x1b0>)
 8003238:	f007 feb5 	bl	800afa6 <_ZNK11SolarGators11DataModules11OrionBMSRx430isLowestCellVoltageTooLowFaultEv>
 800323c:	4603      	mov	r3, r0
		BMS_Rx_4.isHighestCellVoltageTooHighFault() ||
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10e      	bne.n	8003260 <_Z13UpdateSignalsv+0x17c>
		BMS_Rx_4.isPackTooHotFault() ||
 8003242:	4814      	ldr	r0, [pc, #80]	; (8003294 <_Z13UpdateSignalsv+0x1b0>)
 8003244:	f007 febc 	bl	800afc0 <_ZNK11SolarGators11DataModules11OrionBMSRx417isPackTooHotFaultEv>
 8003248:	4603      	mov	r3, r0
		BMS_Rx_4.isLowestCellVoltageTooLowFault() ||
 800324a:	2b00      	cmp	r3, #0
 800324c:	d108      	bne.n	8003260 <_Z13UpdateSignalsv+0x17c>
		(!RLights.getContactorStatus())) {
 800324e:	4812      	ldr	r0, [pc, #72]	; (8003298 <_Z13UpdateSignalsv+0x1b4>)
 8003250:	f008 f838 	bl	800b2c4 <_ZNK11SolarGators11DataModules10RearLights18getContactorStatusEv>
 8003254:	4603      	mov	r3, r0
 8003256:	f083 0301 	eor.w	r3, r3, #1
 800325a:	b2db      	uxtb	r3, r3
		BMS_Rx_4.isPackTooHotFault() ||
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <_Z13UpdateSignalsv+0x180>
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <_Z13UpdateSignalsv+0x182>
 8003264:	2300      	movs	r3, #0
	if (BMS_Rx_4.isInternalCellCommunicationFault() ||
 8003266:	2b00      	cmp	r3, #0
 8003268:	d004      	beq.n	8003274 <_Z13UpdateSignalsv+0x190>

		HAL_GPIO_TogglePin(TRIP_GPIO_Port, TRIP_Pin);
 800326a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800326e:	480b      	ldr	r0, [pc, #44]	; (800329c <_Z13UpdateSignalsv+0x1b8>)
 8003270:	f004 fb47 	bl	8007902 <HAL_GPIO_TogglePin>

	}

	if (FLights.GetBreaksVal()) {
 8003274:	480a      	ldr	r0, [pc, #40]	; (80032a0 <_Z13UpdateSignalsv+0x1bc>)
 8003276:	f006 f9ce 	bl	8009616 <_ZNK11SolarGators11DataModules11FrontLights12GetBreaksValEv>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <_Z13UpdateSignalsv+0x1a2>
		LightsState.DisableCruise();
 8003280:	4802      	ldr	r0, [pc, #8]	; (800328c <_Z13UpdateSignalsv+0x1a8>)
 8003282:	f008 fec0 	bl	800c006 <_ZN11SolarGators11DataModules18SteeringController13DisableCruiseEv>
	}

}
 8003286:	bf00      	nop
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000298 	.word	0x20000298
 8003290:	20003fed 	.word	0x20003fed
 8003294:	20000a60 	.word	0x20000a60
 8003298:	20000d6c 	.word	0x20000d6c
 800329c:	40020000 	.word	0x40020000
 80032a0:	20000c88 	.word	0x20000c88

080032a4 <_ZN3etl6stringILj5EED1Ev>:
  /// A string implementation that uses a fixed size buffer.
  ///\tparam MAX_SIZE_ The maximum number of elements that can be stored.
  ///\ingroup string
  //***************************************************************************
  template <const size_t MAX_SIZE_>
  class string : public istring
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f001 f884 	bl	80043bc <_ZN3etl13ibasic_stringIcED1Ev>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <_Z8UpdateUIv>:

SolarGators::Drivers::ILI9341 Display(ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);

void UpdateUI()
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	ed2d 8b02 	vpush	{d8}
 80032c6:	b0b2      	sub	sp, #200	; 0xc8
 80032c8:	af00      	add	r7, sp, #0
  // HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
  // LCD
  osSemaphoreAcquire(lcdSem, osWaitForever);
 80032ca:	4bc4      	ldr	r3, [pc, #784]	; (80035dc <_Z8UpdateUIv+0x31c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f04f 31ff 	mov.w	r1, #4294967295
 80032d2:	4618      	mov	r0, r3
 80032d4:	f010 fef8 	bl	80140c8 <osSemaphoreAcquire>
  Display.Init();
 80032d8:	48c1      	ldr	r0, [pc, #772]	; (80035e0 <_Z8UpdateUIv+0x320>)
 80032da:	f00b fd33 	bl	800ed44 <_ZN11SolarGators7Drivers7ILI93414InitEv>

  // This will initialize the UI
  SolarGators::Drivers::UI ui(Display);
 80032de:	f107 0318 	add.w	r3, r7, #24
 80032e2:	49bf      	ldr	r1, [pc, #764]	; (80035e0 <_Z8UpdateUIv+0x320>)
 80032e4:	4618      	mov	r0, r3
 80032e6:	f00c fc4b 	bl	800fb80 <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E>
  // Indicate ECO. It is permanently enabled for now.
  ui.SetEco();
 80032ea:	f107 0318 	add.w	r3, r7, #24
 80032ee:	4618      	mov	r0, r3
 80032f0:	f00d f98e 	bl	8010610 <_ZN11SolarGators7Drivers2UI6SetEcoEv>
  osSemaphoreRelease(lcdSem);
 80032f4:	4bb9      	ldr	r3, [pc, #740]	; (80035dc <_Z8UpdateUIv+0x31c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f010 ff37 	bl	801416c <osSemaphoreRelease>

  // Set Format
  static constexpr etl::format_spec format(10,5,1,false,false,false,false,'0');
  while(1)
  {
    etl::string<5> buff;
 80032fe:	463b      	mov	r3, r7
 8003300:	4618      	mov	r0, r3
 8003302:	f001 f8ff 	bl	8004504 <_ZN3etl6stringILj5EEC1Ev>
    // Update Pack Temperature (C)
    etl::to_string(BMS_Rx_1.getHighTemp(), buff, format, false);
 8003306:	48b7      	ldr	r0, [pc, #732]	; (80035e4 <_Z8UpdateUIv+0x324>)
 8003308:	f007 f9dd 	bl	800a6c6 <_ZNK11SolarGators11DataModules11OrionBMSRx111getHighTempEv>
 800330c:	4603      	mov	r3, r0
 800330e:	4618      	mov	r0, r3
 8003310:	4639      	mov	r1, r7
 8003312:	2300      	movs	r3, #0
 8003314:	4ab4      	ldr	r2, [pc, #720]	; (80035e8 <_Z8UpdateUIv+0x328>)
 8003316:	f001 f909 	bl	800452c <_ZN3etl9to_stringIhEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>
	osSemaphoreAcquire(lcdSem, osWaitForever);
 800331a:	4bb0      	ldr	r3, [pc, #704]	; (80035dc <_Z8UpdateUIv+0x31c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f04f 31ff 	mov.w	r1, #4294967295
 8003322:	4618      	mov	r0, r3
 8003324:	f010 fed0 	bl	80140c8 <osSemaphoreAcquire>
	ui.UpdateSquare(0, buff);
 8003328:	463a      	mov	r2, r7
 800332a:	f107 0318 	add.w	r3, r7, #24
 800332e:	2100      	movs	r1, #0
 8003330:	4618      	mov	r0, r3
 8003332:	f00c fd23 	bl	800fd7c <_ZN11SolarGators7Drivers2UI12UpdateSquareEhRN3etl6stringILj5EEE>
	osSemaphoreRelease(lcdSem);
 8003336:	4ba9      	ldr	r3, [pc, #676]	; (80035dc <_Z8UpdateUIv+0x31c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f010 ff16 	bl	801416c <osSemaphoreRelease>

    // Update SOC
    etl::to_string(BMS_Rx_4.getPackSoc(), buff, format, false);
 8003340:	48aa      	ldr	r0, [pc, #680]	; (80035ec <_Z8UpdateUIv+0x32c>)
 8003342:	f007 fe71 	bl	800b028 <_ZNK11SolarGators11DataModules11OrionBMSRx410getPackSocEv>
 8003346:	eef0 7a40 	vmov.f32	s15, s0
 800334a:	463b      	mov	r3, r7
 800334c:	2200      	movs	r2, #0
 800334e:	49a6      	ldr	r1, [pc, #664]	; (80035e8 <_Z8UpdateUIv+0x328>)
 8003350:	4618      	mov	r0, r3
 8003352:	eeb0 0a67 	vmov.f32	s0, s15
 8003356:	f001 f8fe 	bl	8004556 <_ZN3etl9to_stringIfEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>
    osSemaphoreAcquire(lcdSem, osWaitForever);
 800335a:	4ba0      	ldr	r3, [pc, #640]	; (80035dc <_Z8UpdateUIv+0x31c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f04f 31ff 	mov.w	r1, #4294967295
 8003362:	4618      	mov	r0, r3
 8003364:	f010 feb0 	bl	80140c8 <osSemaphoreAcquire>
    ui.UpdateSquare(1, buff);
 8003368:	463a      	mov	r2, r7
 800336a:	f107 0318 	add.w	r3, r7, #24
 800336e:	2101      	movs	r1, #1
 8003370:	4618      	mov	r0, r3
 8003372:	f00c fd03 	bl	800fd7c <_ZN11SolarGators7Drivers2UI12UpdateSquareEhRN3etl6stringILj5EEE>
    osSemaphoreRelease(lcdSem);
 8003376:	4b99      	ldr	r3, [pc, #612]	; (80035dc <_Z8UpdateUIv+0x31c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f010 fef6 	bl	801416c <osSemaphoreRelease>

    // Update Output Power
    etl::to_string((BMS_Rx_0.getPackSumVolt() * BMS_Rx_2.getPackCurrent()), buff, format, false);
 8003380:	489b      	ldr	r0, [pc, #620]	; (80035f0 <_Z8UpdateUIv+0x330>)
 8003382:	f007 f8dd 	bl	800a540 <_ZNK11SolarGators11DataModules11OrionBMSRx014getPackSumVoltEv>
 8003386:	eeb0 8a40 	vmov.f32	s16, s0
 800338a:	489a      	ldr	r0, [pc, #616]	; (80035f4 <_Z8UpdateUIv+0x334>)
 800338c:	f007 fa58 	bl	800a840 <_ZNK11SolarGators11DataModules11OrionBMSRx214getPackCurrentEv>
 8003390:	eef0 7a40 	vmov.f32	s15, s0
 8003394:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003398:	463b      	mov	r3, r7
 800339a:	2200      	movs	r2, #0
 800339c:	4992      	ldr	r1, [pc, #584]	; (80035e8 <_Z8UpdateUIv+0x328>)
 800339e:	4618      	mov	r0, r3
 80033a0:	eeb0 0a67 	vmov.f32	s0, s15
 80033a4:	f001 f8d7 	bl	8004556 <_ZN3etl9to_stringIfEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>
    osSemaphoreAcquire(lcdSem, osWaitForever);
 80033a8:	4b8c      	ldr	r3, [pc, #560]	; (80035dc <_Z8UpdateUIv+0x31c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f04f 31ff 	mov.w	r1, #4294967295
 80033b0:	4618      	mov	r0, r3
 80033b2:	f010 fe89 	bl	80140c8 <osSemaphoreAcquire>
    ui.UpdateSquare(2, buff);
 80033b6:	463a      	mov	r2, r7
 80033b8:	f107 0318 	add.w	r3, r7, #24
 80033bc:	2102      	movs	r1, #2
 80033be:	4618      	mov	r0, r3
 80033c0:	f00c fcdc 	bl	800fd7c <_ZN11SolarGators7Drivers2UI12UpdateSquareEhRN3etl6stringILj5EEE>
    osSemaphoreRelease(lcdSem);
 80033c4:	4b85      	ldr	r3, [pc, #532]	; (80035dc <_Z8UpdateUIv+0x31c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f010 fecf 	bl	801416c <osSemaphoreRelease>

    // Update Current
    etl::to_string(BMS_Rx_2.getPackCurrent(), buff, format, false);
 80033ce:	4889      	ldr	r0, [pc, #548]	; (80035f4 <_Z8UpdateUIv+0x334>)
 80033d0:	f007 fa36 	bl	800a840 <_ZNK11SolarGators11DataModules11OrionBMSRx214getPackCurrentEv>
 80033d4:	eef0 7a40 	vmov.f32	s15, s0
 80033d8:	463b      	mov	r3, r7
 80033da:	2200      	movs	r2, #0
 80033dc:	4982      	ldr	r1, [pc, #520]	; (80035e8 <_Z8UpdateUIv+0x328>)
 80033de:	4618      	mov	r0, r3
 80033e0:	eeb0 0a67 	vmov.f32	s0, s15
 80033e4:	f001 f8b7 	bl	8004556 <_ZN3etl9to_stringIfEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>
    osSemaphoreAcquire(lcdSem, osWaitForever);
 80033e8:	4b7c      	ldr	r3, [pc, #496]	; (80035dc <_Z8UpdateUIv+0x31c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f04f 31ff 	mov.w	r1, #4294967295
 80033f0:	4618      	mov	r0, r3
 80033f2:	f010 fe69 	bl	80140c8 <osSemaphoreAcquire>
    ui.UpdateSquare(3, buff);
 80033f6:	463a      	mov	r2, r7
 80033f8:	f107 0318 	add.w	r3, r7, #24
 80033fc:	2103      	movs	r1, #3
 80033fe:	4618      	mov	r0, r3
 8003400:	f00c fcbc 	bl	800fd7c <_ZN11SolarGators7Drivers2UI12UpdateSquareEhRN3etl6stringILj5EEE>
    osSemaphoreRelease(lcdSem);
 8003404:	4b75      	ldr	r3, [pc, #468]	; (80035dc <_Z8UpdateUIv+0x31c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f010 feaf 	bl	801416c <osSemaphoreRelease>

    // Update Efficiency
    if (efficiency) {
 800340e:	4b7a      	ldr	r3, [pc, #488]	; (80035f8 <_Z8UpdateUIv+0x338>)
 8003410:	edd3 7a00 	vldr	s15, [r3]
 8003414:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800341c:	d01d      	beq.n	800345a <_Z8UpdateUIv+0x19a>
    	etl::to_string(efficiency, buff, format, false);
 800341e:	4b76      	ldr	r3, [pc, #472]	; (80035f8 <_Z8UpdateUIv+0x338>)
 8003420:	edd3 7a00 	vldr	s15, [r3]
 8003424:	463b      	mov	r3, r7
 8003426:	2200      	movs	r2, #0
 8003428:	496f      	ldr	r1, [pc, #444]	; (80035e8 <_Z8UpdateUIv+0x328>)
 800342a:	4618      	mov	r0, r3
 800342c:	eeb0 0a67 	vmov.f32	s0, s15
 8003430:	f001 f891 	bl	8004556 <_ZN3etl9to_stringIfEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>
		osSemaphoreAcquire(lcdSem, osWaitForever);
 8003434:	4b69      	ldr	r3, [pc, #420]	; (80035dc <_Z8UpdateUIv+0x31c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f04f 31ff 	mov.w	r1, #4294967295
 800343c:	4618      	mov	r0, r3
 800343e:	f010 fe43 	bl	80140c8 <osSemaphoreAcquire>
		ui.UpdateSquare(4, buff);
 8003442:	463a      	mov	r2, r7
 8003444:	f107 0318 	add.w	r3, r7, #24
 8003448:	2104      	movs	r1, #4
 800344a:	4618      	mov	r0, r3
 800344c:	f00c fc96 	bl	800fd7c <_ZN11SolarGators7Drivers2UI12UpdateSquareEhRN3etl6stringILj5EEE>
		osSemaphoreRelease(lcdSem);
 8003450:	4b62      	ldr	r3, [pc, #392]	; (80035dc <_Z8UpdateUIv+0x31c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f010 fe89 	bl	801416c <osSemaphoreRelease>
    }

    // Update Solar Power
    float array_power =
    		  (MPPT0_Rx_1.getOutputVoltage() * MPPT0_Rx_1.getOutputCurrent())
 800345a:	4868      	ldr	r0, [pc, #416]	; (80035fc <_Z8UpdateUIv+0x33c>)
 800345c:	f006 ffa4 	bl	800a3a8 <_ZNK11SolarGators11DataModules6Mpptx116getOutputVoltageEv>
 8003460:	eeb0 8a40 	vmov.f32	s16, s0
 8003464:	4865      	ldr	r0, [pc, #404]	; (80035fc <_Z8UpdateUIv+0x33c>)
 8003466:	f006 ffae 	bl	800a3c6 <_ZNK11SolarGators11DataModules6Mpptx116getOutputCurrentEv>
 800346a:	eef0 7a40 	vmov.f32	s15, s0
 800346e:	ee28 8a27 	vmul.f32	s16, s16, s15
			+ (MPPT1_Rx_1.getOutputVoltage() * MPPT1_Rx_1.getOutputCurrent())
 8003472:	4863      	ldr	r0, [pc, #396]	; (8003600 <_Z8UpdateUIv+0x340>)
 8003474:	f006 ff98 	bl	800a3a8 <_ZNK11SolarGators11DataModules6Mpptx116getOutputVoltageEv>
 8003478:	eef0 8a40 	vmov.f32	s17, s0
 800347c:	4860      	ldr	r0, [pc, #384]	; (8003600 <_Z8UpdateUIv+0x340>)
 800347e:	f006 ffa2 	bl	800a3c6 <_ZNK11SolarGators11DataModules6Mpptx116getOutputCurrentEv>
 8003482:	eef0 7a40 	vmov.f32	s15, s0
 8003486:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800348a:	ee38 8a27 	vadd.f32	s16, s16, s15
			+ (MPPT2_Rx_1.getOutputVoltage() * MPPT2_Rx_1.getOutputCurrent());
 800348e:	485d      	ldr	r0, [pc, #372]	; (8003604 <_Z8UpdateUIv+0x344>)
 8003490:	f006 ff8a 	bl	800a3a8 <_ZNK11SolarGators11DataModules6Mpptx116getOutputVoltageEv>
 8003494:	eef0 8a40 	vmov.f32	s17, s0
 8003498:	485a      	ldr	r0, [pc, #360]	; (8003604 <_Z8UpdateUIv+0x344>)
 800349a:	f006 ff94 	bl	800a3c6 <_ZNK11SolarGators11DataModules6Mpptx116getOutputCurrentEv>
 800349e:	eef0 7a40 	vmov.f32	s15, s0
 80034a2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80034a6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80034aa:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
    etl::to_string(array_power, buff, format, false);
 80034ae:	463b      	mov	r3, r7
 80034b0:	2200      	movs	r2, #0
 80034b2:	494d      	ldr	r1, [pc, #308]	; (80035e8 <_Z8UpdateUIv+0x328>)
 80034b4:	4618      	mov	r0, r3
 80034b6:	ed97 0a31 	vldr	s0, [r7, #196]	; 0xc4
 80034ba:	f001 f84c 	bl	8004556 <_ZN3etl9to_stringIfEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>
	osSemaphoreAcquire(lcdSem, osWaitForever);
 80034be:	4b47      	ldr	r3, [pc, #284]	; (80035dc <_Z8UpdateUIv+0x31c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f04f 31ff 	mov.w	r1, #4294967295
 80034c6:	4618      	mov	r0, r3
 80034c8:	f010 fdfe 	bl	80140c8 <osSemaphoreAcquire>
	ui.UpdateSquare(5, buff);
 80034cc:	463a      	mov	r2, r7
 80034ce:	f107 0318 	add.w	r3, r7, #24
 80034d2:	2105      	movs	r1, #5
 80034d4:	4618      	mov	r0, r3
 80034d6:	f00c fc51 	bl	800fd7c <_ZN11SolarGators7Drivers2UI12UpdateSquareEhRN3etl6stringILj5EEE>
	osSemaphoreRelease(lcdSem);
 80034da:	4b40      	ldr	r3, [pc, #256]	; (80035dc <_Z8UpdateUIv+0x31c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f010 fe44 	bl	801416c <osSemaphoreRelease>

    // Update Speed
    speed = Motor_Rx_0.GetMotorRPM() * WHEEL_DIAM_MI * 60;
 80034e4:	4848      	ldr	r0, [pc, #288]	; (8003608 <_Z8UpdateUIv+0x348>)
 80034e6:	f006 fa0f 	bl	8009908 <_ZNK11SolarGators11DataModules10MitsubaRx011GetMotorRPMEv>
 80034ea:	4603      	mov	r3, r0
 80034ec:	ee07 3a90 	vmov	s15, r3
 80034f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034f4:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800360c <_Z8UpdateUIv+0x34c>
 80034f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034fc:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003610 <_Z8UpdateUIv+0x350>
 8003500:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003504:	4b43      	ldr	r3, [pc, #268]	; (8003614 <_Z8UpdateUIv+0x354>)
 8003506:	edc3 7a00 	vstr	s15, [r3]
    osSemaphoreAcquire(lcdSem, osWaitForever);
 800350a:	4b34      	ldr	r3, [pc, #208]	; (80035dc <_Z8UpdateUIv+0x31c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f04f 31ff 	mov.w	r1, #4294967295
 8003512:	4618      	mov	r0, r3
 8003514:	f010 fdd8 	bl	80140c8 <osSemaphoreAcquire>
    ui.UpdateSpeed(speed, LightsState.GetRegen());
 8003518:	4b3e      	ldr	r3, [pc, #248]	; (8003614 <_Z8UpdateUIv+0x354>)
 800351a:	ed93 8a00 	vldr	s16, [r3]
 800351e:	483e      	ldr	r0, [pc, #248]	; (8003618 <_Z8UpdateUIv+0x358>)
 8003520:	f007 ffee 	bl	800b500 <_ZNK11SolarGators11DataModules8Steering8GetRegenEv>
 8003524:	4603      	mov	r3, r0
 8003526:	461a      	mov	r2, r3
 8003528:	f107 0318 	add.w	r3, r7, #24
 800352c:	4611      	mov	r1, r2
 800352e:	eeb0 0a48 	vmov.f32	s0, s16
 8003532:	4618      	mov	r0, r3
 8003534:	f00c fc87 	bl	800fe46 <_ZN11SolarGators7Drivers2UI11UpdateSpeedEfh>
    osSemaphoreRelease(lcdSem);
 8003538:	4b28      	ldr	r3, [pc, #160]	; (80035dc <_Z8UpdateUIv+0x31c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f010 fe15 	bl	801416c <osSemaphoreRelease>
    //draw trip codes
    osSemaphoreAcquire(lcdSem, osWaitForever);
 8003542:	4b26      	ldr	r3, [pc, #152]	; (80035dc <_Z8UpdateUIv+0x31c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f04f 31ff 	mov.w	r1, #4294967295
 800354a:	4618      	mov	r0, r3
 800354c:	f010 fdbc 	bl	80140c8 <osSemaphoreAcquire>
    ui.UpdateMitsubaTrip(&Motor_Rx_2);
 8003550:	f107 0318 	add.w	r3, r7, #24
 8003554:	4931      	ldr	r1, [pc, #196]	; (800361c <_Z8UpdateUIv+0x35c>)
 8003556:	4618      	mov	r0, r3
 8003558:	f00c fdde 	bl	8010118 <_ZN11SolarGators7Drivers2UI17UpdateMitsubaTripEPNS_11DataModules10MitsubaRx2E>
    ui.UpdateBMSTrip(&BMS_Rx_4);
 800355c:	f107 0318 	add.w	r3, r7, #24
 8003560:	4922      	ldr	r1, [pc, #136]	; (80035ec <_Z8UpdateUIv+0x32c>)
 8003562:	4618      	mov	r0, r3
 8003564:	f00c fce0 	bl	800ff28 <_ZN11SolarGators7Drivers2UI13UpdateBMSTripEPNS_11DataModules11OrionBMSRx4E>
    osSemaphoreRelease(lcdSem);
 8003568:	4b1c      	ldr	r3, [pc, #112]	; (80035dc <_Z8UpdateUIv+0x31c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f010 fdfd 	bl	801416c <osSemaphoreRelease>

    // Update Turn Indicators
    if (indicators_on) {
 8003572:	4b2b      	ldr	r3, [pc, #172]	; (8003620 <_Z8UpdateUIv+0x360>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d054      	beq.n	8003624 <_Z8UpdateUIv+0x364>
    	osSemaphoreAcquire(lcdSem, osWaitForever);
 800357a:	4b18      	ldr	r3, [pc, #96]	; (80035dc <_Z8UpdateUIv+0x31c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f04f 31ff 	mov.w	r1, #4294967295
 8003582:	4618      	mov	r0, r3
 8003584:	f010 fda0 	bl	80140c8 <osSemaphoreAcquire>
    	if (LightsState.GetHazardsStatus()) {
 8003588:	4823      	ldr	r0, [pc, #140]	; (8003618 <_Z8UpdateUIv+0x358>)
 800358a:	f007 ff85 	bl	800b498 <_ZNK11SolarGators11DataModules8Steering16GetHazardsStatusEv>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <_Z8UpdateUIv+0x2e0>
    		ui.SetHazards();
 8003594:	f107 0318 	add.w	r3, r7, #24
 8003598:	4618      	mov	r0, r3
 800359a:	f00c feb7 	bl	801030c <_ZN11SolarGators7Drivers2UI10SetHazardsEv>
 800359e:	e016      	b.n	80035ce <_Z8UpdateUIv+0x30e>
    	} else if (LightsState.GetLeftTurnStatus()) {
 80035a0:	481d      	ldr	r0, [pc, #116]	; (8003618 <_Z8UpdateUIv+0x358>)
 80035a2:	f007 ff5f 	bl	800b464 <_ZNK11SolarGators11DataModules8Steering17GetLeftTurnStatusEv>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <_Z8UpdateUIv+0x2f8>
    		ui.SetLeftTurn();
 80035ac:	f107 0318 	add.w	r3, r7, #24
 80035b0:	4618      	mov	r0, r3
 80035b2:	f00c fe75 	bl	80102a0 <_ZN11SolarGators7Drivers2UI11SetLeftTurnEv>
 80035b6:	e00a      	b.n	80035ce <_Z8UpdateUIv+0x30e>
    	} else if (LightsState.GetRightTurnStatus()) {
 80035b8:	4817      	ldr	r0, [pc, #92]	; (8003618 <_Z8UpdateUIv+0x358>)
 80035ba:	f007 ff60 	bl	800b47e <_ZNK11SolarGators11DataModules8Steering18GetRightTurnStatusEv>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d004      	beq.n	80035ce <_Z8UpdateUIv+0x30e>
    		ui.SetRightTurn();
 80035c4:	f107 0318 	add.w	r3, r7, #24
 80035c8:	4618      	mov	r0, r3
 80035ca:	f00c fe83 	bl	80102d4 <_ZN11SolarGators7Drivers2UI12SetRightTurnEv>
    	}
    	osSemaphoreRelease(lcdSem);
 80035ce:	4b03      	ldr	r3, [pc, #12]	; (80035dc <_Z8UpdateUIv+0x31c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f010 fdca 	bl	801416c <osSemaphoreRelease>
 80035d8:	e035      	b.n	8003646 <_Z8UpdateUIv+0x386>
 80035da:	bf00      	nop
 80035dc:	20001678 	.word	0x20001678
 80035e0:	20004a6c 	.word	0x20004a6c
 80035e4:	20000960 	.word	0x20000960
 80035e8:	0801a280 	.word	0x0801a280
 80035ec:	20000a60 	.word	0x20000a60
 80035f0:	200008e0 	.word	0x200008e0
 80035f4:	200009e0 	.word	0x200009e0
 80035f8:	20004a68 	.word	0x20004a68
 80035fc:	20000de8 	.word	0x20000de8
 8003600:	20000e68 	.word	0x20000e68
 8003604:	20000ee8 	.word	0x20000ee8
 8003608:	20000af4 	.word	0x20000af4
 800360c:	3a8e71cf 	.word	0x3a8e71cf
 8003610:	42700000 	.word	0x42700000
 8003614:	20003ff0 	.word	0x20003ff0
 8003618:	20000298 	.word	0x20000298
 800361c:	20000b7c 	.word	0x20000b7c
 8003620:	20003fed 	.word	0x20003fed
    } else {
    	osSemaphoreAcquire(lcdSem, osWaitForever);
 8003624:	4b62      	ldr	r3, [pc, #392]	; (80037b0 <_Z8UpdateUIv+0x4f0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f04f 31ff 	mov.w	r1, #4294967295
 800362c:	4618      	mov	r0, r3
 800362e:	f010 fd4b 	bl	80140c8 <osSemaphoreAcquire>
    	ui.ClearIndicators();
 8003632:	f107 0318 	add.w	r3, r7, #24
 8003636:	4618      	mov	r0, r3
 8003638:	f00c fe0c 	bl	8010254 <_ZN11SolarGators7Drivers2UI15ClearIndicatorsEv>
    	osSemaphoreRelease(lcdSem);
 800363c:	4b5c      	ldr	r3, [pc, #368]	; (80037b0 <_Z8UpdateUIv+0x4f0>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f010 fd93 	bl	801416c <osSemaphoreRelease>
    }

    // Update Headlight Indicator
    if (LightsState.GetHeadlightsStatus()) {
 8003646:	485b      	ldr	r0, [pc, #364]	; (80037b4 <_Z8UpdateUIv+0x4f4>)
 8003648:	f007 ff40 	bl	800b4cc <_ZNK11SolarGators11DataModules8Steering19GetHeadlightsStatusEv>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d011      	beq.n	8003676 <_Z8UpdateUIv+0x3b6>
    	osSemaphoreAcquire(lcdSem, osWaitForever);
 8003652:	4b57      	ldr	r3, [pc, #348]	; (80037b0 <_Z8UpdateUIv+0x4f0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f04f 31ff 	mov.w	r1, #4294967295
 800365a:	4618      	mov	r0, r3
 800365c:	f010 fd34 	bl	80140c8 <osSemaphoreAcquire>
		ui.SetHeadlights();
 8003660:	f107 0318 	add.w	r3, r7, #24
 8003664:	4618      	mov	r0, r3
 8003666:	f00c fe79 	bl	801035c <_ZN11SolarGators7Drivers2UI13SetHeadlightsEv>
		osSemaphoreRelease(lcdSem);
 800366a:	4b51      	ldr	r3, [pc, #324]	; (80037b0 <_Z8UpdateUIv+0x4f0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f010 fd7c 	bl	801416c <osSemaphoreRelease>
 8003674:	e010      	b.n	8003698 <_Z8UpdateUIv+0x3d8>
    } else {
    	osSemaphoreAcquire(lcdSem, osWaitForever);
 8003676:	4b4e      	ldr	r3, [pc, #312]	; (80037b0 <_Z8UpdateUIv+0x4f0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f04f 31ff 	mov.w	r1, #4294967295
 800367e:	4618      	mov	r0, r3
 8003680:	f010 fd22 	bl	80140c8 <osSemaphoreAcquire>
    	ui.ClearHeadlights();
 8003684:	f107 0318 	add.w	r3, r7, #24
 8003688:	4618      	mov	r0, r3
 800368a:	f00c fecf 	bl	801042c <_ZN11SolarGators7Drivers2UI15ClearHeadlightsEv>
    	osSemaphoreRelease(lcdSem);
 800368e:	4b48      	ldr	r3, [pc, #288]	; (80037b0 <_Z8UpdateUIv+0x4f0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f010 fd6a 	bl	801416c <osSemaphoreRelease>
    }

    // Update 12V Batt Monitor
    osSemaphoreAcquire(lcdSem, osWaitForever);
 8003698:	4b45      	ldr	r3, [pc, #276]	; (80037b0 <_Z8UpdateUIv+0x4f0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f04f 31ff 	mov.w	r1, #4294967295
 80036a0:	4618      	mov	r0, r3
 80036a2:	f010 fd11 	bl	80140c8 <osSemaphoreAcquire>
	ui.UpdateSupBat(PowerBoard.GetSupBatVoltage());
 80036a6:	4844      	ldr	r0, [pc, #272]	; (80037b8 <_Z8UpdateUIv+0x4f8>)
 80036a8:	f007 fd2c 	bl	800b104 <_ZN11SolarGators11DataModules10PowerBoard16GetSupBatVoltageEv>
 80036ac:	eef0 7a40 	vmov.f32	s15, s0
 80036b0:	f107 0318 	add.w	r3, r7, #24
 80036b4:	eeb0 0a67 	vmov.f32	s0, s15
 80036b8:	4618      	mov	r0, r3
 80036ba:	f00c ff19 	bl	80104f0 <_ZN11SolarGators7Drivers2UI12UpdateSupBatEf>
	osSemaphoreRelease(lcdSem);
 80036be:	4b3c      	ldr	r3, [pc, #240]	; (80037b0 <_Z8UpdateUIv+0x4f0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f010 fd52 	bl	801416c <osSemaphoreRelease>

	// Update Reverse
	if (LightsState.GetReverseStatus()) {
 80036c8:	483a      	ldr	r0, [pc, #232]	; (80037b4 <_Z8UpdateUIv+0x4f4>)
 80036ca:	f007 ff0c 	bl	800b4e6 <_ZNK11SolarGators11DataModules8Steering16GetReverseStatusEv>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d011      	beq.n	80036f8 <_Z8UpdateUIv+0x438>
		osSemaphoreAcquire(lcdSem, osWaitForever);
 80036d4:	4b36      	ldr	r3, [pc, #216]	; (80037b0 <_Z8UpdateUIv+0x4f0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f04f 31ff 	mov.w	r1, #4294967295
 80036dc:	4618      	mov	r0, r3
 80036de:	f010 fcf3 	bl	80140c8 <osSemaphoreAcquire>
		ui.SetReverse();
 80036e2:	f107 0318 	add.w	r3, r7, #24
 80036e6:	4618      	mov	r0, r3
 80036e8:	f00c ffac 	bl	8010644 <_ZN11SolarGators7Drivers2UI10SetReverseEv>
		osSemaphoreRelease(lcdSem);
 80036ec:	4b30      	ldr	r3, [pc, #192]	; (80037b0 <_Z8UpdateUIv+0x4f0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f010 fd3b 	bl	801416c <osSemaphoreRelease>
 80036f6:	e010      	b.n	800371a <_Z8UpdateUIv+0x45a>
	} else {
		osSemaphoreAcquire(lcdSem, osWaitForever);
 80036f8:	4b2d      	ldr	r3, [pc, #180]	; (80037b0 <_Z8UpdateUIv+0x4f0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003700:	4618      	mov	r0, r3
 8003702:	f010 fce1 	bl	80140c8 <osSemaphoreAcquire>
		ui.ClearReverse();
 8003706:	f107 0318 	add.w	r3, r7, #24
 800370a:	4618      	mov	r0, r3
 800370c:	f00c ffb4 	bl	8010678 <_ZN11SolarGators7Drivers2UI12ClearReverseEv>
		osSemaphoreRelease(lcdSem);
 8003710:	4b27      	ldr	r3, [pc, #156]	; (80037b0 <_Z8UpdateUIv+0x4f0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f010 fd29 	bl	801416c <osSemaphoreRelease>
	}

	// Update Cruise
	if (LightsState.GetCruiseEnabledStatus()) {
 800371a:	4826      	ldr	r0, [pc, #152]	; (80037b4 <_Z8UpdateUIv+0x4f4>)
 800371c:	f007 fec9 	bl	800b4b2 <_ZNK11SolarGators11DataModules8Steering22GetCruiseEnabledStatusEv>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d011      	beq.n	800374a <_Z8UpdateUIv+0x48a>
		osSemaphoreAcquire(lcdSem, osWaitForever);
 8003726:	4b22      	ldr	r3, [pc, #136]	; (80037b0 <_Z8UpdateUIv+0x4f0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f04f 31ff 	mov.w	r1, #4294967295
 800372e:	4618      	mov	r0, r3
 8003730:	f010 fcca 	bl	80140c8 <osSemaphoreAcquire>
		ui.SetCruise();
 8003734:	f107 0318 	add.w	r3, r7, #24
 8003738:	4618      	mov	r0, r3
 800373a:	f00c ffb7 	bl	80106ac <_ZN11SolarGators7Drivers2UI9SetCruiseEv>
		osSemaphoreRelease(lcdSem);
 800373e:	4b1c      	ldr	r3, [pc, #112]	; (80037b0 <_Z8UpdateUIv+0x4f0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f010 fd12 	bl	801416c <osSemaphoreRelease>
 8003748:	e010      	b.n	800376c <_Z8UpdateUIv+0x4ac>
	} else {
		osSemaphoreAcquire(lcdSem, osWaitForever);
 800374a:	4b19      	ldr	r3, [pc, #100]	; (80037b0 <_Z8UpdateUIv+0x4f0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f04f 31ff 	mov.w	r1, #4294967295
 8003752:	4618      	mov	r0, r3
 8003754:	f010 fcb8 	bl	80140c8 <osSemaphoreAcquire>
		ui.ClearCruise();
 8003758:	f107 0318 	add.w	r3, r7, #24
 800375c:	4618      	mov	r0, r3
 800375e:	f00c ffef 	bl	8010740 <_ZN11SolarGators7Drivers2UI11ClearCruiseEv>
		osSemaphoreRelease(lcdSem);
 8003762:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <_Z8UpdateUIv+0x4f0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f010 fd00 	bl	801416c <osSemaphoreRelease>
	}

	// Display external kill switch error
	if (!RLights.getContactorStatus()) {
 800376c:	4813      	ldr	r0, [pc, #76]	; (80037bc <_Z8UpdateUIv+0x4fc>)
 800376e:	f007 fda9 	bl	800b2c4 <_ZNK11SolarGators11DataModules10RearLights18getContactorStatusEv>
 8003772:	4603      	mov	r3, r0
 8003774:	f083 0301 	eor.w	r3, r3, #1
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d010      	beq.n	80037a0 <_Z8UpdateUIv+0x4e0>
		osSemaphoreAcquire(lcdSem, osWaitForever);
 800377e:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <_Z8UpdateUIv+0x4f0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f04f 31ff 	mov.w	r1, #4294967295
 8003786:	4618      	mov	r0, r3
 8003788:	f010 fc9e 	bl	80140c8 <osSemaphoreAcquire>
		ui.SetExternalTrip();
 800378c:	f107 0318 	add.w	r3, r7, #24
 8003790:	4618      	mov	r0, r3
 8003792:	f00d f80f 	bl	80107b4 <_ZN11SolarGators7Drivers2UI15SetExternalTripEv>
		osSemaphoreRelease(lcdSem);
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <_Z8UpdateUIv+0x4f0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f010 fce6 	bl	801416c <osSemaphoreRelease>
	}

    osDelay(40); // Aim for 20hz
 80037a0:	2028      	movs	r0, #40	; 0x28
 80037a2:	f010 f914 	bl	80139ce <osDelay>
    etl::string<5> buff;
 80037a6:	463b      	mov	r3, r7
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff fd7b 	bl	80032a4 <_ZN3etl6stringILj5EED1Ev>
  }
 80037ae:	e5a6      	b.n	80032fe <_Z8UpdateUIv+0x3e>
 80037b0:	20001678 	.word	0x20001678
 80037b4:	20000298 	.word	0x20000298
 80037b8:	20000c08 	.word	0x20000c08
 80037bc:	20000d6c 	.word	0x20000d6c

080037c0 <_Z11SendCanMsgsv>:
}

void SendCanMsgs()
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  //osSemaphoreAcquire(canSem, osWaitForever);
  // Send the lights state
  HAL_IWDG_Refresh(&hiwdg);
 80037c4:	4807      	ldr	r0, [pc, #28]	; (80037e4 <_Z11SendCanMsgsv+0x24>)
 80037c6:	f004 f911 	bl	80079ec <HAL_IWDG_Refresh>
  CANController.Send(&LightsState);
 80037ca:	4907      	ldr	r1, [pc, #28]	; (80037e8 <_Z11SendCanMsgsv+0x28>)
 80037cc:	4807      	ldr	r0, [pc, #28]	; (80037ec <_Z11SendCanMsgsv+0x2c>)
 80037ce:	f00a f9c3 	bl	800db58 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE>
  // Request motor controller data
  McReq.SetRequestAllFrames();
 80037d2:	4807      	ldr	r0, [pc, #28]	; (80037f0 <_Z11SendCanMsgsv+0x30>)
 80037d4:	f005 ffb0 	bl	8009738 <_ZN11SolarGators11DataModules14MitsubaRequest19SetRequestAllFramesEv>
  CANController.Send(&McReq);
 80037d8:	4905      	ldr	r1, [pc, #20]	; (80037f0 <_Z11SendCanMsgsv+0x30>)
 80037da:	4804      	ldr	r0, [pc, #16]	; (80037ec <_Z11SendCanMsgsv+0x2c>)
 80037dc:	f00a f9bc 	bl	800db58 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE>
//  osDelay(2);
//  osSemaphoreRelease(canSem);
}
 80037e0:	bf00      	nop
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	2000019c 	.word	0x2000019c
 80037e8:	20000298 	.word	0x20000298
 80037ec:	20000f68 	.word	0x20000f68
 80037f0:	20000864 	.word	0x20000864

080037f4 <CPP_HandleGPIOInterrupt>:

void CPP_HandleGPIOInterrupt(uint16_t GPIO_Pin)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	80fb      	strh	r3, [r7, #6]
  LightsState.HandlePress(GPIO_Pin);
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	4619      	mov	r1, r3
 8003802:	4803      	ldr	r0, [pc, #12]	; (8003810 <CPP_HandleGPIOInterrupt+0x1c>)
 8003804:	f008 fd50 	bl	800c2a8 <_ZN11SolarGators11DataModules18SteeringController11HandlePressEt>
}
 8003808:	bf00      	nop
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	20000298 	.word	0x20000298

08003814 <_Z16HandleHeadLightsv>:
void HandleEco()
{
  LightsState.ToggleEco();
}
void HandleHeadLights()
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  LightsState.ToggleHeadlights();
 8003818:	4802      	ldr	r0, [pc, #8]	; (8003824 <_Z16HandleHeadLightsv+0x10>)
 800381a:	f008 fc32 	bl	800c082 <_ZN11SolarGators11DataModules18SteeringController16ToggleHeadlightsEv>
}
 800381e:	bf00      	nop
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	20000298 	.word	0x20000298

08003828 <_Z12HandleCruisev>:
void HandleCruise()
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
	// Do not enable cruise if mechanical or regen brakes are active
	if ((!FLights.GetBreaksVal()) && (LightsState.GetRegen() == 0)) {
 800382e:	4813      	ldr	r0, [pc, #76]	; (800387c <_Z12HandleCruisev+0x54>)
 8003830:	f005 fef1 	bl	8009616 <_ZNK11SolarGators11DataModules11FrontLights12GetBreaksValEv>
 8003834:	4603      	mov	r3, r0
 8003836:	f083 0301 	eor.w	r3, r3, #1
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d007      	beq.n	8003850 <_Z12HandleCruisev+0x28>
 8003840:	480f      	ldr	r0, [pc, #60]	; (8003880 <_Z12HandleCruisev+0x58>)
 8003842:	f007 fe5d 	bl	800b500 <_ZNK11SolarGators11DataModules8Steering8GetRegenEv>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <_Z12HandleCruisev+0x28>
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <_Z12HandleCruisev+0x2a>
 8003850:	2300      	movs	r3, #0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00e      	beq.n	8003874 <_Z12HandleCruisev+0x4c>
		uint8_t debug1 = static_cast<uint8_t>(FLights.GetThrottleVal() >> 5);
 8003856:	4809      	ldr	r0, [pc, #36]	; (800387c <_Z12HandleCruisev+0x54>)
 8003858:	f005 fed0 	bl	80095fc <_ZNK11SolarGators11DataModules11FrontLights14GetThrottleValEv>
 800385c:	4603      	mov	r3, r0
 800385e:	095b      	lsrs	r3, r3, #5
 8003860:	b29b      	uxth	r3, r3
 8003862:	71fb      	strb	r3, [r7, #7]
		LightsState.SetCruiseSpeed(debug1);
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	4619      	mov	r1, r3
 8003868:	4805      	ldr	r0, [pc, #20]	; (8003880 <_Z12HandleCruisev+0x58>)
 800386a:	f008 fc74 	bl	800c156 <_ZN11SolarGators11DataModules18SteeringController14SetCruiseSpeedEh>
		LightsState.ToggleCruise();
 800386e:	4804      	ldr	r0, [pc, #16]	; (8003880 <_Z12HandleCruisev+0x58>)
 8003870:	f008 fbd7 	bl	800c022 <_ZN11SolarGators11DataModules18SteeringController12ToggleCruiseEv>
	}
}
 8003874:	bf00      	nop
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	20000c88 	.word	0x20000c88
 8003880:	20000298 	.word	0x20000298

08003884 <_Z13HandleReversev>:
void HandleReverse()
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
	if (speed <= 2.0) {
 8003888:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <_Z13HandleReversev+0x24>)
 800388a:	edd3 7a00 	vldr	s15, [r3]
 800388e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003892:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800389a:	d900      	bls.n	800389e <_Z13HandleReversev+0x1a>
		LightsState.ToggleReverse();
	}
}
 800389c:	e002      	b.n	80038a4 <_Z13HandleReversev+0x20>
		LightsState.ToggleReverse();
 800389e:	4803      	ldr	r0, [pc, #12]	; (80038ac <_Z13HandleReversev+0x28>)
 80038a0:	f008 fce0 	bl	800c264 <_ZN11SolarGators11DataModules18SteeringController13ToggleReverseEv>
}
 80038a4:	bf00      	nop
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	20003ff0 	.word	0x20003ff0
 80038ac:	20000298 	.word	0x20000298

080038b0 <_ZN3etl6stringILj8EED1Ev>:
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 fd7e 	bl	80043bc <_ZN3etl13ibasic_stringIcED1Ev>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <_Z9ProcessSDv>:

void ProcessSD(void) {
 80038cc:	b590      	push	{r4, r7, lr}
 80038ce:	b097      	sub	sp, #92	; 0x5c
 80038d0:	af00      	add	r7, sp, #0

	char nameArray[10] = {'l', 'o', 'g', '0', '0', '.', 't', 'x', 't'};
 80038d2:	4abc      	ldr	r2, [pc, #752]	; (8003bc4 <_Z9ProcessSDv+0x2f8>)
 80038d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80038da:	c303      	stmia	r3!, {r0, r1}
 80038dc:	801a      	strh	r2, [r3, #0]
	uint32_t nums[3];
	char chars[2];

	// Read from flash memory
	Flash_Read_Data(0x08070000 , nums, 2);
 80038de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80038e2:	2202      	movs	r2, #2
 80038e4:	4619      	mov	r1, r3
 80038e6:	48b8      	ldr	r0, [pc, #736]	; (8003bc8 <_Z9ProcessSDv+0x2fc>)
 80038e8:	f7fd fc48 	bl	800117c <Flash_Read_Data>
	chars[0] = (char)nums[0];
 80038ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	chars[1] = (char)nums[1];
 80038f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

	// Update nameArray
	nameArray[3] = nums[1];
 80038fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	nameArray[4] = nums[0];
 8003904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	switch (chars[0]) {
 800390c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003910:	3b30      	subs	r3, #48	; 0x30
 8003912:	2b09      	cmp	r3, #9
 8003914:	d83e      	bhi.n	8003994 <_Z9ProcessSDv+0xc8>
 8003916:	a201      	add	r2, pc, #4	; (adr r2, 800391c <_Z9ProcessSDv+0x50>)
 8003918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391c:	08003945 	.word	0x08003945
 8003920:	0800394d 	.word	0x0800394d
 8003924:	08003955 	.word	0x08003955
 8003928:	0800395d 	.word	0x0800395d
 800392c:	08003965 	.word	0x08003965
 8003930:	0800396d 	.word	0x0800396d
 8003934:	08003975 	.word	0x08003975
 8003938:	0800397d 	.word	0x0800397d
 800393c:	08003985 	.word	0x08003985
 8003940:	0800398d 	.word	0x0800398d
	case '0':
		chars[0] = '1';
 8003944:	2331      	movs	r3, #49	; 0x31
 8003946:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		break;
 800394a:	e02a      	b.n	80039a2 <_Z9ProcessSDv+0xd6>
	case '1':
		chars[0] = '2';
 800394c:	2332      	movs	r3, #50	; 0x32
 800394e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		break;
 8003952:	e026      	b.n	80039a2 <_Z9ProcessSDv+0xd6>
	case '2':
		chars[0] = '3';
 8003954:	2333      	movs	r3, #51	; 0x33
 8003956:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		break;
 800395a:	e022      	b.n	80039a2 <_Z9ProcessSDv+0xd6>
	case '3':
		chars[0] = '4';
 800395c:	2334      	movs	r3, #52	; 0x34
 800395e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		break;
 8003962:	e01e      	b.n	80039a2 <_Z9ProcessSDv+0xd6>
	case '4':
		chars[0] = '5';
 8003964:	2335      	movs	r3, #53	; 0x35
 8003966:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		break;
 800396a:	e01a      	b.n	80039a2 <_Z9ProcessSDv+0xd6>
	case '5':
		chars[0] = '6';
 800396c:	2336      	movs	r3, #54	; 0x36
 800396e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		break;
 8003972:	e016      	b.n	80039a2 <_Z9ProcessSDv+0xd6>
	case '6':
		chars[0] = '7';
 8003974:	2337      	movs	r3, #55	; 0x37
 8003976:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		break;
 800397a:	e012      	b.n	80039a2 <_Z9ProcessSDv+0xd6>
	case '7':
		chars[0] = '8';
 800397c:	2338      	movs	r3, #56	; 0x38
 800397e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		break;
 8003982:	e00e      	b.n	80039a2 <_Z9ProcessSDv+0xd6>
	case '8':
		chars[0] = '9';
 8003984:	2339      	movs	r3, #57	; 0x39
 8003986:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		break;
 800398a:	e00a      	b.n	80039a2 <_Z9ProcessSDv+0xd6>
	case '9':
		chars[0] = '0';
 800398c:	2330      	movs	r3, #48	; 0x30
 800398e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		break;
 8003992:	e006      	b.n	80039a2 <_Z9ProcessSDv+0xd6>
	default:
		// Flash memory is garbage, reinitialize
		chars[0] = '1';
 8003994:	2331      	movs	r3, #49	; 0x31
 8003996:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		chars[1] = '0';
 800399a:	2330      	movs	r3, #48	; 0x30
 800399c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		break;
 80039a0:	bf00      	nop
	}

	if (chars[0] == '0') {
 80039a2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80039a6:	2b30      	cmp	r3, #48	; 0x30
 80039a8:	d148      	bne.n	8003a3c <_Z9ProcessSDv+0x170>
		switch (chars[1]) {
 80039aa:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80039ae:	3b30      	subs	r3, #48	; 0x30
 80039b0:	2b09      	cmp	r3, #9
 80039b2:	d83f      	bhi.n	8003a34 <_Z9ProcessSDv+0x168>
 80039b4:	a201      	add	r2, pc, #4	; (adr r2, 80039bc <_Z9ProcessSDv+0xf0>)
 80039b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ba:	bf00      	nop
 80039bc:	080039e5 	.word	0x080039e5
 80039c0:	080039ed 	.word	0x080039ed
 80039c4:	080039f5 	.word	0x080039f5
 80039c8:	080039fd 	.word	0x080039fd
 80039cc:	08003a05 	.word	0x08003a05
 80039d0:	08003a0d 	.word	0x08003a0d
 80039d4:	08003a15 	.word	0x08003a15
 80039d8:	08003a1d 	.word	0x08003a1d
 80039dc:	08003a25 	.word	0x08003a25
 80039e0:	08003a2d 	.word	0x08003a2d
		case '0':
			chars[1] = '1';
 80039e4:	2331      	movs	r3, #49	; 0x31
 80039e6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			break;
 80039ea:	e027      	b.n	8003a3c <_Z9ProcessSDv+0x170>
		case '1':
			chars[1] = '2';
 80039ec:	2332      	movs	r3, #50	; 0x32
 80039ee:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			break;
 80039f2:	e023      	b.n	8003a3c <_Z9ProcessSDv+0x170>
		case '2':
			chars[1] = '3';
 80039f4:	2333      	movs	r3, #51	; 0x33
 80039f6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			break;
 80039fa:	e01f      	b.n	8003a3c <_Z9ProcessSDv+0x170>
		case '3':
			chars[1] = '4';
 80039fc:	2334      	movs	r3, #52	; 0x34
 80039fe:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			break;
 8003a02:	e01b      	b.n	8003a3c <_Z9ProcessSDv+0x170>
		case '4':
			chars[1] = '5';
 8003a04:	2335      	movs	r3, #53	; 0x35
 8003a06:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			break;
 8003a0a:	e017      	b.n	8003a3c <_Z9ProcessSDv+0x170>
		case '5':
			chars[1] = '6';
 8003a0c:	2336      	movs	r3, #54	; 0x36
 8003a0e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			break;
 8003a12:	e013      	b.n	8003a3c <_Z9ProcessSDv+0x170>
		case '6':
			chars[1] = '7';
 8003a14:	2337      	movs	r3, #55	; 0x37
 8003a16:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			break;
 8003a1a:	e00f      	b.n	8003a3c <_Z9ProcessSDv+0x170>
		case '7':
			chars[1] = '8';
 8003a1c:	2338      	movs	r3, #56	; 0x38
 8003a1e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			break;
 8003a22:	e00b      	b.n	8003a3c <_Z9ProcessSDv+0x170>
		case '8':
			chars[1] = '9';
 8003a24:	2339      	movs	r3, #57	; 0x39
 8003a26:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			break;
 8003a2a:	e007      	b.n	8003a3c <_Z9ProcessSDv+0x170>
		case '9':
			chars[1] = '0';
 8003a2c:	2330      	movs	r3, #48	; 0x30
 8003a2e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			break;
 8003a32:	e003      	b.n	8003a3c <_Z9ProcessSDv+0x170>
		default:
			chars[1] = '0';
 8003a34:	2330      	movs	r3, #48	; 0x30
 8003a36:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			break;
 8003a3a:	bf00      	nop
		}
	}

	// Load next value into flash memory
	nums[0] = (uint32_t)chars[0];
 8003a3c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003a40:	63fb      	str	r3, [r7, #60]	; 0x3c
	nums[1] = (uint32_t)chars[1];
 8003a42:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003a46:	643b      	str	r3, [r7, #64]	; 0x40
	Flash_Write_Data(0x08070000 , (uint32_t *)nums, 2);
 8003a48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	4619      	mov	r1, r3
 8003a50:	485d      	ldr	r0, [pc, #372]	; (8003bc8 <_Z9ProcessSDv+0x2fc>)
 8003a52:	f7fd fb35 	bl	80010c0 <Flash_Write_Data>
//			fresult = (FRESULT)f_putc('0', &fil);
//			fresult = (FRESULT)f_putc('1', &fil);
//			fresult = f_close(&fil);
//			fresult = f_mount(NULL, "", 0);
//		}
	sdInit = true;
 8003a56:	4b5d      	ldr	r3, [pc, #372]	; (8003bcc <_Z9ProcessSDv+0x300>)
 8003a58:	2201      	movs	r2, #1
 8003a5a:	701a      	strb	r2, [r3, #0]
	while(1) {


	//char *ptr = &nameArray[0];

	if (sd_counter < LENGTH) {
 8003a5c:	4b5c      	ldr	r3, [pc, #368]	; (8003bd0 <_Z9ProcessSDv+0x304>)
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	2b31      	cmp	r3, #49	; 0x31
 8003a62:	f200 80e3 	bhi.w	8003c2c <_Z9ProcessSDv+0x360>

		times[sd_counter] = xTaskGetTickCount();
 8003a66:	4b5a      	ldr	r3, [pc, #360]	; (8003bd0 <_Z9ProcessSDv+0x304>)
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	461c      	mov	r4, r3
 8003a6c:	f012 fc2c 	bl	80162c8 <xTaskGetTickCount>
 8003a70:	4603      	mov	r3, r0
 8003a72:	4a58      	ldr	r2, [pc, #352]	; (8003bd4 <_Z9ProcessSDv+0x308>)
 8003a74:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		motorRPMs[sd_counter] = Motor_Rx_0.GetMotorRPM();
 8003a78:	4b55      	ldr	r3, [pc, #340]	; (8003bd0 <_Z9ProcessSDv+0x304>)
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	461c      	mov	r4, r3
 8003a7e:	4856      	ldr	r0, [pc, #344]	; (8003bd8 <_Z9ProcessSDv+0x30c>)
 8003a80:	f005 ff42 	bl	8009908 <_ZNK11SolarGators11DataModules10MitsubaRx011GetMotorRPMEv>
 8003a84:	4603      	mov	r3, r0
 8003a86:	461a      	mov	r2, r3
 8003a88:	4b54      	ldr	r3, [pc, #336]	; (8003bdc <_Z9ProcessSDv+0x310>)
 8003a8a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		motorTemps[sd_counter] = Motor_Rx_0.GetFetTemp();
 8003a8e:	4b50      	ldr	r3, [pc, #320]	; (8003bd0 <_Z9ProcessSDv+0x304>)
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	461c      	mov	r4, r3
 8003a94:	4850      	ldr	r0, [pc, #320]	; (8003bd8 <_Z9ProcessSDv+0x30c>)
 8003a96:	f005 ff25 	bl	80098e4 <_ZNK11SolarGators11DataModules10MitsubaRx010GetFetTempEv>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4b50      	ldr	r3, [pc, #320]	; (8003be0 <_Z9ProcessSDv+0x314>)
 8003aa0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		currents[sd_counter] = BMS_Rx_2.getPackCurrent();
 8003aa4:	4b4a      	ldr	r3, [pc, #296]	; (8003bd0 <_Z9ProcessSDv+0x304>)
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	461c      	mov	r4, r3
 8003aaa:	484e      	ldr	r0, [pc, #312]	; (8003be4 <_Z9ProcessSDv+0x318>)
 8003aac:	f006 fec8 	bl	800a840 <_ZNK11SolarGators11DataModules11OrionBMSRx214getPackCurrentEv>
 8003ab0:	eef0 7a40 	vmov.f32	s15, s0
 8003ab4:	4a4c      	ldr	r2, [pc, #304]	; (8003be8 <_Z9ProcessSDv+0x31c>)
 8003ab6:	00a3      	lsls	r3, r4, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	edc3 7a00 	vstr	s15, [r3]
		battAvgTemps[sd_counter] = BMS_Rx_1.getAvgTemp();
 8003abe:	4b44      	ldr	r3, [pc, #272]	; (8003bd0 <_Z9ProcessSDv+0x304>)
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	461c      	mov	r4, r3
 8003ac4:	4849      	ldr	r0, [pc, #292]	; (8003bec <_Z9ProcessSDv+0x320>)
 8003ac6:	f006 fdf1 	bl	800a6ac <_ZNK11SolarGators11DataModules11OrionBMSRx110getAvgTempEv>
 8003aca:	4603      	mov	r3, r0
 8003acc:	461a      	mov	r2, r3
 8003ace:	4b48      	ldr	r3, [pc, #288]	; (8003bf0 <_Z9ProcessSDv+0x324>)
 8003ad0:	551a      	strb	r2, [r3, r4]
		battHighTemps[sd_counter] = BMS_Rx_1.getHighTemp();
 8003ad2:	4b3f      	ldr	r3, [pc, #252]	; (8003bd0 <_Z9ProcessSDv+0x304>)
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	461c      	mov	r4, r3
 8003ad8:	4844      	ldr	r0, [pc, #272]	; (8003bec <_Z9ProcessSDv+0x320>)
 8003ada:	f006 fdf4 	bl	800a6c6 <_ZNK11SolarGators11DataModules11OrionBMSRx111getHighTempEv>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4b44      	ldr	r3, [pc, #272]	; (8003bf4 <_Z9ProcessSDv+0x328>)
 8003ae4:	551a      	strb	r2, [r3, r4]
		voltages[sd_counter] = BMS_Rx_0.getPackSumVolt();
 8003ae6:	4b3a      	ldr	r3, [pc, #232]	; (8003bd0 <_Z9ProcessSDv+0x304>)
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	461c      	mov	r4, r3
 8003aec:	4842      	ldr	r0, [pc, #264]	; (8003bf8 <_Z9ProcessSDv+0x32c>)
 8003aee:	f006 fd27 	bl	800a540 <_ZNK11SolarGators11DataModules11OrionBMSRx014getPackSumVoltEv>
 8003af2:	eef0 7a40 	vmov.f32	s15, s0
 8003af6:	4a41      	ldr	r2, [pc, #260]	; (8003bfc <_Z9ProcessSDv+0x330>)
 8003af8:	00a3      	lsls	r3, r4, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	edc3 7a00 	vstr	s15, [r3]
		SOCs[sd_counter] = BMS_Rx_4.getPackSoc();
 8003b00:	4b33      	ldr	r3, [pc, #204]	; (8003bd0 <_Z9ProcessSDv+0x304>)
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	461c      	mov	r4, r3
 8003b06:	483e      	ldr	r0, [pc, #248]	; (8003c00 <_Z9ProcessSDv+0x334>)
 8003b08:	f007 fa8e 	bl	800b028 <_ZNK11SolarGators11DataModules11OrionBMSRx410getPackSocEv>
 8003b0c:	eef0 7a40 	vmov.f32	s15, s0
 8003b10:	4a3c      	ldr	r2, [pc, #240]	; (8003c04 <_Z9ProcessSDv+0x338>)
 8003b12:	00a3      	lsls	r3, r4, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	edc3 7a00 	vstr	s15, [r3]
		mppt0_voltages[sd_counter] = MPPT0_Rx_1.getOutputVoltage();
 8003b1a:	4b2d      	ldr	r3, [pc, #180]	; (8003bd0 <_Z9ProcessSDv+0x304>)
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	461c      	mov	r4, r3
 8003b20:	4839      	ldr	r0, [pc, #228]	; (8003c08 <_Z9ProcessSDv+0x33c>)
 8003b22:	f006 fc41 	bl	800a3a8 <_ZNK11SolarGators11DataModules6Mpptx116getOutputVoltageEv>
 8003b26:	eef0 7a40 	vmov.f32	s15, s0
 8003b2a:	4a38      	ldr	r2, [pc, #224]	; (8003c0c <_Z9ProcessSDv+0x340>)
 8003b2c:	00a3      	lsls	r3, r4, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	edc3 7a00 	vstr	s15, [r3]
		mppt1_voltages[sd_counter] = MPPT1_Rx_1.getOutputVoltage();
 8003b34:	4b26      	ldr	r3, [pc, #152]	; (8003bd0 <_Z9ProcessSDv+0x304>)
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	461c      	mov	r4, r3
 8003b3a:	4835      	ldr	r0, [pc, #212]	; (8003c10 <_Z9ProcessSDv+0x344>)
 8003b3c:	f006 fc34 	bl	800a3a8 <_ZNK11SolarGators11DataModules6Mpptx116getOutputVoltageEv>
 8003b40:	eef0 7a40 	vmov.f32	s15, s0
 8003b44:	4a33      	ldr	r2, [pc, #204]	; (8003c14 <_Z9ProcessSDv+0x348>)
 8003b46:	00a3      	lsls	r3, r4, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	edc3 7a00 	vstr	s15, [r3]
		mppt2_voltages[sd_counter] = MPPT2_Rx_1.getOutputVoltage();
 8003b4e:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <_Z9ProcessSDv+0x304>)
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	461c      	mov	r4, r3
 8003b54:	4830      	ldr	r0, [pc, #192]	; (8003c18 <_Z9ProcessSDv+0x34c>)
 8003b56:	f006 fc27 	bl	800a3a8 <_ZNK11SolarGators11DataModules6Mpptx116getOutputVoltageEv>
 8003b5a:	eef0 7a40 	vmov.f32	s15, s0
 8003b5e:	4a2f      	ldr	r2, [pc, #188]	; (8003c1c <_Z9ProcessSDv+0x350>)
 8003b60:	00a3      	lsls	r3, r4, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	edc3 7a00 	vstr	s15, [r3]
		mppt0_currents[sd_counter] = MPPT0_Rx_1.getOutputCurrent();
 8003b68:	4b19      	ldr	r3, [pc, #100]	; (8003bd0 <_Z9ProcessSDv+0x304>)
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	461c      	mov	r4, r3
 8003b6e:	4826      	ldr	r0, [pc, #152]	; (8003c08 <_Z9ProcessSDv+0x33c>)
 8003b70:	f006 fc29 	bl	800a3c6 <_ZNK11SolarGators11DataModules6Mpptx116getOutputCurrentEv>
 8003b74:	eef0 7a40 	vmov.f32	s15, s0
 8003b78:	4a29      	ldr	r2, [pc, #164]	; (8003c20 <_Z9ProcessSDv+0x354>)
 8003b7a:	00a3      	lsls	r3, r4, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	edc3 7a00 	vstr	s15, [r3]
		mppt1_currents[sd_counter] = MPPT1_Rx_1.getOutputCurrent();
 8003b82:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <_Z9ProcessSDv+0x304>)
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	461c      	mov	r4, r3
 8003b88:	4821      	ldr	r0, [pc, #132]	; (8003c10 <_Z9ProcessSDv+0x344>)
 8003b8a:	f006 fc1c 	bl	800a3c6 <_ZNK11SolarGators11DataModules6Mpptx116getOutputCurrentEv>
 8003b8e:	eef0 7a40 	vmov.f32	s15, s0
 8003b92:	4a24      	ldr	r2, [pc, #144]	; (8003c24 <_Z9ProcessSDv+0x358>)
 8003b94:	00a3      	lsls	r3, r4, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	edc3 7a00 	vstr	s15, [r3]
		mppt2_currents[sd_counter] = MPPT2_Rx_1.getOutputCurrent();
 8003b9c:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <_Z9ProcessSDv+0x304>)
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	461c      	mov	r4, r3
 8003ba2:	481d      	ldr	r0, [pc, #116]	; (8003c18 <_Z9ProcessSDv+0x34c>)
 8003ba4:	f006 fc0f 	bl	800a3c6 <_ZNK11SolarGators11DataModules6Mpptx116getOutputCurrentEv>
 8003ba8:	eef0 7a40 	vmov.f32	s15, s0
 8003bac:	4a1e      	ldr	r2, [pc, #120]	; (8003c28 <_Z9ProcessSDv+0x35c>)
 8003bae:	00a3      	lsls	r3, r4, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	edc3 7a00 	vstr	s15, [r3]
		sd_counter++;
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <_Z9ProcessSDv+0x304>)
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <_Z9ProcessSDv+0x304>)
 8003bc0:	801a      	strh	r2, [r3, #0]
 8003bc2:	e383      	b.n	80042cc <_Z9ProcessSDv+0xa00>
 8003bc4:	0801922c 	.word	0x0801922c
 8003bc8:	08070000 	.word	0x08070000
 8003bcc:	20003fec 	.word	0x20003fec
 8003bd0:	20001674 	.word	0x20001674
 8003bd4:	200036ec 	.word	0x200036ec
 8003bd8:	20000af4 	.word	0x20000af4
 8003bdc:	200037b4 	.word	0x200037b4
 8003be0:	20003818 	.word	0x20003818
 8003be4:	200009e0 	.word	0x200009e0
 8003be8:	20003e5c 	.word	0x20003e5c
 8003bec:	20000960 	.word	0x20000960
 8003bf0:	2000387c 	.word	0x2000387c
 8003bf4:	200038b0 	.word	0x200038b0
 8003bf8:	200008e0 	.word	0x200008e0
 8003bfc:	20003d94 	.word	0x20003d94
 8003c00:	20000a60 	.word	0x20000a60
 8003c04:	20003f24 	.word	0x20003f24
 8003c08:	20000de8 	.word	0x20000de8
 8003c0c:	200038e4 	.word	0x200038e4
 8003c10:	20000e68 	.word	0x20000e68
 8003c14:	200039ac 	.word	0x200039ac
 8003c18:	20000ee8 	.word	0x20000ee8
 8003c1c:	20003a74 	.word	0x20003a74
 8003c20:	20003b3c 	.word	0x20003b3c
 8003c24:	20003c04 	.word	0x20003c04
 8003c28:	20003ccc 	.word	0x20003ccc

	} else {

		sd_counter = 0;
 8003c2c:	4b21      	ldr	r3, [pc, #132]	; (8003cb4 <_Z9ProcessSDv+0x3e8>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	801a      	strh	r2, [r3, #0]
		// HAL_GPIO_ReadPin(SD_Detect_GPIO_Port, SD_Detect_Pin) &&
		if (sdInit) {
 8003c32:	4b21      	ldr	r3, [pc, #132]	; (8003cb8 <_Z9ProcessSDv+0x3ec>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 8348 	beq.w	80042cc <_Z9ProcessSDv+0xa00>

			osSemaphoreAcquire(lcdSem, osWaitForever);
 8003c3c:	4b1f      	ldr	r3, [pc, #124]	; (8003cbc <_Z9ProcessSDv+0x3f0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f04f 31ff 	mov.w	r1, #4294967295
 8003c44:	4618      	mov	r0, r3
 8003c46:	f010 fa3f 	bl	80140c8 <osSemaphoreAcquire>
			Display.Reset();
 8003c4a:	481d      	ldr	r0, [pc, #116]	; (8003cc0 <_Z9ProcessSDv+0x3f4>)
 8003c4c:	f00b f858 	bl	800ed00 <_ZN11SolarGators7Drivers7ILI93415ResetEv>

			fresult = f_mount(&fs, "", 0);
 8003c50:	2200      	movs	r2, #0
 8003c52:	491c      	ldr	r1, [pc, #112]	; (8003cc4 <_Z9ProcessSDv+0x3f8>)
 8003c54:	481c      	ldr	r0, [pc, #112]	; (8003cc8 <_Z9ProcessSDv+0x3fc>)
 8003c56:	f00e fe0f 	bl	8012878 <f_mount>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4b1b      	ldr	r3, [pc, #108]	; (8003ccc <_Z9ProcessSDv+0x400>)
 8003c60:	701a      	strb	r2, [r3, #0]

			if (fresult == FR_OK) {
 8003c62:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <_Z9ProcessSDv+0x400>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f040 8282 	bne.w	8004170 <_Z9ProcessSDv+0x8a4>

				fresult = f_open(&fil, nameArray, FA_OPEN_ALWAYS | FA_WRITE);
 8003c6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c70:	2212      	movs	r2, #18
 8003c72:	4619      	mov	r1, r3
 8003c74:	4816      	ldr	r0, [pc, #88]	; (8003cd0 <_Z9ProcessSDv+0x404>)
 8003c76:	f00e fe45 	bl	8012904 <f_open>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <_Z9ProcessSDv+0x400>)
 8003c80:	701a      	strb	r2, [r3, #0]

				fresult = f_lseek(&fil, fil.fptr);
 8003c82:	4b13      	ldr	r3, [pc, #76]	; (8003cd0 <_Z9ProcessSDv+0x404>)
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	4619      	mov	r1, r3
 8003c88:	4811      	ldr	r0, [pc, #68]	; (8003cd0 <_Z9ProcessSDv+0x404>)
 8003c8a:	f00f fa43 	bl	8013114 <f_lseek>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	461a      	mov	r2, r3
 8003c92:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <_Z9ProcessSDv+0x400>)
 8003c94:	701a      	strb	r2, [r3, #0]

				if (fil_addr) {
 8003c96:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <_Z9ProcessSDv+0x408>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d01c      	beq.n	8003cd8 <_Z9ProcessSDv+0x40c>
					fresult = f_lseek(&fil, fil_addr);
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <_Z9ProcessSDv+0x408>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	480a      	ldr	r0, [pc, #40]	; (8003cd0 <_Z9ProcessSDv+0x404>)
 8003ca6:	f00f fa35 	bl	8013114 <f_lseek>
 8003caa:	4603      	mov	r3, r0
 8003cac:	461a      	mov	r2, r3
 8003cae:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <_Z9ProcessSDv+0x400>)
 8003cb0:	701a      	strb	r2, [r3, #0]
 8003cb2:	e019      	b.n	8003ce8 <_Z9ProcessSDv+0x41c>
 8003cb4:	20001674 	.word	0x20001674
 8003cb8:	20003fec 	.word	0x20003fec
 8003cbc:	20001678 	.word	0x20001678
 8003cc0:	20004a6c 	.word	0x20004a6c
 8003cc4:	08019154 	.word	0x08019154
 8003cc8:	20001680 	.word	0x20001680
 8003ccc:	200036e4 	.word	0x200036e4
 8003cd0:	200026b4 	.word	0x200026b4
 8003cd4:	200036e8 	.word	0x200036e8
				} else {
					fresult = (FRESULT)f_puts("Time (ms),State of Charge,Battery Voltage,Battery Current,Battery Avg Temp (C),Battery High Temp (C),Motor RPM,Motor Temp,MPPT0 Voltage,MPPT0 Current,MPPT1 Voltage,MPPT1 Current,MPPT2 Voltage,MPPT2 Current\n", &fil);
 8003cd8:	49c8      	ldr	r1, [pc, #800]	; (8003ffc <_Z9ProcessSDv+0x730>)
 8003cda:	48c9      	ldr	r0, [pc, #804]	; (8004000 <_Z9ProcessSDv+0x734>)
 8003cdc:	f00f fcd2 	bl	8013684 <f_puts>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	4bc7      	ldr	r3, [pc, #796]	; (8004004 <_Z9ProcessSDv+0x738>)
 8003ce6:	701a      	strb	r2, [r3, #0]
				}

				static constexpr etl::format_spec format_long(10,8,1,false,false,false,false,'0');
				static constexpr etl::format_spec format(10,5,1,false,false,false,false,'0');
				etl::string<5> buff;
 8003ce8:	f107 0320 	add.w	r3, r7, #32
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fc09 	bl	8004504 <_ZN3etl6stringILj5EEC1Ev>
				etl::string<8> buff_long;
 8003cf2:	1d3b      	adds	r3, r7, #4
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fc44 	bl	8004582 <_ZN3etl6stringILj8EEC1Ev>

				for (int i = 0; i < LENGTH; i++) {
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	657b      	str	r3, [r7, #84]	; 0x54
 8003cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d00:	2b31      	cmp	r3, #49	; 0x31
 8003d02:	f300 8210 	bgt.w	8004126 <_Z9ProcessSDv+0x85a>

					etl::to_string(times[i], buff_long, format_long, false);
 8003d06:	4ac0      	ldr	r2, [pc, #768]	; (8004008 <_Z9ProcessSDv+0x73c>)
 8003d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d0a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003d0e:	1d39      	adds	r1, r7, #4
 8003d10:	2300      	movs	r3, #0
 8003d12:	4abe      	ldr	r2, [pc, #760]	; (800400c <_Z9ProcessSDv+0x740>)
 8003d14:	f000 fc49 	bl	80045aa <_ZN3etl9to_stringImEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>
					fresult = (FRESULT)f_puts(buff_long.c_str(), &fil);
 8003d18:	1d3b      	adds	r3, r7, #4
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fc57 	bl	80045ce <_ZNK3etl13ibasic_stringIcE5c_strEv>
 8003d20:	4603      	mov	r3, r0
 8003d22:	49b6      	ldr	r1, [pc, #728]	; (8003ffc <_Z9ProcessSDv+0x730>)
 8003d24:	4618      	mov	r0, r3
 8003d26:	f00f fcad 	bl	8013684 <f_puts>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	4bb5      	ldr	r3, [pc, #724]	; (8004004 <_Z9ProcessSDv+0x738>)
 8003d30:	701a      	strb	r2, [r3, #0]
					fresult = (FRESULT)f_putc(',', &fil);
 8003d32:	49b2      	ldr	r1, [pc, #712]	; (8003ffc <_Z9ProcessSDv+0x730>)
 8003d34:	202c      	movs	r0, #44	; 0x2c
 8003d36:	f00f fc88 	bl	801364a <f_putc>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	4bb1      	ldr	r3, [pc, #708]	; (8004004 <_Z9ProcessSDv+0x738>)
 8003d40:	701a      	strb	r2, [r3, #0]
					etl::to_string(SOCs[i], buff, format, false);
 8003d42:	4ab3      	ldr	r2, [pc, #716]	; (8004010 <_Z9ProcessSDv+0x744>)
 8003d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	edd3 7a00 	vldr	s15, [r3]
 8003d4e:	f107 0320 	add.w	r3, r7, #32
 8003d52:	2200      	movs	r2, #0
 8003d54:	49af      	ldr	r1, [pc, #700]	; (8004014 <_Z9ProcessSDv+0x748>)
 8003d56:	4618      	mov	r0, r3
 8003d58:	eeb0 0a67 	vmov.f32	s0, s15
 8003d5c:	f000 fbfb 	bl	8004556 <_ZN3etl9to_stringIfEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>
					fresult = (FRESULT)f_puts(buff.c_str(), &fil);
 8003d60:	f107 0320 	add.w	r3, r7, #32
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 fc32 	bl	80045ce <_ZNK3etl13ibasic_stringIcE5c_strEv>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	49a3      	ldr	r1, [pc, #652]	; (8003ffc <_Z9ProcessSDv+0x730>)
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f00f fc88 	bl	8013684 <f_puts>
 8003d74:	4603      	mov	r3, r0
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	4ba2      	ldr	r3, [pc, #648]	; (8004004 <_Z9ProcessSDv+0x738>)
 8003d7a:	701a      	strb	r2, [r3, #0]
					fresult = (FRESULT)f_putc(',', &fil);
 8003d7c:	499f      	ldr	r1, [pc, #636]	; (8003ffc <_Z9ProcessSDv+0x730>)
 8003d7e:	202c      	movs	r0, #44	; 0x2c
 8003d80:	f00f fc63 	bl	801364a <f_putc>
 8003d84:	4603      	mov	r3, r0
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	4b9e      	ldr	r3, [pc, #632]	; (8004004 <_Z9ProcessSDv+0x738>)
 8003d8a:	701a      	strb	r2, [r3, #0]
					etl::to_string(voltages[i], buff, format, false);
 8003d8c:	4aa2      	ldr	r2, [pc, #648]	; (8004018 <_Z9ProcessSDv+0x74c>)
 8003d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	edd3 7a00 	vldr	s15, [r3]
 8003d98:	f107 0320 	add.w	r3, r7, #32
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	499d      	ldr	r1, [pc, #628]	; (8004014 <_Z9ProcessSDv+0x748>)
 8003da0:	4618      	mov	r0, r3
 8003da2:	eeb0 0a67 	vmov.f32	s0, s15
 8003da6:	f000 fbd6 	bl	8004556 <_ZN3etl9to_stringIfEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>
					fresult = (FRESULT)f_puts(buff.c_str(), &fil);
 8003daa:	f107 0320 	add.w	r3, r7, #32
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fc0d 	bl	80045ce <_ZNK3etl13ibasic_stringIcE5c_strEv>
 8003db4:	4603      	mov	r3, r0
 8003db6:	4991      	ldr	r1, [pc, #580]	; (8003ffc <_Z9ProcessSDv+0x730>)
 8003db8:	4618      	mov	r0, r3
 8003dba:	f00f fc63 	bl	8013684 <f_puts>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	4b90      	ldr	r3, [pc, #576]	; (8004004 <_Z9ProcessSDv+0x738>)
 8003dc4:	701a      	strb	r2, [r3, #0]
					fresult = (FRESULT)f_putc(',', &fil);
 8003dc6:	498d      	ldr	r1, [pc, #564]	; (8003ffc <_Z9ProcessSDv+0x730>)
 8003dc8:	202c      	movs	r0, #44	; 0x2c
 8003dca:	f00f fc3e 	bl	801364a <f_putc>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	4b8c      	ldr	r3, [pc, #560]	; (8004004 <_Z9ProcessSDv+0x738>)
 8003dd4:	701a      	strb	r2, [r3, #0]
					etl::to_string(currents[i], buff, format, false);
 8003dd6:	4a91      	ldr	r2, [pc, #580]	; (800401c <_Z9ProcessSDv+0x750>)
 8003dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	edd3 7a00 	vldr	s15, [r3]
 8003de2:	f107 0320 	add.w	r3, r7, #32
 8003de6:	2200      	movs	r2, #0
 8003de8:	498a      	ldr	r1, [pc, #552]	; (8004014 <_Z9ProcessSDv+0x748>)
 8003dea:	4618      	mov	r0, r3
 8003dec:	eeb0 0a67 	vmov.f32	s0, s15
 8003df0:	f000 fbb1 	bl	8004556 <_ZN3etl9to_stringIfEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>
					fresult = (FRESULT)f_puts(buff.c_str(), &fil);
 8003df4:	f107 0320 	add.w	r3, r7, #32
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fbe8 	bl	80045ce <_ZNK3etl13ibasic_stringIcE5c_strEv>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	497e      	ldr	r1, [pc, #504]	; (8003ffc <_Z9ProcessSDv+0x730>)
 8003e02:	4618      	mov	r0, r3
 8003e04:	f00f fc3e 	bl	8013684 <f_puts>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	4b7d      	ldr	r3, [pc, #500]	; (8004004 <_Z9ProcessSDv+0x738>)
 8003e0e:	701a      	strb	r2, [r3, #0]
					fresult = (FRESULT)f_putc(',', &fil);
 8003e10:	497a      	ldr	r1, [pc, #488]	; (8003ffc <_Z9ProcessSDv+0x730>)
 8003e12:	202c      	movs	r0, #44	; 0x2c
 8003e14:	f00f fc19 	bl	801364a <f_putc>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	4b79      	ldr	r3, [pc, #484]	; (8004004 <_Z9ProcessSDv+0x738>)
 8003e1e:	701a      	strb	r2, [r3, #0]
					etl::to_string(battAvgTemps[i], buff, format, false);
 8003e20:	4a7f      	ldr	r2, [pc, #508]	; (8004020 <_Z9ProcessSDv+0x754>)
 8003e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e24:	4413      	add	r3, r2
 8003e26:	7818      	ldrb	r0, [r3, #0]
 8003e28:	f107 0120 	add.w	r1, r7, #32
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	4a79      	ldr	r2, [pc, #484]	; (8004014 <_Z9ProcessSDv+0x748>)
 8003e30:	f000 fb7c 	bl	800452c <_ZN3etl9to_stringIhEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>
					fresult = (FRESULT)f_puts(buff.c_str(), &fil);
 8003e34:	f107 0320 	add.w	r3, r7, #32
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 fbc8 	bl	80045ce <_ZNK3etl13ibasic_stringIcE5c_strEv>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	496e      	ldr	r1, [pc, #440]	; (8003ffc <_Z9ProcessSDv+0x730>)
 8003e42:	4618      	mov	r0, r3
 8003e44:	f00f fc1e 	bl	8013684 <f_puts>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	4b6d      	ldr	r3, [pc, #436]	; (8004004 <_Z9ProcessSDv+0x738>)
 8003e4e:	701a      	strb	r2, [r3, #0]
					fresult = (FRESULT)f_putc(',', &fil);
 8003e50:	496a      	ldr	r1, [pc, #424]	; (8003ffc <_Z9ProcessSDv+0x730>)
 8003e52:	202c      	movs	r0, #44	; 0x2c
 8003e54:	f00f fbf9 	bl	801364a <f_putc>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	4b69      	ldr	r3, [pc, #420]	; (8004004 <_Z9ProcessSDv+0x738>)
 8003e5e:	701a      	strb	r2, [r3, #0]
					etl::to_string(battHighTemps[i], buff, format, false);
 8003e60:	4a70      	ldr	r2, [pc, #448]	; (8004024 <_Z9ProcessSDv+0x758>)
 8003e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e64:	4413      	add	r3, r2
 8003e66:	7818      	ldrb	r0, [r3, #0]
 8003e68:	f107 0120 	add.w	r1, r7, #32
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	4a69      	ldr	r2, [pc, #420]	; (8004014 <_Z9ProcessSDv+0x748>)
 8003e70:	f000 fb5c 	bl	800452c <_ZN3etl9to_stringIhEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>
					fresult = (FRESULT)f_puts(buff.c_str(), &fil);
 8003e74:	f107 0320 	add.w	r3, r7, #32
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 fba8 	bl	80045ce <_ZNK3etl13ibasic_stringIcE5c_strEv>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	495e      	ldr	r1, [pc, #376]	; (8003ffc <_Z9ProcessSDv+0x730>)
 8003e82:	4618      	mov	r0, r3
 8003e84:	f00f fbfe 	bl	8013684 <f_puts>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	4b5d      	ldr	r3, [pc, #372]	; (8004004 <_Z9ProcessSDv+0x738>)
 8003e8e:	701a      	strb	r2, [r3, #0]
					fresult = (FRESULT)f_putc(',', &fil);
 8003e90:	495a      	ldr	r1, [pc, #360]	; (8003ffc <_Z9ProcessSDv+0x730>)
 8003e92:	202c      	movs	r0, #44	; 0x2c
 8003e94:	f00f fbd9 	bl	801364a <f_putc>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	4b59      	ldr	r3, [pc, #356]	; (8004004 <_Z9ProcessSDv+0x738>)
 8003e9e:	701a      	strb	r2, [r3, #0]
					etl::to_string(motorRPMs[i], buff, format, false);
 8003ea0:	4a61      	ldr	r2, [pc, #388]	; (8004028 <_Z9ProcessSDv+0x75c>)
 8003ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ea4:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8003ea8:	f107 0120 	add.w	r1, r7, #32
 8003eac:	2300      	movs	r3, #0
 8003eae:	4a59      	ldr	r2, [pc, #356]	; (8004014 <_Z9ProcessSDv+0x748>)
 8003eb0:	f000 fb99 	bl	80045e6 <_ZN3etl9to_stringItEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>
					fresult = (FRESULT)f_puts(buff.c_str(), &fil);
 8003eb4:	f107 0320 	add.w	r3, r7, #32
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fb88 	bl	80045ce <_ZNK3etl13ibasic_stringIcE5c_strEv>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	494e      	ldr	r1, [pc, #312]	; (8003ffc <_Z9ProcessSDv+0x730>)
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f00f fbde 	bl	8013684 <f_puts>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	4b4d      	ldr	r3, [pc, #308]	; (8004004 <_Z9ProcessSDv+0x738>)
 8003ece:	701a      	strb	r2, [r3, #0]
					fresult = (FRESULT)f_putc(',', &fil);
 8003ed0:	494a      	ldr	r1, [pc, #296]	; (8003ffc <_Z9ProcessSDv+0x730>)
 8003ed2:	202c      	movs	r0, #44	; 0x2c
 8003ed4:	f00f fbb9 	bl	801364a <f_putc>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	4b49      	ldr	r3, [pc, #292]	; (8004004 <_Z9ProcessSDv+0x738>)
 8003ede:	701a      	strb	r2, [r3, #0]
					etl::to_string(motorTemps[i], buff, format, false);
 8003ee0:	4a52      	ldr	r2, [pc, #328]	; (800402c <_Z9ProcessSDv+0x760>)
 8003ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ee4:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8003ee8:	f107 0120 	add.w	r1, r7, #32
 8003eec:	2300      	movs	r3, #0
 8003eee:	4a49      	ldr	r2, [pc, #292]	; (8004014 <_Z9ProcessSDv+0x748>)
 8003ef0:	f000 fb79 	bl	80045e6 <_ZN3etl9to_stringItEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>
					fresult = (FRESULT)f_puts(buff.c_str(), &fil);
 8003ef4:	f107 0320 	add.w	r3, r7, #32
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fb68 	bl	80045ce <_ZNK3etl13ibasic_stringIcE5c_strEv>
 8003efe:	4603      	mov	r3, r0
 8003f00:	493e      	ldr	r1, [pc, #248]	; (8003ffc <_Z9ProcessSDv+0x730>)
 8003f02:	4618      	mov	r0, r3
 8003f04:	f00f fbbe 	bl	8013684 <f_puts>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	4b3d      	ldr	r3, [pc, #244]	; (8004004 <_Z9ProcessSDv+0x738>)
 8003f0e:	701a      	strb	r2, [r3, #0]
					fresult = (FRESULT)f_putc(',', &fil);
 8003f10:	493a      	ldr	r1, [pc, #232]	; (8003ffc <_Z9ProcessSDv+0x730>)
 8003f12:	202c      	movs	r0, #44	; 0x2c
 8003f14:	f00f fb99 	bl	801364a <f_putc>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	4b39      	ldr	r3, [pc, #228]	; (8004004 <_Z9ProcessSDv+0x738>)
 8003f1e:	701a      	strb	r2, [r3, #0]

					etl::to_string(mppt0_voltages[i], buff, format, false);
 8003f20:	4a43      	ldr	r2, [pc, #268]	; (8004030 <_Z9ProcessSDv+0x764>)
 8003f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	edd3 7a00 	vldr	s15, [r3]
 8003f2c:	f107 0320 	add.w	r3, r7, #32
 8003f30:	2200      	movs	r2, #0
 8003f32:	4938      	ldr	r1, [pc, #224]	; (8004014 <_Z9ProcessSDv+0x748>)
 8003f34:	4618      	mov	r0, r3
 8003f36:	eeb0 0a67 	vmov.f32	s0, s15
 8003f3a:	f000 fb0c 	bl	8004556 <_ZN3etl9to_stringIfEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>
					fresult = (FRESULT)f_puts(buff.c_str(), &fil);
 8003f3e:	f107 0320 	add.w	r3, r7, #32
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fb43 	bl	80045ce <_ZNK3etl13ibasic_stringIcE5c_strEv>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	492c      	ldr	r1, [pc, #176]	; (8003ffc <_Z9ProcessSDv+0x730>)
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f00f fb99 	bl	8013684 <f_puts>
 8003f52:	4603      	mov	r3, r0
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	4b2b      	ldr	r3, [pc, #172]	; (8004004 <_Z9ProcessSDv+0x738>)
 8003f58:	701a      	strb	r2, [r3, #0]
					fresult = (FRESULT)f_putc(',', &fil);
 8003f5a:	4928      	ldr	r1, [pc, #160]	; (8003ffc <_Z9ProcessSDv+0x730>)
 8003f5c:	202c      	movs	r0, #44	; 0x2c
 8003f5e:	f00f fb74 	bl	801364a <f_putc>
 8003f62:	4603      	mov	r3, r0
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	4b27      	ldr	r3, [pc, #156]	; (8004004 <_Z9ProcessSDv+0x738>)
 8003f68:	701a      	strb	r2, [r3, #0]
					etl::to_string(mppt0_currents[i], buff, format, false);
 8003f6a:	4a32      	ldr	r2, [pc, #200]	; (8004034 <_Z9ProcessSDv+0x768>)
 8003f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	edd3 7a00 	vldr	s15, [r3]
 8003f76:	f107 0320 	add.w	r3, r7, #32
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	4925      	ldr	r1, [pc, #148]	; (8004014 <_Z9ProcessSDv+0x748>)
 8003f7e:	4618      	mov	r0, r3
 8003f80:	eeb0 0a67 	vmov.f32	s0, s15
 8003f84:	f000 fae7 	bl	8004556 <_ZN3etl9to_stringIfEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>
					fresult = (FRESULT)f_puts(buff.c_str(), &fil);
 8003f88:	f107 0320 	add.w	r3, r7, #32
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fb1e 	bl	80045ce <_ZNK3etl13ibasic_stringIcE5c_strEv>
 8003f92:	4603      	mov	r3, r0
 8003f94:	4919      	ldr	r1, [pc, #100]	; (8003ffc <_Z9ProcessSDv+0x730>)
 8003f96:	4618      	mov	r0, r3
 8003f98:	f00f fb74 	bl	8013684 <f_puts>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	4b18      	ldr	r3, [pc, #96]	; (8004004 <_Z9ProcessSDv+0x738>)
 8003fa2:	701a      	strb	r2, [r3, #0]
					fresult = (FRESULT)f_putc(',', &fil);
 8003fa4:	4915      	ldr	r1, [pc, #84]	; (8003ffc <_Z9ProcessSDv+0x730>)
 8003fa6:	202c      	movs	r0, #44	; 0x2c
 8003fa8:	f00f fb4f 	bl	801364a <f_putc>
 8003fac:	4603      	mov	r3, r0
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	4b14      	ldr	r3, [pc, #80]	; (8004004 <_Z9ProcessSDv+0x738>)
 8003fb2:	701a      	strb	r2, [r3, #0]

					etl::to_string(mppt1_voltages[i], buff, format, false);
 8003fb4:	4a20      	ldr	r2, [pc, #128]	; (8004038 <_Z9ProcessSDv+0x76c>)
 8003fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	edd3 7a00 	vldr	s15, [r3]
 8003fc0:	f107 0320 	add.w	r3, r7, #32
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	4913      	ldr	r1, [pc, #76]	; (8004014 <_Z9ProcessSDv+0x748>)
 8003fc8:	4618      	mov	r0, r3
 8003fca:	eeb0 0a67 	vmov.f32	s0, s15
 8003fce:	f000 fac2 	bl	8004556 <_ZN3etl9to_stringIfEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>
					fresult = (FRESULT)f_puts(buff.c_str(), &fil);
 8003fd2:	f107 0320 	add.w	r3, r7, #32
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 faf9 	bl	80045ce <_ZNK3etl13ibasic_stringIcE5c_strEv>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	4907      	ldr	r1, [pc, #28]	; (8003ffc <_Z9ProcessSDv+0x730>)
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f00f fb4f 	bl	8013684 <f_puts>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	4b06      	ldr	r3, [pc, #24]	; (8004004 <_Z9ProcessSDv+0x738>)
 8003fec:	701a      	strb	r2, [r3, #0]
					fresult = (FRESULT)f_putc(',', &fil);
 8003fee:	4903      	ldr	r1, [pc, #12]	; (8003ffc <_Z9ProcessSDv+0x730>)
 8003ff0:	202c      	movs	r0, #44	; 0x2c
 8003ff2:	f00f fb2a 	bl	801364a <f_putc>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	e01f      	b.n	800403c <_Z9ProcessSDv+0x770>
 8003ffc:	200026b4 	.word	0x200026b4
 8004000:	08019158 	.word	0x08019158
 8004004:	200036e4 	.word	0x200036e4
 8004008:	200036ec 	.word	0x200036ec
 800400c:	0801a288 	.word	0x0801a288
 8004010:	20003f24 	.word	0x20003f24
 8004014:	0801a290 	.word	0x0801a290
 8004018:	20003d94 	.word	0x20003d94
 800401c:	20003e5c 	.word	0x20003e5c
 8004020:	2000387c 	.word	0x2000387c
 8004024:	200038b0 	.word	0x200038b0
 8004028:	200037b4 	.word	0x200037b4
 800402c:	20003818 	.word	0x20003818
 8004030:	200038e4 	.word	0x200038e4
 8004034:	20003b3c 	.word	0x20003b3c
 8004038:	200039ac 	.word	0x200039ac
 800403c:	4ba6      	ldr	r3, [pc, #664]	; (80042d8 <_Z9ProcessSDv+0xa0c>)
 800403e:	701a      	strb	r2, [r3, #0]
					etl::to_string(mppt1_currents[i], buff, format, false);
 8004040:	4aa6      	ldr	r2, [pc, #664]	; (80042dc <_Z9ProcessSDv+0xa10>)
 8004042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	edd3 7a00 	vldr	s15, [r3]
 800404c:	f107 0320 	add.w	r3, r7, #32
 8004050:	2200      	movs	r2, #0
 8004052:	49a3      	ldr	r1, [pc, #652]	; (80042e0 <_Z9ProcessSDv+0xa14>)
 8004054:	4618      	mov	r0, r3
 8004056:	eeb0 0a67 	vmov.f32	s0, s15
 800405a:	f000 fa7c 	bl	8004556 <_ZN3etl9to_stringIfEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>
					fresult = (FRESULT)f_puts(buff.c_str(), &fil);
 800405e:	f107 0320 	add.w	r3, r7, #32
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fab3 	bl	80045ce <_ZNK3etl13ibasic_stringIcE5c_strEv>
 8004068:	4603      	mov	r3, r0
 800406a:	499e      	ldr	r1, [pc, #632]	; (80042e4 <_Z9ProcessSDv+0xa18>)
 800406c:	4618      	mov	r0, r3
 800406e:	f00f fb09 	bl	8013684 <f_puts>
 8004072:	4603      	mov	r3, r0
 8004074:	b2da      	uxtb	r2, r3
 8004076:	4b98      	ldr	r3, [pc, #608]	; (80042d8 <_Z9ProcessSDv+0xa0c>)
 8004078:	701a      	strb	r2, [r3, #0]
					fresult = (FRESULT)f_putc(',', &fil);
 800407a:	499a      	ldr	r1, [pc, #616]	; (80042e4 <_Z9ProcessSDv+0xa18>)
 800407c:	202c      	movs	r0, #44	; 0x2c
 800407e:	f00f fae4 	bl	801364a <f_putc>
 8004082:	4603      	mov	r3, r0
 8004084:	b2da      	uxtb	r2, r3
 8004086:	4b94      	ldr	r3, [pc, #592]	; (80042d8 <_Z9ProcessSDv+0xa0c>)
 8004088:	701a      	strb	r2, [r3, #0]

					etl::to_string(mppt2_voltages[i], buff, format, false);
 800408a:	4a97      	ldr	r2, [pc, #604]	; (80042e8 <_Z9ProcessSDv+0xa1c>)
 800408c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	edd3 7a00 	vldr	s15, [r3]
 8004096:	f107 0320 	add.w	r3, r7, #32
 800409a:	2200      	movs	r2, #0
 800409c:	4990      	ldr	r1, [pc, #576]	; (80042e0 <_Z9ProcessSDv+0xa14>)
 800409e:	4618      	mov	r0, r3
 80040a0:	eeb0 0a67 	vmov.f32	s0, s15
 80040a4:	f000 fa57 	bl	8004556 <_ZN3etl9to_stringIfEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>
					fresult = (FRESULT)f_puts(buff.c_str(), &fil);
 80040a8:	f107 0320 	add.w	r3, r7, #32
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fa8e 	bl	80045ce <_ZNK3etl13ibasic_stringIcE5c_strEv>
 80040b2:	4603      	mov	r3, r0
 80040b4:	498b      	ldr	r1, [pc, #556]	; (80042e4 <_Z9ProcessSDv+0xa18>)
 80040b6:	4618      	mov	r0, r3
 80040b8:	f00f fae4 	bl	8013684 <f_puts>
 80040bc:	4603      	mov	r3, r0
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	4b85      	ldr	r3, [pc, #532]	; (80042d8 <_Z9ProcessSDv+0xa0c>)
 80040c2:	701a      	strb	r2, [r3, #0]
					fresult = (FRESULT)f_putc(',', &fil);
 80040c4:	4987      	ldr	r1, [pc, #540]	; (80042e4 <_Z9ProcessSDv+0xa18>)
 80040c6:	202c      	movs	r0, #44	; 0x2c
 80040c8:	f00f fabf 	bl	801364a <f_putc>
 80040cc:	4603      	mov	r3, r0
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	4b81      	ldr	r3, [pc, #516]	; (80042d8 <_Z9ProcessSDv+0xa0c>)
 80040d2:	701a      	strb	r2, [r3, #0]
					etl::to_string(mppt2_currents[i], buff, format, false);
 80040d4:	4a85      	ldr	r2, [pc, #532]	; (80042ec <_Z9ProcessSDv+0xa20>)
 80040d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	edd3 7a00 	vldr	s15, [r3]
 80040e0:	f107 0320 	add.w	r3, r7, #32
 80040e4:	2200      	movs	r2, #0
 80040e6:	497e      	ldr	r1, [pc, #504]	; (80042e0 <_Z9ProcessSDv+0xa14>)
 80040e8:	4618      	mov	r0, r3
 80040ea:	eeb0 0a67 	vmov.f32	s0, s15
 80040ee:	f000 fa32 	bl	8004556 <_ZN3etl9to_stringIfEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>
					fresult = (FRESULT)f_puts(buff.c_str(), &fil);
 80040f2:	f107 0320 	add.w	r3, r7, #32
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fa69 	bl	80045ce <_ZNK3etl13ibasic_stringIcE5c_strEv>
 80040fc:	4603      	mov	r3, r0
 80040fe:	4979      	ldr	r1, [pc, #484]	; (80042e4 <_Z9ProcessSDv+0xa18>)
 8004100:	4618      	mov	r0, r3
 8004102:	f00f fabf 	bl	8013684 <f_puts>
 8004106:	4603      	mov	r3, r0
 8004108:	b2da      	uxtb	r2, r3
 800410a:	4b73      	ldr	r3, [pc, #460]	; (80042d8 <_Z9ProcessSDv+0xa0c>)
 800410c:	701a      	strb	r2, [r3, #0]
					fresult = (FRESULT)f_puts("\n", &fil);
 800410e:	4975      	ldr	r1, [pc, #468]	; (80042e4 <_Z9ProcessSDv+0xa18>)
 8004110:	4877      	ldr	r0, [pc, #476]	; (80042f0 <_Z9ProcessSDv+0xa24>)
 8004112:	f00f fab7 	bl	8013684 <f_puts>
 8004116:	4603      	mov	r3, r0
 8004118:	b2da      	uxtb	r2, r3
 800411a:	4b6f      	ldr	r3, [pc, #444]	; (80042d8 <_Z9ProcessSDv+0xa0c>)
 800411c:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < LENGTH; i++) {
 800411e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004120:	3301      	adds	r3, #1
 8004122:	657b      	str	r3, [r7, #84]	; 0x54
 8004124:	e5eb      	b.n	8003cfe <_Z9ProcessSDv+0x432>
//
//				fresult = (FRESULT)f_putc(nameArray[2], &fil);
//				fresult = (FRESULT)f_puts("\n", &fil);
				//fresult = (FRESULT)f_puts("hello\n\n", &fil);

				fil_addr = fil.fptr;
 8004126:	4b6f      	ldr	r3, [pc, #444]	; (80042e4 <_Z9ProcessSDv+0xa18>)
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	4a72      	ldr	r2, [pc, #456]	; (80042f4 <_Z9ProcessSDv+0xa28>)
 800412c:	6013      	str	r3, [r2, #0]

				fresult = f_close(&fil);
 800412e:	486d      	ldr	r0, [pc, #436]	; (80042e4 <_Z9ProcessSDv+0xa18>)
 8004130:	f00e ffc6 	bl	80130c0 <f_close>
 8004134:	4603      	mov	r3, r0
 8004136:	461a      	mov	r2, r3
 8004138:	4b67      	ldr	r3, [pc, #412]	; (80042d8 <_Z9ProcessSDv+0xa0c>)
 800413a:	701a      	strb	r2, [r3, #0]

				fresult = f_mount(NULL, "", 0);
 800413c:	2200      	movs	r2, #0
 800413e:	496e      	ldr	r1, [pc, #440]	; (80042f8 <_Z9ProcessSDv+0xa2c>)
 8004140:	2000      	movs	r0, #0
 8004142:	f00e fb99 	bl	8012878 <f_mount>
 8004146:	4603      	mov	r3, r0
 8004148:	461a      	mov	r2, r3
 800414a:	4b63      	ldr	r3, [pc, #396]	; (80042d8 <_Z9ProcessSDv+0xa0c>)
 800414c:	701a      	strb	r2, [r3, #0]

				Display.Resume();
 800414e:	486b      	ldr	r0, [pc, #428]	; (80042fc <_Z9ProcessSDv+0xa30>)
 8004150:	f00a fde7 	bl	800ed22 <_ZN11SolarGators7Drivers7ILI93416ResumeEv>
				osSemaphoreRelease(lcdSem);
 8004154:	4b6a      	ldr	r3, [pc, #424]	; (8004300 <_Z9ProcessSDv+0xa34>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f010 f807 	bl	801416c <osSemaphoreRelease>
				etl::string<8> buff_long;
 800415e:	1d3b      	adds	r3, r7, #4
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff fba5 	bl	80038b0 <_ZN3etl6stringILj8EED1Ev>
				etl::string<5> buff;
 8004166:	f107 0320 	add.w	r3, r7, #32
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff f89a 	bl	80032a4 <_ZN3etl6stringILj5EED1Ev>


		}

		times[sd_counter] = xTaskGetTickCount();
 8004170:	4b64      	ldr	r3, [pc, #400]	; (8004304 <_Z9ProcessSDv+0xa38>)
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	461c      	mov	r4, r3
 8004176:	f012 f8a7 	bl	80162c8 <xTaskGetTickCount>
 800417a:	4603      	mov	r3, r0
 800417c:	4a62      	ldr	r2, [pc, #392]	; (8004308 <_Z9ProcessSDv+0xa3c>)
 800417e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		motorRPMs[sd_counter] = Motor_Rx_0.GetMotorRPM();
 8004182:	4b60      	ldr	r3, [pc, #384]	; (8004304 <_Z9ProcessSDv+0xa38>)
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	461c      	mov	r4, r3
 8004188:	4860      	ldr	r0, [pc, #384]	; (800430c <_Z9ProcessSDv+0xa40>)
 800418a:	f005 fbbd 	bl	8009908 <_ZNK11SolarGators11DataModules10MitsubaRx011GetMotorRPMEv>
 800418e:	4603      	mov	r3, r0
 8004190:	461a      	mov	r2, r3
 8004192:	4b5f      	ldr	r3, [pc, #380]	; (8004310 <_Z9ProcessSDv+0xa44>)
 8004194:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		motorTemps[sd_counter] = Motor_Rx_0.GetFetTemp();
 8004198:	4b5a      	ldr	r3, [pc, #360]	; (8004304 <_Z9ProcessSDv+0xa38>)
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	461c      	mov	r4, r3
 800419e:	485b      	ldr	r0, [pc, #364]	; (800430c <_Z9ProcessSDv+0xa40>)
 80041a0:	f005 fba0 	bl	80098e4 <_ZNK11SolarGators11DataModules10MitsubaRx010GetFetTempEv>
 80041a4:	4603      	mov	r3, r0
 80041a6:	461a      	mov	r2, r3
 80041a8:	4b5a      	ldr	r3, [pc, #360]	; (8004314 <_Z9ProcessSDv+0xa48>)
 80041aa:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		currents[sd_counter] = BMS_Rx_2.getPackCurrent();
 80041ae:	4b55      	ldr	r3, [pc, #340]	; (8004304 <_Z9ProcessSDv+0xa38>)
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	461c      	mov	r4, r3
 80041b4:	4858      	ldr	r0, [pc, #352]	; (8004318 <_Z9ProcessSDv+0xa4c>)
 80041b6:	f006 fb43 	bl	800a840 <_ZNK11SolarGators11DataModules11OrionBMSRx214getPackCurrentEv>
 80041ba:	eef0 7a40 	vmov.f32	s15, s0
 80041be:	4a57      	ldr	r2, [pc, #348]	; (800431c <_Z9ProcessSDv+0xa50>)
 80041c0:	00a3      	lsls	r3, r4, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	edc3 7a00 	vstr	s15, [r3]
		voltages[sd_counter] = BMS_Rx_0.getPackSumVolt();
 80041c8:	4b4e      	ldr	r3, [pc, #312]	; (8004304 <_Z9ProcessSDv+0xa38>)
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	461c      	mov	r4, r3
 80041ce:	4854      	ldr	r0, [pc, #336]	; (8004320 <_Z9ProcessSDv+0xa54>)
 80041d0:	f006 f9b6 	bl	800a540 <_ZNK11SolarGators11DataModules11OrionBMSRx014getPackSumVoltEv>
 80041d4:	eef0 7a40 	vmov.f32	s15, s0
 80041d8:	4a52      	ldr	r2, [pc, #328]	; (8004324 <_Z9ProcessSDv+0xa58>)
 80041da:	00a3      	lsls	r3, r4, #2
 80041dc:	4413      	add	r3, r2
 80041de:	edc3 7a00 	vstr	s15, [r3]
		SOCs[sd_counter] = BMS_Rx_4.getPackSoc();
 80041e2:	4b48      	ldr	r3, [pc, #288]	; (8004304 <_Z9ProcessSDv+0xa38>)
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	461c      	mov	r4, r3
 80041e8:	484f      	ldr	r0, [pc, #316]	; (8004328 <_Z9ProcessSDv+0xa5c>)
 80041ea:	f006 ff1d 	bl	800b028 <_ZNK11SolarGators11DataModules11OrionBMSRx410getPackSocEv>
 80041ee:	eef0 7a40 	vmov.f32	s15, s0
 80041f2:	4a4e      	ldr	r2, [pc, #312]	; (800432c <_Z9ProcessSDv+0xa60>)
 80041f4:	00a3      	lsls	r3, r4, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	edc3 7a00 	vstr	s15, [r3]
		battAvgTemps[sd_counter] = BMS_Rx_1.getAvgTemp();
 80041fc:	4b41      	ldr	r3, [pc, #260]	; (8004304 <_Z9ProcessSDv+0xa38>)
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	461c      	mov	r4, r3
 8004202:	484b      	ldr	r0, [pc, #300]	; (8004330 <_Z9ProcessSDv+0xa64>)
 8004204:	f006 fa52 	bl	800a6ac <_ZNK11SolarGators11DataModules11OrionBMSRx110getAvgTempEv>
 8004208:	4603      	mov	r3, r0
 800420a:	461a      	mov	r2, r3
 800420c:	4b49      	ldr	r3, [pc, #292]	; (8004334 <_Z9ProcessSDv+0xa68>)
 800420e:	551a      	strb	r2, [r3, r4]
		battHighTemps[sd_counter] = BMS_Rx_1.getHighTemp();
 8004210:	4b3c      	ldr	r3, [pc, #240]	; (8004304 <_Z9ProcessSDv+0xa38>)
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	461c      	mov	r4, r3
 8004216:	4846      	ldr	r0, [pc, #280]	; (8004330 <_Z9ProcessSDv+0xa64>)
 8004218:	f006 fa55 	bl	800a6c6 <_ZNK11SolarGators11DataModules11OrionBMSRx111getHighTempEv>
 800421c:	4603      	mov	r3, r0
 800421e:	461a      	mov	r2, r3
 8004220:	4b45      	ldr	r3, [pc, #276]	; (8004338 <_Z9ProcessSDv+0xa6c>)
 8004222:	551a      	strb	r2, [r3, r4]
		mppt0_voltages[sd_counter] = MPPT0_Rx_1.getOutputVoltage();
 8004224:	4b37      	ldr	r3, [pc, #220]	; (8004304 <_Z9ProcessSDv+0xa38>)
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	461c      	mov	r4, r3
 800422a:	4844      	ldr	r0, [pc, #272]	; (800433c <_Z9ProcessSDv+0xa70>)
 800422c:	f006 f8bc 	bl	800a3a8 <_ZNK11SolarGators11DataModules6Mpptx116getOutputVoltageEv>
 8004230:	eef0 7a40 	vmov.f32	s15, s0
 8004234:	4a42      	ldr	r2, [pc, #264]	; (8004340 <_Z9ProcessSDv+0xa74>)
 8004236:	00a3      	lsls	r3, r4, #2
 8004238:	4413      	add	r3, r2
 800423a:	edc3 7a00 	vstr	s15, [r3]
		mppt1_voltages[sd_counter] = MPPT1_Rx_1.getOutputVoltage();
 800423e:	4b31      	ldr	r3, [pc, #196]	; (8004304 <_Z9ProcessSDv+0xa38>)
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	461c      	mov	r4, r3
 8004244:	483f      	ldr	r0, [pc, #252]	; (8004344 <_Z9ProcessSDv+0xa78>)
 8004246:	f006 f8af 	bl	800a3a8 <_ZNK11SolarGators11DataModules6Mpptx116getOutputVoltageEv>
 800424a:	eef0 7a40 	vmov.f32	s15, s0
 800424e:	4a3e      	ldr	r2, [pc, #248]	; (8004348 <_Z9ProcessSDv+0xa7c>)
 8004250:	00a3      	lsls	r3, r4, #2
 8004252:	4413      	add	r3, r2
 8004254:	edc3 7a00 	vstr	s15, [r3]
		mppt2_voltages[sd_counter] = MPPT2_Rx_1.getOutputVoltage();
 8004258:	4b2a      	ldr	r3, [pc, #168]	; (8004304 <_Z9ProcessSDv+0xa38>)
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	461c      	mov	r4, r3
 800425e:	483b      	ldr	r0, [pc, #236]	; (800434c <_Z9ProcessSDv+0xa80>)
 8004260:	f006 f8a2 	bl	800a3a8 <_ZNK11SolarGators11DataModules6Mpptx116getOutputVoltageEv>
 8004264:	eef0 7a40 	vmov.f32	s15, s0
 8004268:	4a1f      	ldr	r2, [pc, #124]	; (80042e8 <_Z9ProcessSDv+0xa1c>)
 800426a:	00a3      	lsls	r3, r4, #2
 800426c:	4413      	add	r3, r2
 800426e:	edc3 7a00 	vstr	s15, [r3]
		mppt0_currents[sd_counter] = MPPT0_Rx_1.getOutputCurrent();
 8004272:	4b24      	ldr	r3, [pc, #144]	; (8004304 <_Z9ProcessSDv+0xa38>)
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	461c      	mov	r4, r3
 8004278:	4830      	ldr	r0, [pc, #192]	; (800433c <_Z9ProcessSDv+0xa70>)
 800427a:	f006 f8a4 	bl	800a3c6 <_ZNK11SolarGators11DataModules6Mpptx116getOutputCurrentEv>
 800427e:	eef0 7a40 	vmov.f32	s15, s0
 8004282:	4a33      	ldr	r2, [pc, #204]	; (8004350 <_Z9ProcessSDv+0xa84>)
 8004284:	00a3      	lsls	r3, r4, #2
 8004286:	4413      	add	r3, r2
 8004288:	edc3 7a00 	vstr	s15, [r3]
		mppt1_currents[sd_counter] = MPPT1_Rx_1.getOutputCurrent();
 800428c:	4b1d      	ldr	r3, [pc, #116]	; (8004304 <_Z9ProcessSDv+0xa38>)
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	461c      	mov	r4, r3
 8004292:	482c      	ldr	r0, [pc, #176]	; (8004344 <_Z9ProcessSDv+0xa78>)
 8004294:	f006 f897 	bl	800a3c6 <_ZNK11SolarGators11DataModules6Mpptx116getOutputCurrentEv>
 8004298:	eef0 7a40 	vmov.f32	s15, s0
 800429c:	4a0f      	ldr	r2, [pc, #60]	; (80042dc <_Z9ProcessSDv+0xa10>)
 800429e:	00a3      	lsls	r3, r4, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	edc3 7a00 	vstr	s15, [r3]
		mppt2_currents[sd_counter] = MPPT2_Rx_1.getOutputCurrent();
 80042a6:	4b17      	ldr	r3, [pc, #92]	; (8004304 <_Z9ProcessSDv+0xa38>)
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	461c      	mov	r4, r3
 80042ac:	4827      	ldr	r0, [pc, #156]	; (800434c <_Z9ProcessSDv+0xa80>)
 80042ae:	f006 f88a 	bl	800a3c6 <_ZNK11SolarGators11DataModules6Mpptx116getOutputCurrentEv>
 80042b2:	eef0 7a40 	vmov.f32	s15, s0
 80042b6:	4a0d      	ldr	r2, [pc, #52]	; (80042ec <_Z9ProcessSDv+0xa20>)
 80042b8:	00a3      	lsls	r3, r4, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	edc3 7a00 	vstr	s15, [r3]
		sd_counter++;
 80042c0:	4b10      	ldr	r3, [pc, #64]	; (8004304 <_Z9ProcessSDv+0xa38>)
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	3301      	adds	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	4b0e      	ldr	r3, [pc, #56]	; (8004304 <_Z9ProcessSDv+0xa38>)
 80042ca:	801a      	strh	r2, [r3, #0]



	}

	osDelay(100);
 80042cc:	2064      	movs	r0, #100	; 0x64
 80042ce:	f00f fb7e 	bl	80139ce <osDelay>

	}
 80042d2:	f7ff bbc3 	b.w	8003a5c <_Z9ProcessSDv+0x190>
 80042d6:	bf00      	nop
 80042d8:	200036e4 	.word	0x200036e4
 80042dc:	20003c04 	.word	0x20003c04
 80042e0:	0801a290 	.word	0x0801a290
 80042e4:	200026b4 	.word	0x200026b4
 80042e8:	20003a74 	.word	0x20003a74
 80042ec:	20003ccc 	.word	0x20003ccc
 80042f0:	08019228 	.word	0x08019228
 80042f4:	200036e8 	.word	0x200036e8
 80042f8:	08019154 	.word	0x08019154
 80042fc:	20004a6c 	.word	0x20004a6c
 8004300:	20001678 	.word	0x20001678
 8004304:	20001674 	.word	0x20001674
 8004308:	200036ec 	.word	0x200036ec
 800430c:	20000af4 	.word	0x20000af4
 8004310:	200037b4 	.word	0x200037b4
 8004314:	20003818 	.word	0x20003818
 8004318:	200009e0 	.word	0x200009e0
 800431c:	20003e5c 	.word	0x20003e5c
 8004320:	200008e0 	.word	0x200008e0
 8004324:	20003d94 	.word	0x20003d94
 8004328:	20000a60 	.word	0x20000a60
 800432c:	20003f24 	.word	0x20003f24
 8004330:	20000960 	.word	0x20000960
 8004334:	2000387c 	.word	0x2000387c
 8004338:	200038b0 	.word	0x200038b0
 800433c:	20000de8 	.word	0x20000de8
 8004340:	200038e4 	.word	0x200038e4
 8004344:	20000e68 	.word	0x20000e68
 8004348:	200039ac 	.word	0x200039ac
 800434c:	20000ee8 	.word	0x20000ee8
 8004350:	20003b3c 	.word	0x20003b3c

08004354 <_ZNK3etl5flagsIhLh255EE4testILh2EEEbv>:
    ETL_CONSTEXPR bool test() const ETL_NOEXCEPT
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
      return (data & pattern) != value_type(0);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	bf14      	ite	ne
 8004368:	2301      	movne	r3, #1
 800436a:	2300      	moveq	r3, #0
 800436c:	b2db      	uxtb	r3, r3
    }
 800436e:	4618      	mov	r0, r3
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <_ZN3etl5flagsIhLh255EEC1Ev>:
    ETL_CONSTEXPR flags() ETL_NOEXCEPT
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
      : data(value_type(0))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	701a      	strb	r2, [r3, #0]
    }
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4618      	mov	r0, r3
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <_ZN3etl13ibasic_stringIcEC1EPcj>:
  protected:

    //*********************************************************************
    /// Constructor.
    //*********************************************************************
    ibasic_string(T* p_buffer_, size_type MAX_SIZE_)
 8004396:	b580      	push	{r7, lr}
 8004398:	b084      	sub	sp, #16
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	607a      	str	r2, [r7, #4]
      : string_base(MAX_SIZE_),
        p_buffer(p_buffer_)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fe fb46 	bl	8002a38 <_ZN3etl11string_baseC1Ej>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	60da      	str	r2, [r3, #12]
    {
    }
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <_ZN3etl13ibasic_stringIcED1Ev>:
  public:
    virtual
#else
  protected:
#endif
    ~ibasic_string()
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
    {
#if ETL_STRING_CLEAR_AFTER_USE_ENABLED
      if (is_secure())
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fe fb28 	bl	8002a1c <_ZNK3etl11string_base9is_secureEv>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <_ZN3etl13ibasic_stringIcED1Ev+0x1c>
      {
        initialise();
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f809 	bl	80043ea <_ZN3etl13ibasic_stringIcE10initialiseEv>
      }
#endif
    }
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe fb71 	bl	8002ac2 <_ZN3etl11string_baseD1Ev>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <_ZN3etl13ibasic_stringIcE10initialiseEv>:
    void initialise()
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
      current_size = 0U;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]
      cleanup();
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f909 	bl	8004610 <_ZN3etl13ibasic_stringIcE7cleanupEv>
      p_buffer[0] = 0;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]
      set_truncated(false);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2100      	movs	r1, #0
 800440a:	4618      	mov	r0, r3
 800440c:	f7fe fb48 	bl	8002aa0 <_ZN3etl11string_base13set_truncatedEb>
    }
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <_ZN3etl8delegateIFvvEE6createIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_20ToggleLeftTurnSignalEvEEEES2_v>:

    //*************************************************************************
    /// Create from instance method (Compile time).
    //*************************************************************************
    template <typename T, T& Instance, TReturn(T::*Method)(TParams...)>
    static ETL_CONSTEXPR14 delegate create()
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
    {
      return delegate(method_instance_stub<T, Instance, Method>);
 8004420:	4903      	ldr	r1, [pc, #12]	; (8004430 <_ZN3etl8delegateIFvvEE6createIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_20ToggleLeftTurnSignalEvEEEES2_v+0x18>)
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f94f 	bl	80046c6 <_ZN3etl8delegateIFvvEEC1EPFvPvE>
    }
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	08004685 	.word	0x08004685

08004434 <_ZN3etl8delegateIFvvEE6createIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_19DecreaseCruiseSpeedEvEEEES2_v>:
    static ETL_CONSTEXPR14 delegate create()
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
      return delegate(method_instance_stub<T, Instance, Method>);
 800443c:	4903      	ldr	r1, [pc, #12]	; (800444c <_ZN3etl8delegateIFvvEE6createIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_19DecreaseCruiseSpeedEvEEEES2_v+0x18>)
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f941 	bl	80046c6 <_ZN3etl8delegateIFvvEEC1EPFvPvE>
    }
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	080046e9 	.word	0x080046e9

08004450 <_ZN3etl8delegateIFvvEE6createIXadL_Z16HandleHeadLightsvEEEES2_v>:
    static ETL_CONSTEXPR14 delegate create()
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
      return delegate(ETL_NULLPTR, function_stub<Method>);
 8004458:	4a04      	ldr	r2, [pc, #16]	; (800446c <_ZN3etl8delegateIFvvEE6createIXadL_Z16HandleHeadLightsvEEEES2_v+0x1c>)
 800445a:	2100      	movs	r1, #0
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f96c 	bl	800473a <_ZN3etl8delegateIFvvEEC1EPvPFvS3_E>
    }
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	08004705 	.word	0x08004705

08004470 <_ZN3etl8delegateIFvvEE6createIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_13ToggleHazardsEvEEEES2_v>:
    static ETL_CONSTEXPR14 delegate create()
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
      return delegate(method_instance_stub<T, Instance, Method>);
 8004478:	4903      	ldr	r1, [pc, #12]	; (8004488 <_ZN3etl8delegateIFvvEE6createIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_13ToggleHazardsEvEEEES2_v+0x18>)
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f923 	bl	80046c6 <_ZN3etl8delegateIFvvEEC1EPFvPvE>
    }
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	08004765 	.word	0x08004765

0800448c <_ZN3etl8delegateIFvvEE6createIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_21ToggleRightTurnSignalEvEEEES2_v>:
    static ETL_CONSTEXPR14 delegate create()
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
      return delegate(method_instance_stub<T, Instance, Method>);
 8004494:	4903      	ldr	r1, [pc, #12]	; (80044a4 <_ZN3etl8delegateIFvvEE6createIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_21ToggleRightTurnSignalEvEEEES2_v+0x18>)
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f915 	bl	80046c6 <_ZN3etl8delegateIFvvEEC1EPFvPvE>
    }
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	08004781 	.word	0x08004781

080044a8 <_ZN3etl8delegateIFvvEE6createIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_19IncreaseCruiseSpeedEvEEEES2_v>:
    static ETL_CONSTEXPR14 delegate create()
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
      return delegate(method_instance_stub<T, Instance, Method>);
 80044b0:	4903      	ldr	r1, [pc, #12]	; (80044c0 <_ZN3etl8delegateIFvvEE6createIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_19IncreaseCruiseSpeedEvEEEES2_v+0x18>)
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f907 	bl	80046c6 <_ZN3etl8delegateIFvvEEC1EPFvPvE>
    }
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	0800479d 	.word	0x0800479d

080044c4 <_ZN3etl8delegateIFvvEE6createIXadL_Z12HandleCruisevEEEES2_v>:
    static ETL_CONSTEXPR14 delegate create()
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
      return delegate(ETL_NULLPTR, function_stub<Method>);
 80044cc:	4a04      	ldr	r2, [pc, #16]	; (80044e0 <_ZN3etl8delegateIFvvEE6createIXadL_Z12HandleCruisevEEEES2_v+0x1c>)
 80044ce:	2100      	movs	r1, #0
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f932 	bl	800473a <_ZN3etl8delegateIFvvEEC1EPvPFvS3_E>
    }
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	080047b9 	.word	0x080047b9

080044e4 <_ZN3etl8delegateIFvvEE6createIXadL_Z13HandleReversevEEEES2_v>:
    static ETL_CONSTEXPR14 delegate create()
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
      return delegate(ETL_NULLPTR, function_stub<Method>);
 80044ec:	4a04      	ldr	r2, [pc, #16]	; (8004500 <_ZN3etl8delegateIFvvEE6createIXadL_Z13HandleReversevEEEES2_v+0x1c>)
 80044ee:	2100      	movs	r1, #0
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f922 	bl	800473a <_ZN3etl8delegateIFvvEEC1EPvPFvS3_E>
    }
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	080047cd 	.word	0x080047cd

08004504 <_ZN3etl6stringILj5EEC1Ev>:
    static ETL_CONSTANT size_t MAX_SIZE = MAX_SIZE_;

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    string()
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
      : istring(reinterpret_cast<value_type*>(&buffer), MAX_SIZE)
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3310      	adds	r3, #16
 8004512:	2205      	movs	r2, #5
 8004514:	4619      	mov	r1, r3
 8004516:	f7ff ff3e 	bl	8004396 <_ZN3etl13ibasic_stringIcEC1EPcj>
    {
      this->initialise();
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff ff64 	bl	80043ea <_ZN3etl13ibasic_stringIcE10initialiseEv>
    }
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4618      	mov	r0, r3
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <_ZN3etl9to_stringIhEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>:
  /// Supplied format spec.
  /// !etl::istring && !etl::string_view
  //***************************************************************************
  template <typename T>
  typename etl::enable_if<!etl::is_same<T, etl::istring>::value && !etl::is_same<T, etl::string_view>::value, const etl::istring&>::type
    to_string(const T value, etl::istring& str, const etl::format_spec& format, bool append = false)
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	607a      	str	r2, [r7, #4]
 8004536:	461a      	mov	r2, r3
 8004538:	4603      	mov	r3, r0
 800453a:	73fb      	strb	r3, [r7, #15]
 800453c:	4613      	mov	r3, r2
 800453e:	73bb      	strb	r3, [r7, #14]
  {
    return private_to_string::to_string(value, str, format, append);
 8004540:	7bbb      	ldrb	r3, [r7, #14]
 8004542:	7bf8      	ldrb	r0, [r7, #15]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	68b9      	ldr	r1, [r7, #8]
 8004548:	f000 f94a 	bl	80047e0 <_ZN3etl17private_to_string9to_stringIhNS_13ibasic_stringIcEEEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuentsrNS_7is_sameIS6_bEE5valuentsrNS_9is_one_ofIS6_xJyEEE5valueERKT0_E4typeES6_RSC_RKNS_17basic_format_specISC_EEb>
 800454c:	4603      	mov	r3, r0
  }
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <_ZN3etl9to_stringIfEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>:
    to_string(const T value, etl::istring& str, const etl::format_spec& format, bool append = false)
 8004556:	b580      	push	{r7, lr}
 8004558:	b084      	sub	sp, #16
 800455a:	af00      	add	r7, sp, #0
 800455c:	ed87 0a03 	vstr	s0, [r7, #12]
 8004560:	60b8      	str	r0, [r7, #8]
 8004562:	6079      	str	r1, [r7, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	70fb      	strb	r3, [r7, #3]
    return private_to_string::to_string(value, str, format, append);
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	461a      	mov	r2, r3
 800456c:	6879      	ldr	r1, [r7, #4]
 800456e:	68b8      	ldr	r0, [r7, #8]
 8004570:	ed97 0a03 	vldr	s0, [r7, #12]
 8004574:	f000 f951 	bl	800481a <_ZN3etl17private_to_string9to_stringIfNS_13ibasic_stringIcEEEENS_9enable_ifIXsrNS_17is_floating_pointIT_EE5valueERKT0_E4typeES6_RS8_RKNS_17basic_format_specIS8_EEb>
 8004578:	4603      	mov	r3, r0
  }
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <_ZN3etl6stringILj8EEC1Ev>:
    string()
 8004582:	b580      	push	{r7, lr}
 8004584:	b082      	sub	sp, #8
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
      : istring(reinterpret_cast<value_type*>(&buffer), MAX_SIZE)
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3310      	adds	r3, #16
 8004590:	2208      	movs	r2, #8
 8004592:	4619      	mov	r1, r3
 8004594:	f7ff feff 	bl	8004396 <_ZN3etl13ibasic_stringIcEC1EPcj>
      this->initialise();
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff ff25 	bl	80043ea <_ZN3etl13ibasic_stringIcE10initialiseEv>
    }
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <_ZN3etl9to_stringImEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>:
    to_string(const T value, etl::istring& str, const etl::format_spec& format, bool append = false)
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	607a      	str	r2, [r7, #4]
 80045b6:	70fb      	strb	r3, [r7, #3]
    return private_to_string::to_string(value, str, format, append);
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 f941 	bl	8004846 <_ZN3etl17private_to_string9to_stringImNS_13ibasic_stringIcEEEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuentsrNS_7is_sameIS6_bEE5valuentsrNS_9is_one_ofIS6_xJyEEE5valueERKT0_E4typeES6_RSC_RKNS_17basic_format_specISC_EEb>
 80045c4:	4603      	mov	r3, r0
  }
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <_ZNK3etl13ibasic_stringIcE5c_strEv>:
    const_pointer c_str() const
 80045ce:	b480      	push	{r7}
 80045d0:	b083      	sub	sp, #12
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
      return p_buffer;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
    }
 80045da:	4618      	mov	r0, r3
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <_ZN3etl9to_stringItEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>:
    to_string(const T value, etl::istring& str, const etl::format_spec& format, bool append = false)
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	461a      	mov	r2, r3
 80045f2:	4603      	mov	r3, r0
 80045f4:	81fb      	strh	r3, [r7, #14]
 80045f6:	4613      	mov	r3, r2
 80045f8:	737b      	strb	r3, [r7, #13]
    return private_to_string::to_string(value, str, format, append);
 80045fa:	7b7b      	ldrb	r3, [r7, #13]
 80045fc:	89f8      	ldrh	r0, [r7, #14]
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	68b9      	ldr	r1, [r7, #8]
 8004602:	f000 f938 	bl	8004876 <_ZN3etl17private_to_string9to_stringItNS_13ibasic_stringIcEEEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuentsrNS_7is_sameIS6_bEE5valuentsrNS_9is_one_ofIS6_xJyEEE5valueERKT0_E4typeES6_RSC_RKNS_17basic_format_specISC_EEb>
 8004606:	4603      	mov	r3, r0
  }
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <_ZN3etl13ibasic_stringIcE7cleanupEv>:
    void cleanup()
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
      if (is_secure())
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4618      	mov	r0, r3
 800461c:	f7fe f9fe 	bl	8002a1c <_ZNK3etl11string_base9is_secureEv>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00c      	beq.n	8004640 <_ZN3etl13ibasic_stringIcE7cleanupEv+0x30>
        etl::memory_clear_range(&p_buffer[current_size], &p_buffer[CAPACITY]);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	18d0      	adds	r0, r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	4413      	add	r3, r2
 800463a:	4619      	mov	r1, r3
 800463c:	f000 f938 	bl	80048b0 <_ZN3etl18memory_clear_rangeIcEEvPVT_S3_>
    }
 8004640:	bf00      	nop
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <_ZN3etl8distanceIPKcEENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
  }

#else

  template<typename TIterator>
  ETL_CONSTEXPR17 typename std::iterator_traits<TIterator>::difference_type distance(TIterator first, TIterator last)
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  {
    return std::distance(first, last);
 8004652:	6839      	ldr	r1, [r7, #0]
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f94a 	bl	80048ee <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800465a:	4603      	mov	r3, r0
  }
 800465c:	4618      	mov	r0, r3
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <_ZN3etl4fillIPccEEvT_S2_RKT0_>:
  void fill(TIterator first, TIterator last, const TValue& value)
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
    std::fill(first, last, value);
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 f94e 	bl	8004916 <_ZSt4fillIPccEvT_S1_RKT0_>
  }
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <_ZN3etl8delegateIFvvEE20method_instance_stubIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_20ToggleLeftTurnSignalEvEEEEvPv>:

    //*************************************************************************
    /// Stub call for a member function. Compile time instance.
    //*************************************************************************
    template <typename T, T& Instance, TReturn(T::*Method)(TParams...)>
    static ETL_CONSTEXPR14 TReturn method_instance_stub(void*, TParams... params)
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
    {
      return (Instance.*Method)(etl::forward<TParams>(params)...);
 800468c:	4803      	ldr	r0, [pc, #12]	; (800469c <_ZN3etl8delegateIFvvEE20method_instance_stubIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_20ToggleLeftTurnSignalEvEEEEvPv+0x18>)
 800468e:	f007 fc10 	bl	800beb2 <_ZN11SolarGators11DataModules18SteeringController20ToggleLeftTurnSignalEv>
 8004692:	bf00      	nop
    }
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20000298 	.word	0x20000298

080046a0 <_ZN3etl8delegateIFvvEE18invocation_elementC1EPvPFvS4_E>:
      ETL_CONSTEXPR14 invocation_element(void* object_, stub_type stub_)
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
        , stub(stub_)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	605a      	str	r2, [r3, #4]
      }
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <_ZN3etl8delegateIFvvEEC1EPFvPvE>:
    ETL_CONSTEXPR14 delegate(stub_type stub)
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	6039      	str	r1, [r7, #0]
      : invocation(ETL_NULLPTR, stub)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	2100      	movs	r1, #0
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff ffe2 	bl	80046a0 <_ZN3etl8delegateIFvvEE18invocation_elementC1EPvPFvS4_E>
    }
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <_ZN3etl8delegateIFvvEE20method_instance_stubIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_19DecreaseCruiseSpeedEvEEEEvPv>:
    static ETL_CONSTEXPR14 TReturn method_instance_stub(void*, TParams... params)
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
      return (Instance.*Method)(etl::forward<TParams>(params)...);
 80046f0:	4803      	ldr	r0, [pc, #12]	; (8004700 <_ZN3etl8delegateIFvvEE20method_instance_stubIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_19DecreaseCruiseSpeedEvEEEEvPv+0x18>)
 80046f2:	f007 fd13 	bl	800c11c <_ZN11SolarGators11DataModules18SteeringController19DecreaseCruiseSpeedEv>
 80046f6:	bf00      	nop
    }
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20000298 	.word	0x20000298

08004704 <_ZN3etl8delegateIFvvEE13function_stubIXadL_Z16HandleHeadLightsvEEEEvPv>:

    //*************************************************************************
    /// Stub call for a free function.
    //*************************************************************************
    template <TReturn(*Method)(TParams...)>
    static ETL_CONSTEXPR14 TReturn function_stub(void*, TParams... params)
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
    {
      return (Method)(etl::forward<TParams>(params)...);
 800470c:	f7ff f882 	bl	8003814 <_Z16HandleHeadLightsv>
 8004710:	bf00      	nop
    }
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <_ZN3etl8delegateIFvvEE18invocation_elementC1Ev>:
      invocation_element() = default;
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	605a      	str	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4618      	mov	r0, r3
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <_ZN3etl8delegateIFvvEEC1EPvPFvS3_E>:
    ETL_CONSTEXPR14 delegate(void* object, stub_type stub)
 800473a:	b580      	push	{r7, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	607a      	str	r2, [r7, #4]
    {
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff ffe5 	bl	8004718 <_ZN3etl8delegateIFvvEE18invocation_elementC1Ev>
      invocation.object = object;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	601a      	str	r2, [r3, #0]
      invocation.stub = stub;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	605a      	str	r2, [r3, #4]
    }
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <_ZN3etl8delegateIFvvEE20method_instance_stubIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_13ToggleHazardsEvEEEEvPv>:
    static ETL_CONSTEXPR14 TReturn method_instance_stub(void*, TParams... params)
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
      return (Instance.*Method)(etl::forward<TParams>(params)...);
 800476c:	4803      	ldr	r0, [pc, #12]	; (800477c <_ZN3etl8delegateIFvvEE20method_instance_stubIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_13ToggleHazardsEvEEEEvPv+0x18>)
 800476e:	f007 fc1a 	bl	800bfa6 <_ZN11SolarGators11DataModules18SteeringController13ToggleHazardsEv>
 8004772:	bf00      	nop
    }
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20000298 	.word	0x20000298

08004780 <_ZN3etl8delegateIFvvEE20method_instance_stubIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_21ToggleRightTurnSignalEvEEEEvPv>:
    static ETL_CONSTEXPR14 TReturn method_instance_stub(void*, TParams... params)
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
      return (Instance.*Method)(etl::forward<TParams>(params)...);
 8004788:	4803      	ldr	r0, [pc, #12]	; (8004798 <_ZN3etl8delegateIFvvEE20method_instance_stubIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_21ToggleRightTurnSignalEvEEEEvPv+0x18>)
 800478a:	f007 fbd1 	bl	800bf30 <_ZN11SolarGators11DataModules18SteeringController21ToggleRightTurnSignalEv>
 800478e:	bf00      	nop
    }
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	20000298 	.word	0x20000298

0800479c <_ZN3etl8delegateIFvvEE20method_instance_stubIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_19IncreaseCruiseSpeedEvEEEEvPv>:
    static ETL_CONSTEXPR14 TReturn method_instance_stub(void*, TParams... params)
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
      return (Instance.*Method)(etl::forward<TParams>(params)...);
 80047a4:	4803      	ldr	r0, [pc, #12]	; (80047b4 <_ZN3etl8delegateIFvvEE20method_instance_stubIN11SolarGators11DataModules18SteeringControllerEL_Z11LightsStateEXadL_ZNS6_19IncreaseCruiseSpeedEvEEEEvPv+0x18>)
 80047a6:	f007 fc9c 	bl	800c0e2 <_ZN11SolarGators11DataModules18SteeringController19IncreaseCruiseSpeedEv>
 80047aa:	bf00      	nop
    }
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	20000298 	.word	0x20000298

080047b8 <_ZN3etl8delegateIFvvEE13function_stubIXadL_Z12HandleCruisevEEEEvPv>:
    static ETL_CONSTEXPR14 TReturn function_stub(void*, TParams... params)
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
      return (Method)(etl::forward<TParams>(params)...);
 80047c0:	f7ff f832 	bl	8003828 <_Z12HandleCruisev>
 80047c4:	bf00      	nop
    }
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <_ZN3etl8delegateIFvvEE13function_stubIXadL_Z13HandleReversevEEEEvPv>:
    static ETL_CONSTEXPR14 TReturn function_stub(void*, TParams... params)
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
      return (Method)(etl::forward<TParams>(params)...);
 80047d4:	f7ff f856 	bl	8003884 <_Z13HandleReversev>
 80047d8:	bf00      	nop
    }
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <_ZN3etl17private_to_string9to_stringIhNS_13ibasic_stringIcEEEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuentsrNS_7is_sameIS6_bEE5valuentsrNS_9is_one_ofIS6_xJyEEE5valueERKT0_E4typeES6_RSC_RKNS_17basic_format_specISC_EEb>:
    //***************************************************************************
    template <typename T, typename TIString>
    typename etl::enable_if<etl::is_integral<T>::value &&
                            !etl::is_same<T, bool>::value &&
                            !etl::is_one_of<T, int64_t, uint64_t>::value, const TIString&>::type
      to_string(const T value, TIString& str, const etl::basic_format_spec<TIString>& format, const bool append = false)
 80047e0:	b590      	push	{r4, r7, lr}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af02      	add	r7, sp, #8
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	607a      	str	r2, [r7, #4]
 80047ea:	461a      	mov	r2, r3
 80047ec:	4603      	mov	r3, r0
 80047ee:	73fb      	strb	r3, [r7, #15]
 80047f0:	4613      	mov	r3, r2
 80047f2:	73bb      	strb	r3, [r7, #14]
    {
      typedef typename etl::conditional<etl::is_signed<T>::value, int32_t, uint32_t>::type type;

      etl::private_to_string::add_integral(type(value), str, format, append, etl::is_negative(value));
 80047f4:	7bfc      	ldrb	r4, [r7, #15]
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 f89b 	bl	8004934 <_ZN3etl11is_negativeIhEENS_9enable_ifIXsrNS_11is_unsignedIT_EE5valueEbE4typeES3_>
 80047fe:	4603      	mov	r3, r0
 8004800:	461a      	mov	r2, r3
 8004802:	7bbb      	ldrb	r3, [r7, #14]
 8004804:	9200      	str	r2, [sp, #0]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	4620      	mov	r0, r4
 800480c:	f000 f8cd 	bl	80049aa <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb>

      return str;
 8004810:	68bb      	ldr	r3, [r7, #8]
    }
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	bd90      	pop	{r4, r7, pc}

0800481a <_ZN3etl17private_to_string9to_stringIfNS_13ibasic_stringIcEEEENS_9enable_ifIXsrNS_17is_floating_pointIT_EE5valueERKT0_E4typeES6_RS8_RKNS_17basic_format_specIS8_EEb>:
    //***************************************************************************
    /// For floating point.
    //***************************************************************************
    template <typename T, typename TIString>
    typename etl::enable_if<etl::is_floating_point<T>::value, const TIString&>::type
      to_string(const T value, TIString& str, const etl::basic_format_spec<TIString>& format, const bool append = false)
 800481a:	b580      	push	{r7, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
 8004820:	ed87 0a03 	vstr	s0, [r7, #12]
 8004824:	60b8      	str	r0, [r7, #8]
 8004826:	6079      	str	r1, [r7, #4]
 8004828:	4613      	mov	r3, r2
 800482a:	70fb      	strb	r3, [r7, #3]
    {
      etl::private_to_string::add_floating_point(value, str, format, append);
 800482c:	78fb      	ldrb	r3, [r7, #3]
 800482e:	461a      	mov	r2, r3
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	68b8      	ldr	r0, [r7, #8]
 8004834:	ed97 0a03 	vldr	s0, [r7, #12]
 8004838:	f000 f9c0 	bl	8004bbc <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb>

      return str;
 800483c:	68bb      	ldr	r3, [r7, #8]
    }
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <_ZN3etl17private_to_string9to_stringImNS_13ibasic_stringIcEEEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuentsrNS_7is_sameIS6_bEE5valuentsrNS_9is_one_ofIS6_xJyEEE5valueERKT0_E4typeES6_RSC_RKNS_17basic_format_specISC_EEb>:
      to_string(const T value, TIString& str, const etl::basic_format_spec<TIString>& format, const bool append = false)
 8004846:	b580      	push	{r7, lr}
 8004848:	b086      	sub	sp, #24
 800484a:	af02      	add	r7, sp, #8
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	607a      	str	r2, [r7, #4]
 8004852:	70fb      	strb	r3, [r7, #3]
      etl::private_to_string::add_integral(type(value), str, format, append, etl::is_negative(value));
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 facc 	bl	8004df2 <_ZN3etl11is_negativeImEENS_9enable_ifIXsrNS_11is_unsignedIT_EE5valueEbE4typeES3_>
 800485a:	4603      	mov	r3, r0
 800485c:	461a      	mov	r2, r3
 800485e:	78fb      	ldrb	r3, [r7, #3]
 8004860:	9200      	str	r2, [sp, #0]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	68b9      	ldr	r1, [r7, #8]
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 f89f 	bl	80049aa <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb>
      return str;
 800486c:	68bb      	ldr	r3, [r7, #8]
    }
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <_ZN3etl17private_to_string9to_stringItNS_13ibasic_stringIcEEEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuentsrNS_7is_sameIS6_bEE5valuentsrNS_9is_one_ofIS6_xJyEEE5valueERKT0_E4typeES6_RSC_RKNS_17basic_format_specISC_EEb>:
      to_string(const T value, TIString& str, const etl::basic_format_spec<TIString>& format, const bool append = false)
 8004876:	b590      	push	{r4, r7, lr}
 8004878:	b087      	sub	sp, #28
 800487a:	af02      	add	r7, sp, #8
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	461a      	mov	r2, r3
 8004882:	4603      	mov	r3, r0
 8004884:	81fb      	strh	r3, [r7, #14]
 8004886:	4613      	mov	r3, r2
 8004888:	737b      	strb	r3, [r7, #13]
      etl::private_to_string::add_integral(type(value), str, format, append, etl::is_negative(value));
 800488a:	89fc      	ldrh	r4, [r7, #14]
 800488c:	89fb      	ldrh	r3, [r7, #14]
 800488e:	4618      	mov	r0, r3
 8004890:	f000 faba 	bl	8004e08 <_ZN3etl11is_negativeItEENS_9enable_ifIXsrNS_11is_unsignedIT_EE5valueEbE4typeES3_>
 8004894:	4603      	mov	r3, r0
 8004896:	461a      	mov	r2, r3
 8004898:	7b7b      	ldrb	r3, [r7, #13]
 800489a:	9200      	str	r2, [sp, #0]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	68b9      	ldr	r1, [r7, #8]
 80048a0:	4620      	mov	r0, r4
 80048a2:	f000 f882 	bl	80049aa <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb>
      return str;
 80048a6:	68bb      	ldr	r3, [r7, #8]
    }
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd90      	pop	{r4, r7, pc}

080048b0 <_ZN3etl18memory_clear_rangeIcEEvPVT_S3_>:
  ///\param begin The first object in the range.
  ///\param end   One past the last object in the range.
  ///\ingroup memory
  //*****************************************************************************
  template <typename T>
  void memory_clear_range(volatile T* begin, volatile T* end)
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  {
    const size_t n = static_cast<size_t>(etl::distance(begin, end));
 80048ba:	6839      	ldr	r1, [r7, #0]
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 faaf 	bl	8004e20 <_ZN3etl8distanceIPVcEENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 80048c2:	4603      	mov	r3, r0
 80048c4:	60fb      	str	r3, [r7, #12]

    memory_clear_range(begin, n);
 80048c6:	68f9      	ldr	r1, [r7, #12]
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fab7 	bl	8004e3c <_ZN3etl18memory_clear_rangeIcEEvPVT_j>
  }
 80048ce:	bf00      	nop
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <_ZN3etl13ibasic_stringIcE5beginEv>:
    iterator begin()
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
      return &p_buffer[0];
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68db      	ldr	r3, [r3, #12]
    }
 80048e2:	4618      	mov	r0, r3
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80048ee:	b5b0      	push	{r4, r5, r7, lr}
 80048f0:	b082      	sub	sp, #8
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80048f8:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80048fa:	1d3b      	adds	r3, r7, #4
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 faaa 	bl	8004e56 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8004902:	462a      	mov	r2, r5
 8004904:	6839      	ldr	r1, [r7, #0]
 8004906:	4620      	mov	r0, r4
 8004908:	f000 fab0 	bl	8004e6c <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800490c:	4603      	mov	r3, r0
    }
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bdb0      	pop	{r4, r5, r7, pc}

08004916 <_ZSt4fillIPccEvT_S1_RKT0_>:
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 8004916:	b580      	push	{r7, lr}
 8004918:	b084      	sub	sp, #16
 800491a:	af00      	add	r7, sp, #0
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(__first, __last, __value);
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	68b9      	ldr	r1, [r7, #8]
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 faaf 	bl	8004e8a <_ZSt8__fill_aIPccEvT_S1_RKT0_>
    }
 800492c:	bf00      	nop
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <_ZN3etl11is_negativeIhEENS_9enable_ifIXsrNS_11is_unsignedIT_EE5valueEbE4typeES3_>:
  // For unsigned types.
  //***************************************************************************
  template <typename T>
  ETL_CONSTEXPR
  typename etl::enable_if<etl::is_unsigned<T>::value, bool>::type
    is_negative(const T)
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	4603      	mov	r3, r0
 800493c:	71fb      	strb	r3, [r7, #7]
  {
    return false;
 800493e:	2300      	movs	r3, #0
  }
 8004940:	4618      	mov	r0, r3
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE8get_baseEv>:
    }

    //***************************************************************************
    /// Gets the base.
    //***************************************************************************
    ETL_CONSTEXPR uint32_t get_base() const
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
    {
      return base_;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	781b      	ldrb	r3, [r3, #0]
    }
 8004958:	4618      	mov	r0, r3
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <_ZN3etl8absoluteImEENS_9enable_ifIXsrNS_11is_unsignedIT_EE5valueES3_E4typeES3_>:
  //***************************************************************************
  // For unsigned types.
  //***************************************************************************
  template <typename T>
  ETL_CONSTEXPR typename etl::enable_if<etl::is_unsigned<T>::value, T>::type
    absolute(T value)
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  {
    return value;
 800496c:	687b      	ldr	r3, [r7, #4]
  }
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE13is_upper_caseEv>:
    }

    //***************************************************************************
    /// Gets the upper case flag.
    //***************************************************************************
    ETL_CONSTEXPR bool is_upper_case() const
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
    {
      return upper_case_;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	78db      	ldrb	r3, [r3, #3]
    }
 8004986:	4618      	mov	r0, r3
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE12is_show_baseEv>:
    ETL_CONSTEXPR bool is_show_base() const
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
      return show_base_;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	799b      	ldrb	r3, [r3, #6]
    }
 800499e:	4618      	mov	r0, r3
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb>:
    void add_integral(T value,
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b086      	sub	sp, #24
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	607a      	str	r2, [r7, #4]
 80049b6:	70fb      	strb	r3, [r7, #3]
      if (!append)
 80049b8:	78fb      	ldrb	r3, [r7, #3]
 80049ba:	f083 0301 	eor.w	r3, r3, #1
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x20>
        str.clear();
 80049c4:	68b8      	ldr	r0, [r7, #8]
 80049c6:	f000 fa6f 	bl	8004ea8 <_ZN3etl13ibasic_stringIcE5clearEv>
      iterator start = str.end();
 80049ca:	68b8      	ldr	r0, [r7, #8]
 80049cc:	f000 fa77 	bl	8004ebe <_ZN3etl13ibasic_stringIcE3endEv>
 80049d0:	6178      	str	r0, [r7, #20]
      if (value == 0)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d117      	bne.n	8004a08 <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x5e>
        if ((format.get_base() == 10U) && negative)
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff ffb7 	bl	800494c <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE8get_baseEv>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b0a      	cmp	r3, #10
 80049e2:	d105      	bne.n	80049f0 <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x46>
 80049e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x46>
 80049ec:	2301      	movs	r3, #1
 80049ee:	e000      	b.n	80049f2 <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x48>
 80049f0:	2300      	movs	r3, #0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x54>
          str.push_back(type('-'));
 80049f6:	212d      	movs	r1, #45	; 0x2d
 80049f8:	68b8      	ldr	r0, [r7, #8]
 80049fa:	f000 fa6f 	bl	8004edc <_ZN3etl13ibasic_stringIcE9push_backEc>
        str.push_back(type('0'));
 80049fe:	2130      	movs	r1, #48	; 0x30
 8004a00:	68b8      	ldr	r0, [r7, #8]
 8004a02:	f000 fa6b 	bl	8004edc <_ZN3etl13ibasic_stringIcE9push_backEc>
 8004a06:	e08c      	b.n	8004b22 <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x178>
        while (value != 0)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d031      	beq.n	8004a72 <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0xc8>
          T remainder = etl::absolute(value % T(format.get_base()));
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff ff9c 	bl	800494c <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE8get_baseEv>
 8004a14:	4602      	mov	r2, r0
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a1c:	fb01 f202 	mul.w	r2, r1, r2
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff ff9e 	bl	8004964 <_ZN3etl8absoluteImEENS_9enable_ifIXsrNS_11is_unsignedIT_EE5valueES3_E4typeES3_>
 8004a28:	6138      	str	r0, [r7, #16]
          str.push_back((remainder > 9) ? (format.is_upper_case() ? type('A' + (remainder - 10)) : type('a' + (remainder - 10))) : type('0' + remainder));
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b09      	cmp	r3, #9
 8004a2e:	d90f      	bls.n	8004a50 <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0xa6>
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7ff ffa2 	bl	800497a <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE13is_upper_caseEv>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d004      	beq.n	8004a46 <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x9c>
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	3337      	adds	r3, #55	; 0x37
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	e008      	b.n	8004a58 <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0xae>
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	3357      	adds	r3, #87	; 0x57
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	e003      	b.n	8004a58 <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0xae>
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	3330      	adds	r3, #48	; 0x30
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	4619      	mov	r1, r3
 8004a5a:	68b8      	ldr	r0, [r7, #8]
 8004a5c:	f000 fa3e 	bl	8004edc <_ZN3etl13ibasic_stringIcE9push_backEc>
          value = value / T(format.get_base());
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f7ff ff73 	bl	800494c <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE8get_baseEv>
 8004a66:	4602      	mov	r2, r0
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
        while (value != 0)
 8004a70:	e7ca      	b.n	8004a08 <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x5e>
        if ((format.get_base() == 10U) && negative)
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7ff ff6a 	bl	800494c <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE8get_baseEv>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b0a      	cmp	r3, #10
 8004a7c:	d105      	bne.n	8004a8a <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0xe0>
 8004a7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0xe0>
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0xe2>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0xee>
          str.push_back(type('-'));
 8004a90:	212d      	movs	r1, #45	; 0x2d
 8004a92:	68b8      	ldr	r0, [r7, #8]
 8004a94:	f000 fa22 	bl	8004edc <_ZN3etl13ibasic_stringIcE9push_backEc>
        if (format.is_show_base())
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7ff ff7a 	bl	8004992 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE12is_show_baseEv>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d036      	beq.n	8004b12 <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x168>
          switch (format.get_base())
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff ff51 	bl	800494c <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE8get_baseEv>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b10      	cmp	r3, #16
 8004aae:	d01d      	beq.n	8004aec <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x142>
 8004ab0:	2b10      	cmp	r3, #16
 8004ab2:	d82d      	bhi.n	8004b10 <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x166>
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d002      	beq.n	8004abe <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x114>
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d012      	beq.n	8004ae2 <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x138>
              break;
 8004abc:	e028      	b.n	8004b10 <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x166>
              str.push_back(format.is_upper_case() ? type('B') : type('b'));
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7ff ff5b 	bl	800497a <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE13is_upper_caseEv>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x124>
 8004aca:	2342      	movs	r3, #66	; 0x42
 8004acc:	e000      	b.n	8004ad0 <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x126>
 8004ace:	2362      	movs	r3, #98	; 0x62
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	68b8      	ldr	r0, [r7, #8]
 8004ad4:	f000 fa02 	bl	8004edc <_ZN3etl13ibasic_stringIcE9push_backEc>
              str.push_back(type('0'));
 8004ad8:	2130      	movs	r1, #48	; 0x30
 8004ada:	68b8      	ldr	r0, [r7, #8]
 8004adc:	f000 f9fe 	bl	8004edc <_ZN3etl13ibasic_stringIcE9push_backEc>
              break;
 8004ae0:	e017      	b.n	8004b12 <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x168>
              str.push_back(type('0'));
 8004ae2:	2130      	movs	r1, #48	; 0x30
 8004ae4:	68b8      	ldr	r0, [r7, #8]
 8004ae6:	f000 f9f9 	bl	8004edc <_ZN3etl13ibasic_stringIcE9push_backEc>
              break;
 8004aea:	e012      	b.n	8004b12 <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x168>
              str.push_back(format.is_upper_case() ? type('X') : type('x'));
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7ff ff44 	bl	800497a <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE13is_upper_caseEv>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x152>
 8004af8:	2358      	movs	r3, #88	; 0x58
 8004afa:	e000      	b.n	8004afe <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x154>
 8004afc:	2378      	movs	r3, #120	; 0x78
 8004afe:	4619      	mov	r1, r3
 8004b00:	68b8      	ldr	r0, [r7, #8]
 8004b02:	f000 f9eb 	bl	8004edc <_ZN3etl13ibasic_stringIcE9push_backEc>
              str.push_back(type('0'));
 8004b06:	2130      	movs	r1, #48	; 0x30
 8004b08:	68b8      	ldr	r0, [r7, #8]
 8004b0a:	f000 f9e7 	bl	8004edc <_ZN3etl13ibasic_stringIcE9push_backEc>
              break;
 8004b0e:	e000      	b.n	8004b12 <_ZN3etl17private_to_string12add_integralImNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x168>
              break;
 8004b10:	bf00      	nop
        etl::reverse(start, str.end());
 8004b12:	68b8      	ldr	r0, [r7, #8]
 8004b14:	f000 f9d3 	bl	8004ebe <_ZN3etl13ibasic_stringIcE3endEv>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6978      	ldr	r0, [r7, #20]
 8004b1e:	f000 fa04 	bl	8004f2a <_ZN3etl7reverseIPcEENS_9enable_ifIXsrNS_10is_pointerIT_EE5valueEvE4typeES4_S4_>
      etl::private_to_string::add_alignment(str, start, format);
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6979      	ldr	r1, [r7, #20]
 8004b26:	68b8      	ldr	r0, [r7, #8]
 8004b28:	f000 fa38 	bl	8004f9c <_ZN3etl17private_to_string13add_alignmentINS_13ibasic_stringIcEEEEvRT_NS4_8iteratorERKNS_17basic_format_specIS4_EE>
    }
 8004b2c:	bf00      	nop
 8004b2e:	3718      	adds	r7, #24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE13get_precisionEv>:
    ETL_CONSTEXPR uint32_t get_precision() const
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
      return precision_;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	789b      	ldrb	r3, [r3, #2]
    }
 8004b40:	4618      	mov	r0, r3
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE9precisionEm>:
    ETL_CONSTEXPR14 basic_format_spec& precision(uint32_t p)
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
      precision_ = static_cast<uint_least8_t>(p);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	709a      	strb	r2, [r3, #2]
      return *this;
 8004b5e:	687b      	ldr	r3, [r7, #4]
    }
 8004b60:	4618      	mov	r0, r3
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE5rightEv>:

    //***************************************************************************
    /// Sets the right justify flag.
    /// \return A reference to the basic_format_spec.
    //***************************************************************************
    ETL_CONSTEXPR14 basic_format_spec& right()
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
    {
      left_justified_ = false;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	711a      	strb	r2, [r3, #4]
      return *this;
 8004b7a:	687b      	ldr	r3, [r7, #4]
    }
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <_ZN3etl8absoluteIfEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueES3_E4typeES3_>:
    absolute(T value)
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	ed87 0a01 	vstr	s0, [r7, #4]
    return (value < T(0)) ? -value : value;
 8004b92:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b9e:	d504      	bpl.n	8004baa <_ZN3etl8absoluteIfEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueES3_E4typeES3_+0x22>
 8004ba0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ba4:	eef1 7a67 	vneg.f32	s15, s15
 8004ba8:	e001      	b.n	8004bae <_ZN3etl8absoluteIfEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueES3_E4typeES3_+0x26>
 8004baa:	edd7 7a01 	vldr	s15, [r7, #4]
  }
 8004bae:	eeb0 0a67 	vmov.f32	s0, s15
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb>:
    void add_floating_point(const T value,
 8004bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bc0:	ed2d 8b02 	vpush	{d8}
 8004bc4:	b09b      	sub	sp, #108	; 0x6c
 8004bc6:	af04      	add	r7, sp, #16
 8004bc8:	ed87 0a05 	vstr	s0, [r7, #20]
 8004bcc:	6138      	str	r0, [r7, #16]
 8004bce:	60f9      	str	r1, [r7, #12]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	72fb      	strb	r3, [r7, #11]
      if (!append)
 8004bd4:	7afb      	ldrb	r3, [r7, #11]
 8004bd6:	f083 0301 	eor.w	r3, r3, #1
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb+0x2a>
        str.clear();
 8004be0:	6938      	ldr	r0, [r7, #16]
 8004be2:	f000 f961 	bl	8004ea8 <_ZN3etl13ibasic_stringIcE5clearEv>
      iterator start = str.end();
 8004be6:	6938      	ldr	r0, [r7, #16]
 8004be8:	f000 f969 	bl	8004ebe <_ZN3etl13ibasic_stringIcE3endEv>
 8004bec:	6378      	str	r0, [r7, #52]	; 0x34
      if (isnan(value) || isinf(value))
 8004bee:	ed97 0a05 	vldr	s0, [r7, #20]
 8004bf2:	f7fd fe23 	bl	800283c <_ZSt5isnanf>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d106      	bne.n	8004c0a <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb+0x4e>
 8004bfc:	ed97 0a05 	vldr	s0, [r7, #20]
 8004c00:	f7fd fdf8 	bl	80027f4 <_ZSt5isinff>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb+0x52>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb+0x54>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d010      	beq.n	8004c36 <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb+0x7a>
        etl::private_to_string::add_nan_inf(isnan(value), isinf(value), str);
 8004c14:	ed97 0a05 	vldr	s0, [r7, #20]
 8004c18:	f7fd fe10 	bl	800283c <_ZSt5isnanf>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	461c      	mov	r4, r3
 8004c20:	ed97 0a05 	vldr	s0, [r7, #20]
 8004c24:	f7fd fde6 	bl	80027f4 <_ZSt5isinff>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4620      	mov	r0, r4
 8004c30:	f000 f9f8 	bl	8005024 <_ZN3etl17private_to_string11add_nan_infINS_13ibasic_stringIcEEEEvbbRT_>
 8004c34:	e0d1      	b.n	8004dda <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb+0x21e>
        uint32_t max_precision = etl::numeric_limits<T>::digits10;
 8004c36:	2306      	movs	r3, #6
 8004c38:	633b      	str	r3, [r7, #48]	; 0x30
        etl::basic_format_spec<TIString> integral_format = format;
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c40:	6810      	ldr	r0, [r2, #0]
 8004c42:	6851      	ldr	r1, [r2, #4]
 8004c44:	c303      	stmia	r3!, {r0, r1}
        integral_format.decimal().width(0).precision(format.get_precision() > max_precision ? max_precision : format.get_precision());
 8004c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fa34 	bl	80050b8 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE7decimalEv>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2100      	movs	r1, #0
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 fa3c 	bl	80050d2 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE5widthEm>
 8004c5a:	4606      	mov	r6, r0
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f7ff ff69 	bl	8004b34 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE13get_precisionEv>
 8004c62:	4602      	mov	r2, r0
 8004c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d304      	bcc.n	8004c74 <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb+0xb8>
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f7ff ff62 	bl	8004b34 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE13get_precisionEv>
 8004c70:	4603      	mov	r3, r0
 8004c72:	e000      	b.n	8004c76 <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb+0xba>
 8004c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c76:	4619      	mov	r1, r3
 8004c78:	4630      	mov	r0, r6
 8004c7a:	f7ff ff67 	bl	8004b4c <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE9precisionEm>
        etl::basic_format_spec<TIString> fractional_format = integral_format;
 8004c7e:	f107 031c 	add.w	r3, r7, #28
 8004c82:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004c86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c8a:	e883 0003 	stmia.w	r3, {r0, r1}
        fractional_format.width(integral_format.get_precision()).fill(type('0')).right();
 8004c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff ff4e 	bl	8004b34 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE13get_precisionEv>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	f107 031c 	add.w	r3, r7, #28
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 fa16 	bl	80050d2 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE5widthEm>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2130      	movs	r1, #48	; 0x30
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fa21 	bl	80050f2 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE4fillEc>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff ff5a 	bl	8004b6c <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE5rightEv>
        uworkspace_t multiplier = 1U;
 8004cb8:	f04f 0201 	mov.w	r2, #1
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        for (uint32_t i = 0U; i < fractional_format.get_precision(); ++i)
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cc8:	f107 031c 	add.w	r3, r7, #28
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff ff31 	bl	8004b34 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE13get_precisionEv>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	bf34      	ite	cc
 8004cda:	2301      	movcc	r3, #1
 8004cdc:	2300      	movcs	r3, #0
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d01e      	beq.n	8004d22 <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb+0x166>
          multiplier *= 10U;
 8004ce4:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004ce8:	4642      	mov	r2, r8
 8004cea:	464b      	mov	r3, r9
 8004cec:	f04f 0000 	mov.w	r0, #0
 8004cf0:	f04f 0100 	mov.w	r1, #0
 8004cf4:	0099      	lsls	r1, r3, #2
 8004cf6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8004cfa:	0090      	lsls	r0, r2, #2
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	eb12 0408 	adds.w	r4, r2, r8
 8004d04:	eb43 0509 	adc.w	r5, r3, r9
 8004d08:	1923      	adds	r3, r4, r4
 8004d0a:	603b      	str	r3, [r7, #0]
 8004d0c:	eb45 0305 	adc.w	r3, r5, r5
 8004d10:	607b      	str	r3, [r7, #4]
 8004d12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d16:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
        for (uint32_t i = 0U; i < fractional_format.get_precision(); ++i)
 8004d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d20:	e7d2      	b.n	8004cc8 <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb+0x10c>
        T f_integral = floor(etl::absolute(value));
 8004d22:	ed97 0a05 	vldr	s0, [r7, #20]
 8004d26:	f7ff ff2f 	bl	8004b88 <_ZN3etl8absoluteIfEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueES3_E4typeES3_>
 8004d2a:	eef0 7a40 	vmov.f32	s15, s0
 8004d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8004d32:	f7fd fd4f 	bl	80027d4 <_ZSt5floorf>
 8004d36:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
        uworkspace_t integral = static_cast<uworkspace_t>(f_integral);
 8004d3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d3c:	f7fb ff9c 	bl	8000c78 <__aeabi_f2ulz>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
        uworkspace_t fractional = static_cast<uworkspace_t>(round((etl::absolute(value) - f_integral) * multiplier));
 8004d48:	ed97 0a05 	vldr	s0, [r7, #20]
 8004d4c:	f7ff ff1c 	bl	8004b88 <_ZN3etl8absoluteIfEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueES3_E4typeES3_>
 8004d50:	eeb0 7a40 	vmov.f32	s14, s0
 8004d54:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004d58:	ee37 8a67 	vsub.f32	s16, s14, s15
 8004d5c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004d60:	f7fb ff2c 	bl	8000bbc <__aeabi_ul2f>
 8004d64:	ee07 0a90 	vmov	s15, r0
 8004d68:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8004d70:	f7fd fd80 	bl	8002874 <_ZSt5roundf>
 8004d74:	ee10 3a10 	vmov	r3, s0
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fb ff7d 	bl	8000c78 <__aeabi_f2ulz>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        if (fractional == multiplier)
 8004d86:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004d8a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d8e:	4299      	cmp	r1, r3
 8004d90:	bf08      	it	eq
 8004d92:	4290      	cmpeq	r0, r2
 8004d94:	d10d      	bne.n	8004db2 <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb+0x1f6>
          ++integral;
 8004d96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d9a:	f112 0a01 	adds.w	sl, r2, #1
 8004d9e:	f143 0b00 	adc.w	fp, r3, #0
 8004da2:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
          fractional = 0U;
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        etl::private_to_string::add_integral_and_fractional(integral, fractional, str, integral_format, fractional_format, etl::is_negative(value));
 8004db2:	ed97 0a05 	vldr	s0, [r7, #20]
 8004db6:	f000 f9ac 	bl	8005112 <_ZN3etl11is_negativeIfEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueEbE4typeES3_>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	9303      	str	r3, [sp, #12]
 8004dbe:	f107 031c 	add.w	r3, r7, #28
 8004dc2:	9302      	str	r3, [sp, #8]
 8004dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004dd2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004dd6:	f000 f9b1 	bl	800513c <_ZN3etl17private_to_string27add_integral_and_fractionalINS_13ibasic_stringIcEEEEvyyRT_RKNS_17basic_format_specIS4_EES9_b>
      etl::private_to_string::add_alignment(str, start, format);
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004dde:	6938      	ldr	r0, [r7, #16]
 8004de0:	f000 f8dc 	bl	8004f9c <_ZN3etl17private_to_string13add_alignmentINS_13ibasic_stringIcEEEEvRT_NS4_8iteratorERKNS_17basic_format_specIS4_EE>
    }
 8004de4:	bf00      	nop
 8004de6:	375c      	adds	r7, #92	; 0x5c
 8004de8:	46bd      	mov	sp, r7
 8004dea:	ecbd 8b02 	vpop	{d8}
 8004dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004df2 <_ZN3etl11is_negativeImEENS_9enable_ifIXsrNS_11is_unsignedIT_EE5valueEbE4typeES3_>:
    is_negative(const T)
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
    return false;
 8004dfa:	2300      	movs	r3, #0
  }
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <_ZN3etl11is_negativeItEENS_9enable_ifIXsrNS_11is_unsignedIT_EE5valueEbE4typeES3_>:
    is_negative(const T)
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	80fb      	strh	r3, [r7, #6]
    return false;
 8004e12:	2300      	movs	r3, #0
  }
 8004e14:	4618      	mov	r0, r3
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <_ZN3etl8distanceIPVcEENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
  ETL_CONSTEXPR17 typename std::iterator_traits<TIterator>::difference_type distance(TIterator first, TIterator last)
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
    return std::distance(first, last);
 8004e2a:	6839      	ldr	r1, [r7, #0]
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f9b4 	bl	800519a <_ZSt8distanceIPVcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8004e32:	4603      	mov	r3, r0
  }
 8004e34:	4618      	mov	r0, r3
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <_ZN3etl18memory_clear_rangeIcEEvPVT_j>:
  void memory_clear_range(volatile T* begin, size_t n)
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
    memory_clear(reinterpret_cast<volatile char*>(begin), n * sizeof(T));
 8004e46:	6839      	ldr	r1, [r7, #0]
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7fd fd23 	bl	8002894 <_ZN3etl12memory_clearEPVcj>
  }
 8004e4e:	bf00      	nop
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8004e5e:	bf00      	nop
 8004e60:	4618      	mov	r0, r3
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	1ad3      	subs	r3, r2, r3
    }
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <_ZSt8__fill_aIPccEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	60f8      	str	r0, [r7, #12]
 8004e92:	60b9      	str	r1, [r7, #8]
 8004e94:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	68b9      	ldr	r1, [r7, #8]
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 f991 	bl	80051c2 <_ZSt9__fill_a1IcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
 8004ea0:	bf00      	nop
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <_ZN3etl13ibasic_stringIcE5clearEv>:
    void clear()
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
      initialise();
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7ff fa9a 	bl	80043ea <_ZN3etl13ibasic_stringIcE10initialiseEv>
    }
 8004eb6:	bf00      	nop
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <_ZN3etl13ibasic_stringIcE3endEv>:
    iterator end()
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
      return &p_buffer[current_size];
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4413      	add	r3, r2
    }
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <_ZN3etl13ibasic_stringIcE9push_backEc>:
    void push_back(T value)
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	70fb      	strb	r3, [r7, #3]
      if (current_size != CAPACITY)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d011      	beq.n	8004f18 <_ZN3etl13ibasic_stringIcE9push_backEc+0x3c>
        p_buffer[current_size++] = value;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	1c58      	adds	r0, r3, #1
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	6008      	str	r0, [r1, #0]
 8004f02:	4413      	add	r3, r2
 8004f04:	78fa      	ldrb	r2, [r7, #3]
 8004f06:	701a      	strb	r2, [r3, #0]
        p_buffer[current_size]   = 0;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4413      	add	r3, r2
 8004f12:	2200      	movs	r2, #0
 8004f14:	701a      	strb	r2, [r3, #0]
    }
 8004f16:	e004      	b.n	8004f22 <_ZN3etl13ibasic_stringIcE9push_backEc+0x46>
        set_truncated(true);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fd fdbf 	bl	8002aa0 <_ZN3etl11string_base13set_truncatedEb>
    }
 8004f22:	bf00      	nop
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <_ZN3etl7reverseIPcEENS_9enable_ifIXsrNS_10is_pointerIT_EE5valueEvE4typeES4_S4_>:
    reverse(TIterator b, TIterator e)
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b082      	sub	sp, #8
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
 8004f32:	6039      	str	r1, [r7, #0]
    if (b != e)
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d013      	beq.n	8004f64 <_ZN3etl7reverseIPcEENS_9enable_ifIXsrNS_10is_pointerIT_EE5valueEvE4typeES4_S4_+0x3a>
      while (b < --e)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	603b      	str	r3, [r7, #0]
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	bf8c      	ite	hi
 8004f4a:	2301      	movhi	r3, #1
 8004f4c:	2300      	movls	r3, #0
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d007      	beq.n	8004f64 <_ZN3etl7reverseIPcEENS_9enable_ifIXsrNS_10is_pointerIT_EE5valueEvE4typeES4_S4_+0x3a>
        etl::iter_swap(b, e);
 8004f54:	6839      	ldr	r1, [r7, #0]
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f94d 	bl	80051f6 <_ZN3etl9iter_swapIPcS1_EEvT_T0_>
        ++b;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	607b      	str	r3, [r7, #4]
      while (b < --e)
 8004f62:	e7eb      	b.n	8004f3c <_ZN3etl7reverseIPcEENS_9enable_ifIXsrNS_10is_pointerIT_EE5valueEvE4typeES4_S4_+0x12>
  }
 8004f64:	bf00      	nop
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE9get_widthEv>:
    ETL_CONSTEXPR uint32_t get_width() const
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
      return width_;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	785b      	ldrb	r3, [r3, #1]
    }
 8004f78:	4618      	mov	r0, r3
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE7is_leftEv>:
    ETL_CONSTEXPR bool is_left() const
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
      return left_justified_;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	791b      	ldrb	r3, [r3, #4]
    }
 8004f90:	4618      	mov	r0, r3
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <_ZN3etl17private_to_string13add_alignmentINS_13ibasic_stringIcEEEEvRT_NS4_8iteratorERKNS_17basic_format_specIS4_EE>:
    void add_alignment(TIString& str, typename TIString::iterator position, const etl::basic_format_spec<TIString>& format)
 8004f9c:	b590      	push	{r4, r7, lr}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
      uint32_t length = static_cast<uint32_t>(etl::distance(position, str.end()));
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f7ff ff88 	bl	8004ebe <_ZN3etl13ibasic_stringIcE3endEv>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	68b8      	ldr	r0, [r7, #8]
 8004fb4:	f000 f92c 	bl	8005210 <_ZN3etl8distanceIPcEENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	617b      	str	r3, [r7, #20]
      if (length < format.get_width())
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7ff ffd5 	bl	8004f6c <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE9get_widthEv>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	bf34      	ite	cc
 8004fca:	2301      	movcc	r3, #1
 8004fcc:	2300      	movcs	r3, #0
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d023      	beq.n	800501c <_ZN3etl17private_to_string13add_alignmentINS_13ibasic_stringIcEEEEvRT_NS4_8iteratorERKNS_17basic_format_specIS4_EE+0x80>
        uint32_t fill_length = format.get_width() - length;
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff ffc9 	bl	8004f6c <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE9get_widthEv>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	613b      	str	r3, [r7, #16]
        if (format.is_left())
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7ff ffce 	bl	8004f84 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE7is_leftEv>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00d      	beq.n	800500a <_ZN3etl17private_to_string13add_alignmentINS_13ibasic_stringIcEEEEvRT_NS4_8iteratorERKNS_17basic_format_specIS4_EE+0x6e>
          str.insert(str.end(), fill_length, format.get_fill());
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f7ff ff65 	bl	8004ebe <_ZN3etl13ibasic_stringIcE3endEv>
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f918 	bl	800522c <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE8get_fillEv>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	4621      	mov	r1, r4
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 f91e 	bl	8005244 <_ZN3etl13ibasic_stringIcE6insertEPKcjc>
    }
 8005008:	e008      	b.n	800501c <_ZN3etl17private_to_string13add_alignmentINS_13ibasic_stringIcEEEEvRT_NS4_8iteratorERKNS_17basic_format_specIS4_EE+0x80>
          str.insert(position, fill_length, format.get_fill());
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f90e 	bl	800522c <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE8get_fillEv>
 8005010:	4603      	mov	r3, r0
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 f914 	bl	8005244 <_ZN3etl13ibasic_stringIcE6insertEPKcjc>
    }
 800501c:	bf00      	nop
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	bd90      	pop	{r4, r7, pc}

08005024 <_ZN3etl17private_to_string11add_nan_infINS_13ibasic_stringIcEEEEvbbRT_>:
    void add_nan_inf(const bool not_a_number,
 8005024:	b5b0      	push	{r4, r5, r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	4603      	mov	r3, r0
 800502c:	603a      	str	r2, [r7, #0]
 800502e:	71fb      	strb	r3, [r7, #7]
 8005030:	460b      	mov	r3, r1
 8005032:	71bb      	strb	r3, [r7, #6]
      if (not_a_number)
 8005034:	79fb      	ldrb	r3, [r7, #7]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d011      	beq.n	800505e <_ZN3etl17private_to_string11add_nan_infINS_13ibasic_stringIcEEEEvbbRT_+0x3a>
        str.insert(str.end(), ETL_OR_STD11::begin(n), ETL_OR_STD11::end(n));
 800503a:	6838      	ldr	r0, [r7, #0]
 800503c:	f7ff ff3f 	bl	8004ebe <_ZN3etl13ibasic_stringIcE3endEv>
 8005040:	4604      	mov	r4, r0
 8005042:	4813      	ldr	r0, [pc, #76]	; (8005090 <_ZN3etl17private_to_string11add_nan_infINS_13ibasic_stringIcEEEEvbbRT_+0x6c>)
 8005044:	f000 f9aa 	bl	800539c <_ZSt5beginIKcLj3EEPT_RAT0__S1_>
 8005048:	4605      	mov	r5, r0
 800504a:	4811      	ldr	r0, [pc, #68]	; (8005090 <_ZN3etl17private_to_string11add_nan_infINS_13ibasic_stringIcEEEEvbbRT_+0x6c>)
 800504c:	f000 f9b1 	bl	80053b2 <_ZSt3endIKcLj3EEPT_RAT0__S1_>
 8005050:	4603      	mov	r3, r0
 8005052:	462a      	mov	r2, r5
 8005054:	4621      	mov	r1, r4
 8005056:	6838      	ldr	r0, [r7, #0]
 8005058:	f000 f9b7 	bl	80053ca <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_>
    }
 800505c:	e013      	b.n	8005086 <_ZN3etl17private_to_string11add_nan_infINS_13ibasic_stringIcEEEEvbbRT_+0x62>
      else if (infinity)
 800505e:	79bb      	ldrb	r3, [r7, #6]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d010      	beq.n	8005086 <_ZN3etl17private_to_string11add_nan_infINS_13ibasic_stringIcEEEEvbbRT_+0x62>
        str.insert(str.end(), ETL_OR_STD11::begin(i), ETL_OR_STD11::end(i));
 8005064:	6838      	ldr	r0, [r7, #0]
 8005066:	f7ff ff2a 	bl	8004ebe <_ZN3etl13ibasic_stringIcE3endEv>
 800506a:	4604      	mov	r4, r0
 800506c:	4809      	ldr	r0, [pc, #36]	; (8005094 <_ZN3etl17private_to_string11add_nan_infINS_13ibasic_stringIcEEEEvbbRT_+0x70>)
 800506e:	f000 f995 	bl	800539c <_ZSt5beginIKcLj3EEPT_RAT0__S1_>
 8005072:	4605      	mov	r5, r0
 8005074:	4807      	ldr	r0, [pc, #28]	; (8005094 <_ZN3etl17private_to_string11add_nan_infINS_13ibasic_stringIcEEEEvbbRT_+0x70>)
 8005076:	f000 f99c 	bl	80053b2 <_ZSt3endIKcLj3EEPT_RAT0__S1_>
 800507a:	4603      	mov	r3, r0
 800507c:	462a      	mov	r2, r5
 800507e:	4621      	mov	r1, r4
 8005080:	6838      	ldr	r0, [r7, #0]
 8005082:	f000 f9a2 	bl	80053ca <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_>
    }
 8005086:	bf00      	nop
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bdb0      	pop	{r4, r5, r7, pc}
 800508e:	bf00      	nop
 8005090:	0801a298 	.word	0x0801a298
 8005094:	0801a29c 	.word	0x0801a29c

08005098 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE4baseEm>:
    ETL_CONSTEXPR14 basic_format_spec& base(uint32_t b)
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
      base_ = static_cast<uint_least8_t>(b);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	701a      	strb	r2, [r3, #0]
      return *this;
 80050aa:	687b      	ldr	r3, [r7, #4]
    }
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE7decimalEv>:
    ETL_CONSTEXPR14 basic_format_spec& decimal()
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
      base(10);
 80050c0:	210a      	movs	r1, #10
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7ff ffe8 	bl	8005098 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE4baseEm>
      return *this;
 80050c8:	687b      	ldr	r3, [r7, #4]
    }
 80050ca:	4618      	mov	r0, r3
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE5widthEm>:
    ETL_CONSTEXPR14 basic_format_spec& width(uint32_t w)
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	6039      	str	r1, [r7, #0]
      width_ = static_cast<uint_least8_t>(w);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	705a      	strb	r2, [r3, #1]
      return *this;
 80050e4:	687b      	ldr	r3, [r7, #4]
    }
 80050e6:	4618      	mov	r0, r3
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE4fillEc>:
    ETL_CONSTEXPR14 basic_format_spec& fill(typename TString::value_type c)
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
 80050fa:	460b      	mov	r3, r1
 80050fc:	70fb      	strb	r3, [r7, #3]
      fill_ = c;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	78fa      	ldrb	r2, [r7, #3]
 8005102:	71da      	strb	r2, [r3, #7]
      return *this;
 8005104:	687b      	ldr	r3, [r7, #4]
    }
 8005106:	4618      	mov	r0, r3
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <_ZN3etl11is_negativeIfEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueEbE4typeES3_>:
    is_negative(const T value)
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	ed87 0a01 	vstr	s0, [r7, #4]
    return (value < T(0));
 800511c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005120:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005128:	bf4c      	ite	mi
 800512a:	2301      	movmi	r3, #1
 800512c:	2300      	movpl	r3, #0
 800512e:	b2db      	uxtb	r3, r3
  }
 8005130:	4618      	mov	r0, r3
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <_ZN3etl17private_to_string27add_integral_and_fractionalINS_13ibasic_stringIcEEEEvyyRT_RKNS_17basic_format_specIS4_EES9_b>:
    void add_integral_and_fractional(const uint64_t integral,
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af02      	add	r7, sp, #8
 8005142:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005146:	e9c7 2300 	strd	r2, r3, [r7]
      etl::private_to_string::add_integral(integral, str, integral_format, true, negative);
 800514a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800514e:	9301      	str	r3, [sp, #4]
 8005150:	2301      	movs	r3, #1
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800515c:	f000 f9fd 	bl	800555a <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb>
      if (fractional_format.get_precision() > 0)
 8005160:	6a38      	ldr	r0, [r7, #32]
 8005162:	f7ff fce7 	bl	8004b34 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE13get_precisionEv>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	bf14      	ite	ne
 800516c:	2301      	movne	r3, #1
 800516e:	2300      	moveq	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00d      	beq.n	8005192 <_ZN3etl17private_to_string27add_integral_and_fractionalINS_13ibasic_stringIcEEEEvyyRT_RKNS_17basic_format_specIS4_EES9_b+0x56>
        str.push_back(type('.'));
 8005176:	212e      	movs	r1, #46	; 0x2e
 8005178:	69b8      	ldr	r0, [r7, #24]
 800517a:	f7ff feaf 	bl	8004edc <_ZN3etl13ibasic_stringIcE9push_backEc>
        etl::private_to_string::add_integral(fractional, str, fractional_format, true, false);
 800517e:	2300      	movs	r3, #0
 8005180:	9301      	str	r3, [sp, #4]
 8005182:	2301      	movs	r3, #1
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800518e:	f000 f9e4 	bl	800555a <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb>
    }
 8005192:	bf00      	nop
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <_ZSt8distanceIPVcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
    distance(_InputIterator __first, _InputIterator __last)
 800519a:	b5b0      	push	{r4, r5, r7, lr}
 800519c:	b082      	sub	sp, #8
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 80051a4:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80051a6:	1d3b      	adds	r3, r7, #4
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 fac2 	bl	8005732 <_ZSt19__iterator_categoryIPVcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 80051ae:	462a      	mov	r2, r5
 80051b0:	6839      	ldr	r1, [r7, #0]
 80051b2:	4620      	mov	r0, r4
 80051b4:	f000 fac8 	bl	8005748 <_ZSt10__distanceIPVcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 80051b8:	4603      	mov	r3, r0
    }
 80051ba:	4618      	mov	r0, r3
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bdb0      	pop	{r4, r5, r7, pc}

080051c2 <_ZSt9__fill_a1IcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b086      	sub	sp, #24
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d005      	beq.n	80051ee <_ZSt9__fill_a1IcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 80051e2:	7dfb      	ldrb	r3, [r7, #23]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	4619      	mov	r1, r3
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f012 ffc9 	bl	8018180 <memset>
    }
 80051ee:	bf00      	nop
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <_ZN3etl9iter_swapIPcS1_EEvT_T0_>:
  void iter_swap(TIterator1 a, TIterator2 b)
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b082      	sub	sp, #8
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	6039      	str	r1, [r7, #0]
    swap(*a, *b);
 8005200:	6839      	ldr	r1, [r7, #0]
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 faba 	bl	800577c <_ZSt4swapIcENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
  }
 8005208:	bf00      	nop
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <_ZN3etl8distanceIPcEENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  ETL_CONSTEXPR17 typename std::iterator_traits<TIterator>::difference_type distance(TIterator first, TIterator last)
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
    return std::distance(first, last);
 800521a:	6839      	ldr	r1, [r7, #0]
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fa74 	bl	800570a <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8005222:	4603      	mov	r3, r0
  }
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE8get_fillEv>:
    ETL_CONSTEXPR typename TString::value_type get_fill() const
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
      return fill_;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	79db      	ldrb	r3, [r3, #7]
    }
 8005238:	4618      	mov	r0, r3
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <_ZN3etl13ibasic_stringIcE6insertEPKcjc>:
    iterator insert(const_iterator position, size_type n, T value)
 8005244:	b590      	push	{r4, r7, lr}
 8005246:	b08d      	sub	sp, #52	; 0x34
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	70fb      	strb	r3, [r7, #3]
      iterator position_ = to_iterator(position);
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 fab0 	bl	80057ba <_ZNK3etl13ibasic_stringIcE11to_iteratorEPKc>
 800525a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if (n == 0)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <_ZN3etl13ibasic_stringIcE6insertEPKcjc+0x22>
        return position_;
 8005262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005264:	e096      	b.n	8005394 <_ZN3etl13ibasic_stringIcE6insertEPKcjc+0x150>
      iterator insert_position = to_iterator(position);
 8005266:	68b9      	ldr	r1, [r7, #8]
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 faa6 	bl	80057ba <_ZNK3etl13ibasic_stringIcE11to_iteratorEPKc>
 800526e:	62b8      	str	r0, [r7, #40]	; 0x28
      const size_type start = etl::distance(cbegin(), position);
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 faae 	bl	80057d2 <_ZNK3etl13ibasic_stringIcE6cbeginEv>
 8005276:	4603      	mov	r3, r0
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff f9e4 	bl	8004648 <_ZN3etl8distanceIPKcEENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 8005280:	4603      	mov	r3, r0
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
      if (start >= CAPACITY)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528a:	429a      	cmp	r2, r3
 800528c:	d30a      	bcc.n	80052a4 <_ZN3etl13ibasic_stringIcE6insertEPKcjc+0x60>
        set_truncated(true);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2101      	movs	r1, #1
 8005292:	4618      	mov	r0, r3
 8005294:	f7fd fc04 	bl	8002aa0 <_ZN3etl11string_base13set_truncatedEb>
        return to_iterator(position);;
 8005298:	68b9      	ldr	r1, [r7, #8]
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 fa8d 	bl	80057ba <_ZNK3etl13ibasic_stringIcE11to_iteratorEPKc>
 80052a0:	4603      	mov	r3, r0
 80052a2:	e077      	b.n	8005394 <_ZN3etl13ibasic_stringIcE6insertEPKcjc+0x150>
      if ((start + n) >= CAPACITY)
 80052a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	441a      	add	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d31a      	bcc.n	80052e8 <_ZN3etl13ibasic_stringIcE6insertEPKcjc+0xa4>
        if ((current_size + n) > CAPACITY)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	441a      	add	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d904      	bls.n	80052cc <_ZN3etl13ibasic_stringIcE6insertEPKcjc+0x88>
          set_truncated(true);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2101      	movs	r1, #1
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fd fbea 	bl	8002aa0 <_ZN3etl11string_base13set_truncatedEb>
        current_size = CAPACITY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	601a      	str	r2, [r3, #0]
        etl::fill(insert_position, end(), value);
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f7ff fdf2 	bl	8004ebe <_ZN3etl13ibasic_stringIcE3endEv>
 80052da:	4601      	mov	r1, r0
 80052dc:	1cfb      	adds	r3, r7, #3
 80052de:	461a      	mov	r2, r3
 80052e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052e2:	f7ff f9bf 	bl	8004664 <_ZN3etl4fillIPccEEvT_S2_RKT0_>
 80052e6:	e04d      	b.n	8005384 <_ZN3etl13ibasic_stringIcE6insertEPKcjc+0x140>
        const size_type shift_amount = n;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	623b      	str	r3, [r7, #32]
        const size_type to_position = start + shift_amount;
 80052ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	4413      	add	r3, r2
 80052f2:	61fb      	str	r3, [r7, #28]
        const size_type remaining_characters = current_size - start;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	617b      	str	r3, [r7, #20]
        const size_type max_shift_characters = CAPACITY - start - shift_amount;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	1ad2      	subs	r2, r2, r3
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	613b      	str	r3, [r7, #16]
        const size_type characters_to_shift = etl::min(max_shift_characters, remaining_characters);
 800530c:	f107 0214 	add.w	r2, r7, #20
 8005310:	f107 0310 	add.w	r3, r7, #16
 8005314:	4611      	mov	r1, r2
 8005316:	4618      	mov	r0, r3
 8005318:	f7fd fbde 	bl	8002ad8 <_ZN3etl3minIjEERKT_S3_S3_>
 800531c:	4603      	mov	r3, r0
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	61bb      	str	r3, [r7, #24]
        if ((start + shift_amount + remaining_characters) > CAPACITY)
 8005322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	441a      	add	r2, r3
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	441a      	add	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	429a      	cmp	r2, r3
 8005332:	d909      	bls.n	8005348 <_ZN3etl13ibasic_stringIcE6insertEPKcjc+0x104>
          current_size = CAPACITY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	601a      	str	r2, [r3, #0]
          set_truncated(true);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2101      	movs	r1, #1
 8005340:	4618      	mov	r0, r3
 8005342:	f7fd fbad 	bl	8002aa0 <_ZN3etl11string_base13set_truncatedEb>
 8005346:	e005      	b.n	8005354 <_ZN3etl13ibasic_stringIcE6insertEPKcjc+0x110>
          current_size += shift_amount;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	441a      	add	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	601a      	str	r2, [r3, #0]
        etl::copy_backward(insert_position, insert_position + characters_to_shift, begin() + to_position + characters_to_shift);
 8005354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	18d4      	adds	r4, r2, r3
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f7ff fabb 	bl	80048d6 <_ZN3etl13ibasic_stringIcE5beginEv>
 8005360:	4601      	mov	r1, r0
 8005362:	69fa      	ldr	r2, [r7, #28]
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	4413      	add	r3, r2
 8005368:	440b      	add	r3, r1
 800536a:	461a      	mov	r2, r3
 800536c:	4621      	mov	r1, r4
 800536e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005370:	f000 fa3b 	bl	80057ea <_ZN3etl13copy_backwardIPcS1_EET0_T_S3_S2_>
        etl::fill(insert_position, insert_position + shift_amount, value);
 8005374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005376:	6a3b      	ldr	r3, [r7, #32]
 8005378:	4413      	add	r3, r2
 800537a:	1cfa      	adds	r2, r7, #3
 800537c:	4619      	mov	r1, r3
 800537e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005380:	f7ff f970 	bl	8004664 <_ZN3etl4fillIPccEEvT_S2_RKT0_>
      p_buffer[current_size] = 0;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4413      	add	r3, r2
 800538e:	2200      	movs	r2, #0
 8005390:	701a      	strb	r2, [r3, #0]
      return position_;
 8005392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8005394:	4618      	mov	r0, r3
 8005396:	3734      	adds	r7, #52	; 0x34
 8005398:	46bd      	mov	sp, r7
 800539a:	bd90      	pop	{r4, r7, pc}

0800539c <_ZSt5beginIKcLj3EEPT_RAT0__S1_>:
   *  @brief  Return an iterator pointing to the first element of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
    { return __arr; }
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4618      	mov	r0, r3
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <_ZSt3endIKcLj3EEPT_RAT0__S1_>:
   *          of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3303      	adds	r3, #3
 80053be:	4618      	mov	r0, r3
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_>:
    iterator insert(const_iterator position, TIterator first, TIterator last)
 80053ca:	b590      	push	{r4, r7, lr}
 80053cc:	b08d      	sub	sp, #52	; 0x34
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	607a      	str	r2, [r7, #4]
 80053d6:	603b      	str	r3, [r7, #0]
      iterator position_ = to_iterator(position);
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 f9ed 	bl	80057ba <_ZNK3etl13ibasic_stringIcE11to_iteratorEPKc>
 80053e0:	62f8      	str	r0, [r7, #44]	; 0x2c
      if (first == last)
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d101      	bne.n	80053ee <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0x24>
        return position_;
 80053ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ec:	e0a3      	b.n	8005536 <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0x16c>
      const size_type start = etl::distance(begin(), position_);
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7ff fa71 	bl	80048d6 <_ZN3etl13ibasic_stringIcE5beginEv>
 80053f4:	4603      	mov	r3, r0
 80053f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff ff09 	bl	8005210 <_ZN3etl8distanceIPcEENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 80053fe:	4603      	mov	r3, r0
 8005400:	62bb      	str	r3, [r7, #40]	; 0x28
      const size_type n = etl::distance(first, last);
 8005402:	6839      	ldr	r1, [r7, #0]
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7ff f91f 	bl	8004648 <_ZN3etl8distanceIPKcEENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 800540a:	4603      	mov	r3, r0
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
      if (start >= CAPACITY)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005414:	429a      	cmp	r2, r3
 8005416:	d306      	bcc.n	8005426 <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0x5c>
        set_truncated(true);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2101      	movs	r1, #1
 800541c:	4618      	mov	r0, r3
 800541e:	f7fd fb3f 	bl	8002aa0 <_ZN3etl11string_base13set_truncatedEb>
        return position_;
 8005422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005424:	e087      	b.n	8005536 <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0x16c>
      if ((start + n) >= CAPACITY)
 8005426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	441a      	add	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	429a      	cmp	r2, r3
 8005432:	d325      	bcc.n	8005480 <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0xb6>
        if (((current_size + n) > CAPACITY))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	441a      	add	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	429a      	cmp	r2, r3
 8005442:	d904      	bls.n	800544e <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0x84>
          set_truncated(true);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2101      	movs	r1, #1
 8005448:	4618      	mov	r0, r3
 800544a:	f7fd fb29 	bl	8002aa0 <_ZN3etl11string_base13set_truncatedEb>
        current_size = CAPACITY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	601a      	str	r2, [r3, #0]
        while (position_ != end())
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f7ff fd31 	bl	8004ebe <_ZN3etl13ibasic_stringIcE3endEv>
 800545c:	4602      	mov	r2, r0
 800545e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005460:	4293      	cmp	r3, r2
 8005462:	bf14      	ite	ne
 8005464:	2301      	movne	r3, #1
 8005466:	2300      	moveq	r3, #0
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d05b      	beq.n	8005526 <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0x15c>
          *position_++ = *first++;
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	1c53      	adds	r3, r2, #1
 8005472:	607b      	str	r3, [r7, #4]
 8005474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005476:	1c59      	adds	r1, r3, #1
 8005478:	62f9      	str	r1, [r7, #44]	; 0x2c
 800547a:	7812      	ldrb	r2, [r2, #0]
 800547c:	701a      	strb	r2, [r3, #0]
        while (position_ != end())
 800547e:	e7ea      	b.n	8005456 <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0x8c>
        const size_type shift_amount = n;
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	623b      	str	r3, [r7, #32]
        const size_type to_position = start + shift_amount;
 8005484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	4413      	add	r3, r2
 800548a:	61fb      	str	r3, [r7, #28]
        const size_type remaining_characters = current_size - start;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	617b      	str	r3, [r7, #20]
        const size_type max_shift_characters = CAPACITY - start - shift_amount;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549c:	1ad2      	subs	r2, r2, r3
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	613b      	str	r3, [r7, #16]
        const size_type characters_to_shift = etl::min(max_shift_characters, remaining_characters);
 80054a4:	f107 0214 	add.w	r2, r7, #20
 80054a8:	f107 0310 	add.w	r3, r7, #16
 80054ac:	4611      	mov	r1, r2
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7fd fb12 	bl	8002ad8 <_ZN3etl3minIjEERKT_S3_S3_>
 80054b4:	4603      	mov	r3, r0
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	61bb      	str	r3, [r7, #24]
        if ((start + shift_amount + remaining_characters) > CAPACITY)
 80054ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	441a      	add	r2, r3
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	441a      	add	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d909      	bls.n	80054e0 <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0x116>
          current_size = CAPACITY;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	601a      	str	r2, [r3, #0]
          set_truncated(true);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2101      	movs	r1, #1
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fd fae1 	bl	8002aa0 <_ZN3etl11string_base13set_truncatedEb>
 80054de:	e005      	b.n	80054ec <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0x122>
          current_size += shift_amount;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	441a      	add	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	601a      	str	r2, [r3, #0]
        etl::copy_backward(position_, position_ + characters_to_shift, begin() + to_position + characters_to_shift);
 80054ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	18d4      	adds	r4, r2, r3
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f7ff f9ef 	bl	80048d6 <_ZN3etl13ibasic_stringIcE5beginEv>
 80054f8:	4601      	mov	r1, r0
 80054fa:	69fa      	ldr	r2, [r7, #28]
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	4413      	add	r3, r2
 8005500:	440b      	add	r3, r1
 8005502:	461a      	mov	r2, r3
 8005504:	4621      	mov	r1, r4
 8005506:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005508:	f000 f96f 	bl	80057ea <_ZN3etl13copy_backwardIPcS1_EET0_T_S3_S2_>
        while (first != last)
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	429a      	cmp	r2, r3
 8005512:	d008      	beq.n	8005526 <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0x15c>
          *position_++ = *first++;
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	1c53      	adds	r3, r2, #1
 8005518:	607b      	str	r3, [r7, #4]
 800551a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551c:	1c59      	adds	r1, r3, #1
 800551e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005520:	7812      	ldrb	r2, [r2, #0]
 8005522:	701a      	strb	r2, [r3, #0]
        while (first != last)
 8005524:	e7f2      	b.n	800550c <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0x142>
      p_buffer[current_size] = 0;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4413      	add	r3, r2
 8005530:	2200      	movs	r2, #0
 8005532:	701a      	strb	r2, [r3, #0]
      return position_;
 8005534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8005536:	4618      	mov	r0, r3
 8005538:	3734      	adds	r7, #52	; 0x34
 800553a:	46bd      	mov	sp, r7
 800553c:	bd90      	pop	{r4, r7, pc}

0800553e <_ZN3etl8absoluteIyEENS_9enable_ifIXsrNS_11is_unsignedIT_EE5valueES3_E4typeES3_>:
    absolute(T value)
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	e9c7 0100 	strd	r0, r1, [r7]
    return value;
 8005548:	e9d7 2300 	ldrd	r2, r3, [r7]
  }
 800554c:	4610      	mov	r0, r2
 800554e:	4619      	mov	r1, r3
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb>:
    void add_integral(T value,
 800555a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800555e:	b088      	sub	sp, #32
 8005560:	af00      	add	r7, sp, #0
 8005562:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
      if (!append)
 800556a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800556e:	f083 0301 	eor.w	r3, r3, #1
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d002      	beq.n	800557e <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x24>
        str.clear();
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff fc95 	bl	8004ea8 <_ZN3etl13ibasic_stringIcE5clearEv>
      iterator start = str.end();
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff fc9d 	bl	8004ebe <_ZN3etl13ibasic_stringIcE3endEv>
 8005584:	61f8      	str	r0, [r7, #28]
      if (value == 0)
 8005586:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800558a:	4313      	orrs	r3, r2
 800558c:	d117      	bne.n	80055be <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x64>
        if ((format.get_base() == 10U) && negative)
 800558e:	6838      	ldr	r0, [r7, #0]
 8005590:	f7ff f9dc 	bl	800494c <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE8get_baseEv>
 8005594:	4603      	mov	r3, r0
 8005596:	2b0a      	cmp	r3, #10
 8005598:	d105      	bne.n	80055a6 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x4c>
 800559a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x4c>
 80055a2:	2301      	movs	r3, #1
 80055a4:	e000      	b.n	80055a8 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x4e>
 80055a6:	2300      	movs	r3, #0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x5a>
          str.push_back(type('-'));
 80055ac:	212d      	movs	r1, #45	; 0x2d
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7ff fc94 	bl	8004edc <_ZN3etl13ibasic_stringIcE9push_backEc>
        str.push_back(type('0'));
 80055b4:	2130      	movs	r1, #48	; 0x30
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7ff fc90 	bl	8004edc <_ZN3etl13ibasic_stringIcE9push_backEc>
 80055bc:	e09b      	b.n	80056f6 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x19c>
        while (value != 0)
 80055be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	d03f      	beq.n	8005646 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0xec>
          T remainder = etl::absolute(value % T(format.get_base()));
 80055c6:	6838      	ldr	r0, [r7, #0]
 80055c8:	f7ff f9c0 	bl	800494c <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE8get_baseEv>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2200      	movs	r2, #0
 80055d0:	4698      	mov	r8, r3
 80055d2:	4691      	mov	r9, r2
 80055d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055d8:	4642      	mov	r2, r8
 80055da:	464b      	mov	r3, r9
 80055dc:	f7fb fb34 	bl	8000c48 <__aeabi_uldivmod>
 80055e0:	4610      	mov	r0, r2
 80055e2:	4619      	mov	r1, r3
 80055e4:	f7ff ffab 	bl	800553e <_ZN3etl8absoluteIyEENS_9enable_ifIXsrNS_11is_unsignedIT_EE5valueES3_E4typeES3_>
 80055e8:	e9c7 0104 	strd	r0, r1, [r7, #16]
          str.push_back((remainder > 9) ? (format.is_upper_case() ? type('A' + (remainder - 10)) : type('a' + (remainder - 10))) : type('0' + remainder));
 80055ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80055f0:	2a0a      	cmp	r2, #10
 80055f2:	f173 0300 	sbcs.w	r3, r3, #0
 80055f6:	d30d      	bcc.n	8005614 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0xba>
 80055f8:	6838      	ldr	r0, [r7, #0]
 80055fa:	f7ff f9be 	bl	800497a <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE13is_upper_caseEv>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0xb2>
 8005604:	7c3b      	ldrb	r3, [r7, #16]
 8005606:	3337      	adds	r3, #55	; 0x37
 8005608:	b2db      	uxtb	r3, r3
 800560a:	e006      	b.n	800561a <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0xc0>
 800560c:	7c3b      	ldrb	r3, [r7, #16]
 800560e:	3357      	adds	r3, #87	; 0x57
 8005610:	b2db      	uxtb	r3, r3
 8005612:	e002      	b.n	800561a <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0xc0>
 8005614:	7c3b      	ldrb	r3, [r7, #16]
 8005616:	3330      	adds	r3, #48	; 0x30
 8005618:	b2db      	uxtb	r3, r3
 800561a:	4619      	mov	r1, r3
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7ff fc5d 	bl	8004edc <_ZN3etl13ibasic_stringIcE9push_backEc>
          value = value / T(format.get_base());
 8005622:	6838      	ldr	r0, [r7, #0]
 8005624:	f7ff f992 	bl	800494c <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE8get_baseEv>
 8005628:	4603      	mov	r3, r0
 800562a:	2200      	movs	r2, #0
 800562c:	461c      	mov	r4, r3
 800562e:	4615      	mov	r5, r2
 8005630:	4622      	mov	r2, r4
 8005632:	462b      	mov	r3, r5
 8005634:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005638:	f7fb fb06 	bl	8000c48 <__aeabi_uldivmod>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	e9c7 2302 	strd	r2, r3, [r7, #8]
        while (value != 0)
 8005644:	e7bb      	b.n	80055be <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x64>
        if ((format.get_base() == 10U) && negative)
 8005646:	6838      	ldr	r0, [r7, #0]
 8005648:	f7ff f980 	bl	800494c <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE8get_baseEv>
 800564c:	4603      	mov	r3, r0
 800564e:	2b0a      	cmp	r3, #10
 8005650:	d105      	bne.n	800565e <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x104>
 8005652:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x104>
 800565a:	2301      	movs	r3, #1
 800565c:	e000      	b.n	8005660 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x106>
 800565e:	2300      	movs	r3, #0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x112>
          str.push_back(type('-'));
 8005664:	212d      	movs	r1, #45	; 0x2d
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7ff fc38 	bl	8004edc <_ZN3etl13ibasic_stringIcE9push_backEc>
        if (format.is_show_base())
 800566c:	6838      	ldr	r0, [r7, #0]
 800566e:	f7ff f990 	bl	8004992 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE12is_show_baseEv>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d036      	beq.n	80056e6 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x18c>
          switch (format.get_base())
 8005678:	6838      	ldr	r0, [r7, #0]
 800567a:	f7ff f967 	bl	800494c <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE8get_baseEv>
 800567e:	4603      	mov	r3, r0
 8005680:	2b10      	cmp	r3, #16
 8005682:	d01d      	beq.n	80056c0 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x166>
 8005684:	2b10      	cmp	r3, #16
 8005686:	d82d      	bhi.n	80056e4 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x18a>
 8005688:	2b02      	cmp	r3, #2
 800568a:	d002      	beq.n	8005692 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x138>
 800568c:	2b08      	cmp	r3, #8
 800568e:	d012      	beq.n	80056b6 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x15c>
              break;
 8005690:	e028      	b.n	80056e4 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x18a>
              str.push_back(format.is_upper_case() ? type('B') : type('b'));
 8005692:	6838      	ldr	r0, [r7, #0]
 8005694:	f7ff f971 	bl	800497a <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE13is_upper_caseEv>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x148>
 800569e:	2342      	movs	r3, #66	; 0x42
 80056a0:	e000      	b.n	80056a4 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x14a>
 80056a2:	2362      	movs	r3, #98	; 0x62
 80056a4:	4619      	mov	r1, r3
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7ff fc18 	bl	8004edc <_ZN3etl13ibasic_stringIcE9push_backEc>
              str.push_back(type('0'));
 80056ac:	2130      	movs	r1, #48	; 0x30
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7ff fc14 	bl	8004edc <_ZN3etl13ibasic_stringIcE9push_backEc>
              break;
 80056b4:	e017      	b.n	80056e6 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x18c>
              str.push_back(type('0'));
 80056b6:	2130      	movs	r1, #48	; 0x30
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff fc0f 	bl	8004edc <_ZN3etl13ibasic_stringIcE9push_backEc>
              break;
 80056be:	e012      	b.n	80056e6 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x18c>
              str.push_back(format.is_upper_case() ? type('X') : type('x'));
 80056c0:	6838      	ldr	r0, [r7, #0]
 80056c2:	f7ff f95a 	bl	800497a <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE13is_upper_caseEv>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x176>
 80056cc:	2358      	movs	r3, #88	; 0x58
 80056ce:	e000      	b.n	80056d2 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x178>
 80056d0:	2378      	movs	r3, #120	; 0x78
 80056d2:	4619      	mov	r1, r3
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7ff fc01 	bl	8004edc <_ZN3etl13ibasic_stringIcE9push_backEc>
              str.push_back(type('0'));
 80056da:	2130      	movs	r1, #48	; 0x30
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7ff fbfd 	bl	8004edc <_ZN3etl13ibasic_stringIcE9push_backEc>
              break;
 80056e2:	e000      	b.n	80056e6 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x18c>
              break;
 80056e4:	bf00      	nop
        etl::reverse(start, str.end());
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7ff fbe9 	bl	8004ebe <_ZN3etl13ibasic_stringIcE3endEv>
 80056ec:	4603      	mov	r3, r0
 80056ee:	4619      	mov	r1, r3
 80056f0:	69f8      	ldr	r0, [r7, #28]
 80056f2:	f7ff fc1a 	bl	8004f2a <_ZN3etl7reverseIPcEENS_9enable_ifIXsrNS_10is_pointerIT_EE5valueEvE4typeES4_S4_>
      etl::private_to_string::add_alignment(str, start, format);
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	69f9      	ldr	r1, [r7, #28]
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7ff fc4e 	bl	8004f9c <_ZN3etl17private_to_string13add_alignmentINS_13ibasic_stringIcEEEEvRT_NS4_8iteratorERKNS_17basic_format_specIS4_EE>
    }
 8005700:	bf00      	nop
 8005702:	3720      	adds	r7, #32
 8005704:	46bd      	mov	sp, r7
 8005706:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800570a <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
    distance(_InputIterator __first, _InputIterator __last)
 800570a:	b5b0      	push	{r4, r5, r7, lr}
 800570c:	b082      	sub	sp, #8
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 8005714:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8005716:	1d3b      	adds	r3, r7, #4
 8005718:	4618      	mov	r0, r3
 800571a:	f000 f876 	bl	800580a <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 800571e:	462a      	mov	r2, r5
 8005720:	6839      	ldr	r1, [r7, #0]
 8005722:	4620      	mov	r0, r4
 8005724:	f000 f87c 	bl	8005820 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8005728:	4603      	mov	r3, r0
    }
 800572a:	4618      	mov	r0, r3
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bdb0      	pop	{r4, r5, r7, pc}

08005732 <_ZSt19__iterator_categoryIPVcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800573a:	bf00      	nop
 800573c:	4618      	mov	r0, r3
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <_ZSt10__distanceIPVcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	1ad3      	subs	r3, r2, r3
    }
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8005766:	b480      	push	{r7}
 8005768:	b083      	sub	sp, #12
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4618      	mov	r0, r3
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <_ZSt4swapIcENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7ff ffed 	bl	8005766 <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 800578c:	4603      	mov	r3, r0
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	73fb      	strb	r3, [r7, #15]
      __a = _GLIBCXX_MOVE(__b);
 8005792:	6838      	ldr	r0, [r7, #0]
 8005794:	f7ff ffe7 	bl	8005766 <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 8005798:	4603      	mov	r3, r0
 800579a:	781a      	ldrb	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	701a      	strb	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80057a0:	f107 030f 	add.w	r3, r7, #15
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff ffde 	bl	8005766 <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 80057aa:	4603      	mov	r3, r0
 80057ac:	781a      	ldrb	r2, [r3, #0]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	701a      	strb	r2, [r3, #0]
    }
 80057b2:	bf00      	nop
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <_ZNK3etl13ibasic_stringIcE11to_iteratorEPKc>:
  protected:

    //*************************************************************************
    /// Convert from const_iterator to iterator
    //*************************************************************************
    iterator to_iterator(const_iterator itr) const
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	6039      	str	r1, [r7, #0]
    {
      return const_cast<iterator>(itr);
 80057c4:	683b      	ldr	r3, [r7, #0]
    }
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <_ZNK3etl13ibasic_stringIcE6cbeginEv>:
    const_iterator cbegin() const
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
      return &p_buffer[0];
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68db      	ldr	r3, [r3, #12]
    }
 80057de:	4618      	mov	r0, r3
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <_ZN3etl13copy_backwardIPcS1_EET0_T_S3_S2_>:
  TIterator2 copy_backward(TIterator1 sb, TIterator1 se, TIterator2 de)
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
    return std::copy_backward(sb, se, de);
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	68b9      	ldr	r1, [r7, #8]
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 f81f 	bl	800583e <_ZSt13copy_backwardIPcS0_ET0_T_S2_S1_>
 8005800:	4603      	mov	r3, r0
  }
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8005812:	bf00      	nop
 8005814:	4618      	mov	r0, r3
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	1ad3      	subs	r3, r2, r3
    }
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <_ZSt13copy_backwardIPcS0_ET0_T_S2_S1_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800583e:	b590      	push	{r4, r7, lr}
 8005840:	b085      	sub	sp, #20
 8005842:	af00      	add	r7, sp, #0
 8005844:	60f8      	str	r0, [r7, #12]
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 f826 	bl	800589c <_ZSt12__miter_baseIPcET_S1_>
 8005850:	4604      	mov	r4, r0
 8005852:	68b8      	ldr	r0, [r7, #8]
 8005854:	f000 f822 	bl	800589c <_ZSt12__miter_baseIPcET_S1_>
 8005858:	4603      	mov	r3, r0
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	4619      	mov	r1, r3
 800585e:	4620      	mov	r0, r4
 8005860:	f000 f827 	bl	80058b2 <_ZSt22__copy_move_backward_aILb0EPcS0_ET1_T0_S2_S1_>
 8005864:	4603      	mov	r3, r0
    }
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	bd90      	pop	{r4, r7, pc}

0800586e <_ZSt12__niter_baseIPcET_S1_>:
    __niter_base(_Iterator __it)
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4618      	mov	r0, r3
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <_ZSt12__niter_wrapIPcET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
    { return __res; }
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	4618      	mov	r0, r3
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <_ZSt12__miter_baseIPcET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4618      	mov	r0, r3
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <_ZSt22__copy_move_backward_aILb0EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80058b2:	b5b0      	push	{r4, r5, r7, lr}
 80058b4:	b084      	sub	sp, #16
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	60f8      	str	r0, [r7, #12]
 80058ba:	60b9      	str	r1, [r7, #8]
 80058bc:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f7ff ffd5 	bl	800586e <_ZSt12__niter_baseIPcET_S1_>
 80058c4:	4604      	mov	r4, r0
 80058c6:	68b8      	ldr	r0, [r7, #8]
 80058c8:	f7ff ffd1 	bl	800586e <_ZSt12__niter_baseIPcET_S1_>
 80058cc:	4605      	mov	r5, r0
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff ffcc 	bl	800586e <_ZSt12__niter_baseIPcET_S1_>
 80058d6:	4603      	mov	r3, r0
 80058d8:	461a      	mov	r2, r3
 80058da:	4629      	mov	r1, r5
 80058dc:	4620      	mov	r0, r4
 80058de:	f000 f80b 	bl	80058f8 <_ZSt23__copy_move_backward_a1ILb0EPcS0_ET1_T0_S2_S1_>
 80058e2:	4602      	mov	r2, r0
 80058e4:	1d3b      	adds	r3, r7, #4
 80058e6:	4611      	mov	r1, r2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff ffcb 	bl	8005884 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 80058ee:	4603      	mov	r3, r0
    }
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bdb0      	pop	{r4, r5, r7, pc}

080058f8 <_ZSt23__copy_move_backward_a1ILb0EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	68b9      	ldr	r1, [r7, #8]
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f805 	bl	8005918 <_ZSt23__copy_move_backward_a2ILb0EPcS0_ET1_T0_S2_S1_>
 800590e:	4603      	mov	r3, r0
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <_ZSt23__copy_move_backward_a2ILb0EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	68b9      	ldr	r1, [r7, #8]
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 f805 	bl	8005938 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_>
 800592e:	4603      	mov	r3, r0
    }
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d008      	beq.n	8005964 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_+0x2c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	425b      	negs	r3, r3
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	4413      	add	r3, r2
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	68f9      	ldr	r1, [r7, #12]
 800595e:	4618      	mov	r0, r3
 8005960:	f012 fbf4 	bl	801814c <memmove>
	  return __result - _Num;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	425b      	negs	r3, r3
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	4413      	add	r3, r2
	}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <_Z41__static_initialization_and_destruction_0ii>:
}
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af02      	add	r7, sp, #8
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b01      	cmp	r3, #1
 8005982:	f040 80b8 	bne.w	8005af6 <_Z41__static_initialization_and_destruction_0ii+0x182>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800598c:	4293      	cmp	r3, r2
 800598e:	f040 80b2 	bne.w	8005af6 <_Z41__static_initialization_and_destruction_0ii+0x182>
#include "FrontLights.hpp"
#include "PowerBoard.hpp"
#include "RearLights.hpp"
#include "Mppt.hpp"

SolarGators::DataModules::SteeringController LightsState;
 8005992:	4883      	ldr	r0, [pc, #524]	; (8005ba0 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8005994:	f006 f9a4 	bl	800bce0 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev>
SolarGators::DataModules::MitsubaRequest McReq(SolarGators::DataModuleInfo::MOTORTX_RL_MSG_ID);
 8005998:	4982      	ldr	r1, [pc, #520]	; (8005ba4 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 800599a:	4883      	ldr	r0, [pc, #524]	; (8005ba8 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 800599c:	f003 fe8e 	bl	80096bc <_ZN11SolarGators11DataModules14MitsubaRequestC1Em>
SolarGators::DataModules::OrionBMSRx0 BMS_Rx_0(SolarGators::DataModuleInfo::BMS_RX0_MSG_ID, 0);
 80059a0:	2200      	movs	r2, #0
 80059a2:	f44f 61d6 	mov.w	r1, #1712	; 0x6b0
 80059a6:	4881      	ldr	r0, [pc, #516]	; (8005bac <_Z41__static_initialization_and_destruction_0ii+0x238>)
 80059a8:	f004 fd1c 	bl	800a3e4 <_ZN11SolarGators11DataModules11OrionBMSRx0C1Emm>
SolarGators::DataModules::OrionBMSRx1 BMS_Rx_1(SolarGators::DataModuleInfo::BMS_RX1_MSG_ID, 0);
 80059ac:	2200      	movs	r2, #0
 80059ae:	f240 61b1 	movw	r1, #1713	; 0x6b1
 80059b2:	487f      	ldr	r0, [pc, #508]	; (8005bb0 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 80059b4:	f004 fde8 	bl	800a588 <_ZN11SolarGators11DataModules11OrionBMSRx1C1Emm>
SolarGators::DataModules::OrionBMSRx2 BMS_Rx_2(SolarGators::DataModuleInfo::BMS_RX2_MSG_ID, 0);
 80059b8:	2200      	movs	r2, #0
 80059ba:	f240 61b2 	movw	r1, #1714	; 0x6b2
 80059be:	487d      	ldr	r0, [pc, #500]	; (8005bb4 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 80059c0:	f004 fe8e 	bl	800a6e0 <_ZN11SolarGators11DataModules11OrionBMSRx2C1Emm>
SolarGators::DataModules::OrionBMSRx4 BMS_Rx_4(SolarGators::DataModuleInfo::BMS_RX4_MSG_ID, 0);
 80059c4:	2200      	movs	r2, #0
 80059c6:	f240 61b4 	movw	r1, #1716	; 0x6b4
 80059ca:	487b      	ldr	r0, [pc, #492]	; (8005bb8 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 80059cc:	f004 ff5c 	bl	800a888 <_ZN11SolarGators11DataModules11OrionBMSRx4C1Emm>
SolarGators::DataModules::MitsubaRx0 Motor_Rx_0(SolarGators::DataModuleInfo::MOTORRX0_RL_MSG_ID, 0x04);
 80059d0:	2204      	movs	r2, #4
 80059d2:	497a      	ldr	r1, [pc, #488]	; (8005bbc <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80059d4:	487a      	ldr	r0, [pc, #488]	; (8005bc0 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 80059d6:	f003 ff25 	bl	8009824 <_ZN11SolarGators11DataModules10MitsubaRx0C1Emt>
SolarGators::DataModules::MitsubaRx2 Motor_Rx_2(SolarGators::DataModuleInfo::MOTORRX2_RL_MSG_ID, 0x04);
 80059da:	2204      	movs	r2, #4
 80059dc:	4979      	ldr	r1, [pc, #484]	; (8005bc4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 80059de:	487a      	ldr	r0, [pc, #488]	; (8005bc8 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80059e0:	f004 f924 	bl	8009c2c <_ZN11SolarGators11DataModules10MitsubaRx2C1Emt>
SolarGators::DataModules::PowerBoard PowerBoard;
 80059e4:	4879      	ldr	r0, [pc, #484]	; (8005bcc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 80059e6:	f005 fb3f 	bl	800b068 <_ZN11SolarGators11DataModules10PowerBoardC1Ev>
SolarGators::DataModules::FrontLights FLights;
 80059ea:	4879      	ldr	r0, [pc, #484]	; (8005bd0 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 80059ec:	f003 fdbc 	bl	8009568 <_ZN11SolarGators11DataModules11FrontLightsC1Ev>
SolarGators::DataModules::RearLights RLights;
 80059f0:	4878      	ldr	r0, [pc, #480]	; (8005bd4 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 80059f2:	f005 fc1d 	bl	800b230 <_ZN11SolarGators11DataModules10RearLightsC1Ev>
SolarGators::DataModules::Mpptx1 MPPT0_Rx_1(SolarGators::DataModuleInfo::MPPT0_RX1_MSG_ID);
 80059f6:	f240 6101 	movw	r1, #1537	; 0x601
 80059fa:	4877      	ldr	r0, [pc, #476]	; (8005bd8 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 80059fc:	f004 fc40 	bl	800a280 <_ZN11SolarGators11DataModules6Mpptx1C1Em>
SolarGators::DataModules::Mpptx1 MPPT1_Rx_1(SolarGators::DataModuleInfo::MPPT1_RX1_MSG_ID);
 8005a00:	f240 6111 	movw	r1, #1553	; 0x611
 8005a04:	4875      	ldr	r0, [pc, #468]	; (8005bdc <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8005a06:	f004 fc3b 	bl	800a280 <_ZN11SolarGators11DataModules6Mpptx1C1Em>
SolarGators::DataModules::Mpptx1 MPPT2_Rx_1(SolarGators::DataModuleInfo::MPPT2_RX1_MSG_ID);
 8005a0a:	f240 6121 	movw	r1, #1569	; 0x621
 8005a0e:	4874      	ldr	r0, [pc, #464]	; (8005be0 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8005a10:	f004 fc36 	bl	800a280 <_ZN11SolarGators11DataModules6Mpptx1C1Em>
// Forward Declares
extern CAN_HandleTypeDef hcan1;
// extern TIM_HandleTypeDef htim2;

// CAN Driver
SolarGators::Drivers::CANDriver CANController(&hcan1, 0);
 8005a14:	2200      	movs	r2, #0
 8005a16:	4973      	ldr	r1, [pc, #460]	; (8005be4 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8005a18:	4873      	ldr	r0, [pc, #460]	; (8005be8 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8005a1a:	f007 fdfb 	bl	800d614 <_ZN11SolarGators7Drivers9CANDriverC1EP19__CAN_HandleTypeDefm>

// Buttons
// Left Side
SolarGators::Drivers::Button left_turn    ("Left Turn", BTN4_GPIO_Port, BTN4_Pin);
 8005a1e:	2300      	movs	r3, #0
 8005a20:	9301      	str	r3, [sp, #4]
 8005a22:	2300      	movs	r3, #0
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	2340      	movs	r3, #64	; 0x40
 8005a28:	4a70      	ldr	r2, [pc, #448]	; (8005bec <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8005a2a:	4971      	ldr	r1, [pc, #452]	; (8005bf0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8005a2c:	4871      	ldr	r0, [pc, #452]	; (8005bf4 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8005a2e:	f007 fd13 	bl	800d458 <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button headlights   ("Headlights", BTN3_GPIO_Port, BTN3_Pin);
 8005a32:	2300      	movs	r3, #0
 8005a34:	9301      	str	r3, [sp, #4]
 8005a36:	2300      	movs	r3, #0
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a3e:	4a6e      	ldr	r2, [pc, #440]	; (8005bf8 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8005a40:	496e      	ldr	r1, [pc, #440]	; (8005bfc <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8005a42:	486f      	ldr	r0, [pc, #444]	; (8005c00 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8005a44:	f007 fd08 	bl	800d458 <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
//SolarGators::Drivers::Button eco          ("Eco Enable", BTN8_GPIO_Port, BTN8_Pin); // (regen)
//SolarGators::Drivers::Button horn         ("Horn", BTN7_GPIO_Port, BTN7_Pin);
SolarGators::Drivers::Button reverse      ("Reverse", BTN1_GPIO_Port, BTN1_Pin);
 8005a48:	2300      	movs	r3, #0
 8005a4a:	9301      	str	r3, [sp, #4]
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a54:	4a68      	ldr	r2, [pc, #416]	; (8005bf8 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8005a56:	496b      	ldr	r1, [pc, #428]	; (8005c04 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 8005a58:	486b      	ldr	r0, [pc, #428]	; (8005c08 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8005a5a:	f007 fcfd 	bl	800d458 <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>

// Right Side
SolarGators::Drivers::Button right_turn   ("Right Turn", BTN9_GPIO_Port, BTN9_Pin);
 8005a5e:	2300      	movs	r3, #0
 8005a60:	9301      	str	r3, [sp, #4]
 8005a62:	2300      	movs	r3, #0
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a6a:	4a68      	ldr	r2, [pc, #416]	; (8005c0c <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8005a6c:	4968      	ldr	r1, [pc, #416]	; (8005c10 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8005a6e:	4869      	ldr	r0, [pc, #420]	; (8005c14 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8005a70:	f007 fcf2 	bl	800d458 <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button hazards      ("Hazards", BTN0_GPIO_Port, BTN0_Pin);
 8005a74:	2300      	movs	r3, #0
 8005a76:	9301      	str	r3, [sp, #4]
 8005a78:	2300      	movs	r3, #0
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a80:	4a5d      	ldr	r2, [pc, #372]	; (8005bf8 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8005a82:	4965      	ldr	r1, [pc, #404]	; (8005c18 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8005a84:	4865      	ldr	r0, [pc, #404]	; (8005c1c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8005a86:	f007 fce7 	bl	800d458 <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button cruise       ("Cruise", BTN2_GPIO_Port, BTN2_Pin);
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	9301      	str	r3, [sp, #4]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a96:	4a58      	ldr	r2, [pc, #352]	; (8005bf8 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8005a98:	4961      	ldr	r1, [pc, #388]	; (8005c20 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8005a9a:	4862      	ldr	r0, [pc, #392]	; (8005c24 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8005a9c:	f007 fcdc 	bl	800d458 <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button cruise_plus  ("Cruise Plus", BTN6_GPIO_Port, BTN6_Pin);
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	9301      	str	r3, [sp, #4]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005aac:	4a4f      	ldr	r2, [pc, #316]	; (8005bec <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8005aae:	495e      	ldr	r1, [pc, #376]	; (8005c28 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8005ab0:	485e      	ldr	r0, [pc, #376]	; (8005c2c <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8005ab2:	f007 fcd1 	bl	800d458 <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button cruise_minus ("Cruise Minus", BTN5_GPIO_Port, BTN5_Pin);
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	9301      	str	r3, [sp, #4]
 8005aba:	2300      	movs	r3, #0
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	2380      	movs	r3, #128	; 0x80
 8005ac0:	4a4a      	ldr	r2, [pc, #296]	; (8005bec <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8005ac2:	495b      	ldr	r1, [pc, #364]	; (8005c30 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8005ac4:	485b      	ldr	r0, [pc, #364]	; (8005c34 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8005ac6:	f007 fcc7 	bl	800d458 <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
osSemaphoreId_t lcdSem = osSemaphoreNew(1, 1, NULL);
 8005aca:	2200      	movs	r2, #0
 8005acc:	2101      	movs	r1, #1
 8005ace:	2001      	movs	r0, #1
 8005ad0:	f00e fa71 	bl	8013fb6 <osSemaphoreNew>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	4a58      	ldr	r2, [pc, #352]	; (8005c38 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8005ad8:	6013      	str	r3, [r2, #0]
osSemaphoreId_t spkrSem = osSemaphoreNew(1, 1, NULL);
 8005ada:	2200      	movs	r2, #0
 8005adc:	2101      	movs	r1, #1
 8005ade:	2001      	movs	r0, #1
 8005ae0:	f00e fa69 	bl	8013fb6 <osSemaphoreNew>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	4a55      	ldr	r2, [pc, #340]	; (8005c3c <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8005ae8:	6013      	str	r3, [r2, #0]
SolarGators::Drivers::ILI9341 Display(ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8005aea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005aee:	21f0      	movs	r1, #240	; 0xf0
 8005af0:	4853      	ldr	r0, [pc, #332]	; (8005c40 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8005af2:	f009 f859 	bl	800eba8 <_ZN11SolarGators7Drivers7ILI9341C1Ess>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d14c      	bne.n	8005b96 <_Z41__static_initialization_and_destruction_0ii+0x222>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d147      	bne.n	8005b96 <_Z41__static_initialization_and_destruction_0ii+0x222>
 8005b06:	484e      	ldr	r0, [pc, #312]	; (8005c40 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8005b08:	f009 f8da 	bl	800ecc0 <_ZN11SolarGators7Drivers7ILI9341D1Ev>
 8005b0c:	4849      	ldr	r0, [pc, #292]	; (8005c34 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8005b0e:	f007 fccf 	bl	800d4b0 <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button cruise_plus  ("Cruise Plus", BTN6_GPIO_Port, BTN6_Pin);
 8005b12:	4846      	ldr	r0, [pc, #280]	; (8005c2c <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8005b14:	f007 fccc 	bl	800d4b0 <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button cruise       ("Cruise", BTN2_GPIO_Port, BTN2_Pin);
 8005b18:	4842      	ldr	r0, [pc, #264]	; (8005c24 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8005b1a:	f007 fcc9 	bl	800d4b0 <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button hazards      ("Hazards", BTN0_GPIO_Port, BTN0_Pin);
 8005b1e:	483f      	ldr	r0, [pc, #252]	; (8005c1c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8005b20:	f007 fcc6 	bl	800d4b0 <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button right_turn   ("Right Turn", BTN9_GPIO_Port, BTN9_Pin);
 8005b24:	483b      	ldr	r0, [pc, #236]	; (8005c14 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8005b26:	f007 fcc3 	bl	800d4b0 <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button reverse      ("Reverse", BTN1_GPIO_Port, BTN1_Pin);
 8005b2a:	4837      	ldr	r0, [pc, #220]	; (8005c08 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8005b2c:	f007 fcc0 	bl	800d4b0 <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button headlights   ("Headlights", BTN3_GPIO_Port, BTN3_Pin);
 8005b30:	4833      	ldr	r0, [pc, #204]	; (8005c00 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8005b32:	f007 fcbd 	bl	800d4b0 <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button left_turn    ("Left Turn", BTN4_GPIO_Port, BTN4_Pin);
 8005b36:	482f      	ldr	r0, [pc, #188]	; (8005bf4 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8005b38:	f007 fcba 	bl	800d4b0 <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::CANDriver CANController(&hcan1, 0);
 8005b3c:	482a      	ldr	r0, [pc, #168]	; (8005be8 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8005b3e:	f007 fde7 	bl	800d710 <_ZN11SolarGators7Drivers9CANDriverD1Ev>
SolarGators::DataModules::Mpptx1 MPPT2_Rx_1(SolarGators::DataModuleInfo::MPPT2_RX1_MSG_ID);
 8005b42:	4827      	ldr	r0, [pc, #156]	; (8005be0 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8005b44:	f7fd f802 	bl	8002b4c <_ZN11SolarGators11DataModules6Mpptx1D1Ev>
SolarGators::DataModules::Mpptx1 MPPT1_Rx_1(SolarGators::DataModuleInfo::MPPT1_RX1_MSG_ID);
 8005b48:	4824      	ldr	r0, [pc, #144]	; (8005bdc <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8005b4a:	f7fc ffff 	bl	8002b4c <_ZN11SolarGators11DataModules6Mpptx1D1Ev>
SolarGators::DataModules::Mpptx1 MPPT0_Rx_1(SolarGators::DataModuleInfo::MPPT0_RX1_MSG_ID);
 8005b4e:	4822      	ldr	r0, [pc, #136]	; (8005bd8 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8005b50:	f7fc fffc 	bl	8002b4c <_ZN11SolarGators11DataModules6Mpptx1D1Ev>
SolarGators::DataModules::RearLights RLights;
 8005b54:	481f      	ldr	r0, [pc, #124]	; (8005bd4 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8005b56:	f005 fb93 	bl	800b280 <_ZN11SolarGators11DataModules10RearLightsD1Ev>
SolarGators::DataModules::FrontLights FLights;
 8005b5a:	481d      	ldr	r0, [pc, #116]	; (8005bd0 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8005b5c:	f003 fd2c 	bl	80095b8 <_ZN11SolarGators11DataModules11FrontLightsD1Ev>
SolarGators::DataModules::PowerBoard PowerBoard;
 8005b60:	481a      	ldr	r0, [pc, #104]	; (8005bcc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005b62:	f005 faad 	bl	800b0c0 <_ZN11SolarGators11DataModules10PowerBoardD1Ev>
SolarGators::DataModules::MitsubaRx2 Motor_Rx_2(SolarGators::DataModuleInfo::MOTORRX2_RL_MSG_ID, 0x04);
 8005b66:	4818      	ldr	r0, [pc, #96]	; (8005bc8 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8005b68:	f004 f87e 	bl	8009c68 <_ZN11SolarGators11DataModules10MitsubaRx2D1Ev>
SolarGators::DataModules::MitsubaRx0 Motor_Rx_0(SolarGators::DataModuleInfo::MOTORRX0_RL_MSG_ID, 0x04);
 8005b6c:	4814      	ldr	r0, [pc, #80]	; (8005bc0 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8005b6e:	f003 fe97 	bl	80098a0 <_ZN11SolarGators11DataModules10MitsubaRx0D1Ev>
SolarGators::DataModules::OrionBMSRx4 BMS_Rx_4(SolarGators::DataModuleInfo::BMS_RX4_MSG_ID, 0);
 8005b72:	4811      	ldr	r0, [pc, #68]	; (8005bb8 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8005b74:	f7fc ff30 	bl	80029d8 <_ZN11SolarGators11DataModules11OrionBMSRx4D1Ev>
SolarGators::DataModules::OrionBMSRx2 BMS_Rx_2(SolarGators::DataModuleInfo::BMS_RX2_MSG_ID, 0);
 8005b78:	480e      	ldr	r0, [pc, #56]	; (8005bb4 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8005b7a:	f7fc ff0b 	bl	8002994 <_ZN11SolarGators11DataModules11OrionBMSRx2D1Ev>
SolarGators::DataModules::OrionBMSRx1 BMS_Rx_1(SolarGators::DataModuleInfo::BMS_RX1_MSG_ID, 0);
 8005b7e:	480c      	ldr	r0, [pc, #48]	; (8005bb0 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8005b80:	f7fc fee6 	bl	8002950 <_ZN11SolarGators11DataModules11OrionBMSRx1D1Ev>
SolarGators::DataModules::OrionBMSRx0 BMS_Rx_0(SolarGators::DataModuleInfo::BMS_RX0_MSG_ID, 0);
 8005b84:	4809      	ldr	r0, [pc, #36]	; (8005bac <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8005b86:	f7fc fec1 	bl	800290c <_ZN11SolarGators11DataModules11OrionBMSRx0D1Ev>
SolarGators::DataModules::MitsubaRequest McReq(SolarGators::DataModuleInfo::MOTORTX_RL_MSG_ID);
 8005b8a:	4807      	ldr	r0, [pc, #28]	; (8005ba8 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8005b8c:	f003 fdb2 	bl	80096f4 <_ZN11SolarGators11DataModules14MitsubaRequestD1Ev>
SolarGators::DataModules::SteeringController LightsState;
 8005b90:	4803      	ldr	r0, [pc, #12]	; (8005ba0 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8005b92:	f006 f935 	bl	800be00 <_ZN11SolarGators11DataModules18SteeringControllerD1Ev>
}
 8005b96:	bf00      	nop
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20000298 	.word	0x20000298
 8005ba4:	08f89540 	.word	0x08f89540
 8005ba8:	20000864 	.word	0x20000864
 8005bac:	200008e0 	.word	0x200008e0
 8005bb0:	20000960 	.word	0x20000960
 8005bb4:	200009e0 	.word	0x200009e0
 8005bb8:	20000a60 	.word	0x20000a60
 8005bbc:	08850225 	.word	0x08850225
 8005bc0:	20000af4 	.word	0x20000af4
 8005bc4:	08a50225 	.word	0x08a50225
 8005bc8:	20000b7c 	.word	0x20000b7c
 8005bcc:	20000c08 	.word	0x20000c08
 8005bd0:	20000c88 	.word	0x20000c88
 8005bd4:	20000d6c 	.word	0x20000d6c
 8005bd8:	20000de8 	.word	0x20000de8
 8005bdc:	20000e68 	.word	0x20000e68
 8005be0:	20000ee8 	.word	0x20000ee8
 8005be4:	20000100 	.word	0x20000100
 8005be8:	20000f68 	.word	0x20000f68
 8005bec:	40020800 	.word	0x40020800
 8005bf0:	08019238 	.word	0x08019238
 8005bf4:	20001554 	.word	0x20001554
 8005bf8:	40020400 	.word	0x40020400
 8005bfc:	08019244 	.word	0x08019244
 8005c00:	20001578 	.word	0x20001578
 8005c04:	08019250 	.word	0x08019250
 8005c08:	2000159c 	.word	0x2000159c
 8005c0c:	40020000 	.word	0x40020000
 8005c10:	08019258 	.word	0x08019258
 8005c14:	200015c0 	.word	0x200015c0
 8005c18:	08019264 	.word	0x08019264
 8005c1c:	200015e4 	.word	0x200015e4
 8005c20:	0801926c 	.word	0x0801926c
 8005c24:	20001608 	.word	0x20001608
 8005c28:	08019274 	.word	0x08019274
 8005c2c:	2000162c 	.word	0x2000162c
 8005c30:	08019280 	.word	0x08019280
 8005c34:	20001650 	.word	0x20001650
 8005c38:	20001678 	.word	0x20001678
 8005c3c:	2000167c 	.word	0x2000167c
 8005c40:	20004a6c 	.word	0x20004a6c

08005c44 <_GLOBAL__sub_I_LightsState>:
 8005c44:	b580      	push	{r7, lr}
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	f7ff fe91 	bl	8005974 <_Z41__static_initialization_and_destruction_0ii>
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <_GLOBAL__sub_D_LightsState>:
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	f7ff fe89 	bl	8005974 <_Z41__static_initialization_and_destruction_0ii>
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005c9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005c68:	480d      	ldr	r0, [pc, #52]	; (8005ca0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005c6a:	490e      	ldr	r1, [pc, #56]	; (8005ca4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005c6c:	4a0e      	ldr	r2, [pc, #56]	; (8005ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c70:	e002      	b.n	8005c78 <LoopCopyDataInit>

08005c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c76:	3304      	adds	r3, #4

08005c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c7c:	d3f9      	bcc.n	8005c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c7e:	4a0b      	ldr	r2, [pc, #44]	; (8005cac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005c80:	4c0b      	ldr	r4, [pc, #44]	; (8005cb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c84:	e001      	b.n	8005c8a <LoopFillZerobss>

08005c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c88:	3204      	adds	r2, #4

08005c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c8c:	d3fb      	bcc.n	8005c86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005c8e:	f7fc fd8f 	bl	80027b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005c92:	f012 fa21 	bl	80180d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005c96:	f7fb ff59 	bl	8001b4c <main>
  bx  lr    
 8005c9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005c9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ca4:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8005ca8:	0801aaa8 	.word	0x0801aaa8
  ldr r2, =_sbss
 8005cac:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8005cb0:	20006498 	.word	0x20006498

08005cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005cb4:	e7fe      	b.n	8005cb4 <ADC_IRQHandler>
	...

08005cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005cbc:	4b0e      	ldr	r3, [pc, #56]	; (8005cf8 <HAL_Init+0x40>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a0d      	ldr	r2, [pc, #52]	; (8005cf8 <HAL_Init+0x40>)
 8005cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005cc8:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <HAL_Init+0x40>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a0a      	ldr	r2, [pc, #40]	; (8005cf8 <HAL_Init+0x40>)
 8005cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005cd4:	4b08      	ldr	r3, [pc, #32]	; (8005cf8 <HAL_Init+0x40>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a07      	ldr	r2, [pc, #28]	; (8005cf8 <HAL_Init+0x40>)
 8005cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ce0:	2003      	movs	r0, #3
 8005ce2:	f000 fdb9 	bl	8006858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ce6:	200f      	movs	r0, #15
 8005ce8:	f000 f808 	bl	8005cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005cec:	f7fc fa9c 	bl	8002228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	40023c00 	.word	0x40023c00

08005cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005d04:	4b12      	ldr	r3, [pc, #72]	; (8005d50 <HAL_InitTick+0x54>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	4b12      	ldr	r3, [pc, #72]	; (8005d54 <HAL_InitTick+0x58>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 fdd1 	bl	80068c2 <HAL_SYSTICK_Config>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e00e      	b.n	8005d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b0f      	cmp	r3, #15
 8005d2e:	d80a      	bhi.n	8005d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d30:	2200      	movs	r2, #0
 8005d32:	6879      	ldr	r1, [r7, #4]
 8005d34:	f04f 30ff 	mov.w	r0, #4294967295
 8005d38:	f000 fd99 	bl	800686e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d3c:	4a06      	ldr	r2, [pc, #24]	; (8005d58 <HAL_InitTick+0x5c>)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	e000      	b.n	8005d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	20000004 	.word	0x20000004
 8005d54:	20000044 	.word	0x20000044
 8005d58:	20000040 	.word	0x20000040

08005d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d60:	4b06      	ldr	r3, [pc, #24]	; (8005d7c <HAL_IncTick+0x20>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	461a      	mov	r2, r3
 8005d66:	4b06      	ldr	r3, [pc, #24]	; (8005d80 <HAL_IncTick+0x24>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	4a04      	ldr	r2, [pc, #16]	; (8005d80 <HAL_IncTick+0x24>)
 8005d6e:	6013      	str	r3, [r2, #0]
}
 8005d70:	bf00      	nop
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	20000044 	.word	0x20000044
 8005d80:	20004ad4 	.word	0x20004ad4

08005d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0
  return uwTick;
 8005d88:	4b03      	ldr	r3, [pc, #12]	; (8005d98 <HAL_GetTick+0x14>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	20004ad4 	.word	0x20004ad4

08005d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005da4:	f7ff ffee 	bl	8005d84 <HAL_GetTick>
 8005da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db4:	d005      	beq.n	8005dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005db6:	4b0a      	ldr	r3, [pc, #40]	; (8005de0 <HAL_Delay+0x44>)
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005dc2:	bf00      	nop
 8005dc4:	f7ff ffde 	bl	8005d84 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d8f7      	bhi.n	8005dc4 <HAL_Delay+0x28>
  {
  }
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	20000044 	.word	0x20000044

08005de4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e0ed      	b.n	8005fd2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d102      	bne.n	8005e08 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7fc fa3c 	bl	8002280 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0201 	orr.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e18:	f7ff ffb4 	bl	8005d84 <HAL_GetTick>
 8005e1c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005e1e:	e012      	b.n	8005e46 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005e20:	f7ff ffb0 	bl	8005d84 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b0a      	cmp	r3, #10
 8005e2c:	d90b      	bls.n	8005e46 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2205      	movs	r2, #5
 8005e3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e0c5      	b.n	8005fd2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0e5      	beq.n	8005e20 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0202 	bic.w	r2, r2, #2
 8005e62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e64:	f7ff ff8e 	bl	8005d84 <HAL_GetTick>
 8005e68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005e6a:	e012      	b.n	8005e92 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005e6c:	f7ff ff8a 	bl	8005d84 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b0a      	cmp	r3, #10
 8005e78:	d90b      	bls.n	8005e92 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2205      	movs	r2, #5
 8005e8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e09f      	b.n	8005fd2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1e5      	bne.n	8005e6c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	7e1b      	ldrb	r3, [r3, #24]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d108      	bne.n	8005eba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	e007      	b.n	8005eca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ec8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	7e5b      	ldrb	r3, [r3, #25]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d108      	bne.n	8005ee4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	e007      	b.n	8005ef4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ef2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	7e9b      	ldrb	r3, [r3, #26]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d108      	bne.n	8005f0e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0220 	orr.w	r2, r2, #32
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	e007      	b.n	8005f1e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0220 	bic.w	r2, r2, #32
 8005f1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	7edb      	ldrb	r3, [r3, #27]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d108      	bne.n	8005f38 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0210 	bic.w	r2, r2, #16
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	e007      	b.n	8005f48 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0210 	orr.w	r2, r2, #16
 8005f46:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	7f1b      	ldrb	r3, [r3, #28]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d108      	bne.n	8005f62 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0208 	orr.w	r2, r2, #8
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	e007      	b.n	8005f72 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 0208 	bic.w	r2, r2, #8
 8005f70:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	7f5b      	ldrb	r3, [r3, #29]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d108      	bne.n	8005f8c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f042 0204 	orr.w	r2, r2, #4
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	e007      	b.n	8005f9c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0204 	bic.w	r2, r2, #4
 8005f9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	ea42 0103 	orr.w	r1, r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	1e5a      	subs	r2, r3, #1
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ff2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005ff4:	7cfb      	ldrb	r3, [r7, #19]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d003      	beq.n	8006002 <HAL_CAN_ConfigFilter+0x26>
 8005ffa:	7cfb      	ldrb	r3, [r7, #19]
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	f040 80be 	bne.w	800617e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8006002:	4b65      	ldr	r3, [pc, #404]	; (8006198 <HAL_CAN_ConfigFilter+0x1bc>)
 8006004:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800600c:	f043 0201 	orr.w	r2, r3, #1
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800601c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	021b      	lsls	r3, r3, #8
 8006032:	431a      	orrs	r2, r3
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	f003 031f 	and.w	r3, r3, #31
 8006042:	2201      	movs	r2, #1
 8006044:	fa02 f303 	lsl.w	r3, r2, r3
 8006048:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	43db      	mvns	r3, r3
 8006054:	401a      	ands	r2, r3
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	69db      	ldr	r3, [r3, #28]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d123      	bne.n	80060ac <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	43db      	mvns	r3, r3
 800606e:	401a      	ands	r2, r3
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006086:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	3248      	adds	r2, #72	; 0x48
 800608c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80060a0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80060a2:	6979      	ldr	r1, [r7, #20]
 80060a4:	3348      	adds	r3, #72	; 0x48
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	440b      	add	r3, r1
 80060aa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d122      	bne.n	80060fa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	431a      	orrs	r2, r3
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80060d4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	3248      	adds	r2, #72	; 0x48
 80060da:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80060ee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80060f0:	6979      	ldr	r1, [r7, #20]
 80060f2:	3348      	adds	r3, #72	; 0x48
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	440b      	add	r3, r1
 80060f8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d109      	bne.n	8006116 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	43db      	mvns	r3, r3
 800610c:	401a      	ands	r2, r3
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006114:	e007      	b.n	8006126 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	431a      	orrs	r2, r3
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d109      	bne.n	8006142 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	43db      	mvns	r3, r3
 8006138:	401a      	ands	r2, r3
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006140:	e007      	b.n	8006152 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	431a      	orrs	r2, r3
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d107      	bne.n	800616a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	431a      	orrs	r2, r3
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006170:	f023 0201 	bic.w	r2, r3, #1
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	e006      	b.n	800618c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
  }
}
 800618c:	4618      	mov	r0, r3
 800618e:	371c      	adds	r7, #28
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	40006400 	.word	0x40006400

0800619c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d12e      	bne.n	800620e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2202      	movs	r2, #2
 80061b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 0201 	bic.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061c8:	f7ff fddc 	bl	8005d84 <HAL_GetTick>
 80061cc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80061ce:	e012      	b.n	80061f6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80061d0:	f7ff fdd8 	bl	8005d84 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b0a      	cmp	r3, #10
 80061dc:	d90b      	bls.n	80061f6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2205      	movs	r2, #5
 80061ee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e012      	b.n	800621c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f003 0301 	and.w	r3, r3, #1
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e5      	bne.n	80061d0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800620a:	2300      	movs	r3, #0
 800620c:	e006      	b.n	800621c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006212:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
  }
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8006224:	b480      	push	{r7}
 8006226:	b089      	sub	sp, #36	; 0x24
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
 8006230:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006238:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006242:	7ffb      	ldrb	r3, [r7, #31]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d003      	beq.n	8006250 <HAL_CAN_AddTxMessage+0x2c>
 8006248:	7ffb      	ldrb	r3, [r7, #31]
 800624a:	2b02      	cmp	r3, #2
 800624c:	f040 80b8 	bne.w	80063c0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10a      	bne.n	8006270 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006260:	2b00      	cmp	r3, #0
 8006262:	d105      	bne.n	8006270 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800626a:	2b00      	cmp	r3, #0
 800626c:	f000 80a0 	beq.w	80063b0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	0e1b      	lsrs	r3, r3, #24
 8006274:	f003 0303 	and.w	r3, r3, #3
 8006278:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2b02      	cmp	r3, #2
 800627e:	d907      	bls.n	8006290 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e09e      	b.n	80063ce <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006290:	2201      	movs	r2, #1
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	409a      	lsls	r2, r3
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10d      	bne.n	80062be <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80062ac:	68f9      	ldr	r1, [r7, #12]
 80062ae:	6809      	ldr	r1, [r1, #0]
 80062b0:	431a      	orrs	r2, r3
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	3318      	adds	r3, #24
 80062b6:	011b      	lsls	r3, r3, #4
 80062b8:	440b      	add	r3, r1
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	e00f      	b.n	80062de <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80062c8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80062ce:	68f9      	ldr	r1, [r7, #12]
 80062d0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80062d2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	3318      	adds	r3, #24
 80062d8:	011b      	lsls	r3, r3, #4
 80062da:	440b      	add	r3, r1
 80062dc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6819      	ldr	r1, [r3, #0]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	691a      	ldr	r2, [r3, #16]
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	3318      	adds	r3, #24
 80062ea:	011b      	lsls	r3, r3, #4
 80062ec:	440b      	add	r3, r1
 80062ee:	3304      	adds	r3, #4
 80062f0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	7d1b      	ldrb	r3, [r3, #20]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d111      	bne.n	800631e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	3318      	adds	r3, #24
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	4413      	add	r3, r2
 8006306:	3304      	adds	r3, #4
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	6811      	ldr	r1, [r2, #0]
 800630e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	3318      	adds	r3, #24
 8006316:	011b      	lsls	r3, r3, #4
 8006318:	440b      	add	r3, r1
 800631a:	3304      	adds	r3, #4
 800631c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3307      	adds	r3, #7
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	061a      	lsls	r2, r3, #24
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	3306      	adds	r3, #6
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	041b      	lsls	r3, r3, #16
 800632e:	431a      	orrs	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3305      	adds	r3, #5
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	021b      	lsls	r3, r3, #8
 8006338:	4313      	orrs	r3, r2
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	3204      	adds	r2, #4
 800633e:	7812      	ldrb	r2, [r2, #0]
 8006340:	4610      	mov	r0, r2
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	6811      	ldr	r1, [r2, #0]
 8006346:	ea43 0200 	orr.w	r2, r3, r0
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	011b      	lsls	r3, r3, #4
 800634e:	440b      	add	r3, r1
 8006350:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006354:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3303      	adds	r3, #3
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	061a      	lsls	r2, r3, #24
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	3302      	adds	r3, #2
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	041b      	lsls	r3, r3, #16
 8006366:	431a      	orrs	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3301      	adds	r3, #1
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	021b      	lsls	r3, r3, #8
 8006370:	4313      	orrs	r3, r2
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	7812      	ldrb	r2, [r2, #0]
 8006376:	4610      	mov	r0, r2
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	6811      	ldr	r1, [r2, #0]
 800637c:	ea43 0200 	orr.w	r2, r3, r0
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	011b      	lsls	r3, r3, #4
 8006384:	440b      	add	r3, r1
 8006386:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800638a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	3318      	adds	r3, #24
 8006394:	011b      	lsls	r3, r3, #4
 8006396:	4413      	add	r3, r2
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	6811      	ldr	r1, [r2, #0]
 800639e:	f043 0201 	orr.w	r2, r3, #1
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	3318      	adds	r3, #24
 80063a6:	011b      	lsls	r3, r3, #4
 80063a8:	440b      	add	r3, r1
 80063aa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	e00e      	b.n	80063ce <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e006      	b.n	80063ce <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
  }
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3724      	adds	r7, #36	; 0x24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80063da:	b480      	push	{r7}
 80063dc:	b085      	sub	sp, #20
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063ec:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80063ee:	7afb      	ldrb	r3, [r7, #11]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d002      	beq.n	80063fa <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80063f4:	7afb      	ldrb	r3, [r7, #11]
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d11d      	bne.n	8006436 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	3301      	adds	r3, #1
 800640c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	3301      	adds	r3, #1
 8006420:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d002      	beq.n	8006436 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	3301      	adds	r3, #1
 8006434:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8006436:	68fb      	ldr	r3, [r7, #12]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006444:	b480      	push	{r7}
 8006446:	b087      	sub	sp, #28
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
 8006450:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006458:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800645a:	7dfb      	ldrb	r3, [r7, #23]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d003      	beq.n	8006468 <HAL_CAN_GetRxMessage+0x24>
 8006460:	7dfb      	ldrb	r3, [r7, #23]
 8006462:	2b02      	cmp	r3, #2
 8006464:	f040 80f3 	bne.w	800664e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10e      	bne.n	800648c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f003 0303 	and.w	r3, r3, #3
 8006478:	2b00      	cmp	r3, #0
 800647a:	d116      	bne.n	80064aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e0e7      	b.n	800665c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d107      	bne.n	80064aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e0d8      	b.n	800665c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	331b      	adds	r3, #27
 80064b2:	011b      	lsls	r3, r3, #4
 80064b4:	4413      	add	r3, r2
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0204 	and.w	r2, r3, #4
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10c      	bne.n	80064e2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	331b      	adds	r3, #27
 80064d0:	011b      	lsls	r3, r3, #4
 80064d2:	4413      	add	r3, r2
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	0d5b      	lsrs	r3, r3, #21
 80064d8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	e00b      	b.n	80064fa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	331b      	adds	r3, #27
 80064ea:	011b      	lsls	r3, r3, #4
 80064ec:	4413      	add	r3, r2
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	08db      	lsrs	r3, r3, #3
 80064f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	331b      	adds	r3, #27
 8006502:	011b      	lsls	r3, r3, #4
 8006504:	4413      	add	r3, r2
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0202 	and.w	r2, r3, #2
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	331b      	adds	r3, #27
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	4413      	add	r3, r2
 800651c:	3304      	adds	r3, #4
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 020f 	and.w	r2, r3, #15
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	331b      	adds	r3, #27
 8006530:	011b      	lsls	r3, r3, #4
 8006532:	4413      	add	r3, r2
 8006534:	3304      	adds	r3, #4
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	0a1b      	lsrs	r3, r3, #8
 800653a:	b2da      	uxtb	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	331b      	adds	r3, #27
 8006548:	011b      	lsls	r3, r3, #4
 800654a:	4413      	add	r3, r2
 800654c:	3304      	adds	r3, #4
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	0c1b      	lsrs	r3, r3, #16
 8006552:	b29a      	uxth	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	011b      	lsls	r3, r3, #4
 8006560:	4413      	add	r3, r2
 8006562:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	b2da      	uxtb	r2, r3
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	011b      	lsls	r3, r3, #4
 8006576:	4413      	add	r3, r2
 8006578:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	0a1a      	lsrs	r2, r3, #8
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	3301      	adds	r3, #1
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	011b      	lsls	r3, r3, #4
 8006590:	4413      	add	r3, r2
 8006592:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	0c1a      	lsrs	r2, r3, #16
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	3302      	adds	r3, #2
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	0e1a      	lsrs	r2, r3, #24
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	3303      	adds	r3, #3
 80065b8:	b2d2      	uxtb	r2, r2
 80065ba:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	011b      	lsls	r3, r3, #4
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	3304      	adds	r3, #4
 80065d0:	b2d2      	uxtb	r2, r2
 80065d2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	4413      	add	r3, r2
 80065de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	0a1a      	lsrs	r2, r3, #8
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	3305      	adds	r3, #5
 80065ea:	b2d2      	uxtb	r2, r2
 80065ec:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	011b      	lsls	r3, r3, #4
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	0c1a      	lsrs	r2, r3, #16
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	3306      	adds	r3, #6
 8006604:	b2d2      	uxtb	r2, r2
 8006606:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	011b      	lsls	r3, r3, #4
 8006610:	4413      	add	r3, r2
 8006612:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	0e1a      	lsrs	r2, r3, #24
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	3307      	adds	r3, #7
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d108      	bne.n	800663a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f042 0220 	orr.w	r2, r2, #32
 8006636:	60da      	str	r2, [r3, #12]
 8006638:	e007      	b.n	800664a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	691a      	ldr	r2, [r3, #16]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f042 0220 	orr.w	r2, r2, #32
 8006648:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	e006      	b.n	800665c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
  }
}
 800665c:	4618      	mov	r0, r3
 800665e:	371c      	adds	r7, #28
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8006672:	2300      	movs	r3, #0
 8006674:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 3020 	ldrb.w	r3, [r3, #32]
 800667c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800667e:	7afb      	ldrb	r3, [r7, #11]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d002      	beq.n	800668a <HAL_CAN_GetRxFifoFillLevel+0x22>
 8006684:	7afb      	ldrb	r3, [r7, #11]
 8006686:	2b02      	cmp	r3, #2
 8006688:	d10f      	bne.n	80066aa <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d106      	bne.n	800669e <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	e005      	b.n	80066aa <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	f003 0303 	and.w	r3, r3, #3
 80066a8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80066aa:	68fb      	ldr	r3, [r7, #12]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066c8:	4b0c      	ldr	r3, [pc, #48]	; (80066fc <__NVIC_SetPriorityGrouping+0x44>)
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80066d4:	4013      	ands	r3, r2
 80066d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80066e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80066e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066ea:	4a04      	ldr	r2, [pc, #16]	; (80066fc <__NVIC_SetPriorityGrouping+0x44>)
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	60d3      	str	r3, [r2, #12]
}
 80066f0:	bf00      	nop
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	e000ed00 	.word	0xe000ed00

08006700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006700:	b480      	push	{r7}
 8006702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006704:	4b04      	ldr	r3, [pc, #16]	; (8006718 <__NVIC_GetPriorityGrouping+0x18>)
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	0a1b      	lsrs	r3, r3, #8
 800670a:	f003 0307 	and.w	r3, r3, #7
}
 800670e:	4618      	mov	r0, r3
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	e000ed00 	.word	0xe000ed00

0800671c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	4603      	mov	r3, r0
 8006724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800672a:	2b00      	cmp	r3, #0
 800672c:	db0b      	blt.n	8006746 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800672e:	79fb      	ldrb	r3, [r7, #7]
 8006730:	f003 021f 	and.w	r2, r3, #31
 8006734:	4907      	ldr	r1, [pc, #28]	; (8006754 <__NVIC_EnableIRQ+0x38>)
 8006736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800673a:	095b      	lsrs	r3, r3, #5
 800673c:	2001      	movs	r0, #1
 800673e:	fa00 f202 	lsl.w	r2, r0, r2
 8006742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	e000e100 	.word	0xe000e100

08006758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	4603      	mov	r3, r0
 8006760:	6039      	str	r1, [r7, #0]
 8006762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006768:	2b00      	cmp	r3, #0
 800676a:	db0a      	blt.n	8006782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	b2da      	uxtb	r2, r3
 8006770:	490c      	ldr	r1, [pc, #48]	; (80067a4 <__NVIC_SetPriority+0x4c>)
 8006772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006776:	0112      	lsls	r2, r2, #4
 8006778:	b2d2      	uxtb	r2, r2
 800677a:	440b      	add	r3, r1
 800677c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006780:	e00a      	b.n	8006798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	b2da      	uxtb	r2, r3
 8006786:	4908      	ldr	r1, [pc, #32]	; (80067a8 <__NVIC_SetPriority+0x50>)
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	f003 030f 	and.w	r3, r3, #15
 800678e:	3b04      	subs	r3, #4
 8006790:	0112      	lsls	r2, r2, #4
 8006792:	b2d2      	uxtb	r2, r2
 8006794:	440b      	add	r3, r1
 8006796:	761a      	strb	r2, [r3, #24]
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	e000e100 	.word	0xe000e100
 80067a8:	e000ed00 	.word	0xe000ed00

080067ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b089      	sub	sp, #36	; 0x24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	f1c3 0307 	rsb	r3, r3, #7
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	bf28      	it	cs
 80067ca:	2304      	movcs	r3, #4
 80067cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	3304      	adds	r3, #4
 80067d2:	2b06      	cmp	r3, #6
 80067d4:	d902      	bls.n	80067dc <NVIC_EncodePriority+0x30>
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	3b03      	subs	r3, #3
 80067da:	e000      	b.n	80067de <NVIC_EncodePriority+0x32>
 80067dc:	2300      	movs	r3, #0
 80067de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067e0:	f04f 32ff 	mov.w	r2, #4294967295
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ea:	43da      	mvns	r2, r3
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	401a      	ands	r2, r3
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80067f4:	f04f 31ff 	mov.w	r1, #4294967295
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	fa01 f303 	lsl.w	r3, r1, r3
 80067fe:	43d9      	mvns	r1, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006804:	4313      	orrs	r3, r2
         );
}
 8006806:	4618      	mov	r0, r3
 8006808:	3724      	adds	r7, #36	; 0x24
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
	...

08006814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3b01      	subs	r3, #1
 8006820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006824:	d301      	bcc.n	800682a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006826:	2301      	movs	r3, #1
 8006828:	e00f      	b.n	800684a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800682a:	4a0a      	ldr	r2, [pc, #40]	; (8006854 <SysTick_Config+0x40>)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3b01      	subs	r3, #1
 8006830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006832:	210f      	movs	r1, #15
 8006834:	f04f 30ff 	mov.w	r0, #4294967295
 8006838:	f7ff ff8e 	bl	8006758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800683c:	4b05      	ldr	r3, [pc, #20]	; (8006854 <SysTick_Config+0x40>)
 800683e:	2200      	movs	r2, #0
 8006840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006842:	4b04      	ldr	r3, [pc, #16]	; (8006854 <SysTick_Config+0x40>)
 8006844:	2207      	movs	r2, #7
 8006846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	e000e010 	.word	0xe000e010

08006858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7ff ff29 	bl	80066b8 <__NVIC_SetPriorityGrouping>
}
 8006866:	bf00      	nop
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800686e:	b580      	push	{r7, lr}
 8006870:	b086      	sub	sp, #24
 8006872:	af00      	add	r7, sp, #0
 8006874:	4603      	mov	r3, r0
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	607a      	str	r2, [r7, #4]
 800687a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800687c:	2300      	movs	r3, #0
 800687e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006880:	f7ff ff3e 	bl	8006700 <__NVIC_GetPriorityGrouping>
 8006884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	68b9      	ldr	r1, [r7, #8]
 800688a:	6978      	ldr	r0, [r7, #20]
 800688c:	f7ff ff8e 	bl	80067ac <NVIC_EncodePriority>
 8006890:	4602      	mov	r2, r0
 8006892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006896:	4611      	mov	r1, r2
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff ff5d 	bl	8006758 <__NVIC_SetPriority>
}
 800689e:	bf00      	nop
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b082      	sub	sp, #8
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	4603      	mov	r3, r0
 80068ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7ff ff31 	bl	800671c <__NVIC_EnableIRQ>
}
 80068ba:	bf00      	nop
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b082      	sub	sp, #8
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff ffa2 	bl	8006814 <SysTick_Config>
 80068d0:	4603      	mov	r3, r0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b082      	sub	sp, #8
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e014      	b.n	8006916 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	791b      	ldrb	r3, [r3, #4]
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d105      	bne.n	8006902 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7fb fd07 	bl	8002310 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2202      	movs	r2, #2
 8006906:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800691e:	b480      	push	{r7}
 8006920:	b087      	sub	sp, #28
 8006922:	af00      	add	r7, sp, #0
 8006924:	60f8      	str	r0, [r7, #12]
 8006926:	60b9      	str	r1, [r7, #8]
 8006928:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	795b      	ldrb	r3, [r3, #5]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d101      	bne.n	8006936 <HAL_DAC_ConfigChannel+0x18>
 8006932:	2302      	movs	r3, #2
 8006934:	e03c      	b.n	80069b0 <HAL_DAC_ConfigChannel+0x92>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2201      	movs	r2, #1
 800693a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2202      	movs	r2, #2
 8006940:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f003 0310 	and.w	r3, r3, #16
 8006950:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006954:	fa02 f303 	lsl.w	r3, r2, r3
 8006958:	43db      	mvns	r3, r3
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4013      	ands	r3, r2
 800695e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	4313      	orrs	r3, r2
 800696a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f003 0310 	and.w	r3, r3, #16
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	fa02 f303 	lsl.w	r3, r2, r3
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	4313      	orrs	r3, r2
 800697c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6819      	ldr	r1, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f003 0310 	and.w	r3, r3, #16
 8006992:	22c0      	movs	r2, #192	; 0xc0
 8006994:	fa02 f303 	lsl.w	r3, r2, r3
 8006998:	43da      	mvns	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	400a      	ands	r2, r1
 80069a0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2201      	movs	r2, #1
 80069a6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	371c      	adds	r7, #28
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80069c8:	f7ff f9dc 	bl	8005d84 <HAL_GetTick>
 80069cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e099      	b.n	8006b0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2202      	movs	r2, #2
 80069dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 0201 	bic.w	r2, r2, #1
 80069f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80069f8:	e00f      	b.n	8006a1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80069fa:	f7ff f9c3 	bl	8005d84 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	2b05      	cmp	r3, #5
 8006a06:	d908      	bls.n	8006a1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2203      	movs	r2, #3
 8006a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e078      	b.n	8006b0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0301 	and.w	r3, r3, #1
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1e8      	bne.n	80069fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	4b38      	ldr	r3, [pc, #224]	; (8006b14 <HAL_DMA_Init+0x158>)
 8006a34:	4013      	ands	r3, r2
 8006a36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	d107      	bne.n	8006a84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f023 0307 	bic.w	r3, r3, #7
 8006a9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aaa:	2b04      	cmp	r3, #4
 8006aac:	d117      	bne.n	8006ade <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00e      	beq.n	8006ade <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f9e9 	bl	8006e98 <DMA_CheckFifoParam>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d008      	beq.n	8006ade <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2240      	movs	r2, #64	; 0x40
 8006ad0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006ada:	2301      	movs	r3, #1
 8006adc:	e016      	b.n	8006b0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f9a0 	bl	8006e2c <DMA_CalcBaseAndBitshift>
 8006aec:	4603      	mov	r3, r0
 8006aee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af4:	223f      	movs	r2, #63	; 0x3f
 8006af6:	409a      	lsls	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3718      	adds	r7, #24
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	f010803f 	.word	0xf010803f

08006b18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006b24:	4b8e      	ldr	r3, [pc, #568]	; (8006d60 <HAL_DMA_IRQHandler+0x248>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a8e      	ldr	r2, [pc, #568]	; (8006d64 <HAL_DMA_IRQHandler+0x24c>)
 8006b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2e:	0a9b      	lsrs	r3, r3, #10
 8006b30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b42:	2208      	movs	r2, #8
 8006b44:	409a      	lsls	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	4013      	ands	r3, r2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d01a      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d013      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 0204 	bic.w	r2, r2, #4
 8006b6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b70:	2208      	movs	r2, #8
 8006b72:	409a      	lsls	r2, r3
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b7c:	f043 0201 	orr.w	r2, r3, #1
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b88:	2201      	movs	r2, #1
 8006b8a:	409a      	lsls	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4013      	ands	r3, r2
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d012      	beq.n	8006bba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00b      	beq.n	8006bba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	409a      	lsls	r2, r3
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb2:	f043 0202 	orr.w	r2, r3, #2
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bbe:	2204      	movs	r2, #4
 8006bc0:	409a      	lsls	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d012      	beq.n	8006bf0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00b      	beq.n	8006bf0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bdc:	2204      	movs	r2, #4
 8006bde:	409a      	lsls	r2, r3
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be8:	f043 0204 	orr.w	r2, r3, #4
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf4:	2210      	movs	r2, #16
 8006bf6:	409a      	lsls	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d043      	beq.n	8006c88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0308 	and.w	r3, r3, #8
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d03c      	beq.n	8006c88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c12:	2210      	movs	r2, #16
 8006c14:	409a      	lsls	r2, r3
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d018      	beq.n	8006c5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d108      	bne.n	8006c48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d024      	beq.n	8006c88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	4798      	blx	r3
 8006c46:	e01f      	b.n	8006c88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d01b      	beq.n	8006c88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	4798      	blx	r3
 8006c58:	e016      	b.n	8006c88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d107      	bne.n	8006c78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 0208 	bic.w	r2, r2, #8
 8006c76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	409a      	lsls	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4013      	ands	r3, r2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 808f 	beq.w	8006db8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0310 	and.w	r3, r3, #16
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 8087 	beq.w	8006db8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cae:	2220      	movs	r2, #32
 8006cb0:	409a      	lsls	r2, r3
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b05      	cmp	r3, #5
 8006cc0:	d136      	bne.n	8006d30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f022 0216 	bic.w	r2, r2, #22
 8006cd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	695a      	ldr	r2, [r3, #20]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ce0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d103      	bne.n	8006cf2 <HAL_DMA_IRQHandler+0x1da>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d007      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f022 0208 	bic.w	r2, r2, #8
 8006d00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d06:	223f      	movs	r2, #63	; 0x3f
 8006d08:	409a      	lsls	r2, r3
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d07e      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	4798      	blx	r3
        }
        return;
 8006d2e:	e079      	b.n	8006e24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d01d      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10d      	bne.n	8006d68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d031      	beq.n	8006db8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	4798      	blx	r3
 8006d5c:	e02c      	b.n	8006db8 <HAL_DMA_IRQHandler+0x2a0>
 8006d5e:	bf00      	nop
 8006d60:	20000004 	.word	0x20000004
 8006d64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d023      	beq.n	8006db8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	4798      	blx	r3
 8006d78:	e01e      	b.n	8006db8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10f      	bne.n	8006da8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f022 0210 	bic.w	r2, r2, #16
 8006d96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d032      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d022      	beq.n	8006e12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2205      	movs	r2, #5
 8006dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 0201 	bic.w	r2, r2, #1
 8006de2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	3301      	adds	r3, #1
 8006de8:	60bb      	str	r3, [r7, #8]
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d307      	bcc.n	8006e00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1f2      	bne.n	8006de4 <HAL_DMA_IRQHandler+0x2cc>
 8006dfe:	e000      	b.n	8006e02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006e00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d005      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	4798      	blx	r3
 8006e22:	e000      	b.n	8006e26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006e24:	bf00      	nop
    }
  }
}
 8006e26:	3718      	adds	r7, #24
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	3b10      	subs	r3, #16
 8006e3c:	4a14      	ldr	r2, [pc, #80]	; (8006e90 <DMA_CalcBaseAndBitshift+0x64>)
 8006e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e42:	091b      	lsrs	r3, r3, #4
 8006e44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006e46:	4a13      	ldr	r2, [pc, #76]	; (8006e94 <DMA_CalcBaseAndBitshift+0x68>)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d909      	bls.n	8006e6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006e62:	f023 0303 	bic.w	r3, r3, #3
 8006e66:	1d1a      	adds	r2, r3, #4
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	659a      	str	r2, [r3, #88]	; 0x58
 8006e6c:	e007      	b.n	8006e7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006e76:	f023 0303 	bic.w	r3, r3, #3
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	aaaaaaab 	.word	0xaaaaaaab
 8006e94:	0801a2b8 	.word	0x0801a2b8

08006e98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d11f      	bne.n	8006ef2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	d856      	bhi.n	8006f66 <DMA_CheckFifoParam+0xce>
 8006eb8:	a201      	add	r2, pc, #4	; (adr r2, 8006ec0 <DMA_CheckFifoParam+0x28>)
 8006eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ebe:	bf00      	nop
 8006ec0:	08006ed1 	.word	0x08006ed1
 8006ec4:	08006ee3 	.word	0x08006ee3
 8006ec8:	08006ed1 	.word	0x08006ed1
 8006ecc:	08006f67 	.word	0x08006f67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d046      	beq.n	8006f6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ee0:	e043      	b.n	8006f6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006eea:	d140      	bne.n	8006f6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ef0:	e03d      	b.n	8006f6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006efa:	d121      	bne.n	8006f40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	2b03      	cmp	r3, #3
 8006f00:	d837      	bhi.n	8006f72 <DMA_CheckFifoParam+0xda>
 8006f02:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <DMA_CheckFifoParam+0x70>)
 8006f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f08:	08006f19 	.word	0x08006f19
 8006f0c:	08006f1f 	.word	0x08006f1f
 8006f10:	08006f19 	.word	0x08006f19
 8006f14:	08006f31 	.word	0x08006f31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f1c:	e030      	b.n	8006f80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d025      	beq.n	8006f76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f2e:	e022      	b.n	8006f76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f38:	d11f      	bne.n	8006f7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006f3e:	e01c      	b.n	8006f7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d903      	bls.n	8006f4e <DMA_CheckFifoParam+0xb6>
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d003      	beq.n	8006f54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006f4c:	e018      	b.n	8006f80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	73fb      	strb	r3, [r7, #15]
      break;
 8006f52:	e015      	b.n	8006f80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00e      	beq.n	8006f7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	73fb      	strb	r3, [r7, #15]
      break;
 8006f64:	e00b      	b.n	8006f7e <DMA_CheckFifoParam+0xe6>
      break;
 8006f66:	bf00      	nop
 8006f68:	e00a      	b.n	8006f80 <DMA_CheckFifoParam+0xe8>
      break;
 8006f6a:	bf00      	nop
 8006f6c:	e008      	b.n	8006f80 <DMA_CheckFifoParam+0xe8>
      break;
 8006f6e:	bf00      	nop
 8006f70:	e006      	b.n	8006f80 <DMA_CheckFifoParam+0xe8>
      break;
 8006f72:	bf00      	nop
 8006f74:	e004      	b.n	8006f80 <DMA_CheckFifoParam+0xe8>
      break;
 8006f76:	bf00      	nop
 8006f78:	e002      	b.n	8006f80 <DMA_CheckFifoParam+0xe8>
      break;   
 8006f7a:	bf00      	nop
 8006f7c:	e000      	b.n	8006f80 <DMA_CheckFifoParam+0xe8>
      break;
 8006f7e:	bf00      	nop
    }
  } 
  
  return status; 
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop

08006f90 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006fa2:	4b23      	ldr	r3, [pc, #140]	; (8007030 <HAL_FLASH_Program+0xa0>)
 8006fa4:	7e1b      	ldrb	r3, [r3, #24]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d101      	bne.n	8006fae <HAL_FLASH_Program+0x1e>
 8006faa:	2302      	movs	r3, #2
 8006fac:	e03b      	b.n	8007026 <HAL_FLASH_Program+0x96>
 8006fae:	4b20      	ldr	r3, [pc, #128]	; (8007030 <HAL_FLASH_Program+0xa0>)
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006fb4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006fb8:	f000 f87c 	bl	80070b4 <FLASH_WaitForLastOperation>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d12b      	bne.n	800701e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d105      	bne.n	8006fd8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8006fcc:	783b      	ldrb	r3, [r7, #0]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	68b8      	ldr	r0, [r7, #8]
 8006fd2:	f000 f927 	bl	8007224 <FLASH_Program_Byte>
 8006fd6:	e016      	b.n	8007006 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d105      	bne.n	8006fea <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8006fde:	883b      	ldrh	r3, [r7, #0]
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	68b8      	ldr	r0, [r7, #8]
 8006fe4:	f000 f8fa 	bl	80071dc <FLASH_Program_HalfWord>
 8006fe8:	e00d      	b.n	8007006 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d105      	bne.n	8006ffc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	68b8      	ldr	r0, [r7, #8]
 8006ff6:	f000 f8cf 	bl	8007198 <FLASH_Program_Word>
 8006ffa:	e004      	b.n	8007006 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006ffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007000:	68b8      	ldr	r0, [r7, #8]
 8007002:	f000 f897 	bl	8007134 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007006:	f24c 3050 	movw	r0, #50000	; 0xc350
 800700a:	f000 f853 	bl	80070b4 <FLASH_WaitForLastOperation>
 800700e:	4603      	mov	r3, r0
 8007010:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8007012:	4b08      	ldr	r3, [pc, #32]	; (8007034 <HAL_FLASH_Program+0xa4>)
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	4a07      	ldr	r2, [pc, #28]	; (8007034 <HAL_FLASH_Program+0xa4>)
 8007018:	f023 0301 	bic.w	r3, r3, #1
 800701c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800701e:	4b04      	ldr	r3, [pc, #16]	; (8007030 <HAL_FLASH_Program+0xa0>)
 8007020:	2200      	movs	r2, #0
 8007022:	761a      	strb	r2, [r3, #24]
  
  return status;
 8007024:	7dfb      	ldrb	r3, [r7, #23]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3718      	adds	r7, #24
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	20004ad8 	.word	0x20004ad8
 8007034:	40023c00 	.word	0x40023c00

08007038 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800703e:	2300      	movs	r3, #0
 8007040:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007042:	4b0b      	ldr	r3, [pc, #44]	; (8007070 <HAL_FLASH_Unlock+0x38>)
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	2b00      	cmp	r3, #0
 8007048:	da0b      	bge.n	8007062 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800704a:	4b09      	ldr	r3, [pc, #36]	; (8007070 <HAL_FLASH_Unlock+0x38>)
 800704c:	4a09      	ldr	r2, [pc, #36]	; (8007074 <HAL_FLASH_Unlock+0x3c>)
 800704e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007050:	4b07      	ldr	r3, [pc, #28]	; (8007070 <HAL_FLASH_Unlock+0x38>)
 8007052:	4a09      	ldr	r2, [pc, #36]	; (8007078 <HAL_FLASH_Unlock+0x40>)
 8007054:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007056:	4b06      	ldr	r3, [pc, #24]	; (8007070 <HAL_FLASH_Unlock+0x38>)
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	da01      	bge.n	8007062 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007062:	79fb      	ldrb	r3, [r7, #7]
}
 8007064:	4618      	mov	r0, r3
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	40023c00 	.word	0x40023c00
 8007074:	45670123 	.word	0x45670123
 8007078:	cdef89ab 	.word	0xcdef89ab

0800707c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800707c:	b480      	push	{r7}
 800707e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007080:	4b05      	ldr	r3, [pc, #20]	; (8007098 <HAL_FLASH_Lock+0x1c>)
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	4a04      	ldr	r2, [pc, #16]	; (8007098 <HAL_FLASH_Lock+0x1c>)
 8007086:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800708a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr
 8007098:	40023c00 	.word	0x40023c00

0800709c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800709c:	b480      	push	{r7}
 800709e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80070a0:	4b03      	ldr	r3, [pc, #12]	; (80070b0 <HAL_FLASH_GetError+0x14>)
 80070a2:	69db      	ldr	r3, [r3, #28]
}  
 80070a4:	4618      	mov	r0, r3
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	20004ad8 	.word	0x20004ad8

080070b4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80070c0:	4b1a      	ldr	r3, [pc, #104]	; (800712c <FLASH_WaitForLastOperation+0x78>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80070c6:	f7fe fe5d 	bl	8005d84 <HAL_GetTick>
 80070ca:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80070cc:	e010      	b.n	80070f0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d4:	d00c      	beq.n	80070f0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d007      	beq.n	80070ec <FLASH_WaitForLastOperation+0x38>
 80070dc:	f7fe fe52 	bl	8005d84 <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d201      	bcs.n	80070f0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e019      	b.n	8007124 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80070f0:	4b0f      	ldr	r3, [pc, #60]	; (8007130 <FLASH_WaitForLastOperation+0x7c>)
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e8      	bne.n	80070ce <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80070fc:	4b0c      	ldr	r3, [pc, #48]	; (8007130 <FLASH_WaitForLastOperation+0x7c>)
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007108:	4b09      	ldr	r3, [pc, #36]	; (8007130 <FLASH_WaitForLastOperation+0x7c>)
 800710a:	2201      	movs	r2, #1
 800710c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800710e:	4b08      	ldr	r3, [pc, #32]	; (8007130 <FLASH_WaitForLastOperation+0x7c>)
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800711a:	f000 f8a5 	bl	8007268 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e000      	b.n	8007124 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007122:	2300      	movs	r3, #0
  
}  
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	20004ad8 	.word	0x20004ad8
 8007130:	40023c00 	.word	0x40023c00

08007134 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007140:	4b14      	ldr	r3, [pc, #80]	; (8007194 <FLASH_Program_DoubleWord+0x60>)
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	4a13      	ldr	r2, [pc, #76]	; (8007194 <FLASH_Program_DoubleWord+0x60>)
 8007146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800714a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800714c:	4b11      	ldr	r3, [pc, #68]	; (8007194 <FLASH_Program_DoubleWord+0x60>)
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	4a10      	ldr	r2, [pc, #64]	; (8007194 <FLASH_Program_DoubleWord+0x60>)
 8007152:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007156:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007158:	4b0e      	ldr	r3, [pc, #56]	; (8007194 <FLASH_Program_DoubleWord+0x60>)
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	4a0d      	ldr	r2, [pc, #52]	; (8007194 <FLASH_Program_DoubleWord+0x60>)
 800715e:	f043 0301 	orr.w	r3, r3, #1
 8007162:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800716a:	f3bf 8f6f 	isb	sy
}
 800716e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8007170:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007174:	f04f 0200 	mov.w	r2, #0
 8007178:	f04f 0300 	mov.w	r3, #0
 800717c:	000a      	movs	r2, r1
 800717e:	2300      	movs	r3, #0
 8007180:	68f9      	ldr	r1, [r7, #12]
 8007182:	3104      	adds	r1, #4
 8007184:	4613      	mov	r3, r2
 8007186:	600b      	str	r3, [r1, #0]
}
 8007188:	bf00      	nop
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	40023c00 	.word	0x40023c00

08007198 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80071a2:	4b0d      	ldr	r3, [pc, #52]	; (80071d8 <FLASH_Program_Word+0x40>)
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	4a0c      	ldr	r2, [pc, #48]	; (80071d8 <FLASH_Program_Word+0x40>)
 80071a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80071ae:	4b0a      	ldr	r3, [pc, #40]	; (80071d8 <FLASH_Program_Word+0x40>)
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	4a09      	ldr	r2, [pc, #36]	; (80071d8 <FLASH_Program_Word+0x40>)
 80071b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80071ba:	4b07      	ldr	r3, [pc, #28]	; (80071d8 <FLASH_Program_Word+0x40>)
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	4a06      	ldr	r2, [pc, #24]	; (80071d8 <FLASH_Program_Word+0x40>)
 80071c0:	f043 0301 	orr.w	r3, r3, #1
 80071c4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	601a      	str	r2, [r3, #0]
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	40023c00 	.word	0x40023c00

080071dc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80071e8:	4b0d      	ldr	r3, [pc, #52]	; (8007220 <FLASH_Program_HalfWord+0x44>)
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	4a0c      	ldr	r2, [pc, #48]	; (8007220 <FLASH_Program_HalfWord+0x44>)
 80071ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80071f4:	4b0a      	ldr	r3, [pc, #40]	; (8007220 <FLASH_Program_HalfWord+0x44>)
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	4a09      	ldr	r2, [pc, #36]	; (8007220 <FLASH_Program_HalfWord+0x44>)
 80071fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007200:	4b07      	ldr	r3, [pc, #28]	; (8007220 <FLASH_Program_HalfWord+0x44>)
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	4a06      	ldr	r2, [pc, #24]	; (8007220 <FLASH_Program_HalfWord+0x44>)
 8007206:	f043 0301 	orr.w	r3, r3, #1
 800720a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	887a      	ldrh	r2, [r7, #2]
 8007210:	801a      	strh	r2, [r3, #0]
}
 8007212:	bf00      	nop
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	40023c00 	.word	0x40023c00

08007224 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	460b      	mov	r3, r1
 800722e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007230:	4b0c      	ldr	r3, [pc, #48]	; (8007264 <FLASH_Program_Byte+0x40>)
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	4a0b      	ldr	r2, [pc, #44]	; (8007264 <FLASH_Program_Byte+0x40>)
 8007236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800723a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800723c:	4b09      	ldr	r3, [pc, #36]	; (8007264 <FLASH_Program_Byte+0x40>)
 800723e:	4a09      	ldr	r2, [pc, #36]	; (8007264 <FLASH_Program_Byte+0x40>)
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007244:	4b07      	ldr	r3, [pc, #28]	; (8007264 <FLASH_Program_Byte+0x40>)
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	4a06      	ldr	r2, [pc, #24]	; (8007264 <FLASH_Program_Byte+0x40>)
 800724a:	f043 0301 	orr.w	r3, r3, #1
 800724e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	78fa      	ldrb	r2, [r7, #3]
 8007254:	701a      	strb	r2, [r3, #0]
}
 8007256:	bf00      	nop
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	40023c00 	.word	0x40023c00

08007268 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800726c:	4b2f      	ldr	r3, [pc, #188]	; (800732c <FLASH_SetErrorCode+0xc4>)
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	f003 0310 	and.w	r3, r3, #16
 8007274:	2b00      	cmp	r3, #0
 8007276:	d008      	beq.n	800728a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007278:	4b2d      	ldr	r3, [pc, #180]	; (8007330 <FLASH_SetErrorCode+0xc8>)
 800727a:	69db      	ldr	r3, [r3, #28]
 800727c:	f043 0310 	orr.w	r3, r3, #16
 8007280:	4a2b      	ldr	r2, [pc, #172]	; (8007330 <FLASH_SetErrorCode+0xc8>)
 8007282:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007284:	4b29      	ldr	r3, [pc, #164]	; (800732c <FLASH_SetErrorCode+0xc4>)
 8007286:	2210      	movs	r2, #16
 8007288:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800728a:	4b28      	ldr	r3, [pc, #160]	; (800732c <FLASH_SetErrorCode+0xc4>)
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	f003 0320 	and.w	r3, r3, #32
 8007292:	2b00      	cmp	r3, #0
 8007294:	d008      	beq.n	80072a8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007296:	4b26      	ldr	r3, [pc, #152]	; (8007330 <FLASH_SetErrorCode+0xc8>)
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	f043 0308 	orr.w	r3, r3, #8
 800729e:	4a24      	ldr	r2, [pc, #144]	; (8007330 <FLASH_SetErrorCode+0xc8>)
 80072a0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80072a2:	4b22      	ldr	r3, [pc, #136]	; (800732c <FLASH_SetErrorCode+0xc4>)
 80072a4:	2220      	movs	r2, #32
 80072a6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80072a8:	4b20      	ldr	r3, [pc, #128]	; (800732c <FLASH_SetErrorCode+0xc4>)
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d008      	beq.n	80072c6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80072b4:	4b1e      	ldr	r3, [pc, #120]	; (8007330 <FLASH_SetErrorCode+0xc8>)
 80072b6:	69db      	ldr	r3, [r3, #28]
 80072b8:	f043 0304 	orr.w	r3, r3, #4
 80072bc:	4a1c      	ldr	r2, [pc, #112]	; (8007330 <FLASH_SetErrorCode+0xc8>)
 80072be:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80072c0:	4b1a      	ldr	r3, [pc, #104]	; (800732c <FLASH_SetErrorCode+0xc4>)
 80072c2:	2240      	movs	r2, #64	; 0x40
 80072c4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80072c6:	4b19      	ldr	r3, [pc, #100]	; (800732c <FLASH_SetErrorCode+0xc4>)
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d008      	beq.n	80072e4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80072d2:	4b17      	ldr	r3, [pc, #92]	; (8007330 <FLASH_SetErrorCode+0xc8>)
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	f043 0302 	orr.w	r3, r3, #2
 80072da:	4a15      	ldr	r2, [pc, #84]	; (8007330 <FLASH_SetErrorCode+0xc8>)
 80072dc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80072de:	4b13      	ldr	r3, [pc, #76]	; (800732c <FLASH_SetErrorCode+0xc4>)
 80072e0:	2280      	movs	r2, #128	; 0x80
 80072e2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80072e4:	4b11      	ldr	r3, [pc, #68]	; (800732c <FLASH_SetErrorCode+0xc4>)
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d009      	beq.n	8007304 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80072f0:	4b0f      	ldr	r3, [pc, #60]	; (8007330 <FLASH_SetErrorCode+0xc8>)
 80072f2:	69db      	ldr	r3, [r3, #28]
 80072f4:	f043 0301 	orr.w	r3, r3, #1
 80072f8:	4a0d      	ldr	r2, [pc, #52]	; (8007330 <FLASH_SetErrorCode+0xc8>)
 80072fa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80072fc:	4b0b      	ldr	r3, [pc, #44]	; (800732c <FLASH_SetErrorCode+0xc4>)
 80072fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007302:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007304:	4b09      	ldr	r3, [pc, #36]	; (800732c <FLASH_SetErrorCode+0xc4>)
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d008      	beq.n	8007322 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007310:	4b07      	ldr	r3, [pc, #28]	; (8007330 <FLASH_SetErrorCode+0xc8>)
 8007312:	69db      	ldr	r3, [r3, #28]
 8007314:	f043 0320 	orr.w	r3, r3, #32
 8007318:	4a05      	ldr	r2, [pc, #20]	; (8007330 <FLASH_SetErrorCode+0xc8>)
 800731a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800731c:	4b03      	ldr	r3, [pc, #12]	; (800732c <FLASH_SetErrorCode+0xc4>)
 800731e:	2202      	movs	r2, #2
 8007320:	60da      	str	r2, [r3, #12]
  }
}
 8007322:	bf00      	nop
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	40023c00 	.word	0x40023c00
 8007330:	20004ad8 	.word	0x20004ad8

08007334 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8007342:	2300      	movs	r3, #0
 8007344:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007346:	4b31      	ldr	r3, [pc, #196]	; (800740c <HAL_FLASHEx_Erase+0xd8>)
 8007348:	7e1b      	ldrb	r3, [r3, #24]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d101      	bne.n	8007352 <HAL_FLASHEx_Erase+0x1e>
 800734e:	2302      	movs	r3, #2
 8007350:	e058      	b.n	8007404 <HAL_FLASHEx_Erase+0xd0>
 8007352:	4b2e      	ldr	r3, [pc, #184]	; (800740c <HAL_FLASHEx_Erase+0xd8>)
 8007354:	2201      	movs	r2, #1
 8007356:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007358:	f24c 3050 	movw	r0, #50000	; 0xc350
 800735c:	f7ff feaa 	bl	80070b4 <FLASH_WaitForLastOperation>
 8007360:	4603      	mov	r3, r0
 8007362:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007364:	7bfb      	ldrb	r3, [r7, #15]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d148      	bne.n	80073fc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	f04f 32ff 	mov.w	r2, #4294967295
 8007370:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d115      	bne.n	80073a6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	b2da      	uxtb	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	4619      	mov	r1, r3
 8007386:	4610      	mov	r0, r2
 8007388:	f000 f844 	bl	8007414 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800738c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007390:	f7ff fe90 	bl	80070b4 <FLASH_WaitForLastOperation>
 8007394:	4603      	mov	r3, r0
 8007396:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007398:	4b1d      	ldr	r3, [pc, #116]	; (8007410 <HAL_FLASHEx_Erase+0xdc>)
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	4a1c      	ldr	r2, [pc, #112]	; (8007410 <HAL_FLASHEx_Erase+0xdc>)
 800739e:	f023 0304 	bic.w	r3, r3, #4
 80073a2:	6113      	str	r3, [r2, #16]
 80073a4:	e028      	b.n	80073f8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	60bb      	str	r3, [r7, #8]
 80073ac:	e01c      	b.n	80073e8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	4619      	mov	r1, r3
 80073b6:	68b8      	ldr	r0, [r7, #8]
 80073b8:	f000 f850 	bl	800745c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80073bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80073c0:	f7ff fe78 	bl	80070b4 <FLASH_WaitForLastOperation>
 80073c4:	4603      	mov	r3, r0
 80073c6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80073c8:	4b11      	ldr	r3, [pc, #68]	; (8007410 <HAL_FLASHEx_Erase+0xdc>)
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	4a10      	ldr	r2, [pc, #64]	; (8007410 <HAL_FLASHEx_Erase+0xdc>)
 80073ce:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80073d2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	601a      	str	r2, [r3, #0]
          break;
 80073e0:	e00a      	b.n	80073f8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	3301      	adds	r3, #1
 80073e6:	60bb      	str	r3, [r7, #8]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68da      	ldr	r2, [r3, #12]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	4413      	add	r3, r2
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d3da      	bcc.n	80073ae <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80073f8:	f000 f878 	bl	80074ec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80073fc:	4b03      	ldr	r3, [pc, #12]	; (800740c <HAL_FLASHEx_Erase+0xd8>)
 80073fe:	2200      	movs	r2, #0
 8007400:	761a      	strb	r2, [r3, #24]

  return status;
 8007402:	7bfb      	ldrb	r3, [r7, #15]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	20004ad8 	.word	0x20004ad8
 8007410:	40023c00 	.word	0x40023c00

08007414 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	4603      	mov	r3, r0
 800741c:	6039      	str	r1, [r7, #0]
 800741e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007420:	4b0d      	ldr	r3, [pc, #52]	; (8007458 <FLASH_MassErase+0x44>)
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	4a0c      	ldr	r2, [pc, #48]	; (8007458 <FLASH_MassErase+0x44>)
 8007426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800742a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800742c:	4b0a      	ldr	r3, [pc, #40]	; (8007458 <FLASH_MassErase+0x44>)
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	4a09      	ldr	r2, [pc, #36]	; (8007458 <FLASH_MassErase+0x44>)
 8007432:	f043 0304 	orr.w	r3, r3, #4
 8007436:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8007438:	4b07      	ldr	r3, [pc, #28]	; (8007458 <FLASH_MassErase+0x44>)
 800743a:	691a      	ldr	r2, [r3, #16]
 800743c:	79fb      	ldrb	r3, [r7, #7]
 800743e:	021b      	lsls	r3, r3, #8
 8007440:	4313      	orrs	r3, r2
 8007442:	4a05      	ldr	r2, [pc, #20]	; (8007458 <FLASH_MassErase+0x44>)
 8007444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007448:	6113      	str	r3, [r2, #16]
}
 800744a:	bf00      	nop
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	40023c00 	.word	0x40023c00

0800745c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	460b      	mov	r3, r1
 8007466:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007468:	2300      	movs	r3, #0
 800746a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800746c:	78fb      	ldrb	r3, [r7, #3]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d102      	bne.n	8007478 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8007472:	2300      	movs	r3, #0
 8007474:	60fb      	str	r3, [r7, #12]
 8007476:	e010      	b.n	800749a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007478:	78fb      	ldrb	r3, [r7, #3]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d103      	bne.n	8007486 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800747e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007482:	60fb      	str	r3, [r7, #12]
 8007484:	e009      	b.n	800749a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007486:	78fb      	ldrb	r3, [r7, #3]
 8007488:	2b02      	cmp	r3, #2
 800748a:	d103      	bne.n	8007494 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800748c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007490:	60fb      	str	r3, [r7, #12]
 8007492:	e002      	b.n	800749a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007494:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007498:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800749a:	4b13      	ldr	r3, [pc, #76]	; (80074e8 <FLASH_Erase_Sector+0x8c>)
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	4a12      	ldr	r2, [pc, #72]	; (80074e8 <FLASH_Erase_Sector+0x8c>)
 80074a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80074a6:	4b10      	ldr	r3, [pc, #64]	; (80074e8 <FLASH_Erase_Sector+0x8c>)
 80074a8:	691a      	ldr	r2, [r3, #16]
 80074aa:	490f      	ldr	r1, [pc, #60]	; (80074e8 <FLASH_Erase_Sector+0x8c>)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80074b2:	4b0d      	ldr	r3, [pc, #52]	; (80074e8 <FLASH_Erase_Sector+0x8c>)
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	4a0c      	ldr	r2, [pc, #48]	; (80074e8 <FLASH_Erase_Sector+0x8c>)
 80074b8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80074bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80074be:	4b0a      	ldr	r3, [pc, #40]	; (80074e8 <FLASH_Erase_Sector+0x8c>)
 80074c0:	691a      	ldr	r2, [r3, #16]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	4313      	orrs	r3, r2
 80074c8:	4a07      	ldr	r2, [pc, #28]	; (80074e8 <FLASH_Erase_Sector+0x8c>)
 80074ca:	f043 0302 	orr.w	r3, r3, #2
 80074ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80074d0:	4b05      	ldr	r3, [pc, #20]	; (80074e8 <FLASH_Erase_Sector+0x8c>)
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	4a04      	ldr	r2, [pc, #16]	; (80074e8 <FLASH_Erase_Sector+0x8c>)
 80074d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074da:	6113      	str	r3, [r2, #16]
}
 80074dc:	bf00      	nop
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	40023c00 	.word	0x40023c00

080074ec <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80074ec:	b480      	push	{r7}
 80074ee:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80074f0:	4b20      	ldr	r3, [pc, #128]	; (8007574 <FLASH_FlushCaches+0x88>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d017      	beq.n	800752c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80074fc:	4b1d      	ldr	r3, [pc, #116]	; (8007574 <FLASH_FlushCaches+0x88>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a1c      	ldr	r2, [pc, #112]	; (8007574 <FLASH_FlushCaches+0x88>)
 8007502:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007506:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007508:	4b1a      	ldr	r3, [pc, #104]	; (8007574 <FLASH_FlushCaches+0x88>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a19      	ldr	r2, [pc, #100]	; (8007574 <FLASH_FlushCaches+0x88>)
 800750e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007512:	6013      	str	r3, [r2, #0]
 8007514:	4b17      	ldr	r3, [pc, #92]	; (8007574 <FLASH_FlushCaches+0x88>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a16      	ldr	r2, [pc, #88]	; (8007574 <FLASH_FlushCaches+0x88>)
 800751a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800751e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007520:	4b14      	ldr	r3, [pc, #80]	; (8007574 <FLASH_FlushCaches+0x88>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a13      	ldr	r2, [pc, #76]	; (8007574 <FLASH_FlushCaches+0x88>)
 8007526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800752a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800752c:	4b11      	ldr	r3, [pc, #68]	; (8007574 <FLASH_FlushCaches+0x88>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007534:	2b00      	cmp	r3, #0
 8007536:	d017      	beq.n	8007568 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007538:	4b0e      	ldr	r3, [pc, #56]	; (8007574 <FLASH_FlushCaches+0x88>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a0d      	ldr	r2, [pc, #52]	; (8007574 <FLASH_FlushCaches+0x88>)
 800753e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007542:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007544:	4b0b      	ldr	r3, [pc, #44]	; (8007574 <FLASH_FlushCaches+0x88>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a0a      	ldr	r2, [pc, #40]	; (8007574 <FLASH_FlushCaches+0x88>)
 800754a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	4b08      	ldr	r3, [pc, #32]	; (8007574 <FLASH_FlushCaches+0x88>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a07      	ldr	r2, [pc, #28]	; (8007574 <FLASH_FlushCaches+0x88>)
 8007556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800755a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800755c:	4b05      	ldr	r3, [pc, #20]	; (8007574 <FLASH_FlushCaches+0x88>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a04      	ldr	r2, [pc, #16]	; (8007574 <FLASH_FlushCaches+0x88>)
 8007562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007566:	6013      	str	r3, [r2, #0]
  }
}
 8007568:	bf00      	nop
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	40023c00 	.word	0x40023c00

08007578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007578:	b480      	push	{r7}
 800757a:	b089      	sub	sp, #36	; 0x24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007582:	2300      	movs	r3, #0
 8007584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007586:	2300      	movs	r3, #0
 8007588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800758a:	2300      	movs	r3, #0
 800758c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800758e:	2300      	movs	r3, #0
 8007590:	61fb      	str	r3, [r7, #28]
 8007592:	e165      	b.n	8007860 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007594:	2201      	movs	r2, #1
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	fa02 f303 	lsl.w	r3, r2, r3
 800759c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	4013      	ands	r3, r2
 80075a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	f040 8154 	bne.w	800785a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f003 0303 	and.w	r3, r3, #3
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d005      	beq.n	80075ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d130      	bne.n	800762c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	005b      	lsls	r3, r3, #1
 80075d4:	2203      	movs	r2, #3
 80075d6:	fa02 f303 	lsl.w	r3, r2, r3
 80075da:	43db      	mvns	r3, r3
 80075dc:	69ba      	ldr	r2, [r7, #24]
 80075de:	4013      	ands	r3, r2
 80075e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	68da      	ldr	r2, [r3, #12]
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	005b      	lsls	r3, r3, #1
 80075ea:	fa02 f303 	lsl.w	r3, r2, r3
 80075ee:	69ba      	ldr	r2, [r7, #24]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007600:	2201      	movs	r2, #1
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	fa02 f303 	lsl.w	r3, r2, r3
 8007608:	43db      	mvns	r3, r3
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	4013      	ands	r3, r2
 800760e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	091b      	lsrs	r3, r3, #4
 8007616:	f003 0201 	and.w	r2, r3, #1
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	fa02 f303 	lsl.w	r3, r2, r3
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	4313      	orrs	r3, r2
 8007624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f003 0303 	and.w	r3, r3, #3
 8007634:	2b03      	cmp	r3, #3
 8007636:	d017      	beq.n	8007668 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	005b      	lsls	r3, r3, #1
 8007642:	2203      	movs	r2, #3
 8007644:	fa02 f303 	lsl.w	r3, r2, r3
 8007648:	43db      	mvns	r3, r3
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	4013      	ands	r3, r2
 800764e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	689a      	ldr	r2, [r3, #8]
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	005b      	lsls	r3, r3, #1
 8007658:	fa02 f303 	lsl.w	r3, r2, r3
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	4313      	orrs	r3, r2
 8007660:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	69ba      	ldr	r2, [r7, #24]
 8007666:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f003 0303 	and.w	r3, r3, #3
 8007670:	2b02      	cmp	r3, #2
 8007672:	d123      	bne.n	80076bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	08da      	lsrs	r2, r3, #3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	3208      	adds	r2, #8
 800767c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007680:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	f003 0307 	and.w	r3, r3, #7
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	220f      	movs	r2, #15
 800768c:	fa02 f303 	lsl.w	r3, r2, r3
 8007690:	43db      	mvns	r3, r3
 8007692:	69ba      	ldr	r2, [r7, #24]
 8007694:	4013      	ands	r3, r2
 8007696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	691a      	ldr	r2, [r3, #16]
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	f003 0307 	and.w	r3, r3, #7
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	fa02 f303 	lsl.w	r3, r2, r3
 80076a8:	69ba      	ldr	r2, [r7, #24]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	08da      	lsrs	r2, r3, #3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	3208      	adds	r2, #8
 80076b6:	69b9      	ldr	r1, [r7, #24]
 80076b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	005b      	lsls	r3, r3, #1
 80076c6:	2203      	movs	r2, #3
 80076c8:	fa02 f303 	lsl.w	r3, r2, r3
 80076cc:	43db      	mvns	r3, r3
 80076ce:	69ba      	ldr	r2, [r7, #24]
 80076d0:	4013      	ands	r3, r2
 80076d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f003 0203 	and.w	r2, r3, #3
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	fa02 f303 	lsl.w	r3, r2, r3
 80076e4:	69ba      	ldr	r2, [r7, #24]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 80ae 	beq.w	800785a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076fe:	2300      	movs	r3, #0
 8007700:	60fb      	str	r3, [r7, #12]
 8007702:	4b5d      	ldr	r3, [pc, #372]	; (8007878 <HAL_GPIO_Init+0x300>)
 8007704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007706:	4a5c      	ldr	r2, [pc, #368]	; (8007878 <HAL_GPIO_Init+0x300>)
 8007708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800770c:	6453      	str	r3, [r2, #68]	; 0x44
 800770e:	4b5a      	ldr	r3, [pc, #360]	; (8007878 <HAL_GPIO_Init+0x300>)
 8007710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007716:	60fb      	str	r3, [r7, #12]
 8007718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800771a:	4a58      	ldr	r2, [pc, #352]	; (800787c <HAL_GPIO_Init+0x304>)
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	089b      	lsrs	r3, r3, #2
 8007720:	3302      	adds	r3, #2
 8007722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	f003 0303 	and.w	r3, r3, #3
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	220f      	movs	r2, #15
 8007732:	fa02 f303 	lsl.w	r3, r2, r3
 8007736:	43db      	mvns	r3, r3
 8007738:	69ba      	ldr	r2, [r7, #24]
 800773a:	4013      	ands	r3, r2
 800773c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a4f      	ldr	r2, [pc, #316]	; (8007880 <HAL_GPIO_Init+0x308>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d025      	beq.n	8007792 <HAL_GPIO_Init+0x21a>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a4e      	ldr	r2, [pc, #312]	; (8007884 <HAL_GPIO_Init+0x30c>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d01f      	beq.n	800778e <HAL_GPIO_Init+0x216>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a4d      	ldr	r2, [pc, #308]	; (8007888 <HAL_GPIO_Init+0x310>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d019      	beq.n	800778a <HAL_GPIO_Init+0x212>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a4c      	ldr	r2, [pc, #304]	; (800788c <HAL_GPIO_Init+0x314>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d013      	beq.n	8007786 <HAL_GPIO_Init+0x20e>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a4b      	ldr	r2, [pc, #300]	; (8007890 <HAL_GPIO_Init+0x318>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d00d      	beq.n	8007782 <HAL_GPIO_Init+0x20a>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a4a      	ldr	r2, [pc, #296]	; (8007894 <HAL_GPIO_Init+0x31c>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d007      	beq.n	800777e <HAL_GPIO_Init+0x206>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a49      	ldr	r2, [pc, #292]	; (8007898 <HAL_GPIO_Init+0x320>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d101      	bne.n	800777a <HAL_GPIO_Init+0x202>
 8007776:	2306      	movs	r3, #6
 8007778:	e00c      	b.n	8007794 <HAL_GPIO_Init+0x21c>
 800777a:	2307      	movs	r3, #7
 800777c:	e00a      	b.n	8007794 <HAL_GPIO_Init+0x21c>
 800777e:	2305      	movs	r3, #5
 8007780:	e008      	b.n	8007794 <HAL_GPIO_Init+0x21c>
 8007782:	2304      	movs	r3, #4
 8007784:	e006      	b.n	8007794 <HAL_GPIO_Init+0x21c>
 8007786:	2303      	movs	r3, #3
 8007788:	e004      	b.n	8007794 <HAL_GPIO_Init+0x21c>
 800778a:	2302      	movs	r3, #2
 800778c:	e002      	b.n	8007794 <HAL_GPIO_Init+0x21c>
 800778e:	2301      	movs	r3, #1
 8007790:	e000      	b.n	8007794 <HAL_GPIO_Init+0x21c>
 8007792:	2300      	movs	r3, #0
 8007794:	69fa      	ldr	r2, [r7, #28]
 8007796:	f002 0203 	and.w	r2, r2, #3
 800779a:	0092      	lsls	r2, r2, #2
 800779c:	4093      	lsls	r3, r2
 800779e:	69ba      	ldr	r2, [r7, #24]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80077a4:	4935      	ldr	r1, [pc, #212]	; (800787c <HAL_GPIO_Init+0x304>)
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	089b      	lsrs	r3, r3, #2
 80077aa:	3302      	adds	r3, #2
 80077ac:	69ba      	ldr	r2, [r7, #24]
 80077ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80077b2:	4b3a      	ldr	r3, [pc, #232]	; (800789c <HAL_GPIO_Init+0x324>)
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	43db      	mvns	r3, r3
 80077bc:	69ba      	ldr	r2, [r7, #24]
 80077be:	4013      	ands	r3, r2
 80077c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d003      	beq.n	80077d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80077d6:	4a31      	ldr	r2, [pc, #196]	; (800789c <HAL_GPIO_Init+0x324>)
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80077dc:	4b2f      	ldr	r3, [pc, #188]	; (800789c <HAL_GPIO_Init+0x324>)
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	43db      	mvns	r3, r3
 80077e6:	69ba      	ldr	r2, [r7, #24]
 80077e8:	4013      	ands	r3, r2
 80077ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d003      	beq.n	8007800 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80077f8:	69ba      	ldr	r2, [r7, #24]
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007800:	4a26      	ldr	r2, [pc, #152]	; (800789c <HAL_GPIO_Init+0x324>)
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007806:	4b25      	ldr	r3, [pc, #148]	; (800789c <HAL_GPIO_Init+0x324>)
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	43db      	mvns	r3, r3
 8007810:	69ba      	ldr	r2, [r7, #24]
 8007812:	4013      	ands	r3, r2
 8007814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007822:	69ba      	ldr	r2, [r7, #24]
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	4313      	orrs	r3, r2
 8007828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800782a:	4a1c      	ldr	r2, [pc, #112]	; (800789c <HAL_GPIO_Init+0x324>)
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007830:	4b1a      	ldr	r3, [pc, #104]	; (800789c <HAL_GPIO_Init+0x324>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	43db      	mvns	r3, r3
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	4013      	ands	r3, r2
 800783e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d003      	beq.n	8007854 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800784c:	69ba      	ldr	r2, [r7, #24]
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	4313      	orrs	r3, r2
 8007852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007854:	4a11      	ldr	r2, [pc, #68]	; (800789c <HAL_GPIO_Init+0x324>)
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	3301      	adds	r3, #1
 800785e:	61fb      	str	r3, [r7, #28]
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	2b0f      	cmp	r3, #15
 8007864:	f67f ae96 	bls.w	8007594 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007868:	bf00      	nop
 800786a:	bf00      	nop
 800786c:	3724      	adds	r7, #36	; 0x24
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	40023800 	.word	0x40023800
 800787c:	40013800 	.word	0x40013800
 8007880:	40020000 	.word	0x40020000
 8007884:	40020400 	.word	0x40020400
 8007888:	40020800 	.word	0x40020800
 800788c:	40020c00 	.word	0x40020c00
 8007890:	40021000 	.word	0x40021000
 8007894:	40021400 	.word	0x40021400
 8007898:	40021800 	.word	0x40021800
 800789c:	40013c00 	.word	0x40013c00

080078a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	460b      	mov	r3, r1
 80078aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	691a      	ldr	r2, [r3, #16]
 80078b0:	887b      	ldrh	r3, [r7, #2]
 80078b2:	4013      	ands	r3, r2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80078b8:	2301      	movs	r3, #1
 80078ba:	73fb      	strb	r3, [r7, #15]
 80078bc:	e001      	b.n	80078c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80078be:	2300      	movs	r3, #0
 80078c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	460b      	mov	r3, r1
 80078da:	807b      	strh	r3, [r7, #2]
 80078dc:	4613      	mov	r3, r2
 80078de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80078e0:	787b      	ldrb	r3, [r7, #1]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80078e6:	887a      	ldrh	r2, [r7, #2]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80078ec:	e003      	b.n	80078f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80078ee:	887b      	ldrh	r3, [r7, #2]
 80078f0:	041a      	lsls	r2, r3, #16
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	619a      	str	r2, [r3, #24]
}
 80078f6:	bf00      	nop
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007902:	b480      	push	{r7}
 8007904:	b085      	sub	sp, #20
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	460b      	mov	r3, r1
 800790c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007914:	887a      	ldrh	r2, [r7, #2]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	4013      	ands	r3, r2
 800791a:	041a      	lsls	r2, r3, #16
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	43d9      	mvns	r1, r3
 8007920:	887b      	ldrh	r3, [r7, #2]
 8007922:	400b      	ands	r3, r1
 8007924:	431a      	orrs	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	619a      	str	r2, [r3, #24]
}
 800792a:	bf00      	nop
 800792c:	3714      	adds	r7, #20
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
	...

08007938 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	4603      	mov	r3, r0
 8007940:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007942:	4b08      	ldr	r3, [pc, #32]	; (8007964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007944:	695a      	ldr	r2, [r3, #20]
 8007946:	88fb      	ldrh	r3, [r7, #6]
 8007948:	4013      	ands	r3, r2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d006      	beq.n	800795c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800794e:	4a05      	ldr	r2, [pc, #20]	; (8007964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007950:	88fb      	ldrh	r3, [r7, #6]
 8007952:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007954:	88fb      	ldrh	r3, [r7, #6]
 8007956:	4618      	mov	r0, r3
 8007958:	f7fa fc36 	bl	80021c8 <HAL_GPIO_EXTI_Callback>
  }
}
 800795c:	bf00      	nop
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	40013c00 	.word	0x40013c00

08007968 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e034      	b.n	80079e4 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8007982:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f245 5255 	movw	r2, #21845	; 0x5555
 800798c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	6852      	ldr	r2, [r2, #4]
 8007996:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	6892      	ldr	r2, [r2, #8]
 80079a0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80079a2:	f7fe f9ef 	bl	8005d84 <HAL_GetTick>
 80079a6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80079a8:	e00f      	b.n	80079ca <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80079aa:	f7fe f9eb 	bl	8005d84 <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	2b31      	cmp	r3, #49	; 0x31
 80079b6:	d908      	bls.n	80079ca <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f003 0303 	and.w	r3, r3, #3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e00c      	b.n	80079e4 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	f003 0303 	and.w	r3, r3, #3
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e8      	bne.n	80079aa <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80079e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80079fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d101      	bne.n	8007a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e0cc      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a20:	4b68      	ldr	r3, [pc, #416]	; (8007bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 030f 	and.w	r3, r3, #15
 8007a28:	683a      	ldr	r2, [r7, #0]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d90c      	bls.n	8007a48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a2e:	4b65      	ldr	r3, [pc, #404]	; (8007bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007a30:	683a      	ldr	r2, [r7, #0]
 8007a32:	b2d2      	uxtb	r2, r2
 8007a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a36:	4b63      	ldr	r3, [pc, #396]	; (8007bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 030f 	and.w	r3, r3, #15
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d001      	beq.n	8007a48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e0b8      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0302 	and.w	r3, r3, #2
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d020      	beq.n	8007a96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0304 	and.w	r3, r3, #4
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d005      	beq.n	8007a6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a60:	4b59      	ldr	r3, [pc, #356]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	4a58      	ldr	r2, [pc, #352]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007a6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0308 	and.w	r3, r3, #8
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d005      	beq.n	8007a84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a78:	4b53      	ldr	r3, [pc, #332]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	4a52      	ldr	r2, [pc, #328]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a84:	4b50      	ldr	r3, [pc, #320]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	494d      	ldr	r1, [pc, #308]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d044      	beq.n	8007b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d107      	bne.n	8007aba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aaa:	4b47      	ldr	r3, [pc, #284]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d119      	bne.n	8007aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e07f      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d003      	beq.n	8007aca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d107      	bne.n	8007ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007aca:	4b3f      	ldr	r3, [pc, #252]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d109      	bne.n	8007aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e06f      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ada:	4b3b      	ldr	r3, [pc, #236]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0302 	and.w	r3, r3, #2
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d101      	bne.n	8007aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e067      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007aea:	4b37      	ldr	r3, [pc, #220]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f023 0203 	bic.w	r2, r3, #3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	4934      	ldr	r1, [pc, #208]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007afc:	f7fe f942 	bl	8005d84 <HAL_GetTick>
 8007b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b02:	e00a      	b.n	8007b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b04:	f7fe f93e 	bl	8005d84 <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d901      	bls.n	8007b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e04f      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b1a:	4b2b      	ldr	r3, [pc, #172]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f003 020c 	and.w	r2, r3, #12
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d1eb      	bne.n	8007b04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b2c:	4b25      	ldr	r3, [pc, #148]	; (8007bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 030f 	and.w	r3, r3, #15
 8007b34:	683a      	ldr	r2, [r7, #0]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d20c      	bcs.n	8007b54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b3a:	4b22      	ldr	r3, [pc, #136]	; (8007bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	b2d2      	uxtb	r2, r2
 8007b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b42:	4b20      	ldr	r3, [pc, #128]	; (8007bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 030f 	and.w	r3, r3, #15
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d001      	beq.n	8007b54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e032      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0304 	and.w	r3, r3, #4
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d008      	beq.n	8007b72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b60:	4b19      	ldr	r3, [pc, #100]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	4916      	ldr	r1, [pc, #88]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0308 	and.w	r3, r3, #8
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d009      	beq.n	8007b92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b7e:	4b12      	ldr	r3, [pc, #72]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	00db      	lsls	r3, r3, #3
 8007b8c:	490e      	ldr	r1, [pc, #56]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b92:	f000 f821 	bl	8007bd8 <HAL_RCC_GetSysClockFreq>
 8007b96:	4602      	mov	r2, r0
 8007b98:	4b0b      	ldr	r3, [pc, #44]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	091b      	lsrs	r3, r3, #4
 8007b9e:	f003 030f 	and.w	r3, r3, #15
 8007ba2:	490a      	ldr	r1, [pc, #40]	; (8007bcc <HAL_RCC_ClockConfig+0x1c0>)
 8007ba4:	5ccb      	ldrb	r3, [r1, r3]
 8007ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8007baa:	4a09      	ldr	r2, [pc, #36]	; (8007bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007bae:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fe f8a2 	bl	8005cfc <HAL_InitTick>

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	40023c00 	.word	0x40023c00
 8007bc8:	40023800 	.word	0x40023800
 8007bcc:	0801a204 	.word	0x0801a204
 8007bd0:	20000004 	.word	0x20000004
 8007bd4:	20000040 	.word	0x20000040

08007bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bdc:	b0a6      	sub	sp, #152	; 0x98
 8007bde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bfe:	4bc8      	ldr	r3, [pc, #800]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x348>)
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f003 030c 	and.w	r3, r3, #12
 8007c06:	2b0c      	cmp	r3, #12
 8007c08:	f200 817e 	bhi.w	8007f08 <HAL_RCC_GetSysClockFreq+0x330>
 8007c0c:	a201      	add	r2, pc, #4	; (adr r2, 8007c14 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c12:	bf00      	nop
 8007c14:	08007c49 	.word	0x08007c49
 8007c18:	08007f09 	.word	0x08007f09
 8007c1c:	08007f09 	.word	0x08007f09
 8007c20:	08007f09 	.word	0x08007f09
 8007c24:	08007c51 	.word	0x08007c51
 8007c28:	08007f09 	.word	0x08007f09
 8007c2c:	08007f09 	.word	0x08007f09
 8007c30:	08007f09 	.word	0x08007f09
 8007c34:	08007c59 	.word	0x08007c59
 8007c38:	08007f09 	.word	0x08007f09
 8007c3c:	08007f09 	.word	0x08007f09
 8007c40:	08007f09 	.word	0x08007f09
 8007c44:	08007dc3 	.word	0x08007dc3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c48:	4bb6      	ldr	r3, [pc, #728]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x34c>)
 8007c4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8007c4e:	e15f      	b.n	8007f10 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c50:	4bb5      	ldr	r3, [pc, #724]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x350>)
 8007c52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8007c56:	e15b      	b.n	8007f10 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c58:	4bb1      	ldr	r3, [pc, #708]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x348>)
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c64:	4bae      	ldr	r3, [pc, #696]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x348>)
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d031      	beq.n	8007cd4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c70:	4bab      	ldr	r3, [pc, #684]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x348>)
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	099b      	lsrs	r3, r3, #6
 8007c76:	2200      	movs	r2, #0
 8007c78:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c82:	663b      	str	r3, [r7, #96]	; 0x60
 8007c84:	2300      	movs	r3, #0
 8007c86:	667b      	str	r3, [r7, #100]	; 0x64
 8007c88:	4ba7      	ldr	r3, [pc, #668]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x350>)
 8007c8a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007c8e:	462a      	mov	r2, r5
 8007c90:	fb03 f202 	mul.w	r2, r3, r2
 8007c94:	2300      	movs	r3, #0
 8007c96:	4621      	mov	r1, r4
 8007c98:	fb01 f303 	mul.w	r3, r1, r3
 8007c9c:	4413      	add	r3, r2
 8007c9e:	4aa2      	ldr	r2, [pc, #648]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x350>)
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	fba1 1202 	umull	r1, r2, r1, r2
 8007ca6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007ca8:	460a      	mov	r2, r1
 8007caa:	67ba      	str	r2, [r7, #120]	; 0x78
 8007cac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007cae:	4413      	add	r3, r2
 8007cb0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cba:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007cbc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007cc0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007cc4:	f7f8 ffc0 	bl	8000c48 <__aeabi_uldivmod>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4613      	mov	r3, r2
 8007cce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007cd2:	e064      	b.n	8007d9e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cd4:	4b92      	ldr	r3, [pc, #584]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x348>)
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	099b      	lsrs	r3, r3, #6
 8007cda:	2200      	movs	r2, #0
 8007cdc:	653b      	str	r3, [r7, #80]	; 0x50
 8007cde:	657a      	str	r2, [r7, #84]	; 0x54
 8007ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ce6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ce8:	2300      	movs	r3, #0
 8007cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cec:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8007cf0:	4622      	mov	r2, r4
 8007cf2:	462b      	mov	r3, r5
 8007cf4:	f04f 0000 	mov.w	r0, #0
 8007cf8:	f04f 0100 	mov.w	r1, #0
 8007cfc:	0159      	lsls	r1, r3, #5
 8007cfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d02:	0150      	lsls	r0, r2, #5
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	4621      	mov	r1, r4
 8007d0a:	1a51      	subs	r1, r2, r1
 8007d0c:	6139      	str	r1, [r7, #16]
 8007d0e:	4629      	mov	r1, r5
 8007d10:	eb63 0301 	sbc.w	r3, r3, r1
 8007d14:	617b      	str	r3, [r7, #20]
 8007d16:	f04f 0200 	mov.w	r2, #0
 8007d1a:	f04f 0300 	mov.w	r3, #0
 8007d1e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d22:	4659      	mov	r1, fp
 8007d24:	018b      	lsls	r3, r1, #6
 8007d26:	4651      	mov	r1, sl
 8007d28:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007d2c:	4651      	mov	r1, sl
 8007d2e:	018a      	lsls	r2, r1, #6
 8007d30:	4651      	mov	r1, sl
 8007d32:	ebb2 0801 	subs.w	r8, r2, r1
 8007d36:	4659      	mov	r1, fp
 8007d38:	eb63 0901 	sbc.w	r9, r3, r1
 8007d3c:	f04f 0200 	mov.w	r2, #0
 8007d40:	f04f 0300 	mov.w	r3, #0
 8007d44:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d48:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d4c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d50:	4690      	mov	r8, r2
 8007d52:	4699      	mov	r9, r3
 8007d54:	4623      	mov	r3, r4
 8007d56:	eb18 0303 	adds.w	r3, r8, r3
 8007d5a:	60bb      	str	r3, [r7, #8]
 8007d5c:	462b      	mov	r3, r5
 8007d5e:	eb49 0303 	adc.w	r3, r9, r3
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	f04f 0200 	mov.w	r2, #0
 8007d68:	f04f 0300 	mov.w	r3, #0
 8007d6c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007d70:	4629      	mov	r1, r5
 8007d72:	028b      	lsls	r3, r1, #10
 8007d74:	4621      	mov	r1, r4
 8007d76:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d7a:	4621      	mov	r1, r4
 8007d7c:	028a      	lsls	r2, r1, #10
 8007d7e:	4610      	mov	r0, r2
 8007d80:	4619      	mov	r1, r3
 8007d82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d86:	2200      	movs	r2, #0
 8007d88:	643b      	str	r3, [r7, #64]	; 0x40
 8007d8a:	647a      	str	r2, [r7, #68]	; 0x44
 8007d8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d90:	f7f8 ff5a 	bl	8000c48 <__aeabi_uldivmod>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4613      	mov	r3, r2
 8007d9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007d9e:	4b60      	ldr	r3, [pc, #384]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x348>)
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	0c1b      	lsrs	r3, r3, #16
 8007da4:	f003 0303 	and.w	r3, r3, #3
 8007da8:	3301      	adds	r3, #1
 8007daa:	005b      	lsls	r3, r3, #1
 8007dac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8007db0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007db4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8007dc0:	e0a6      	b.n	8007f10 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007dc2:	4b57      	ldr	r3, [pc, #348]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x348>)
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007dce:	4b54      	ldr	r3, [pc, #336]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x348>)
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d02a      	beq.n	8007e30 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007dda:	4b51      	ldr	r3, [pc, #324]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x348>)
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	099b      	lsrs	r3, r3, #6
 8007de0:	2200      	movs	r2, #0
 8007de2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007de4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007dec:	2100      	movs	r1, #0
 8007dee:	4b4e      	ldr	r3, [pc, #312]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x350>)
 8007df0:	fb03 f201 	mul.w	r2, r3, r1
 8007df4:	2300      	movs	r3, #0
 8007df6:	fb00 f303 	mul.w	r3, r0, r3
 8007dfa:	4413      	add	r3, r2
 8007dfc:	4a4a      	ldr	r2, [pc, #296]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x350>)
 8007dfe:	fba0 1202 	umull	r1, r2, r0, r2
 8007e02:	677a      	str	r2, [r7, #116]	; 0x74
 8007e04:	460a      	mov	r2, r1
 8007e06:	673a      	str	r2, [r7, #112]	; 0x70
 8007e08:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007e0a:	4413      	add	r3, r2
 8007e0c:	677b      	str	r3, [r7, #116]	; 0x74
 8007e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e12:	2200      	movs	r2, #0
 8007e14:	633b      	str	r3, [r7, #48]	; 0x30
 8007e16:	637a      	str	r2, [r7, #52]	; 0x34
 8007e18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007e1c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007e20:	f7f8 ff12 	bl	8000c48 <__aeabi_uldivmod>
 8007e24:	4602      	mov	r2, r0
 8007e26:	460b      	mov	r3, r1
 8007e28:	4613      	mov	r3, r2
 8007e2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e2e:	e05b      	b.n	8007ee8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e30:	4b3b      	ldr	r3, [pc, #236]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x348>)
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	099b      	lsrs	r3, r3, #6
 8007e36:	2200      	movs	r2, #0
 8007e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e42:	623b      	str	r3, [r7, #32]
 8007e44:	2300      	movs	r3, #0
 8007e46:	627b      	str	r3, [r7, #36]	; 0x24
 8007e48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007e4c:	4642      	mov	r2, r8
 8007e4e:	464b      	mov	r3, r9
 8007e50:	f04f 0000 	mov.w	r0, #0
 8007e54:	f04f 0100 	mov.w	r1, #0
 8007e58:	0159      	lsls	r1, r3, #5
 8007e5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e5e:	0150      	lsls	r0, r2, #5
 8007e60:	4602      	mov	r2, r0
 8007e62:	460b      	mov	r3, r1
 8007e64:	4641      	mov	r1, r8
 8007e66:	ebb2 0a01 	subs.w	sl, r2, r1
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007e70:	f04f 0200 	mov.w	r2, #0
 8007e74:	f04f 0300 	mov.w	r3, #0
 8007e78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007e7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007e80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007e84:	ebb2 040a 	subs.w	r4, r2, sl
 8007e88:	eb63 050b 	sbc.w	r5, r3, fp
 8007e8c:	f04f 0200 	mov.w	r2, #0
 8007e90:	f04f 0300 	mov.w	r3, #0
 8007e94:	00eb      	lsls	r3, r5, #3
 8007e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e9a:	00e2      	lsls	r2, r4, #3
 8007e9c:	4614      	mov	r4, r2
 8007e9e:	461d      	mov	r5, r3
 8007ea0:	4643      	mov	r3, r8
 8007ea2:	18e3      	adds	r3, r4, r3
 8007ea4:	603b      	str	r3, [r7, #0]
 8007ea6:	464b      	mov	r3, r9
 8007ea8:	eb45 0303 	adc.w	r3, r5, r3
 8007eac:	607b      	str	r3, [r7, #4]
 8007eae:	f04f 0200 	mov.w	r2, #0
 8007eb2:	f04f 0300 	mov.w	r3, #0
 8007eb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007eba:	4629      	mov	r1, r5
 8007ebc:	028b      	lsls	r3, r1, #10
 8007ebe:	4621      	mov	r1, r4
 8007ec0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	028a      	lsls	r2, r1, #10
 8007ec8:	4610      	mov	r0, r2
 8007eca:	4619      	mov	r1, r3
 8007ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	61bb      	str	r3, [r7, #24]
 8007ed4:	61fa      	str	r2, [r7, #28]
 8007ed6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007eda:	f7f8 feb5 	bl	8000c48 <__aeabi_uldivmod>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007ee8:	4b0d      	ldr	r3, [pc, #52]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x348>)
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	0f1b      	lsrs	r3, r3, #28
 8007eee:	f003 0307 	and.w	r3, r3, #7
 8007ef2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8007ef6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007efa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8007f06:	e003      	b.n	8007f10 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f08:	4b06      	ldr	r3, [pc, #24]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x34c>)
 8007f0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8007f0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3798      	adds	r7, #152	; 0x98
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f1e:	bf00      	nop
 8007f20:	40023800 	.word	0x40023800
 8007f24:	00f42400 	.word	0x00f42400
 8007f28:	017d7840 	.word	0x017d7840

08007f2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e28d      	b.n	800845a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f000 8083 	beq.w	8008052 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007f4c:	4b94      	ldr	r3, [pc, #592]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f003 030c 	and.w	r3, r3, #12
 8007f54:	2b04      	cmp	r3, #4
 8007f56:	d019      	beq.n	8007f8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007f58:	4b91      	ldr	r3, [pc, #580]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007f60:	2b08      	cmp	r3, #8
 8007f62:	d106      	bne.n	8007f72 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007f64:	4b8e      	ldr	r3, [pc, #568]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f70:	d00c      	beq.n	8007f8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f72:	4b8b      	ldr	r3, [pc, #556]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007f7a:	2b0c      	cmp	r3, #12
 8007f7c:	d112      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f7e:	4b88      	ldr	r3, [pc, #544]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f8a:	d10b      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f8c:	4b84      	ldr	r3, [pc, #528]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d05b      	beq.n	8008050 <HAL_RCC_OscConfig+0x124>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d157      	bne.n	8008050 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e25a      	b.n	800845a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fac:	d106      	bne.n	8007fbc <HAL_RCC_OscConfig+0x90>
 8007fae:	4b7c      	ldr	r3, [pc, #496]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a7b      	ldr	r2, [pc, #492]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 8007fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fb8:	6013      	str	r3, [r2, #0]
 8007fba:	e01d      	b.n	8007ff8 <HAL_RCC_OscConfig+0xcc>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fc4:	d10c      	bne.n	8007fe0 <HAL_RCC_OscConfig+0xb4>
 8007fc6:	4b76      	ldr	r3, [pc, #472]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a75      	ldr	r2, [pc, #468]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 8007fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007fd0:	6013      	str	r3, [r2, #0]
 8007fd2:	4b73      	ldr	r3, [pc, #460]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a72      	ldr	r2, [pc, #456]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 8007fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	e00b      	b.n	8007ff8 <HAL_RCC_OscConfig+0xcc>
 8007fe0:	4b6f      	ldr	r3, [pc, #444]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a6e      	ldr	r2, [pc, #440]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 8007fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fea:	6013      	str	r3, [r2, #0]
 8007fec:	4b6c      	ldr	r3, [pc, #432]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a6b      	ldr	r2, [pc, #428]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 8007ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d013      	beq.n	8008028 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008000:	f7fd fec0 	bl	8005d84 <HAL_GetTick>
 8008004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008006:	e008      	b.n	800801a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008008:	f7fd febc 	bl	8005d84 <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	2b64      	cmp	r3, #100	; 0x64
 8008014:	d901      	bls.n	800801a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e21f      	b.n	800845a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800801a:	4b61      	ldr	r3, [pc, #388]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d0f0      	beq.n	8008008 <HAL_RCC_OscConfig+0xdc>
 8008026:	e014      	b.n	8008052 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008028:	f7fd feac 	bl	8005d84 <HAL_GetTick>
 800802c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800802e:	e008      	b.n	8008042 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008030:	f7fd fea8 	bl	8005d84 <HAL_GetTick>
 8008034:	4602      	mov	r2, r0
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	2b64      	cmp	r3, #100	; 0x64
 800803c:	d901      	bls.n	8008042 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	e20b      	b.n	800845a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008042:	4b57      	ldr	r3, [pc, #348]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1f0      	bne.n	8008030 <HAL_RCC_OscConfig+0x104>
 800804e:	e000      	b.n	8008052 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0302 	and.w	r3, r3, #2
 800805a:	2b00      	cmp	r3, #0
 800805c:	d06f      	beq.n	800813e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800805e:	4b50      	ldr	r3, [pc, #320]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f003 030c 	and.w	r3, r3, #12
 8008066:	2b00      	cmp	r3, #0
 8008068:	d017      	beq.n	800809a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800806a:	4b4d      	ldr	r3, [pc, #308]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008072:	2b08      	cmp	r3, #8
 8008074:	d105      	bne.n	8008082 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008076:	4b4a      	ldr	r3, [pc, #296]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00b      	beq.n	800809a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008082:	4b47      	ldr	r3, [pc, #284]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800808a:	2b0c      	cmp	r3, #12
 800808c:	d11c      	bne.n	80080c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800808e:	4b44      	ldr	r3, [pc, #272]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008096:	2b00      	cmp	r3, #0
 8008098:	d116      	bne.n	80080c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800809a:	4b41      	ldr	r3, [pc, #260]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0302 	and.w	r3, r3, #2
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d005      	beq.n	80080b2 <HAL_RCC_OscConfig+0x186>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d001      	beq.n	80080b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e1d3      	b.n	800845a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080b2:	4b3b      	ldr	r3, [pc, #236]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	00db      	lsls	r3, r3, #3
 80080c0:	4937      	ldr	r1, [pc, #220]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 80080c2:	4313      	orrs	r3, r2
 80080c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080c6:	e03a      	b.n	800813e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d020      	beq.n	8008112 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080d0:	4b34      	ldr	r3, [pc, #208]	; (80081a4 <HAL_RCC_OscConfig+0x278>)
 80080d2:	2201      	movs	r2, #1
 80080d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d6:	f7fd fe55 	bl	8005d84 <HAL_GetTick>
 80080da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080dc:	e008      	b.n	80080f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080de:	f7fd fe51 	bl	8005d84 <HAL_GetTick>
 80080e2:	4602      	mov	r2, r0
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d901      	bls.n	80080f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e1b4      	b.n	800845a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080f0:	4b2b      	ldr	r3, [pc, #172]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0302 	and.w	r3, r3, #2
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d0f0      	beq.n	80080de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080fc:	4b28      	ldr	r3, [pc, #160]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	00db      	lsls	r3, r3, #3
 800810a:	4925      	ldr	r1, [pc, #148]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 800810c:	4313      	orrs	r3, r2
 800810e:	600b      	str	r3, [r1, #0]
 8008110:	e015      	b.n	800813e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008112:	4b24      	ldr	r3, [pc, #144]	; (80081a4 <HAL_RCC_OscConfig+0x278>)
 8008114:	2200      	movs	r2, #0
 8008116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008118:	f7fd fe34 	bl	8005d84 <HAL_GetTick>
 800811c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800811e:	e008      	b.n	8008132 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008120:	f7fd fe30 	bl	8005d84 <HAL_GetTick>
 8008124:	4602      	mov	r2, r0
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	2b02      	cmp	r3, #2
 800812c:	d901      	bls.n	8008132 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e193      	b.n	800845a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008132:	4b1b      	ldr	r3, [pc, #108]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 0302 	and.w	r3, r3, #2
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1f0      	bne.n	8008120 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 0308 	and.w	r3, r3, #8
 8008146:	2b00      	cmp	r3, #0
 8008148:	d036      	beq.n	80081b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	695b      	ldr	r3, [r3, #20]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d016      	beq.n	8008180 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008152:	4b15      	ldr	r3, [pc, #84]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 8008154:	2201      	movs	r2, #1
 8008156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008158:	f7fd fe14 	bl	8005d84 <HAL_GetTick>
 800815c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800815e:	e008      	b.n	8008172 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008160:	f7fd fe10 	bl	8005d84 <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	2b02      	cmp	r3, #2
 800816c:	d901      	bls.n	8008172 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800816e:	2303      	movs	r3, #3
 8008170:	e173      	b.n	800845a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008172:	4b0b      	ldr	r3, [pc, #44]	; (80081a0 <HAL_RCC_OscConfig+0x274>)
 8008174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008176:	f003 0302 	and.w	r3, r3, #2
 800817a:	2b00      	cmp	r3, #0
 800817c:	d0f0      	beq.n	8008160 <HAL_RCC_OscConfig+0x234>
 800817e:	e01b      	b.n	80081b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008180:	4b09      	ldr	r3, [pc, #36]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008186:	f7fd fdfd 	bl	8005d84 <HAL_GetTick>
 800818a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800818c:	e00e      	b.n	80081ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800818e:	f7fd fdf9 	bl	8005d84 <HAL_GetTick>
 8008192:	4602      	mov	r2, r0
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	2b02      	cmp	r3, #2
 800819a:	d907      	bls.n	80081ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800819c:	2303      	movs	r3, #3
 800819e:	e15c      	b.n	800845a <HAL_RCC_OscConfig+0x52e>
 80081a0:	40023800 	.word	0x40023800
 80081a4:	42470000 	.word	0x42470000
 80081a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081ac:	4b8a      	ldr	r3, [pc, #552]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 80081ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081b0:	f003 0302 	and.w	r3, r3, #2
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1ea      	bne.n	800818e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 0304 	and.w	r3, r3, #4
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 8097 	beq.w	80082f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081c6:	2300      	movs	r3, #0
 80081c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081ca:	4b83      	ldr	r3, [pc, #524]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 80081cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d10f      	bne.n	80081f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081d6:	2300      	movs	r3, #0
 80081d8:	60bb      	str	r3, [r7, #8]
 80081da:	4b7f      	ldr	r3, [pc, #508]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 80081dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081de:	4a7e      	ldr	r2, [pc, #504]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 80081e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081e4:	6413      	str	r3, [r2, #64]	; 0x40
 80081e6:	4b7c      	ldr	r3, [pc, #496]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 80081e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081ee:	60bb      	str	r3, [r7, #8]
 80081f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081f2:	2301      	movs	r3, #1
 80081f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081f6:	4b79      	ldr	r3, [pc, #484]	; (80083dc <HAL_RCC_OscConfig+0x4b0>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d118      	bne.n	8008234 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008202:	4b76      	ldr	r3, [pc, #472]	; (80083dc <HAL_RCC_OscConfig+0x4b0>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a75      	ldr	r2, [pc, #468]	; (80083dc <HAL_RCC_OscConfig+0x4b0>)
 8008208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800820c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800820e:	f7fd fdb9 	bl	8005d84 <HAL_GetTick>
 8008212:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008214:	e008      	b.n	8008228 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008216:	f7fd fdb5 	bl	8005d84 <HAL_GetTick>
 800821a:	4602      	mov	r2, r0
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	2b02      	cmp	r3, #2
 8008222:	d901      	bls.n	8008228 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008224:	2303      	movs	r3, #3
 8008226:	e118      	b.n	800845a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008228:	4b6c      	ldr	r3, [pc, #432]	; (80083dc <HAL_RCC_OscConfig+0x4b0>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008230:	2b00      	cmp	r3, #0
 8008232:	d0f0      	beq.n	8008216 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d106      	bne.n	800824a <HAL_RCC_OscConfig+0x31e>
 800823c:	4b66      	ldr	r3, [pc, #408]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 800823e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008240:	4a65      	ldr	r2, [pc, #404]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 8008242:	f043 0301 	orr.w	r3, r3, #1
 8008246:	6713      	str	r3, [r2, #112]	; 0x70
 8008248:	e01c      	b.n	8008284 <HAL_RCC_OscConfig+0x358>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	2b05      	cmp	r3, #5
 8008250:	d10c      	bne.n	800826c <HAL_RCC_OscConfig+0x340>
 8008252:	4b61      	ldr	r3, [pc, #388]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 8008254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008256:	4a60      	ldr	r2, [pc, #384]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 8008258:	f043 0304 	orr.w	r3, r3, #4
 800825c:	6713      	str	r3, [r2, #112]	; 0x70
 800825e:	4b5e      	ldr	r3, [pc, #376]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 8008260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008262:	4a5d      	ldr	r2, [pc, #372]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 8008264:	f043 0301 	orr.w	r3, r3, #1
 8008268:	6713      	str	r3, [r2, #112]	; 0x70
 800826a:	e00b      	b.n	8008284 <HAL_RCC_OscConfig+0x358>
 800826c:	4b5a      	ldr	r3, [pc, #360]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 800826e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008270:	4a59      	ldr	r2, [pc, #356]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 8008272:	f023 0301 	bic.w	r3, r3, #1
 8008276:	6713      	str	r3, [r2, #112]	; 0x70
 8008278:	4b57      	ldr	r3, [pc, #348]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 800827a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800827c:	4a56      	ldr	r2, [pc, #344]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 800827e:	f023 0304 	bic.w	r3, r3, #4
 8008282:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d015      	beq.n	80082b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800828c:	f7fd fd7a 	bl	8005d84 <HAL_GetTick>
 8008290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008292:	e00a      	b.n	80082aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008294:	f7fd fd76 	bl	8005d84 <HAL_GetTick>
 8008298:	4602      	mov	r2, r0
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	f241 3288 	movw	r2, #5000	; 0x1388
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d901      	bls.n	80082aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e0d7      	b.n	800845a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082aa:	4b4b      	ldr	r3, [pc, #300]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 80082ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ae:	f003 0302 	and.w	r3, r3, #2
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d0ee      	beq.n	8008294 <HAL_RCC_OscConfig+0x368>
 80082b6:	e014      	b.n	80082e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082b8:	f7fd fd64 	bl	8005d84 <HAL_GetTick>
 80082bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082be:	e00a      	b.n	80082d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082c0:	f7fd fd60 	bl	8005d84 <HAL_GetTick>
 80082c4:	4602      	mov	r2, r0
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d901      	bls.n	80082d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e0c1      	b.n	800845a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082d6:	4b40      	ldr	r3, [pc, #256]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 80082d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082da:	f003 0302 	and.w	r3, r3, #2
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1ee      	bne.n	80082c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082e2:	7dfb      	ldrb	r3, [r7, #23]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d105      	bne.n	80082f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082e8:	4b3b      	ldr	r3, [pc, #236]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 80082ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ec:	4a3a      	ldr	r2, [pc, #232]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 80082ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f000 80ad 	beq.w	8008458 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80082fe:	4b36      	ldr	r3, [pc, #216]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f003 030c 	and.w	r3, r3, #12
 8008306:	2b08      	cmp	r3, #8
 8008308:	d060      	beq.n	80083cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	2b02      	cmp	r3, #2
 8008310:	d145      	bne.n	800839e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008312:	4b33      	ldr	r3, [pc, #204]	; (80083e0 <HAL_RCC_OscConfig+0x4b4>)
 8008314:	2200      	movs	r2, #0
 8008316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008318:	f7fd fd34 	bl	8005d84 <HAL_GetTick>
 800831c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800831e:	e008      	b.n	8008332 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008320:	f7fd fd30 	bl	8005d84 <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	2b02      	cmp	r3, #2
 800832c:	d901      	bls.n	8008332 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e093      	b.n	800845a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008332:	4b29      	ldr	r3, [pc, #164]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1f0      	bne.n	8008320 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	69da      	ldr	r2, [r3, #28]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	431a      	orrs	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834c:	019b      	lsls	r3, r3, #6
 800834e:	431a      	orrs	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008354:	085b      	lsrs	r3, r3, #1
 8008356:	3b01      	subs	r3, #1
 8008358:	041b      	lsls	r3, r3, #16
 800835a:	431a      	orrs	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008360:	061b      	lsls	r3, r3, #24
 8008362:	431a      	orrs	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008368:	071b      	lsls	r3, r3, #28
 800836a:	491b      	ldr	r1, [pc, #108]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 800836c:	4313      	orrs	r3, r2
 800836e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008370:	4b1b      	ldr	r3, [pc, #108]	; (80083e0 <HAL_RCC_OscConfig+0x4b4>)
 8008372:	2201      	movs	r2, #1
 8008374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008376:	f7fd fd05 	bl	8005d84 <HAL_GetTick>
 800837a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800837c:	e008      	b.n	8008390 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800837e:	f7fd fd01 	bl	8005d84 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	2b02      	cmp	r3, #2
 800838a:	d901      	bls.n	8008390 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e064      	b.n	800845a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008390:	4b11      	ldr	r3, [pc, #68]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d0f0      	beq.n	800837e <HAL_RCC_OscConfig+0x452>
 800839c:	e05c      	b.n	8008458 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800839e:	4b10      	ldr	r3, [pc, #64]	; (80083e0 <HAL_RCC_OscConfig+0x4b4>)
 80083a0:	2200      	movs	r2, #0
 80083a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083a4:	f7fd fcee 	bl	8005d84 <HAL_GetTick>
 80083a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083aa:	e008      	b.n	80083be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083ac:	f7fd fcea 	bl	8005d84 <HAL_GetTick>
 80083b0:	4602      	mov	r2, r0
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d901      	bls.n	80083be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e04d      	b.n	800845a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083be:	4b06      	ldr	r3, [pc, #24]	; (80083d8 <HAL_RCC_OscConfig+0x4ac>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1f0      	bne.n	80083ac <HAL_RCC_OscConfig+0x480>
 80083ca:	e045      	b.n	8008458 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d107      	bne.n	80083e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e040      	b.n	800845a <HAL_RCC_OscConfig+0x52e>
 80083d8:	40023800 	.word	0x40023800
 80083dc:	40007000 	.word	0x40007000
 80083e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80083e4:	4b1f      	ldr	r3, [pc, #124]	; (8008464 <HAL_RCC_OscConfig+0x538>)
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d030      	beq.n	8008454 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d129      	bne.n	8008454 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800840a:	429a      	cmp	r2, r3
 800840c:	d122      	bne.n	8008454 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008414:	4013      	ands	r3, r2
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800841a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800841c:	4293      	cmp	r3, r2
 800841e:	d119      	bne.n	8008454 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842a:	085b      	lsrs	r3, r3, #1
 800842c:	3b01      	subs	r3, #1
 800842e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008430:	429a      	cmp	r2, r3
 8008432:	d10f      	bne.n	8008454 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008440:	429a      	cmp	r2, r3
 8008442:	d107      	bne.n	8008454 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008450:	429a      	cmp	r2, r3
 8008452:	d001      	beq.n	8008458 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	e000      	b.n	800845a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3718      	adds	r7, #24
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	40023800 	.word	0x40023800

08008468 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d101      	bne.n	800847a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e07b      	b.n	8008572 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847e:	2b00      	cmp	r3, #0
 8008480:	d108      	bne.n	8008494 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800848a:	d009      	beq.n	80084a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	61da      	str	r2, [r3, #28]
 8008492:	e005      	b.n	80084a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d106      	bne.n	80084c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7f9 ffa0 	bl	8002400 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2202      	movs	r2, #2
 80084c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80084e8:	431a      	orrs	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084f2:	431a      	orrs	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	f003 0302 	and.w	r3, r3, #2
 80084fc:	431a      	orrs	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	f003 0301 	and.w	r3, r3, #1
 8008506:	431a      	orrs	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008510:	431a      	orrs	r2, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800851a:	431a      	orrs	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a1b      	ldr	r3, [r3, #32]
 8008520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008524:	ea42 0103 	orr.w	r1, r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800852c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	430a      	orrs	r2, r1
 8008536:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	0c1b      	lsrs	r3, r3, #16
 800853e:	f003 0104 	and.w	r1, r3, #4
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	f003 0210 	and.w	r2, r3, #16
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	430a      	orrs	r2, r1
 8008550:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	69da      	ldr	r2, [r3, #28]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008560:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b088      	sub	sp, #32
 800857e:	af00      	add	r7, sp, #0
 8008580:	60f8      	str	r0, [r7, #12]
 8008582:	60b9      	str	r1, [r7, #8]
 8008584:	603b      	str	r3, [r7, #0]
 8008586:	4613      	mov	r3, r2
 8008588:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008594:	2b01      	cmp	r3, #1
 8008596:	d101      	bne.n	800859c <HAL_SPI_Transmit+0x22>
 8008598:	2302      	movs	r3, #2
 800859a:	e126      	b.n	80087ea <HAL_SPI_Transmit+0x270>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085a4:	f7fd fbee 	bl	8005d84 <HAL_GetTick>
 80085a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80085aa:	88fb      	ldrh	r3, [r7, #6]
 80085ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d002      	beq.n	80085c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80085ba:	2302      	movs	r3, #2
 80085bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80085be:	e10b      	b.n	80087d8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d002      	beq.n	80085cc <HAL_SPI_Transmit+0x52>
 80085c6:	88fb      	ldrh	r3, [r7, #6]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d102      	bne.n	80085d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80085d0:	e102      	b.n	80087d8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2203      	movs	r2, #3
 80085d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	88fa      	ldrh	r2, [r7, #6]
 80085ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	88fa      	ldrh	r2, [r7, #6]
 80085f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2200      	movs	r2, #0
 80085fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008618:	d10f      	bne.n	800863a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008628:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008638:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008644:	2b40      	cmp	r3, #64	; 0x40
 8008646:	d007      	beq.n	8008658 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008656:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008660:	d14b      	bne.n	80086fa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d002      	beq.n	8008670 <HAL_SPI_Transmit+0xf6>
 800866a:	8afb      	ldrh	r3, [r7, #22]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d13e      	bne.n	80086ee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008674:	881a      	ldrh	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008680:	1c9a      	adds	r2, r3, #2
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800868a:	b29b      	uxth	r3, r3
 800868c:	3b01      	subs	r3, #1
 800868e:	b29a      	uxth	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008694:	e02b      	b.n	80086ee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	f003 0302 	and.w	r3, r3, #2
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d112      	bne.n	80086ca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a8:	881a      	ldrh	r2, [r3, #0]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b4:	1c9a      	adds	r2, r3, #2
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086be:	b29b      	uxth	r3, r3
 80086c0:	3b01      	subs	r3, #1
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80086c8:	e011      	b.n	80086ee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086ca:	f7fd fb5b 	bl	8005d84 <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d803      	bhi.n	80086e2 <HAL_SPI_Transmit+0x168>
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e0:	d102      	bne.n	80086e8 <HAL_SPI_Transmit+0x16e>
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d102      	bne.n	80086ee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80086e8:	2303      	movs	r3, #3
 80086ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80086ec:	e074      	b.n	80087d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1ce      	bne.n	8008696 <HAL_SPI_Transmit+0x11c>
 80086f8:	e04c      	b.n	8008794 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d002      	beq.n	8008708 <HAL_SPI_Transmit+0x18e>
 8008702:	8afb      	ldrh	r3, [r7, #22]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d140      	bne.n	800878a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	330c      	adds	r3, #12
 8008712:	7812      	ldrb	r2, [r2, #0]
 8008714:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008724:	b29b      	uxth	r3, r3
 8008726:	3b01      	subs	r3, #1
 8008728:	b29a      	uxth	r2, r3
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800872e:	e02c      	b.n	800878a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	f003 0302 	and.w	r3, r3, #2
 800873a:	2b02      	cmp	r3, #2
 800873c:	d113      	bne.n	8008766 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	330c      	adds	r3, #12
 8008748:	7812      	ldrb	r2, [r2, #0]
 800874a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008750:	1c5a      	adds	r2, r3, #1
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800875a:	b29b      	uxth	r3, r3
 800875c:	3b01      	subs	r3, #1
 800875e:	b29a      	uxth	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	86da      	strh	r2, [r3, #54]	; 0x36
 8008764:	e011      	b.n	800878a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008766:	f7fd fb0d 	bl	8005d84 <HAL_GetTick>
 800876a:	4602      	mov	r2, r0
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	683a      	ldr	r2, [r7, #0]
 8008772:	429a      	cmp	r2, r3
 8008774:	d803      	bhi.n	800877e <HAL_SPI_Transmit+0x204>
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800877c:	d102      	bne.n	8008784 <HAL_SPI_Transmit+0x20a>
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d102      	bne.n	800878a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008788:	e026      	b.n	80087d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800878e:	b29b      	uxth	r3, r3
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1cd      	bne.n	8008730 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008794:	69ba      	ldr	r2, [r7, #24]
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f000 fa55 	bl	8008c48 <SPI_EndRxTxTransaction>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2220      	movs	r2, #32
 80087a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d10a      	bne.n	80087c8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80087b2:	2300      	movs	r3, #0
 80087b4:	613b      	str	r3, [r7, #16]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	613b      	str	r3, [r7, #16]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	613b      	str	r3, [r7, #16]
 80087c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d002      	beq.n	80087d6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	77fb      	strb	r3, [r7, #31]
 80087d4:	e000      	b.n	80087d8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80087d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80087e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3720      	adds	r7, #32
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b08c      	sub	sp, #48	; 0x30
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	60f8      	str	r0, [r7, #12]
 80087fa:	60b9      	str	r1, [r7, #8]
 80087fc:	607a      	str	r2, [r7, #4]
 80087fe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008800:	2301      	movs	r3, #1
 8008802:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008810:	2b01      	cmp	r3, #1
 8008812:	d101      	bne.n	8008818 <HAL_SPI_TransmitReceive+0x26>
 8008814:	2302      	movs	r3, #2
 8008816:	e18a      	b.n	8008b2e <HAL_SPI_TransmitReceive+0x33c>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008820:	f7fd fab0 	bl	8005d84 <HAL_GetTick>
 8008824:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800882c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008836:	887b      	ldrh	r3, [r7, #2]
 8008838:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800883a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800883e:	2b01      	cmp	r3, #1
 8008840:	d00f      	beq.n	8008862 <HAL_SPI_TransmitReceive+0x70>
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008848:	d107      	bne.n	800885a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d103      	bne.n	800885a <HAL_SPI_TransmitReceive+0x68>
 8008852:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008856:	2b04      	cmp	r3, #4
 8008858:	d003      	beq.n	8008862 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800885a:	2302      	movs	r3, #2
 800885c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008860:	e15b      	b.n	8008b1a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d005      	beq.n	8008874 <HAL_SPI_TransmitReceive+0x82>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d002      	beq.n	8008874 <HAL_SPI_TransmitReceive+0x82>
 800886e:	887b      	ldrh	r3, [r7, #2]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d103      	bne.n	800887c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800887a:	e14e      	b.n	8008b1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008882:	b2db      	uxtb	r3, r3
 8008884:	2b04      	cmp	r3, #4
 8008886:	d003      	beq.n	8008890 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2205      	movs	r2, #5
 800888c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	887a      	ldrh	r2, [r7, #2]
 80088a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	887a      	ldrh	r2, [r7, #2]
 80088a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	887a      	ldrh	r2, [r7, #2]
 80088b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	887a      	ldrh	r2, [r7, #2]
 80088b8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d0:	2b40      	cmp	r3, #64	; 0x40
 80088d2:	d007      	beq.n	80088e4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088ec:	d178      	bne.n	80089e0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <HAL_SPI_TransmitReceive+0x10a>
 80088f6:	8b7b      	ldrh	r3, [r7, #26]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d166      	bne.n	80089ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008900:	881a      	ldrh	r2, [r3, #0]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890c:	1c9a      	adds	r2, r3, #2
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008916:	b29b      	uxth	r3, r3
 8008918:	3b01      	subs	r3, #1
 800891a:	b29a      	uxth	r2, r3
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008920:	e053      	b.n	80089ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f003 0302 	and.w	r3, r3, #2
 800892c:	2b02      	cmp	r3, #2
 800892e:	d11b      	bne.n	8008968 <HAL_SPI_TransmitReceive+0x176>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008934:	b29b      	uxth	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d016      	beq.n	8008968 <HAL_SPI_TransmitReceive+0x176>
 800893a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893c:	2b01      	cmp	r3, #1
 800893e:	d113      	bne.n	8008968 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008944:	881a      	ldrh	r2, [r3, #0]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008950:	1c9a      	adds	r2, r3, #2
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800895a:	b29b      	uxth	r3, r3
 800895c:	3b01      	subs	r3, #1
 800895e:	b29a      	uxth	r2, r3
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008964:	2300      	movs	r3, #0
 8008966:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	2b01      	cmp	r3, #1
 8008974:	d119      	bne.n	80089aa <HAL_SPI_TransmitReceive+0x1b8>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800897a:	b29b      	uxth	r3, r3
 800897c:	2b00      	cmp	r3, #0
 800897e:	d014      	beq.n	80089aa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68da      	ldr	r2, [r3, #12]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898a:	b292      	uxth	r2, r2
 800898c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008992:	1c9a      	adds	r2, r3, #2
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800899c:	b29b      	uxth	r3, r3
 800899e:	3b01      	subs	r3, #1
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80089a6:	2301      	movs	r3, #1
 80089a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80089aa:	f7fd f9eb 	bl	8005d84 <HAL_GetTick>
 80089ae:	4602      	mov	r2, r0
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	1ad3      	subs	r3, r2, r3
 80089b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d807      	bhi.n	80089ca <HAL_SPI_TransmitReceive+0x1d8>
 80089ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c0:	d003      	beq.n	80089ca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80089c8:	e0a7      	b.n	8008b1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1a6      	bne.n	8008922 <HAL_SPI_TransmitReceive+0x130>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089d8:	b29b      	uxth	r3, r3
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1a1      	bne.n	8008922 <HAL_SPI_TransmitReceive+0x130>
 80089de:	e07c      	b.n	8008ada <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d002      	beq.n	80089ee <HAL_SPI_TransmitReceive+0x1fc>
 80089e8:	8b7b      	ldrh	r3, [r7, #26]
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d16b      	bne.n	8008ac6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	330c      	adds	r3, #12
 80089f8:	7812      	ldrb	r2, [r2, #0]
 80089fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a00:	1c5a      	adds	r2, r3, #1
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a14:	e057      	b.n	8008ac6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	f003 0302 	and.w	r3, r3, #2
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d11c      	bne.n	8008a5e <HAL_SPI_TransmitReceive+0x26c>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d017      	beq.n	8008a5e <HAL_SPI_TransmitReceive+0x26c>
 8008a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d114      	bne.n	8008a5e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	330c      	adds	r3, #12
 8008a3e:	7812      	ldrb	r2, [r2, #0]
 8008a40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a46:	1c5a      	adds	r2, r3, #1
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	3b01      	subs	r3, #1
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d119      	bne.n	8008aa0 <HAL_SPI_TransmitReceive+0x2ae>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d014      	beq.n	8008aa0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68da      	ldr	r2, [r3, #12]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a80:	b2d2      	uxtb	r2, r2
 8008a82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a88:	1c5a      	adds	r2, r3, #1
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	3b01      	subs	r3, #1
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008aa0:	f7fd f970 	bl	8005d84 <HAL_GetTick>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d803      	bhi.n	8008ab8 <HAL_SPI_TransmitReceive+0x2c6>
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab6:	d102      	bne.n	8008abe <HAL_SPI_TransmitReceive+0x2cc>
 8008ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d103      	bne.n	8008ac6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008ac4:	e029      	b.n	8008b1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1a2      	bne.n	8008a16 <HAL_SPI_TransmitReceive+0x224>
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d19d      	bne.n	8008a16 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008adc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f000 f8b2 	bl	8008c48 <SPI_EndRxTxTransaction>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d006      	beq.n	8008af8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2220      	movs	r2, #32
 8008af4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008af6:	e010      	b.n	8008b1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10b      	bne.n	8008b18 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b00:	2300      	movs	r3, #0
 8008b02:	617b      	str	r3, [r7, #20]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	617b      	str	r3, [r7, #20]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	617b      	str	r3, [r7, #20]
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	e000      	b.n	8008b1a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008b18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008b2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3730      	adds	r7, #48	; 0x30
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
	...

08008b38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b088      	sub	sp, #32
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	603b      	str	r3, [r7, #0]
 8008b44:	4613      	mov	r3, r2
 8008b46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008b48:	f7fd f91c 	bl	8005d84 <HAL_GetTick>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b50:	1a9b      	subs	r3, r3, r2
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	4413      	add	r3, r2
 8008b56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008b58:	f7fd f914 	bl	8005d84 <HAL_GetTick>
 8008b5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008b5e:	4b39      	ldr	r3, [pc, #228]	; (8008c44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	015b      	lsls	r3, r3, #5
 8008b64:	0d1b      	lsrs	r3, r3, #20
 8008b66:	69fa      	ldr	r2, [r7, #28]
 8008b68:	fb02 f303 	mul.w	r3, r2, r3
 8008b6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b6e:	e054      	b.n	8008c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b76:	d050      	beq.n	8008c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008b78:	f7fd f904 	bl	8005d84 <HAL_GetTick>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	69fa      	ldr	r2, [r7, #28]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d902      	bls.n	8008b8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d13d      	bne.n	8008c0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	685a      	ldr	r2, [r3, #4]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008b9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ba6:	d111      	bne.n	8008bcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bb0:	d004      	beq.n	8008bbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bba:	d107      	bne.n	8008bcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bd4:	d10f      	bne.n	8008bf6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008be4:	601a      	str	r2, [r3, #0]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008bf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008c06:	2303      	movs	r3, #3
 8008c08:	e017      	b.n	8008c3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d101      	bne.n	8008c14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008c10:	2300      	movs	r3, #0
 8008c12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	3b01      	subs	r3, #1
 8008c18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	689a      	ldr	r2, [r3, #8]
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	4013      	ands	r3, r2
 8008c24:	68ba      	ldr	r2, [r7, #8]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	bf0c      	ite	eq
 8008c2a:	2301      	moveq	r3, #1
 8008c2c:	2300      	movne	r3, #0
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	461a      	mov	r2, r3
 8008c32:	79fb      	ldrb	r3, [r7, #7]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d19b      	bne.n	8008b70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3720      	adds	r7, #32
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	20000004 	.word	0x20000004

08008c48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b088      	sub	sp, #32
 8008c4c:	af02      	add	r7, sp, #8
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008c54:	4b1b      	ldr	r3, [pc, #108]	; (8008cc4 <SPI_EndRxTxTransaction+0x7c>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a1b      	ldr	r2, [pc, #108]	; (8008cc8 <SPI_EndRxTxTransaction+0x80>)
 8008c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c5e:	0d5b      	lsrs	r3, r3, #21
 8008c60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008c64:	fb02 f303 	mul.w	r3, r2, r3
 8008c68:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c72:	d112      	bne.n	8008c9a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	9300      	str	r3, [sp, #0]
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2180      	movs	r1, #128	; 0x80
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f7ff ff5a 	bl	8008b38 <SPI_WaitFlagStateUntilTimeout>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d016      	beq.n	8008cb8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c8e:	f043 0220 	orr.w	r2, r3, #32
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008c96:	2303      	movs	r3, #3
 8008c98:	e00f      	b.n	8008cba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00a      	beq.n	8008cb6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cb0:	2b80      	cmp	r3, #128	; 0x80
 8008cb2:	d0f2      	beq.n	8008c9a <SPI_EndRxTxTransaction+0x52>
 8008cb4:	e000      	b.n	8008cb8 <SPI_EndRxTxTransaction+0x70>
        break;
 8008cb6:	bf00      	nop
  }

  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3718      	adds	r7, #24
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	20000004 	.word	0x20000004
 8008cc8:	165e9f81 	.word	0x165e9f81

08008ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d101      	bne.n	8008cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e041      	b.n	8008d62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d106      	bne.n	8008cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f7f9 fbcc 	bl	8002490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	3304      	adds	r3, #4
 8008d08:	4619      	mov	r1, r3
 8008d0a:	4610      	mov	r0, r2
 8008d0c:	f000 fa24 	bl	8009158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b082      	sub	sp, #8
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	f003 0302 	and.w	r3, r3, #2
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d122      	bne.n	8008dc6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	f003 0302 	and.w	r3, r3, #2
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d11b      	bne.n	8008dc6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f06f 0202 	mvn.w	r2, #2
 8008d96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	f003 0303 	and.w	r3, r3, #3
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d003      	beq.n	8008db4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f9b5 	bl	800911c <HAL_TIM_IC_CaptureCallback>
 8008db2:	e005      	b.n	8008dc0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f9a7 	bl	8009108 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f9b8 	bl	8009130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	f003 0304 	and.w	r3, r3, #4
 8008dd0:	2b04      	cmp	r3, #4
 8008dd2:	d122      	bne.n	8008e1a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	f003 0304 	and.w	r3, r3, #4
 8008dde:	2b04      	cmp	r3, #4
 8008de0:	d11b      	bne.n	8008e1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f06f 0204 	mvn.w	r2, #4
 8008dea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	699b      	ldr	r3, [r3, #24]
 8008df8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d003      	beq.n	8008e08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 f98b 	bl	800911c <HAL_TIM_IC_CaptureCallback>
 8008e06:	e005      	b.n	8008e14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 f97d 	bl	8009108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f98e 	bl	8009130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	f003 0308 	and.w	r3, r3, #8
 8008e24:	2b08      	cmp	r3, #8
 8008e26:	d122      	bne.n	8008e6e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	f003 0308 	and.w	r3, r3, #8
 8008e32:	2b08      	cmp	r3, #8
 8008e34:	d11b      	bne.n	8008e6e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f06f 0208 	mvn.w	r2, #8
 8008e3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2204      	movs	r2, #4
 8008e44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	69db      	ldr	r3, [r3, #28]
 8008e4c:	f003 0303 	and.w	r3, r3, #3
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d003      	beq.n	8008e5c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f961 	bl	800911c <HAL_TIM_IC_CaptureCallback>
 8008e5a:	e005      	b.n	8008e68 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 f953 	bl	8009108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f964 	bl	8009130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	f003 0310 	and.w	r3, r3, #16
 8008e78:	2b10      	cmp	r3, #16
 8008e7a:	d122      	bne.n	8008ec2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	f003 0310 	and.w	r3, r3, #16
 8008e86:	2b10      	cmp	r3, #16
 8008e88:	d11b      	bne.n	8008ec2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f06f 0210 	mvn.w	r2, #16
 8008e92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2208      	movs	r2, #8
 8008e98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	69db      	ldr	r3, [r3, #28]
 8008ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d003      	beq.n	8008eb0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 f937 	bl	800911c <HAL_TIM_IC_CaptureCallback>
 8008eae:	e005      	b.n	8008ebc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 f929 	bl	8009108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f93a 	bl	8009130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	f003 0301 	and.w	r3, r3, #1
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d10e      	bne.n	8008eee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	f003 0301 	and.w	r3, r3, #1
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d107      	bne.n	8008eee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f06f 0201 	mvn.w	r2, #1
 8008ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7f9 fb91 	bl	8002610 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ef8:	2b80      	cmp	r3, #128	; 0x80
 8008efa:	d10e      	bne.n	8008f1a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f06:	2b80      	cmp	r3, #128	; 0x80
 8008f08:	d107      	bne.n	8008f1a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fadf 	bl	80094d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f24:	2b40      	cmp	r3, #64	; 0x40
 8008f26:	d10e      	bne.n	8008f46 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f32:	2b40      	cmp	r3, #64	; 0x40
 8008f34:	d107      	bne.n	8008f46 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 f8ff 	bl	8009144 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	f003 0320 	and.w	r3, r3, #32
 8008f50:	2b20      	cmp	r3, #32
 8008f52:	d10e      	bne.n	8008f72 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	f003 0320 	and.w	r3, r3, #32
 8008f5e:	2b20      	cmp	r3, #32
 8008f60:	d107      	bne.n	8008f72 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f06f 0220 	mvn.w	r2, #32
 8008f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 faa9 	bl	80094c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f72:	bf00      	nop
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d101      	bne.n	8008f96 <HAL_TIM_ConfigClockSource+0x1c>
 8008f92:	2302      	movs	r3, #2
 8008f94:	e0b4      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x186>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008fb4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fbc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fce:	d03e      	beq.n	800904e <HAL_TIM_ConfigClockSource+0xd4>
 8008fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fd4:	f200 8087 	bhi.w	80090e6 <HAL_TIM_ConfigClockSource+0x16c>
 8008fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fdc:	f000 8086 	beq.w	80090ec <HAL_TIM_ConfigClockSource+0x172>
 8008fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fe4:	d87f      	bhi.n	80090e6 <HAL_TIM_ConfigClockSource+0x16c>
 8008fe6:	2b70      	cmp	r3, #112	; 0x70
 8008fe8:	d01a      	beq.n	8009020 <HAL_TIM_ConfigClockSource+0xa6>
 8008fea:	2b70      	cmp	r3, #112	; 0x70
 8008fec:	d87b      	bhi.n	80090e6 <HAL_TIM_ConfigClockSource+0x16c>
 8008fee:	2b60      	cmp	r3, #96	; 0x60
 8008ff0:	d050      	beq.n	8009094 <HAL_TIM_ConfigClockSource+0x11a>
 8008ff2:	2b60      	cmp	r3, #96	; 0x60
 8008ff4:	d877      	bhi.n	80090e6 <HAL_TIM_ConfigClockSource+0x16c>
 8008ff6:	2b50      	cmp	r3, #80	; 0x50
 8008ff8:	d03c      	beq.n	8009074 <HAL_TIM_ConfigClockSource+0xfa>
 8008ffa:	2b50      	cmp	r3, #80	; 0x50
 8008ffc:	d873      	bhi.n	80090e6 <HAL_TIM_ConfigClockSource+0x16c>
 8008ffe:	2b40      	cmp	r3, #64	; 0x40
 8009000:	d058      	beq.n	80090b4 <HAL_TIM_ConfigClockSource+0x13a>
 8009002:	2b40      	cmp	r3, #64	; 0x40
 8009004:	d86f      	bhi.n	80090e6 <HAL_TIM_ConfigClockSource+0x16c>
 8009006:	2b30      	cmp	r3, #48	; 0x30
 8009008:	d064      	beq.n	80090d4 <HAL_TIM_ConfigClockSource+0x15a>
 800900a:	2b30      	cmp	r3, #48	; 0x30
 800900c:	d86b      	bhi.n	80090e6 <HAL_TIM_ConfigClockSource+0x16c>
 800900e:	2b20      	cmp	r3, #32
 8009010:	d060      	beq.n	80090d4 <HAL_TIM_ConfigClockSource+0x15a>
 8009012:	2b20      	cmp	r3, #32
 8009014:	d867      	bhi.n	80090e6 <HAL_TIM_ConfigClockSource+0x16c>
 8009016:	2b00      	cmp	r3, #0
 8009018:	d05c      	beq.n	80090d4 <HAL_TIM_ConfigClockSource+0x15a>
 800901a:	2b10      	cmp	r3, #16
 800901c:	d05a      	beq.n	80090d4 <HAL_TIM_ConfigClockSource+0x15a>
 800901e:	e062      	b.n	80090e6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6818      	ldr	r0, [r3, #0]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	6899      	ldr	r1, [r3, #8]
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	685a      	ldr	r2, [r3, #4]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	f000 f9ac 	bl	800938c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009042:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	609a      	str	r2, [r3, #8]
      break;
 800904c:	e04f      	b.n	80090ee <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6818      	ldr	r0, [r3, #0]
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	6899      	ldr	r1, [r3, #8]
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	f000 f995 	bl	800938c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	689a      	ldr	r2, [r3, #8]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009070:	609a      	str	r2, [r3, #8]
      break;
 8009072:	e03c      	b.n	80090ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6818      	ldr	r0, [r3, #0]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	6859      	ldr	r1, [r3, #4]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	461a      	mov	r2, r3
 8009082:	f000 f909 	bl	8009298 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2150      	movs	r1, #80	; 0x50
 800908c:	4618      	mov	r0, r3
 800908e:	f000 f962 	bl	8009356 <TIM_ITRx_SetConfig>
      break;
 8009092:	e02c      	b.n	80090ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6818      	ldr	r0, [r3, #0]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	6859      	ldr	r1, [r3, #4]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	461a      	mov	r2, r3
 80090a2:	f000 f928 	bl	80092f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2160      	movs	r1, #96	; 0x60
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 f952 	bl	8009356 <TIM_ITRx_SetConfig>
      break;
 80090b2:	e01c      	b.n	80090ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6818      	ldr	r0, [r3, #0]
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	6859      	ldr	r1, [r3, #4]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	461a      	mov	r2, r3
 80090c2:	f000 f8e9 	bl	8009298 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2140      	movs	r1, #64	; 0x40
 80090cc:	4618      	mov	r0, r3
 80090ce:	f000 f942 	bl	8009356 <TIM_ITRx_SetConfig>
      break;
 80090d2:	e00c      	b.n	80090ee <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4619      	mov	r1, r3
 80090de:	4610      	mov	r0, r2
 80090e0:	f000 f939 	bl	8009356 <TIM_ITRx_SetConfig>
      break;
 80090e4:	e003      	b.n	80090ee <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	73fb      	strb	r3, [r7, #15]
      break;
 80090ea:	e000      	b.n	80090ee <HAL_TIM_ConfigClockSource+0x174>
      break;
 80090ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009100:	4618      	mov	r0, r3
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009124:	bf00      	nop
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800914c:	bf00      	nop
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a40      	ldr	r2, [pc, #256]	; (800926c <TIM_Base_SetConfig+0x114>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d013      	beq.n	8009198 <TIM_Base_SetConfig+0x40>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009176:	d00f      	beq.n	8009198 <TIM_Base_SetConfig+0x40>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a3d      	ldr	r2, [pc, #244]	; (8009270 <TIM_Base_SetConfig+0x118>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d00b      	beq.n	8009198 <TIM_Base_SetConfig+0x40>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a3c      	ldr	r2, [pc, #240]	; (8009274 <TIM_Base_SetConfig+0x11c>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d007      	beq.n	8009198 <TIM_Base_SetConfig+0x40>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a3b      	ldr	r2, [pc, #236]	; (8009278 <TIM_Base_SetConfig+0x120>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d003      	beq.n	8009198 <TIM_Base_SetConfig+0x40>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a3a      	ldr	r2, [pc, #232]	; (800927c <TIM_Base_SetConfig+0x124>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d108      	bne.n	80091aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800919e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a2f      	ldr	r2, [pc, #188]	; (800926c <TIM_Base_SetConfig+0x114>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d02b      	beq.n	800920a <TIM_Base_SetConfig+0xb2>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091b8:	d027      	beq.n	800920a <TIM_Base_SetConfig+0xb2>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4a2c      	ldr	r2, [pc, #176]	; (8009270 <TIM_Base_SetConfig+0x118>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d023      	beq.n	800920a <TIM_Base_SetConfig+0xb2>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a2b      	ldr	r2, [pc, #172]	; (8009274 <TIM_Base_SetConfig+0x11c>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d01f      	beq.n	800920a <TIM_Base_SetConfig+0xb2>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a2a      	ldr	r2, [pc, #168]	; (8009278 <TIM_Base_SetConfig+0x120>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d01b      	beq.n	800920a <TIM_Base_SetConfig+0xb2>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a29      	ldr	r2, [pc, #164]	; (800927c <TIM_Base_SetConfig+0x124>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d017      	beq.n	800920a <TIM_Base_SetConfig+0xb2>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a28      	ldr	r2, [pc, #160]	; (8009280 <TIM_Base_SetConfig+0x128>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d013      	beq.n	800920a <TIM_Base_SetConfig+0xb2>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a27      	ldr	r2, [pc, #156]	; (8009284 <TIM_Base_SetConfig+0x12c>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d00f      	beq.n	800920a <TIM_Base_SetConfig+0xb2>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4a26      	ldr	r2, [pc, #152]	; (8009288 <TIM_Base_SetConfig+0x130>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d00b      	beq.n	800920a <TIM_Base_SetConfig+0xb2>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a25      	ldr	r2, [pc, #148]	; (800928c <TIM_Base_SetConfig+0x134>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d007      	beq.n	800920a <TIM_Base_SetConfig+0xb2>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a24      	ldr	r2, [pc, #144]	; (8009290 <TIM_Base_SetConfig+0x138>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d003      	beq.n	800920a <TIM_Base_SetConfig+0xb2>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a23      	ldr	r2, [pc, #140]	; (8009294 <TIM_Base_SetConfig+0x13c>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d108      	bne.n	800921c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	4313      	orrs	r3, r2
 800921a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	695b      	ldr	r3, [r3, #20]
 8009226:	4313      	orrs	r3, r2
 8009228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	689a      	ldr	r2, [r3, #8]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a0a      	ldr	r2, [pc, #40]	; (800926c <TIM_Base_SetConfig+0x114>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d003      	beq.n	8009250 <TIM_Base_SetConfig+0xf8>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a0c      	ldr	r2, [pc, #48]	; (800927c <TIM_Base_SetConfig+0x124>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d103      	bne.n	8009258 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	691a      	ldr	r2, [r3, #16]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	615a      	str	r2, [r3, #20]
}
 800925e:	bf00      	nop
 8009260:	3714      	adds	r7, #20
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	40010000 	.word	0x40010000
 8009270:	40000400 	.word	0x40000400
 8009274:	40000800 	.word	0x40000800
 8009278:	40000c00 	.word	0x40000c00
 800927c:	40010400 	.word	0x40010400
 8009280:	40014000 	.word	0x40014000
 8009284:	40014400 	.word	0x40014400
 8009288:	40014800 	.word	0x40014800
 800928c:	40001800 	.word	0x40001800
 8009290:	40001c00 	.word	0x40001c00
 8009294:	40002000 	.word	0x40002000

08009298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009298:	b480      	push	{r7}
 800929a:	b087      	sub	sp, #28
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6a1b      	ldr	r3, [r3, #32]
 80092a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6a1b      	ldr	r3, [r3, #32]
 80092ae:	f023 0201 	bic.w	r2, r3, #1
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80092c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	011b      	lsls	r3, r3, #4
 80092c8:	693a      	ldr	r2, [r7, #16]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	f023 030a 	bic.w	r3, r3, #10
 80092d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	4313      	orrs	r3, r2
 80092dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	693a      	ldr	r2, [r7, #16]
 80092e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	697a      	ldr	r2, [r7, #20]
 80092e8:	621a      	str	r2, [r3, #32]
}
 80092ea:	bf00      	nop
 80092ec:	371c      	adds	r7, #28
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092f6:	b480      	push	{r7}
 80092f8:	b087      	sub	sp, #28
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	60f8      	str	r0, [r7, #12]
 80092fe:	60b9      	str	r1, [r7, #8]
 8009300:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	f023 0210 	bic.w	r2, r3, #16
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	699b      	ldr	r3, [r3, #24]
 8009312:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6a1b      	ldr	r3, [r3, #32]
 8009318:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009320:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	031b      	lsls	r3, r3, #12
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	4313      	orrs	r3, r2
 800932a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009332:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	011b      	lsls	r3, r3, #4
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	4313      	orrs	r3, r2
 800933c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	697a      	ldr	r2, [r7, #20]
 8009342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	693a      	ldr	r2, [r7, #16]
 8009348:	621a      	str	r2, [r3, #32]
}
 800934a:	bf00      	nop
 800934c:	371c      	adds	r7, #28
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009356:	b480      	push	{r7}
 8009358:	b085      	sub	sp, #20
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800936c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800936e:	683a      	ldr	r2, [r7, #0]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	4313      	orrs	r3, r2
 8009374:	f043 0307 	orr.w	r3, r3, #7
 8009378:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	609a      	str	r2, [r3, #8]
}
 8009380:	bf00      	nop
 8009382:	3714      	adds	r7, #20
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800938c:	b480      	push	{r7}
 800938e:	b087      	sub	sp, #28
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
 8009398:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80093a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	021a      	lsls	r2, r3, #8
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	431a      	orrs	r2, r3
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	697a      	ldr	r2, [r7, #20]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	697a      	ldr	r2, [r7, #20]
 80093be:	609a      	str	r2, [r3, #8]
}
 80093c0:	bf00      	nop
 80093c2:	371c      	adds	r7, #28
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d101      	bne.n	80093e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093e0:	2302      	movs	r3, #2
 80093e2:	e05a      	b.n	800949a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2202      	movs	r2, #2
 80093f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800940a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	4313      	orrs	r3, r2
 8009414:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a21      	ldr	r2, [pc, #132]	; (80094a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d022      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009430:	d01d      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a1d      	ldr	r2, [pc, #116]	; (80094ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d018      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a1b      	ldr	r2, [pc, #108]	; (80094b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d013      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a1a      	ldr	r2, [pc, #104]	; (80094b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d00e      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a18      	ldr	r2, [pc, #96]	; (80094b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d009      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a17      	ldr	r2, [pc, #92]	; (80094bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d004      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a15      	ldr	r2, [pc, #84]	; (80094c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d10c      	bne.n	8009488 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009474:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	4313      	orrs	r3, r2
 800947e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3714      	adds	r7, #20
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop
 80094a8:	40010000 	.word	0x40010000
 80094ac:	40000400 	.word	0x40000400
 80094b0:	40000800 	.word	0x40000800
 80094b4:	40000c00 	.word	0x40000c00
 80094b8:	40010400 	.word	0x40010400
 80094bc:	40014000 	.word	0x40014000
 80094c0:	40001800 	.word	0x40001800

080094c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094cc:	bf00      	nop
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>:
  DataModule(uint32_t can_id, uint16_t telem_id, uint32_t size, uint16_t instance_id = 0, bool is_ext_id = false, bool is_rtr = false):
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	603b      	str	r3, [r7, #0]
 80094f8:	4613      	mov	r3, r2
 80094fa:	80fb      	strh	r3, [r7, #6]
    can_id_(can_id), telem_id_(telem_id), size_(size), instance_id_(instance_id), is_ext_id_(is_ext_id), is_rtr_(is_rtr)
 80094fc:	4a18      	ldr	r2, [pc, #96]	; (8009560 <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb+0x74>)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	601a      	str	r2, [r3, #0]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	605a      	str	r2, [r3, #4]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	88fa      	ldrh	r2, [r7, #6]
 800950c:	811a      	strh	r2, [r3, #8]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	60da      	str	r2, [r3, #12]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	8b3a      	ldrh	r2, [r7, #24]
 8009518:	821a      	strh	r2, [r3, #16]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	7f3a      	ldrb	r2, [r7, #28]
 800951e:	749a      	strb	r2, [r3, #18]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009526:	74da      	strb	r2, [r3, #19]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	4a0e      	ldr	r2, [pc, #56]	; (8009564 <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb+0x78>)
 800952c:	669a      	str	r2, [r3, #104]	; 0x68
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2201      	movs	r2, #1
 8009532:	66da      	str	r2, [r3, #108]	; 0x6c
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f103 0218 	add.w	r2, r3, #24
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	671a      	str	r2, [r3, #112]	; 0x70
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2250      	movs	r2, #80	; 0x50
 8009542:	675a      	str	r2, [r3, #116]	; 0x74
      mutex_id_ = osMutexNew(&mutex_attributes_);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	3368      	adds	r3, #104	; 0x68
 8009548:	4618      	mov	r0, r3
 800954a:	f00a fc26 	bl	8013d9a <osMutexNew>
 800954e:	4602      	mov	r2, r0
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	615a      	str	r2, [r3, #20]
    };
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	4618      	mov	r0, r3
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	0801a2a8 	.word	0x0801a2a8
 8009564:	08019290 	.word	0x08019290

08009568 <_ZN11SolarGators11DataModules11FrontLightsC1Ev>:
namespace {
  static constexpr uint32_t ID = 0x234;
  static constexpr uint32_t SIZE = 4;
}

FrontLights::FrontLights():
 8009568:	b580      	push	{r7, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	af04      	add	r7, sp, #16
 800956e:	6078      	str	r0, [r7, #4]
        DataModule(ID, 0, SIZE),
        throttle_(0),
		breaks_(false),
		buffCtr(0)
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	2300      	movs	r3, #0
 8009574:	9302      	str	r3, [sp, #8]
 8009576:	2300      	movs	r3, #0
 8009578:	9301      	str	r3, [sp, #4]
 800957a:	2300      	movs	r3, #0
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	2304      	movs	r3, #4
 8009580:	2200      	movs	r2, #0
 8009582:	f44f 710d 	mov.w	r1, #564	; 0x234
 8009586:	f7ff ffb1 	bl	80094ec <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>
 800958a:	4a0a      	ldr	r2, [pc, #40]	; (80095b4 <_ZN11SolarGators11DataModules11FrontLightsC1Ev+0x4c>)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	601a      	str	r2, [r3, #0]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
{ }
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4618      	mov	r0, r3
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	0801a2c8 	.word	0x0801a2c8

080095b8 <_ZN11SolarGators11DataModules11FrontLightsD1Ev>:

FrontLights::~FrontLights()
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	4a05      	ldr	r2, [pc, #20]	; (80095d8 <_ZN11SolarGators11DataModules11FrontLightsD1Ev+0x20>)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	601a      	str	r2, [r3, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7f9 f97f 	bl	80028cc <_ZN11SolarGators11DataModules10DataModuleD1Ev>
{ }
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4618      	mov	r0, r3
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	0801a2c8 	.word	0x0801a2c8

080095dc <_ZN11SolarGators11DataModules11FrontLightsD0Ev>:
FrontLights::~FrontLights()
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
{ }
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f7ff ffe7 	bl	80095b8 <_ZN11SolarGators11DataModules11FrontLightsD1Ev>
 80095ea:	21e4      	movs	r1, #228	; 0xe4
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f00e fcb5 	bl	8017f5c <_ZdlPvj>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4618      	mov	r0, r3
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <_ZNK11SolarGators11DataModules11FrontLights14GetThrottleValEv>:

uint16_t FrontLights::GetThrottleVal() const
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  return throttle_;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8b3 30de 	ldrh.w	r3, [r3, #222]	; 0xde
}
 800960a:	4618      	mov	r0, r3
 800960c:	370c      	adds	r7, #12
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr

08009616 <_ZNK11SolarGators11DataModules11FrontLights12GetBreaksValEv>:

bool FrontLights::GetBreaksVal() const
{
 8009616:	b480      	push	{r7}
 8009618:	b083      	sub	sp, #12
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
	return breaks_;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
}
 8009624:	4618      	mov	r0, r3
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <_ZNK11SolarGators11DataModules11FrontLights11ToByteArrayEPh>:

void FrontLights::ToByteArray(uint8_t* buff) const
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  buff[0] = static_cast<uint8_t>(throttle_);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8b3 30de 	ldrh.w	r3, [r3, #222]	; 0xde
 8009640:	b2da      	uxtb	r2, r3
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	701a      	strb	r2, [r3, #0]
  buff[1] = static_cast<uint8_t>(throttle_ >> 8);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8b3 30de 	ldrh.w	r3, [r3, #222]	; 0xde
 800964c:	0a1b      	lsrs	r3, r3, #8
 800964e:	b29a      	uxth	r2, r3
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	3301      	adds	r3, #1
 8009654:	b2d2      	uxtb	r2, r2
 8009656:	701a      	strb	r2, [r3, #0]
  buff[2] = static_cast<uint8_t>(breaks_);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	3302      	adds	r3, #2
 8009662:	701a      	strb	r2, [r3, #0]
}
 8009664:	bf00      	nop
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <_ZN11SolarGators11DataModules11FrontLights13FromByteArrayEPh>:
void FrontLights::FromByteArray(uint8_t* buff)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  throttle_ = static_cast<uint16_t>(buff[1]) << 8 | buff[0];
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	3301      	adds	r3, #1
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	021b      	lsls	r3, r3, #8
 8009682:	b21a      	sxth	r2, r3
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	b21b      	sxth	r3, r3
 800968a:	4313      	orrs	r3, r2
 800968c:	b21b      	sxth	r3, r3
 800968e:	b29a      	uxth	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
  breaks_ = static_cast<bool>(buff[2] & 0x1);
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	3302      	adds	r3, #2
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	f003 0301 	and.w	r3, r3, #1
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	bf14      	ite	ne
 80096a4:	2301      	movne	r3, #1
 80096a6:	2300      	moveq	r3, #0
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <_ZN11SolarGators11DataModules14MitsubaRequestC1Em>:


namespace SolarGators {
namespace DataModules {

MitsubaRequest::MitsubaRequest(uint32_t can_id):
 80096bc:	b580      	push	{r7, lr}
 80096be:	b086      	sub	sp, #24
 80096c0:	af04      	add	r7, sp, #16
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
    DataModule(can_id, 0, Request_Size, 0, true)
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	2300      	movs	r3, #0
 80096ca:	9302      	str	r3, [sp, #8]
 80096cc:	2301      	movs	r3, #1
 80096ce:	9301      	str	r3, [sp, #4]
 80096d0:	2300      	movs	r3, #0
 80096d2:	9300      	str	r3, [sp, #0]
 80096d4:	2301      	movs	r3, #1
 80096d6:	2200      	movs	r2, #0
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	f7ff ff07 	bl	80094ec <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>
 80096de:	4a04      	ldr	r2, [pc, #16]	; (80096f0 <_ZN11SolarGators11DataModules14MitsubaRequestC1Em+0x34>)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	601a      	str	r2, [r3, #0]
{ }
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4618      	mov	r0, r3
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	0801a310 	.word	0x0801a310

080096f4 <_ZN11SolarGators11DataModules14MitsubaRequestD1Ev>:

MitsubaRequest::~MitsubaRequest()
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	4a05      	ldr	r2, [pc, #20]	; (8009714 <_ZN11SolarGators11DataModules14MitsubaRequestD1Ev+0x20>)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	601a      	str	r2, [r3, #0]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4618      	mov	r0, r3
 8009706:	f7f9 f8e1 	bl	80028cc <_ZN11SolarGators11DataModules10DataModuleD1Ev>
{ }
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4618      	mov	r0, r3
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	0801a310 	.word	0x0801a310

08009718 <_ZN11SolarGators11DataModules14MitsubaRequestD0Ev>:
MitsubaRequest::~MitsubaRequest()
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
{ }
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f7ff ffe7 	bl	80096f4 <_ZN11SolarGators11DataModules14MitsubaRequestD1Ev>
 8009726:	217c      	movs	r1, #124	; 0x7c
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f00e fc17 	bl	8017f5c <_ZdlPvj>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4618      	mov	r0, r3
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <_ZN11SolarGators11DataModules14MitsubaRequest19SetRequestAllFramesEv>:
  requestFrame1 = false;
  requestFrame2 = false;
}

void MitsubaRequest::SetRequestAllFrames()
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  requestFrame0 = true;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  requestFrame1 = true;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
  requestFrame2 = true;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
}
 8009758:	bf00      	nop
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <_ZNK11SolarGators11DataModules14MitsubaRequest11ToByteArrayEPh>:

void MitsubaRequest::ToByteArray(uint8_t* buff) const
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  buff[0] = 0;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	2200      	movs	r2, #0
 8009772:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(requestFrame0) << 0;
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800977e:	4313      	orrs	r3, r2
 8009780:	b2da      	uxtb	r2, r3
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(requestFrame1) << 1;
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	b25a      	sxtb	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8009792:	005b      	lsls	r3, r3, #1
 8009794:	b25b      	sxtb	r3, r3
 8009796:	4313      	orrs	r3, r2
 8009798:	b25b      	sxtb	r3, r3
 800979a:	b2da      	uxtb	r2, r3
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(requestFrame2) << 2;
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	b25a      	sxtb	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	b25b      	sxtb	r3, r3
 80097b0:	4313      	orrs	r3, r2
 80097b2:	b25b      	sxtb	r3, r3
 80097b4:	b2da      	uxtb	r2, r3
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	701a      	strb	r2, [r3, #0]
}
 80097ba:	bf00      	nop
 80097bc:	370c      	adds	r7, #12
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr

080097c6 <_ZN11SolarGators11DataModules14MitsubaRequest13FromByteArrayEPh>:
void MitsubaRequest::FromByteArray(uint8_t* buff)
{
 80097c6:	b480      	push	{r7}
 80097c8:	b083      	sub	sp, #12
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	6039      	str	r1, [r7, #0]
  requestFrame0 = buff[0] & (1 << 0);
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	2b00      	cmp	r3, #0
 80097da:	bf14      	ite	ne
 80097dc:	2301      	movne	r3, #1
 80097de:	2300      	moveq	r3, #0
 80097e0:	b2da      	uxtb	r2, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  requestFrame1 = buff[0] & (1 << 1);
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	f003 0302 	and.w	r3, r3, #2
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	bf14      	ite	ne
 80097f4:	2301      	movne	r3, #1
 80097f6:	2300      	moveq	r3, #0
 80097f8:	b2da      	uxtb	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
  requestFrame2 = buff[0] & (1 << 2);
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	f003 0304 	and.w	r3, r3, #4
 8009808:	2b00      	cmp	r3, #0
 800980a:	bf14      	ite	ne
 800980c:	2301      	movne	r3, #1
 800980e:	2300      	moveq	r3, #0
 8009810:	b2da      	uxtb	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <_ZN11SolarGators11DataModules10MitsubaRx0C1Emt>:

MitsubaRx0::MitsubaRx0(uint32_t can_id, uint16_t telem_id):
 8009824:	b580      	push	{r7, lr}
 8009826:	b088      	sub	sp, #32
 8009828:	af04      	add	r7, sp, #16
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	4613      	mov	r3, r2
 8009830:	80fb      	strh	r3, [r7, #6]
    DataModule(can_id, telem_id, Rx0_Size, 0, true), battVoltage(0),battCurrent(0),
    battCurrentDir(false),motorCurrentPkAvg(0),FETtemp(0),
    motorRPM(0),PWMDuty(0),LeadAngle(0)
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	88fa      	ldrh	r2, [r7, #6]
 8009836:	2300      	movs	r3, #0
 8009838:	9302      	str	r3, [sp, #8]
 800983a:	2301      	movs	r3, #1
 800983c:	9301      	str	r3, [sp, #4]
 800983e:	2300      	movs	r3, #0
 8009840:	9300      	str	r3, [sp, #0]
 8009842:	2308      	movs	r3, #8
 8009844:	68b9      	ldr	r1, [r7, #8]
 8009846:	f7ff fe51 	bl	80094ec <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>
 800984a:	4a14      	ldr	r2, [pc, #80]	; (800989c <_ZN11SolarGators11DataModules10MitsubaRx0C1Emt+0x78>)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	601a      	str	r2, [r3, #0]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2200      	movs	r2, #0
 8009854:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2200      	movs	r2, #0
 800985c:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2200      	movs	r2, #0
 8009874:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2200      	movs	r2, #0
 800988c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
{ }
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	4618      	mov	r0, r3
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	0801a2f8 	.word	0x0801a2f8

080098a0 <_ZN11SolarGators11DataModules10MitsubaRx0D1Ev>:

MitsubaRx0::~MitsubaRx0()
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	4a05      	ldr	r2, [pc, #20]	; (80098c0 <_ZN11SolarGators11DataModules10MitsubaRx0D1Ev+0x20>)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	601a      	str	r2, [r3, #0]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7f9 f80b 	bl	80028cc <_ZN11SolarGators11DataModules10DataModuleD1Ev>
{ }
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4618      	mov	r0, r3
 80098ba:	3708      	adds	r7, #8
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	0801a2f8 	.word	0x0801a2f8

080098c4 <_ZN11SolarGators11DataModules10MitsubaRx0D0Ev>:
MitsubaRx0::~MitsubaRx0()
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
{ }
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f7ff ffe7 	bl	80098a0 <_ZN11SolarGators11DataModules10MitsubaRx0D1Ev>
 80098d2:	2188      	movs	r1, #136	; 0x88
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f00e fb41 	bl	8017f5c <_ZdlPvj>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4618      	mov	r0, r3
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <_ZNK11SolarGators11DataModules10MitsubaRx010GetFetTempEv>:
uint16_t MitsubaRx0::GetMotorCurrentPkAvg() const
{
  return motorCurrentPkAvg;
}
uint16_t MitsubaRx0::GetFetTemp() const
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  return FETtemp * 5; //5deg (C)/LSB
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	461a      	mov	r2, r3
 80098f6:	0092      	lsls	r2, r2, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	b29b      	uxth	r3, r3
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <_ZNK11SolarGators11DataModules10MitsubaRx011GetMotorRPMEv>:
uint16_t MitsubaRx0::GetMotorRPM() const
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  return motorRPM;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
}
 8009916:	4618      	mov	r0, r3
 8009918:	370c      	adds	r7, #12
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <_ZNK11SolarGators11DataModules10MitsubaRx011ToByteArrayEPh>:
{
  return static_cast<float>(LeadAngle) / 2.0; // 0.5deg/LSB
}
// Converter Functions
void MitsubaRx0::ToByteArray(uint8_t* buff) const
{
 8009922:	b480      	push	{r7}
 8009924:	b085      	sub	sp, #20
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
 800992a:	6039      	str	r1, [r7, #0]

  buff[0] = 0;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	2200      	movs	r2, #0
 8009930:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(battVoltage);
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	781a      	ldrb	r2, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800993c:	b2db      	uxtb	r3, r3
 800993e:	4313      	orrs	r3, r2
 8009940:	b2da      	uxtb	r2, r3
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	701a      	strb	r2, [r3, #0]

  buff[1] = 0;
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	3301      	adds	r3, #1
 800994a:	2200      	movs	r2, #0
 800994c:	701a      	strb	r2, [r3, #0]
  buff[1] |= static_cast<uint8_t>(battVoltage >> 8);
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	3301      	adds	r3, #1
 8009952:	7819      	ldrb	r1, [r3, #0]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800995a:	0a1b      	lsrs	r3, r3, #8
 800995c:	b29b      	uxth	r3, r3
 800995e:	b2da      	uxtb	r2, r3
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	3301      	adds	r3, #1
 8009964:	430a      	orrs	r2, r1
 8009966:	b2d2      	uxtb	r2, r2
 8009968:	701a      	strb	r2, [r3, #0]
  buff[1] |= static_cast<uint8_t>(static_cast<uint32_t>(battCurrent) << 2);
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	3301      	adds	r3, #1
 800996e:	7819      	ldrb	r1, [r3, #0]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8009976:	b2db      	uxtb	r3, r3
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	b2da      	uxtb	r2, r3
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	3301      	adds	r3, #1
 8009980:	430a      	orrs	r2, r1
 8009982:	b2d2      	uxtb	r2, r2
 8009984:	701a      	strb	r2, [r3, #0]

  buff[2] = 0;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	3302      	adds	r3, #2
 800998a:	2200      	movs	r2, #0
 800998c:	701a      	strb	r2, [r3, #0]
  buff[2] |= static_cast<uint8_t>(battCurrent >> 6);
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	3302      	adds	r3, #2
 8009992:	7819      	ldrb	r1, [r3, #0]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800999a:	099b      	lsrs	r3, r3, #6
 800999c:	b29b      	uxth	r3, r3
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	3302      	adds	r3, #2
 80099a4:	430a      	orrs	r2, r1
 80099a6:	b2d2      	uxtb	r2, r2
 80099a8:	701a      	strb	r2, [r3, #0]
  buff[2] |= static_cast<uint8_t>(static_cast<uint32_t>(battCurrentDir) << 3);
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	3302      	adds	r3, #2
 80099ae:	7819      	ldrb	r1, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80099b6:	00db      	lsls	r3, r3, #3
 80099b8:	b2da      	uxtb	r2, r3
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	3302      	adds	r3, #2
 80099be:	430a      	orrs	r2, r1
 80099c0:	b2d2      	uxtb	r2, r2
 80099c2:	701a      	strb	r2, [r3, #0]
  buff[2] |= static_cast<uint8_t>(motorCurrentPkAvg << 4);
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	3302      	adds	r3, #2
 80099c8:	7819      	ldrb	r1, [r3, #0]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	011b      	lsls	r3, r3, #4
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	3302      	adds	r3, #2
 80099da:	430a      	orrs	r2, r1
 80099dc:	b2d2      	uxtb	r2, r2
 80099de:	701a      	strb	r2, [r3, #0]

  buff[3] = 0;
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	3303      	adds	r3, #3
 80099e4:	2200      	movs	r2, #0
 80099e6:	701a      	strb	r2, [r3, #0]
  buff[3] |= static_cast<uint8_t>(motorCurrentPkAvg >> 4);
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	3303      	adds	r3, #3
 80099ec:	7819      	ldrb	r1, [r3, #0]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 80099f4:	091b      	lsrs	r3, r3, #4
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	b2da      	uxtb	r2, r3
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	3303      	adds	r3, #3
 80099fe:	430a      	orrs	r2, r1
 8009a00:	b2d2      	uxtb	r2, r2
 8009a02:	701a      	strb	r2, [r3, #0]
  buff[3] |= static_cast<uint8_t>(static_cast<uint32_t>(FETtemp) << 6);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	3303      	adds	r3, #3
 8009a08:	7819      	ldrb	r1, [r3, #0]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a10:	019b      	lsls	r3, r3, #6
 8009a12:	b2da      	uxtb	r2, r3
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	3303      	adds	r3, #3
 8009a18:	430a      	orrs	r2, r1
 8009a1a:	b2d2      	uxtb	r2, r2
 8009a1c:	701a      	strb	r2, [r3, #0]


  uint32_t convMotorRPM = motorRPM * 1;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8009a24:	60fb      	str	r3, [r7, #12]
  buff[4] = 0;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	3304      	adds	r3, #4
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	701a      	strb	r2, [r3, #0]
  buff[4] |= static_cast<uint8_t>(FETtemp >> 2);
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	3304      	adds	r3, #4
 8009a32:	7819      	ldrb	r1, [r3, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a3a:	089b      	lsrs	r3, r3, #2
 8009a3c:	b2da      	uxtb	r2, r3
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	3304      	adds	r3, #4
 8009a42:	430a      	orrs	r2, r1
 8009a44:	b2d2      	uxtb	r2, r2
 8009a46:	701a      	strb	r2, [r3, #0]
  buff[4] |= (static_cast<uint32_t>(convMotorRPM) & 0x1F) << 3;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	3304      	adds	r3, #4
 8009a4c:	7819      	ldrb	r1, [r3, #0]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	00db      	lsls	r3, r3, #3
 8009a54:	b2da      	uxtb	r2, r3
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	3304      	adds	r3, #4
 8009a5a:	430a      	orrs	r2, r1
 8009a5c:	b2d2      	uxtb	r2, r2
 8009a5e:	701a      	strb	r2, [r3, #0]

  buff[5] = 0;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	3305      	adds	r3, #5
 8009a64:	2200      	movs	r2, #0
 8009a66:	701a      	strb	r2, [r3, #0]
  buff[5] |= (static_cast<uint32_t>(convMotorRPM) & 0xFE0) >> 5;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	3305      	adds	r3, #5
 8009a6c:	7819      	ldrb	r1, [r3, #0]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	095b      	lsrs	r3, r3, #5
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a78:	b2da      	uxtb	r2, r3
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	3305      	adds	r3, #5
 8009a7e:	430a      	orrs	r2, r1
 8009a80:	b2d2      	uxtb	r2, r2
 8009a82:	701a      	strb	r2, [r3, #0]
  buff[5] |= (static_cast<uint8_t>(PWMDuty << 7));
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	3305      	adds	r3, #5
 8009a88:	7819      	ldrb	r1, [r3, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	01db      	lsls	r3, r3, #7
 8009a94:	b2da      	uxtb	r2, r3
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	3305      	adds	r3, #5
 8009a9a:	430a      	orrs	r2, r1
 8009a9c:	b2d2      	uxtb	r2, r2
 8009a9e:	701a      	strb	r2, [r3, #0]

  buff[6] = 0;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	3306      	adds	r3, #6
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	701a      	strb	r2, [r3, #0]
  buff[6] |= static_cast<uint8_t>(PWMDuty >> 1);
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	3306      	adds	r3, #6
 8009aac:	7819      	ldrb	r1, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8009ab4:	085b      	lsrs	r3, r3, #1
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	b2da      	uxtb	r2, r3
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	3306      	adds	r3, #6
 8009abe:	430a      	orrs	r2, r1
 8009ac0:	b2d2      	uxtb	r2, r2
 8009ac2:	701a      	strb	r2, [r3, #0]

  buff[7] = 0;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	3307      	adds	r3, #7
 8009ac8:	2200      	movs	r2, #0
 8009aca:	701a      	strb	r2, [r3, #0]
  buff[7] |= static_cast<uint8_t>(PWMDuty >> 9);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	3307      	adds	r3, #7
 8009ad0:	7819      	ldrb	r1, [r3, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8009ad8:	0a5b      	lsrs	r3, r3, #9
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	b2da      	uxtb	r2, r3
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	3307      	adds	r3, #7
 8009ae2:	430a      	orrs	r2, r1
 8009ae4:	b2d2      	uxtb	r2, r2
 8009ae6:	701a      	strb	r2, [r3, #0]
  buff[7] |= static_cast<uint8_t>(static_cast<uint32_t>(LeadAngle) << 1);
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	3307      	adds	r3, #7
 8009aec:	7819      	ldrb	r1, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8009af4:	005b      	lsls	r3, r3, #1
 8009af6:	b2da      	uxtb	r2, r3
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	3307      	adds	r3, #7
 8009afc:	430a      	orrs	r2, r1
 8009afe:	b2d2      	uxtb	r2, r2
 8009b00:	701a      	strb	r2, [r3, #0]
}
 8009b02:	bf00      	nop
 8009b04:	3714      	adds	r7, #20
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr

08009b0e <_ZN11SolarGators11DataModules10MitsubaRx013FromByteArrayEPh>:

void MitsubaRx0::FromByteArray(uint8_t* buff)
{
 8009b0e:	b480      	push	{r7}
 8009b10:	b089      	sub	sp, #36	; 0x24
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
 8009b16:	6039      	str	r1, [r7, #0]
  uint32_t preBattVoltage = (static_cast<uint32_t>(buff[1] & 3) << 8) | (buff[0]);
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	021b      	lsls	r3, r3, #8
 8009b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b24:	683a      	ldr	r2, [r7, #0]
 8009b26:	7812      	ldrb	r2, [r2, #0]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	61fb      	str	r3, [r7, #28]
  battVoltage = static_cast<uint16_t>(preBattVoltage);
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78

  uint32_t preBattCurrent = (static_cast<uint32_t>(buff[2] & 7) << 6) | (buff[1] >> 2);
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	3302      	adds	r3, #2
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	019b      	lsls	r3, r3, #6
 8009b3e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	3201      	adds	r2, #1
 8009b46:	7812      	ldrb	r2, [r2, #0]
 8009b48:	0892      	lsrs	r2, r2, #2
 8009b4a:	b2d2      	uxtb	r2, r2
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	61bb      	str	r3, [r7, #24]
  battCurrent = static_cast<uint16_t>(preBattCurrent);
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

  battCurrentDir = static_cast<bool>(buff[2] & 8);
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	3302      	adds	r3, #2
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	f003 0308 	and.w	r3, r3, #8
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	bf14      	ite	ne
 8009b68:	2301      	movne	r3, #1
 8009b6a:	2300      	moveq	r3, #0
 8009b6c:	b2da      	uxtb	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  uint32_t preMotorCurrent = static_cast<uint32_t>((buff[3] & 0x3F) << 4) | (buff[2] >> 4);
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	3303      	adds	r3, #3
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	011b      	lsls	r3, r3, #4
 8009b7c:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
 8009b80:	683a      	ldr	r2, [r7, #0]
 8009b82:	3202      	adds	r2, #2
 8009b84:	7812      	ldrb	r2, [r2, #0]
 8009b86:	0912      	lsrs	r2, r2, #4
 8009b88:	b2d2      	uxtb	r2, r2
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	617b      	str	r3, [r7, #20]
  motorCurrentPkAvg = static_cast<uint16_t>(preMotorCurrent);
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	b29a      	uxth	r2, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  uint32_t preFETtemp = static_cast<uint32_t>((buff[4] & 7) << 2) | (buff[3] >> 6);
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	3304      	adds	r3, #4
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	f003 031c 	and.w	r3, r3, #28
 8009ba4:	683a      	ldr	r2, [r7, #0]
 8009ba6:	3203      	adds	r2, #3
 8009ba8:	7812      	ldrb	r2, [r2, #0]
 8009baa:	0992      	lsrs	r2, r2, #6
 8009bac:	b2d2      	uxtb	r2, r2
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	613b      	str	r3, [r7, #16]
  FETtemp = static_cast<uint8_t>(preFETtemp);
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	b2da      	uxtb	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  uint32_t preMotorRPM = (static_cast<uint32_t>(buff[5] & 0x7F) << 5) | (buff[4] >> 3);
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	3305      	adds	r3, #5
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	015b      	lsls	r3, r3, #5
 8009bc4:	f403 637e 	and.w	r3, r3, #4064	; 0xfe0
 8009bc8:	683a      	ldr	r2, [r7, #0]
 8009bca:	3204      	adds	r2, #4
 8009bcc:	7812      	ldrb	r2, [r2, #0]
 8009bce:	08d2      	lsrs	r2, r2, #3
 8009bd0:	b2d2      	uxtb	r2, r2
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	60fb      	str	r3, [r7, #12]
  motorRPM = static_cast<uint16_t>(preMotorRPM);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82

  uint32_t preDuty = (static_cast<uint32_t>(buff[7] & 1) << 9) | (buff[6] << 1) | (buff[5] >> 7);
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	3307      	adds	r3, #7
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	025b      	lsls	r3, r3, #9
 8009be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bec:	683a      	ldr	r2, [r7, #0]
 8009bee:	3206      	adds	r2, #6
 8009bf0:	7812      	ldrb	r2, [r2, #0]
 8009bf2:	0052      	lsls	r2, r2, #1
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	683a      	ldr	r2, [r7, #0]
 8009bf8:	3205      	adds	r2, #5
 8009bfa:	7812      	ldrb	r2, [r2, #0]
 8009bfc:	09d2      	lsrs	r2, r2, #7
 8009bfe:	b2d2      	uxtb	r2, r2
 8009c00:	4313      	orrs	r3, r2
 8009c02:	60bb      	str	r3, [r7, #8]
  PWMDuty = static_cast<uint16_t>(preDuty);
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	b29a      	uxth	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84

  LeadAngle = static_cast<uint8_t>((buff[7] >> 1));
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	3307      	adds	r3, #7
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	085b      	lsrs	r3, r3, #1
 8009c16:	b2da      	uxtb	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
}
 8009c1e:	bf00      	nop
 8009c20:	3724      	adds	r7, #36	; 0x24
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr
	...

08009c2c <_ZN11SolarGators11DataModules10MitsubaRx2C1Emt>:
  http.addData("regenStat", regenStat);
  scripts->send("mitsuba/rx1", http.getParameters());
  http.flush();
}
#endif
MitsubaRx2::MitsubaRx2(uint32_t can_id, uint16_t telem_id):
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b088      	sub	sp, #32
 8009c30:	af04      	add	r7, sp, #16
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	4613      	mov	r3, r2
 8009c38:	80fb      	strh	r3, [r7, #6]
    DataModule(can_id, telem_id, Rx2_Size, 0, true)
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	88fa      	ldrh	r2, [r7, #6]
 8009c3e:	2300      	movs	r3, #0
 8009c40:	9302      	str	r3, [sp, #8]
 8009c42:	2301      	movs	r3, #1
 8009c44:	9301      	str	r3, [sp, #4]
 8009c46:	2300      	movs	r3, #0
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	2305      	movs	r3, #5
 8009c4c:	68b9      	ldr	r1, [r7, #8]
 8009c4e:	f7ff fc4d 	bl	80094ec <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>
 8009c52:	4a04      	ldr	r2, [pc, #16]	; (8009c64 <_ZN11SolarGators11DataModules10MitsubaRx2C1Emt+0x38>)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	601a      	str	r2, [r3, #0]
{ }
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	0801a2e0 	.word	0x0801a2e0

08009c68 <_ZN11SolarGators11DataModules10MitsubaRx2D1Ev>:

MitsubaRx2::~MitsubaRx2()
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	4a05      	ldr	r2, [pc, #20]	; (8009c88 <_ZN11SolarGators11DataModules10MitsubaRx2D1Ev+0x20>)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	601a      	str	r2, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7f8 fe27 	bl	80028cc <_ZN11SolarGators11DataModules10DataModuleD1Ev>
{ }
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4618      	mov	r0, r3
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	0801a2e0 	.word	0x0801a2e0

08009c8c <_ZN11SolarGators11DataModules10MitsubaRx2D0Ev>:
MitsubaRx2::~MitsubaRx2()
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
{ }
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f7ff ffe7 	bl	8009c68 <_ZN11SolarGators11DataModules10MitsubaRx2D1Ev>
 8009c9a:	218c      	movs	r1, #140	; 0x8c
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f00e f95d 	bl	8017f5c <_ZdlPvj>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3708      	adds	r7, #8
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <_ZNK11SolarGators11DataModules10MitsubaRx216GetAdSensorErrorEv>:

// Getters
bool MitsubaRx2::GetAdSensorError() const
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  return adSensorError;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	370c      	adds	r7, #12
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr

08009cc6 <_ZNK11SolarGators11DataModules10MitsubaRx220GetMotorSensorUErrorEv>:
bool MitsubaRx2::GetMotorSensorUError() const
{
 8009cc6:	b480      	push	{r7}
 8009cc8:	b083      	sub	sp, #12
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  return motorCurrSensorUError;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <_ZNK11SolarGators11DataModules10MitsubaRx224GetMotorCurrSensorWErrorEv>:
bool MitsubaRx2::GetMotorCurrSensorWError() const
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  return motorCurrSensorWError;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	370c      	adds	r7, #12
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr

08009cfa <_ZNK11SolarGators11DataModules10MitsubaRx216GetFetThermErrorEv>:
bool MitsubaRx2::GetFetThermError() const
{
 8009cfa:	b480      	push	{r7}
 8009cfc:	b083      	sub	sp, #12
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
  return fetThermError;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <_ZNK11SolarGators11DataModules10MitsubaRx222GetBattVoltSensorErrorEv>:
bool MitsubaRx2::GetBattVoltSensorError() const
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  return battVoltSensorError;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	370c      	adds	r7, #12
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr

08009d2e <_ZNK11SolarGators11DataModules10MitsubaRx222GetBattCurrSensorErrorEv>:
bool MitsubaRx2::GetBattCurrSensorError() const
{
 8009d2e:	b480      	push	{r7}
 8009d30:	b083      	sub	sp, #12
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
  return battCurrSensorError;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <_ZNK11SolarGators11DataModules10MitsubaRx225GetBattCurrSensorAdjErrorEv>:
bool MitsubaRx2::GetBattCurrSensorAdjError() const
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  return battCurrSensorAdjError;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	370c      	adds	r7, #12
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr

08009d62 <_ZNK11SolarGators11DataModules10MitsubaRx226GetMotorCurrSensorAdjErrorEv>:
bool MitsubaRx2::GetMotorCurrSensorAdjError() const
{
 8009d62:	b480      	push	{r7}
 8009d64:	b083      	sub	sp, #12
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  return motorCurrSensorAdjError;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <_ZNK11SolarGators11DataModules10MitsubaRx216GetAccelPosErrorEv>:
bool MitsubaRx2::GetAccelPosError() const
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  return accelPosError;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <_ZNK11SolarGators11DataModules10MitsubaRx222GetContVoltSensorErrorEv>:
bool MitsubaRx2::GetContVoltSensorError() const
{
 8009d96:	b480      	push	{r7}
 8009d98:	b083      	sub	sp, #12
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  return contVoltSensorError;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <_ZNK11SolarGators11DataModules10MitsubaRx219GetPowerSystemErrorEv>:
bool MitsubaRx2::GetPowerSystemError() const
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  return powerSystemError;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	370c      	adds	r7, #12
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <_ZNK11SolarGators11DataModules10MitsubaRx216GetOverCurrErrorEv>:
bool MitsubaRx2::GetOverCurrError() const
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b083      	sub	sp, #12
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  return overCurrError;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <_ZNK11SolarGators11DataModules10MitsubaRx216GetOverVoltErrorEv>:
bool MitsubaRx2::GetOverVoltError() const
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  return overVoltError;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	370c      	adds	r7, #12
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr

08009dfe <_ZNK11SolarGators11DataModules10MitsubaRx216GetOverCurrLimitEv>:
bool MitsubaRx2::GetOverCurrLimit() const
{
 8009dfe:	b480      	push	{r7}
 8009e00:	b083      	sub	sp, #12
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
  return overCurrLimit;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <_ZNK11SolarGators11DataModules10MitsubaRx219GetMotorSystemErrorEv>:
bool MitsubaRx2::GetMotorSystemError() const
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  return motorSystemError;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	370c      	adds	r7, #12
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr

08009e32 <_ZNK11SolarGators11DataModules10MitsubaRx212GetMotorLockEv>:
bool MitsubaRx2::GetMotorLock() const
{
 8009e32:	b480      	push	{r7}
 8009e34:	b083      	sub	sp, #12
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  return motorLock;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <_ZNK11SolarGators11DataModules10MitsubaRx218GetHallSensorShortEv>:
bool MitsubaRx2::GetHallSensorShort() const
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  return hallSensorShort;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	370c      	adds	r7, #12
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <_ZNK11SolarGators11DataModules10MitsubaRx211ToByteArrayEPh>:
{
  return overHeatLevel;
}
// Converter Functions
void MitsubaRx2::ToByteArray(uint8_t* buff) const
{
 8009e66:	b480      	push	{r7}
 8009e68:	b085      	sub	sp, #20
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
 8009e6e:	6039      	str	r1, [r7, #0]
  uint32_t convOverHeadLevel = overHeatLevel;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8009e76:	60fb      	str	r3, [r7, #12]

  buff[0] = 0;
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(adSensorError) << 0;
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	b2da      	uxtb	r2, r3
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(motorCurrSensorUError) << 1;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	b25a      	sxtb	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8009e9c:	005b      	lsls	r3, r3, #1
 8009e9e:	b25b      	sxtb	r3, r3
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	b25b      	sxtb	r3, r3
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(motorCurrSensorWError) << 2;
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	b25a      	sxtb	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	b25b      	sxtb	r3, r3
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	b25b      	sxtb	r3, r3
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(fetThermError) << 3;
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	b25a      	sxtb	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8009ed0:	00db      	lsls	r3, r3, #3
 8009ed2:	b25b      	sxtb	r3, r3
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	b25b      	sxtb	r3, r3
 8009ed8:	b2da      	uxtb	r2, r3
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(battVoltSensorError) << 5;
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	b25a      	sxtb	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009eea:	015b      	lsls	r3, r3, #5
 8009eec:	b25b      	sxtb	r3, r3
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	b25b      	sxtb	r3, r3
 8009ef2:	b2da      	uxtb	r2, r3
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(battCurrSensorError) << 6;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	b25a      	sxtb	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009f04:	019b      	lsls	r3, r3, #6
 8009f06:	b25b      	sxtb	r3, r3
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	b25b      	sxtb	r3, r3
 8009f0c:	b2da      	uxtb	r2, r3
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(battCurrSensorAdjError) << 7;
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	b25a      	sxtb	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8009f1e:	01db      	lsls	r3, r3, #7
 8009f20:	b25b      	sxtb	r3, r3
 8009f22:	4313      	orrs	r3, r2
 8009f24:	b25b      	sxtb	r3, r3
 8009f26:	b2da      	uxtb	r2, r3
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	701a      	strb	r2, [r3, #0]

  buff[1] = 0;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	2200      	movs	r2, #0
 8009f32:	701a      	strb	r2, [r3, #0]
  buff[1] |= static_cast<uint8_t>(motorCurrSensorAdjError) << 0;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	3301      	adds	r3, #1
 8009f38:	781a      	ldrb	r2, [r3, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8009f40:	4619      	mov	r1, r3
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	3301      	adds	r3, #1
 8009f46:	430a      	orrs	r2, r1
 8009f48:	b2d2      	uxtb	r2, r2
 8009f4a:	701a      	strb	r2, [r3, #0]
  buff[1] |= static_cast<uint8_t>(accelPosError) << 1;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	b25a      	sxtb	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f5a:	005b      	lsls	r3, r3, #1
 8009f5c:	b25b      	sxtb	r3, r3
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	b25a      	sxtb	r2, r3
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	3301      	adds	r3, #1
 8009f66:	b2d2      	uxtb	r2, r2
 8009f68:	701a      	strb	r2, [r3, #0]
  buff[1] |= static_cast<uint8_t>(contVoltSensorError) << 3;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	b25a      	sxtb	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009f78:	00db      	lsls	r3, r3, #3
 8009f7a:	b25b      	sxtb	r3, r3
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	b25a      	sxtb	r2, r3
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	3301      	adds	r3, #1
 8009f84:	b2d2      	uxtb	r2, r2
 8009f86:	701a      	strb	r2, [r3, #0]

  buff[2] = 0;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	3302      	adds	r3, #2
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	701a      	strb	r2, [r3, #0]
  buff[2] |= static_cast<uint8_t>(powerSystemError) << 0;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	3302      	adds	r3, #2
 8009f94:	781a      	ldrb	r2, [r3, #0]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	3302      	adds	r3, #2
 8009fa2:	430a      	orrs	r2, r1
 8009fa4:	b2d2      	uxtb	r2, r2
 8009fa6:	701a      	strb	r2, [r3, #0]
  buff[2] |= static_cast<uint8_t>(overCurrError) << 1;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	3302      	adds	r3, #2
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	b25a      	sxtb	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8009fb6:	005b      	lsls	r3, r3, #1
 8009fb8:	b25b      	sxtb	r3, r3
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	b25a      	sxtb	r2, r3
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	3302      	adds	r3, #2
 8009fc2:	b2d2      	uxtb	r2, r2
 8009fc4:	701a      	strb	r2, [r3, #0]
  buff[2] |= static_cast<uint8_t>(overVoltError) << 3;
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	3302      	adds	r3, #2
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	b25a      	sxtb	r2, r3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009fd4:	00db      	lsls	r3, r3, #3
 8009fd6:	b25b      	sxtb	r3, r3
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	b25a      	sxtb	r2, r3
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	3302      	adds	r3, #2
 8009fe0:	b2d2      	uxtb	r2, r2
 8009fe2:	701a      	strb	r2, [r3, #0]
  buff[2] |= static_cast<uint8_t>(overCurrLimit) << 5;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	3302      	adds	r3, #2
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	b25a      	sxtb	r2, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8009ff2:	015b      	lsls	r3, r3, #5
 8009ff4:	b25b      	sxtb	r3, r3
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	b25a      	sxtb	r2, r3
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	3302      	adds	r3, #2
 8009ffe:	b2d2      	uxtb	r2, r2
 800a000:	701a      	strb	r2, [r3, #0]

  buff[3] = 0;
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	3303      	adds	r3, #3
 800a006:	2200      	movs	r2, #0
 800a008:	701a      	strb	r2, [r3, #0]
  buff[3] |= static_cast<uint8_t>(motorSystemError) << 0;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	3303      	adds	r3, #3
 800a00e:	781a      	ldrb	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800a016:	4619      	mov	r1, r3
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	3303      	adds	r3, #3
 800a01c:	430a      	orrs	r2, r1
 800a01e:	b2d2      	uxtb	r2, r2
 800a020:	701a      	strb	r2, [r3, #0]
  buff[3] |= static_cast<uint8_t>(motorLock) << 1;
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	3303      	adds	r3, #3
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	b25a      	sxtb	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800a030:	005b      	lsls	r3, r3, #1
 800a032:	b25b      	sxtb	r3, r3
 800a034:	4313      	orrs	r3, r2
 800a036:	b25a      	sxtb	r2, r3
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	3303      	adds	r3, #3
 800a03c:	b2d2      	uxtb	r2, r2
 800a03e:	701a      	strb	r2, [r3, #0]
  buff[3] |= static_cast<uint8_t>(hallSensorShort) << 2;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	3303      	adds	r3, #3
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	b25a      	sxtb	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	b25b      	sxtb	r3, r3
 800a052:	4313      	orrs	r3, r2
 800a054:	b25a      	sxtb	r2, r3
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	3303      	adds	r3, #3
 800a05a:	b2d2      	uxtb	r2, r2
 800a05c:	701a      	strb	r2, [r3, #0]
  buff[3] |= static_cast<uint8_t>(hallSensorOpen) << 3;
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	3303      	adds	r3, #3
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	b25a      	sxtb	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800a06c:	00db      	lsls	r3, r3, #3
 800a06e:	b25b      	sxtb	r3, r3
 800a070:	4313      	orrs	r3, r2
 800a072:	b25a      	sxtb	r2, r3
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	3303      	adds	r3, #3
 800a078:	b2d2      	uxtb	r2, r2
 800a07a:	701a      	strb	r2, [r3, #0]

  buff[4] = static_cast<uint32_t>(convOverHeadLevel) & 0x3;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	b2da      	uxtb	r2, r3
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	3304      	adds	r3, #4
 800a084:	f002 0203 	and.w	r2, r2, #3
 800a088:	b2d2      	uxtb	r2, r2
 800a08a:	701a      	strb	r2, [r3, #0]
}
 800a08c:	bf00      	nop
 800a08e:	3714      	adds	r7, #20
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <_ZN11SolarGators11DataModules10MitsubaRx213FromByteArrayEPh>:
void MitsubaRx2::FromByteArray(uint8_t* buff)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  adSensorError      = buff[0] & (1 << 0);
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	f003 0301 	and.w	r3, r3, #1
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	bf14      	ite	ne
 800a0ae:	2301      	movne	r3, #1
 800a0b0:	2300      	moveq	r3, #0
 800a0b2:	b2da      	uxtb	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  motorCurrSensorUError  = buff[0] & (1 << 1);
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	f003 0302 	and.w	r3, r3, #2
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	bf14      	ite	ne
 800a0c6:	2301      	movne	r3, #1
 800a0c8:	2300      	moveq	r3, #0
 800a0ca:	b2da      	uxtb	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
  motorCurrSensorWError  = buff[0] & (1 << 2);
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	f003 0304 	and.w	r3, r3, #4
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	bf14      	ite	ne
 800a0de:	2301      	movne	r3, #1
 800a0e0:	2300      	moveq	r3, #0
 800a0e2:	b2da      	uxtb	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
  fetThermError      = buff[0] & (1 << 3);
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	f003 0308 	and.w	r3, r3, #8
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	bf14      	ite	ne
 800a0f6:	2301      	movne	r3, #1
 800a0f8:	2300      	moveq	r3, #0
 800a0fa:	b2da      	uxtb	r2, r3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
  battVoltSensorError    = buff[0] & (1 << 5);
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	f003 0320 	and.w	r3, r3, #32
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	bf14      	ite	ne
 800a10e:	2301      	movne	r3, #1
 800a110:	2300      	moveq	r3, #0
 800a112:	b2da      	uxtb	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  battCurrSensorError    = buff[0] & (1 << 6);
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a122:	2b00      	cmp	r3, #0
 800a124:	bf14      	ite	ne
 800a126:	2301      	movne	r3, #1
 800a128:	2300      	moveq	r3, #0
 800a12a:	b2da      	uxtb	r2, r3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  battCurrSensorAdjError   = buff[0] & (1 << 7);
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	b25b      	sxtb	r3, r3
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	09db      	lsrs	r3, r3, #7
 800a13c:	b2da      	uxtb	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

  motorCurrSensorAdjError  = buff[1] & (1 << 0);
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	3301      	adds	r3, #1
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	f003 0301 	and.w	r3, r3, #1
 800a14e:	2b00      	cmp	r3, #0
 800a150:	bf14      	ite	ne
 800a152:	2301      	movne	r3, #1
 800a154:	2300      	moveq	r3, #0
 800a156:	b2da      	uxtb	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  accelPosError      = buff[1] & (1 << 1);
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	3301      	adds	r3, #1
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	f003 0302 	and.w	r3, r3, #2
 800a168:	2b00      	cmp	r3, #0
 800a16a:	bf14      	ite	ne
 800a16c:	2301      	movne	r3, #1
 800a16e:	2300      	moveq	r3, #0
 800a170:	b2da      	uxtb	r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  contVoltSensorError    = buff[1] & (1 << 3);
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	3301      	adds	r3, #1
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	f003 0308 	and.w	r3, r3, #8
 800a182:	2b00      	cmp	r3, #0
 800a184:	bf14      	ite	ne
 800a186:	2301      	movne	r3, #1
 800a188:	2300      	moveq	r3, #0
 800a18a:	b2da      	uxtb	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  powerSystemError     = buff[2] & (1 << 0);
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	3302      	adds	r3, #2
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	f003 0301 	and.w	r3, r3, #1
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	bf14      	ite	ne
 800a1a0:	2301      	movne	r3, #1
 800a1a2:	2300      	moveq	r3, #0
 800a1a4:	b2da      	uxtb	r2, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  overCurrError      = buff[2] & (1 << 1);
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	3302      	adds	r3, #2
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	f003 0302 	and.w	r3, r3, #2
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	bf14      	ite	ne
 800a1ba:	2301      	movne	r3, #1
 800a1bc:	2300      	moveq	r3, #0
 800a1be:	b2da      	uxtb	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  overVoltError      = buff[2] & (1 << 3);
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	3302      	adds	r3, #2
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	f003 0308 	and.w	r3, r3, #8
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	bf14      	ite	ne
 800a1d4:	2301      	movne	r3, #1
 800a1d6:	2300      	moveq	r3, #0
 800a1d8:	b2da      	uxtb	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  overCurrLimit      = buff[2] & (1 << 5);
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	3302      	adds	r3, #2
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	f003 0320 	and.w	r3, r3, #32
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	bf14      	ite	ne
 800a1ee:	2301      	movne	r3, #1
 800a1f0:	2300      	moveq	r3, #0
 800a1f2:	b2da      	uxtb	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85

  motorSystemError     = buff[3] & (1 << 0);
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	3303      	adds	r3, #3
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	f003 0301 	and.w	r3, r3, #1
 800a204:	2b00      	cmp	r3, #0
 800a206:	bf14      	ite	ne
 800a208:	2301      	movne	r3, #1
 800a20a:	2300      	moveq	r3, #0
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  motorLock        = buff[3] & (1 << 1);
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	3303      	adds	r3, #3
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	f003 0302 	and.w	r3, r3, #2
 800a21e:	2b00      	cmp	r3, #0
 800a220:	bf14      	ite	ne
 800a222:	2301      	movne	r3, #1
 800a224:	2300      	moveq	r3, #0
 800a226:	b2da      	uxtb	r2, r3
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  hallSensorShort      = buff[3] & (1 << 2);
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	3303      	adds	r3, #3
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	f003 0304 	and.w	r3, r3, #4
 800a238:	2b00      	cmp	r3, #0
 800a23a:	bf14      	ite	ne
 800a23c:	2301      	movne	r3, #1
 800a23e:	2300      	moveq	r3, #0
 800a240:	b2da      	uxtb	r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
  hallSensorOpen     = buff[3] & (1 << 3);
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	3303      	adds	r3, #3
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	f003 0308 	and.w	r3, r3, #8
 800a252:	2b00      	cmp	r3, #0
 800a254:	bf14      	ite	ne
 800a256:	2301      	movne	r3, #1
 800a258:	2300      	moveq	r3, #0
 800a25a:	b2da      	uxtb	r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  overHeatLevel      = buff[4] & 0x3;
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	3304      	adds	r3, #4
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	f003 0303 	and.w	r3, r3, #3
 800a26c:	b2da      	uxtb	r2, r3
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
}
 800a274:	bf00      	nop
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <_ZN11SolarGators11DataModules6Mpptx1C1Em>:
		scripts->send("mppt/rx0", http.getParameters());
		http.flush();
	}
#endif

Mpptx1::Mpptx1(uint32_t can_id): // INCREMENT BY 1 FROM MPPTx0
 800a280:	b580      	push	{r7, lr}
 800a282:	b086      	sub	sp, #24
 800a284:	af04      	add	r7, sp, #16
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
		DataModule(can_id, 0, 8),
		outputVoltage(0),
		outputCurrent(0) // unsure if i need to do this, orionBMS doesnt but steering does
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	2300      	movs	r3, #0
 800a28e:	9302      	str	r3, [sp, #8]
 800a290:	2300      	movs	r3, #0
 800a292:	9301      	str	r3, [sp, #4]
 800a294:	2300      	movs	r3, #0
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	2308      	movs	r3, #8
 800a29a:	2200      	movs	r2, #0
 800a29c:	6839      	ldr	r1, [r7, #0]
 800a29e:	f7ff f925 	bl	80094ec <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>
 800a2a2:	4a08      	ldr	r2, [pc, #32]	; (800a2c4 <_ZN11SolarGators11DataModules6Mpptx1C1Em+0x44>)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	601a      	str	r2, [r3, #0]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f04f 0200 	mov.w	r2, #0
 800a2ae:	679a      	str	r2, [r3, #120]	; 0x78
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f04f 0200 	mov.w	r2, #0
 800a2b6:	67da      	str	r2, [r3, #124]	; 0x7c
{}
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3708      	adds	r7, #8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	0801a328 	.word	0x0801a328

0800a2c8 <_ZNK11SolarGators11DataModules6Mpptx111ToByteArrayEPh>:

void Mpptx1::ToByteArray(uint8_t* buff) const
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
f2b.f = outputVoltage;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2d6:	4a17      	ldr	r2, [pc, #92]	; (800a334 <_ZNK11SolarGators11DataModules6Mpptx111ToByteArrayEPh+0x6c>)
 800a2d8:	6013      	str	r3, [r2, #0]
for (int i=0;i<=3;i++){
 800a2da:	2300      	movs	r3, #0
 800a2dc:	60fb      	str	r3, [r7, #12]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2b03      	cmp	r3, #3
 800a2e2:	dc0b      	bgt.n	800a2fc <_ZNK11SolarGators11DataModules6Mpptx111ToByteArrayEPh+0x34>
	buff[i] = f2b.s[i];
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	683a      	ldr	r2, [r7, #0]
 800a2e8:	4413      	add	r3, r2
 800a2ea:	4912      	ldr	r1, [pc, #72]	; (800a334 <_ZNK11SolarGators11DataModules6Mpptx111ToByteArrayEPh+0x6c>)
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	440a      	add	r2, r1
 800a2f0:	7812      	ldrb	r2, [r2, #0]
 800a2f2:	701a      	strb	r2, [r3, #0]
for (int i=0;i<=3;i++){
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	60fb      	str	r3, [r7, #12]
 800a2fa:	e7f0      	b.n	800a2de <_ZNK11SolarGators11DataModules6Mpptx111ToByteArrayEPh+0x16>
}
f2b.f = outputCurrent;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a300:	4a0c      	ldr	r2, [pc, #48]	; (800a334 <_ZNK11SolarGators11DataModules6Mpptx111ToByteArrayEPh+0x6c>)
 800a302:	6013      	str	r3, [r2, #0]
for (int i=4;i<=7;i++){
 800a304:	2304      	movs	r3, #4
 800a306:	60bb      	str	r3, [r7, #8]
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	2b07      	cmp	r3, #7
 800a30c:	dc0b      	bgt.n	800a326 <_ZNK11SolarGators11DataModules6Mpptx111ToByteArrayEPh+0x5e>
	buff[i] = f2b.s[i-4];
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	1f1a      	subs	r2, r3, #4
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	6839      	ldr	r1, [r7, #0]
 800a316:	440b      	add	r3, r1
 800a318:	4906      	ldr	r1, [pc, #24]	; (800a334 <_ZNK11SolarGators11DataModules6Mpptx111ToByteArrayEPh+0x6c>)
 800a31a:	5c8a      	ldrb	r2, [r1, r2]
 800a31c:	701a      	strb	r2, [r3, #0]
for (int i=4;i<=7;i++){
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	3301      	adds	r3, #1
 800a322:	60bb      	str	r3, [r7, #8]
 800a324:	e7f0      	b.n	800a308 <_ZNK11SolarGators11DataModules6Mpptx111ToByteArrayEPh+0x40>
}
}
 800a326:	bf00      	nop
 800a328:	3714      	adds	r7, #20
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
 800a332:	bf00      	nop
 800a334:	20004af8 	.word	0x20004af8

0800a338 <_ZN11SolarGators11DataModules6Mpptx113FromByteArrayEPh>:

void Mpptx1::FromByteArray(uint8_t* buff)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
	for(int i=0;i<=3;i++){
 800a342:	2300      	movs	r3, #0
 800a344:	60fb      	str	r3, [r7, #12]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2b03      	cmp	r3, #3
 800a34a:	dc0c      	bgt.n	800a366 <_ZN11SolarGators11DataModules6Mpptx113FromByteArrayEPh+0x2e>
		f2b.s[i] = buff[i];
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	683a      	ldr	r2, [r7, #0]
 800a350:	4413      	add	r3, r2
 800a352:	7819      	ldrb	r1, [r3, #0]
 800a354:	4a13      	ldr	r2, [pc, #76]	; (800a3a4 <_ZN11SolarGators11DataModules6Mpptx113FromByteArrayEPh+0x6c>)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	4413      	add	r3, r2
 800a35a:	460a      	mov	r2, r1
 800a35c:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<=3;i++){
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	3301      	adds	r3, #1
 800a362:	60fb      	str	r3, [r7, #12]
 800a364:	e7ef      	b.n	800a346 <_ZN11SolarGators11DataModules6Mpptx113FromByteArrayEPh+0xe>
	}
	outputVoltage = f2b.f;
 800a366:	4b0f      	ldr	r3, [pc, #60]	; (800a3a4 <_ZN11SolarGators11DataModules6Mpptx113FromByteArrayEPh+0x6c>)
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	679a      	str	r2, [r3, #120]	; 0x78
	for(int i=4;i<=7;i++){
 800a36e:	2304      	movs	r3, #4
 800a370:	60bb      	str	r3, [r7, #8]
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	2b07      	cmp	r3, #7
 800a376:	dc0b      	bgt.n	800a390 <_ZN11SolarGators11DataModules6Mpptx113FromByteArrayEPh+0x58>
		f2b.s[i-4] = buff[i];
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	441a      	add	r2, r3
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	3b04      	subs	r3, #4
 800a382:	7811      	ldrb	r1, [r2, #0]
 800a384:	4a07      	ldr	r2, [pc, #28]	; (800a3a4 <_ZN11SolarGators11DataModules6Mpptx113FromByteArrayEPh+0x6c>)
 800a386:	54d1      	strb	r1, [r2, r3]
	for(int i=4;i<=7;i++){
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	3301      	adds	r3, #1
 800a38c:	60bb      	str	r3, [r7, #8]
 800a38e:	e7f0      	b.n	800a372 <_ZN11SolarGators11DataModules6Mpptx113FromByteArrayEPh+0x3a>
	}
	outputCurrent = f2b.f;
 800a390:	4b04      	ldr	r3, [pc, #16]	; (800a3a4 <_ZN11SolarGators11DataModules6Mpptx113FromByteArrayEPh+0x6c>)
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800a398:	bf00      	nop
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	20004af8 	.word	0x20004af8

0800a3a8 <_ZNK11SolarGators11DataModules6Mpptx116getOutputVoltageEv>:

float Mpptx1::getOutputVoltage() const {
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
	return outputVoltage;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3b4:	ee07 3a90 	vmov	s15, r3
}
 800a3b8:	eeb0 0a67 	vmov.f32	s0, s15
 800a3bc:	370c      	adds	r7, #12
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <_ZNK11SolarGators11DataModules6Mpptx116getOutputCurrentEv>:

float Mpptx1::getOutputCurrent() const {
 800a3c6:	b480      	push	{r7}
 800a3c8:	b083      	sub	sp, #12
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
	return outputCurrent;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3d2:	ee07 3a90 	vmov	s15, r3
}
 800a3d6:	eeb0 0a67 	vmov.f32	s0, s15
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <_ZN11SolarGators11DataModules11OrionBMSRx0C1Emm>:
#include "OrionBMS.hpp"

namespace SolarGators::DataModules
{
  // BMS Message 0
  OrionBMSRx0::OrionBMSRx0(uint32_t can_id, uint32_t telem_id):
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b088      	sub	sp, #32
 800a3e8:	af04      	add	r7, sp, #16
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
        DataModule(can_id, telem_id, this->Size, 0, false)
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	9302      	str	r3, [sp, #8]
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	9301      	str	r3, [sp, #4]
 800a3fe:	2300      	movs	r3, #0
 800a400:	9300      	str	r3, [sp, #0]
 800a402:	2308      	movs	r3, #8
 800a404:	68b9      	ldr	r1, [r7, #8]
 800a406:	f7ff f871 	bl	80094ec <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>
 800a40a:	4a04      	ldr	r2, [pc, #16]	; (800a41c <_ZN11SolarGators11DataModules11OrionBMSRx0C1Emm+0x38>)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	601a      	str	r2, [r3, #0]
  { }
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	0801a388 	.word	0x0801a388

0800a420 <_ZNK11SolarGators11DataModules11OrionBMSRx011ToByteArrayEPh>:

  void OrionBMSRx0::ToByteArray(uint8_t* buff) const
  {
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
    buff[0] = low_cell_volt_ >> 8;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800a430:	0a1b      	lsrs	r3, r3, #8
 800a432:	b29b      	uxth	r3, r3
 800a434:	b2da      	uxtb	r2, r3
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	701a      	strb	r2, [r3, #0]
    buff[1] = (low_cell_volt_ & 0x00FF);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	3301      	adds	r3, #1
 800a444:	b2d2      	uxtb	r2, r2
 800a446:	701a      	strb	r2, [r3, #0]
    buff[2] = high_cell_volt_ >> 8;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800a44e:	0a1b      	lsrs	r3, r3, #8
 800a450:	b29a      	uxth	r2, r3
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	3302      	adds	r3, #2
 800a456:	b2d2      	uxtb	r2, r2
 800a458:	701a      	strb	r2, [r3, #0]
    buff[3] = (high_cell_volt_ & 0x00FF);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	3303      	adds	r3, #3
 800a464:	b2d2      	uxtb	r2, r2
 800a466:	701a      	strb	r2, [r3, #0]
    buff[4] = avg_cell_volt_ >> 8;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800a46e:	0a1b      	lsrs	r3, r3, #8
 800a470:	b29a      	uxth	r2, r3
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	3304      	adds	r3, #4
 800a476:	b2d2      	uxtb	r2, r2
 800a478:	701a      	strb	r2, [r3, #0]
    buff[5] = (avg_cell_volt_ & 0x00FF);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	3305      	adds	r3, #5
 800a484:	b2d2      	uxtb	r2, r2
 800a486:	701a      	strb	r2, [r3, #0]
    buff[6] = pack_sum_volt_ >> 8;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800a48e:	0a1b      	lsrs	r3, r3, #8
 800a490:	b29a      	uxth	r2, r3
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	3306      	adds	r3, #6
 800a496:	b2d2      	uxtb	r2, r2
 800a498:	701a      	strb	r2, [r3, #0]
    buff[7] = (pack_sum_volt_ & 0x00FF);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	3307      	adds	r3, #7
 800a4a4:	b2d2      	uxtb	r2, r2
 800a4a6:	701a      	strb	r2, [r3, #0]
  }
 800a4a8:	bf00      	nop
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <_ZN11SolarGators11DataModules11OrionBMSRx013FromByteArrayEPh>:

  void OrionBMSRx0::FromByteArray(uint8_t* buff)
  {
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
    low_cell_volt_   = (static_cast<uint16_t>(buff[0]) << 8) | buff[1];
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	021b      	lsls	r3, r3, #8
 800a4c4:	b21a      	sxth	r2, r3
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	b21b      	sxth	r3, r3
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	b21b      	sxth	r3, r3
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
    high_cell_volt_  = (static_cast<uint16_t>(buff[2]) << 8) | buff[3];
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	3302      	adds	r3, #2
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	021b      	lsls	r3, r3, #8
 800a4e2:	b21a      	sxth	r2, r3
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	3303      	adds	r3, #3
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	b21b      	sxth	r3, r3
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	b21b      	sxth	r3, r3
 800a4f0:	b29a      	uxth	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
    avg_cell_volt_   = (static_cast<uint16_t>(buff[4]) << 8) | buff[5];
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	3304      	adds	r3, #4
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	021b      	lsls	r3, r3, #8
 800a500:	b21a      	sxth	r2, r3
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	3305      	adds	r3, #5
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	b21b      	sxth	r3, r3
 800a50a:	4313      	orrs	r3, r2
 800a50c:	b21b      	sxth	r3, r3
 800a50e:	b29a      	uxth	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    pack_sum_volt_   = (static_cast<uint16_t>(buff[6]) << 8) | buff[7];
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	3306      	adds	r3, #6
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	021b      	lsls	r3, r3, #8
 800a51e:	b21a      	sxth	r2, r3
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	3307      	adds	r3, #7
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	b21b      	sxth	r3, r3
 800a528:	4313      	orrs	r3, r2
 800a52a:	b21b      	sxth	r3, r3
 800a52c:	b29a      	uxth	r2, r3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
  }
 800a534:	bf00      	nop
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <_ZNK11SolarGators11DataModules11OrionBMSRx014getPackSumVoltEv>:

  float OrionBMSRx0::getLowCellVolt() const {
    return low_cell_volt_ * 1e-4;
  }

  float OrionBMSRx0::getPackSumVolt() const {
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
    return pack_sum_volt_ * 0.01;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800a54e:	4618      	mov	r0, r3
 800a550:	f7f6 f92a 	bl	80007a8 <__aeabi_i2d>
 800a554:	a30a      	add	r3, pc, #40	; (adr r3, 800a580 <_ZNK11SolarGators11DataModules11OrionBMSRx014getPackSumVoltEv+0x40>)
 800a556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55a:	f7f5 fea9 	bl	80002b0 <__aeabi_dmul>
 800a55e:	4602      	mov	r2, r0
 800a560:	460b      	mov	r3, r1
 800a562:	4610      	mov	r0, r2
 800a564:	4619      	mov	r1, r3
 800a566:	f7f6 fa11 	bl	800098c <__aeabi_d2f>
 800a56a:	4603      	mov	r3, r0
 800a56c:	ee07 3a90 	vmov	s15, r3
  }
 800a570:	eeb0 0a67 	vmov.f32	s0, s15
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	f3af 8000 	nop.w
 800a580:	47ae147b 	.word	0x47ae147b
 800a584:	3f847ae1 	.word	0x3f847ae1

0800a588 <_ZN11SolarGators11DataModules11OrionBMSRx1C1Emm>:
    scripts->send("bms/rx0", http.getParameters());
    http.flush();
  }
#endif
  // BMS Message 1
  OrionBMSRx1::OrionBMSRx1(uint32_t can_id, uint32_t telem_id):
 800a588:	b580      	push	{r7, lr}
 800a58a:	b088      	sub	sp, #32
 800a58c:	af04      	add	r7, sp, #16
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	607a      	str	r2, [r7, #4]
        DataModule(can_id, telem_id, this->Size, 0, false)
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	b29a      	uxth	r2, r3
 800a59a:	2300      	movs	r3, #0
 800a59c:	9302      	str	r3, [sp, #8]
 800a59e:	2300      	movs	r3, #0
 800a5a0:	9301      	str	r3, [sp, #4]
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	9300      	str	r3, [sp, #0]
 800a5a6:	2308      	movs	r3, #8
 800a5a8:	68b9      	ldr	r1, [r7, #8]
 800a5aa:	f7fe ff9f 	bl	80094ec <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>
 800a5ae:	4a04      	ldr	r2, [pc, #16]	; (800a5c0 <_ZN11SolarGators11DataModules11OrionBMSRx1C1Emm+0x38>)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	601a      	str	r2, [r3, #0]
  { }
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	0801a370 	.word	0x0801a370

0800a5c4 <_ZNK11SolarGators11DataModules11OrionBMSRx111ToByteArrayEPh>:

  void OrionBMSRx1::ToByteArray(uint8_t* buff) const
  {
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
    buff[0] = high_temp_;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	701a      	strb	r2, [r3, #0]
    buff[1] = high_temp_id_;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	3301      	adds	r3, #1
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	f892 2079 	ldrb.w	r2, [r2, #121]	; 0x79
 800a5e2:	701a      	strb	r2, [r3, #0]
    buff[2] = low_temp_;
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	3302      	adds	r3, #2
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	f892 207a 	ldrb.w	r2, [r2, #122]	; 0x7a
 800a5ee:	701a      	strb	r2, [r3, #0]
    buff[3] = low_temp_id_;
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	3303      	adds	r3, #3
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	f892 207b 	ldrb.w	r2, [r2, #123]	; 0x7b
 800a5fa:	701a      	strb	r2, [r3, #0]
    buff[4] = avg_temp_;
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	3304      	adds	r3, #4
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
 800a606:	701a      	strb	r2, [r3, #0]
    buff[5] = internal_temp_;
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	3305      	adds	r3, #5
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	f892 207d 	ldrb.w	r2, [r2, #125]	; 0x7d
 800a612:	701a      	strb	r2, [r3, #0]
    buff[6] = constant_val_ >> 8;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a61a:	121a      	asrs	r2, r3, #8
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	3306      	adds	r3, #6
 800a620:	b2d2      	uxtb	r2, r2
 800a622:	701a      	strb	r2, [r3, #0]
    buff[7] = (constant_val_ & 0x00FF);
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	3307      	adds	r3, #7
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 800a62e:	701a      	strb	r2, [r3, #0]
  }
 800a630:	bf00      	nop
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <_ZN11SolarGators11DataModules11OrionBMSRx113FromByteArrayEPh>:

  void OrionBMSRx1::FromByteArray(uint8_t* buff)
  {
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
    high_temp_      = buff[0];
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	781a      	ldrb	r2, [r3, #0]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    high_temp_id_   = buff[1];
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	785a      	ldrb	r2, [r3, #1]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    low_temp_       = buff[2];
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	789a      	ldrb	r2, [r3, #2]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    low_temp_id_    = buff[3];
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	78da      	ldrb	r2, [r3, #3]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
    avg_temp_       = buff[4];
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	791a      	ldrb	r2, [r3, #4]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    internal_temp_  = buff[5];
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	795a      	ldrb	r2, [r3, #5]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    constant_val_   = (static_cast<uint16_t>(buff[6]) << 8) | buff[7];
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	3306      	adds	r3, #6
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	021b      	lsls	r3, r3, #8
 800a68a:	b25a      	sxtb	r2, r3
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	3307      	adds	r3, #7
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	b25b      	sxtb	r3, r3
 800a694:	4313      	orrs	r3, r2
 800a696:	b25b      	sxtb	r3, r3
 800a698:	b2da      	uxtb	r2, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  }
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <_ZNK11SolarGators11DataModules11OrionBMSRx110getAvgTempEv>:

  uint8_t OrionBMSRx1::getAvgTemp() const {
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
    return avg_temp_;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
  }
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	370c      	adds	r7, #12
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <_ZNK11SolarGators11DataModules11OrionBMSRx111getHighTempEv>:

  uint8_t OrionBMSRx1::getConstantVal() const {
    return constant_val_;
  }

  uint8_t OrionBMSRx1::getHighTemp() const {
 800a6c6:	b480      	push	{r7}
 800a6c8:	b083      	sub	sp, #12
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
    return high_temp_;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
  }
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <_ZN11SolarGators11DataModules11OrionBMSRx2C1Emm>:
    scripts->send("bms/rx1", http.getParameters());
    http.flush();
  }
#endif
  // BMS Message 2
  OrionBMSRx2::OrionBMSRx2(uint32_t can_id, uint32_t telem_id):
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b088      	sub	sp, #32
 800a6e4:	af04      	add	r7, sp, #16
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	607a      	str	r2, [r7, #4]
        DataModule(can_id, telem_id, this->Size, 0, false)
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	b29a      	uxth	r2, r3
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	9302      	str	r3, [sp, #8]
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	9301      	str	r3, [sp, #4]
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	9300      	str	r3, [sp, #0]
 800a6fe:	2308      	movs	r3, #8
 800a700:	68b9      	ldr	r1, [r7, #8]
 800a702:	f7fe fef3 	bl	80094ec <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>
 800a706:	4a04      	ldr	r2, [pc, #16]	; (800a718 <_ZN11SolarGators11DataModules11OrionBMSRx2C1Emm+0x38>)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	601a      	str	r2, [r3, #0]
  { }
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	4618      	mov	r0, r3
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	0801a358 	.word	0x0801a358

0800a71c <_ZNK11SolarGators11DataModules11OrionBMSRx211ToByteArrayEPh>:

  void OrionBMSRx2::ToByteArray(uint8_t* buff) const
  {
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
    buff[0] = pack_dcl_ >> 8;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800a72c:	0a1b      	lsrs	r3, r3, #8
 800a72e:	b29b      	uxth	r3, r3
 800a730:	b2da      	uxtb	r2, r3
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	701a      	strb	r2, [r3, #0]
    buff[1] = (pack_dcl_ & 0x00FF);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	3301      	adds	r3, #1
 800a740:	b2d2      	uxtb	r2, r2
 800a742:	701a      	strb	r2, [r3, #0]
    buff[2] = pack_ccl_ >> 8;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800a74a:	0a1b      	lsrs	r3, r3, #8
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	3302      	adds	r3, #2
 800a752:	b2d2      	uxtb	r2, r2
 800a754:	701a      	strb	r2, [r3, #0]
    buff[3] = (pack_ccl_ & 0x00FF);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	3303      	adds	r3, #3
 800a760:	b2d2      	uxtb	r2, r2
 800a762:	701a      	strb	r2, [r3, #0]
    buff[4] = pack_current_ >> 8;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 800a76a:	121b      	asrs	r3, r3, #8
 800a76c:	b21a      	sxth	r2, r3
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	3304      	adds	r3, #4
 800a772:	b2d2      	uxtb	r2, r2
 800a774:	701a      	strb	r2, [r3, #0]
    buff[5] = (pack_current_ & 0x00FF);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f9b3 207c 	ldrsh.w	r2, [r3, #124]	; 0x7c
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	3305      	adds	r3, #5
 800a780:	b2d2      	uxtb	r2, r2
 800a782:	701a      	strb	r2, [r3, #0]
    buff[6] = constant_val_ >> 8;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800a78a:	0a1b      	lsrs	r3, r3, #8
 800a78c:	b29a      	uxth	r2, r3
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	3306      	adds	r3, #6
 800a792:	b2d2      	uxtb	r2, r2
 800a794:	701a      	strb	r2, [r3, #0]
    buff[7] = (constant_val_ & 0x00FF);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	3307      	adds	r3, #7
 800a7a0:	b2d2      	uxtb	r2, r2
 800a7a2:	701a      	strb	r2, [r3, #0]
  }
 800a7a4:	bf00      	nop
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <_ZN11SolarGators11DataModules11OrionBMSRx213FromByteArrayEPh>:

  void OrionBMSRx2::FromByteArray(uint8_t* buff)
  {
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
    pack_dcl_     = (static_cast<uint16_t>(buff[0]) << 8) | buff[1];
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	021b      	lsls	r3, r3, #8
 800a7c0:	b21a      	sxth	r2, r3
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	b21b      	sxth	r3, r3
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	b21b      	sxth	r3, r3
 800a7ce:	b29a      	uxth	r2, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
    pack_ccl_     = (static_cast<uint16_t>(buff[2]) << 8) | buff[3];
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	3302      	adds	r3, #2
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	021b      	lsls	r3, r3, #8
 800a7de:	b21a      	sxth	r2, r3
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	3303      	adds	r3, #3
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	b21b      	sxth	r3, r3
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	b21b      	sxth	r3, r3
 800a7ec:	b29a      	uxth	r2, r3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
    pack_current_ = (static_cast<uint16_t>(buff[4]) << 8) | buff[5];
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	3304      	adds	r3, #4
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	021b      	lsls	r3, r3, #8
 800a7fc:	b21a      	sxth	r2, r3
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	3305      	adds	r3, #5
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	b21b      	sxth	r3, r3
 800a806:	4313      	orrs	r3, r2
 800a808:	b21a      	sxth	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    constant_val_ = (static_cast<uint16_t>(buff[6]) << 8) | buff[7];
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	3306      	adds	r3, #6
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	021b      	lsls	r3, r3, #8
 800a818:	b21a      	sxth	r2, r3
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	3307      	adds	r3, #7
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	b21b      	sxth	r3, r3
 800a822:	4313      	orrs	r3, r2
 800a824:	b21b      	sxth	r3, r3
 800a826:	b29a      	uxth	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
  }
 800a82e:	bf00      	nop
 800a830:	370c      	adds	r7, #12
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr
 800a83a:	0000      	movs	r0, r0
 800a83c:	0000      	movs	r0, r0
	...

0800a840 <_ZNK11SolarGators11DataModules11OrionBMSRx214getPackCurrentEv>:

  uint16_t OrionBMSRx2::getPackCcl() const {
    return pack_ccl_;
  }

  float OrionBMSRx2::getPackCurrent() const {
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
    return pack_current_ * 0.1;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 800a84e:	4618      	mov	r0, r3
 800a850:	f7f5 ffaa 	bl	80007a8 <__aeabi_i2d>
 800a854:	a30a      	add	r3, pc, #40	; (adr r3, 800a880 <_ZNK11SolarGators11DataModules11OrionBMSRx214getPackCurrentEv+0x40>)
 800a856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85a:	f7f5 fd29 	bl	80002b0 <__aeabi_dmul>
 800a85e:	4602      	mov	r2, r0
 800a860:	460b      	mov	r3, r1
 800a862:	4610      	mov	r0, r2
 800a864:	4619      	mov	r1, r3
 800a866:	f7f6 f891 	bl	800098c <__aeabi_d2f>
 800a86a:	4603      	mov	r3, r0
 800a86c:	ee07 3a90 	vmov	s15, r3
  }
 800a870:	eeb0 0a67 	vmov.f32	s0, s15
 800a874:	3708      	adds	r7, #8
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	f3af 8000 	nop.w
 800a880:	9999999a 	.word	0x9999999a
 800a884:	3fb99999 	.word	0x3fb99999

0800a888 <_ZN11SolarGators11DataModules11OrionBMSRx4C1Emm>:
    scripts->send("bms/rx3", http.getParameters());
    http.flush();
  }
#endif
  // BMS Message 4
  OrionBMSRx4::OrionBMSRx4(uint32_t can_id, uint32_t telem_id):
 800a888:	b580      	push	{r7, lr}
 800a88a:	b088      	sub	sp, #32
 800a88c:	af04      	add	r7, sp, #16
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	607a      	str	r2, [r7, #4]
        DataModule(can_id, telem_id, this->Size, 0, false)
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	b29a      	uxth	r2, r3
 800a89a:	2300      	movs	r3, #0
 800a89c:	9302      	str	r3, [sp, #8]
 800a89e:	2300      	movs	r3, #0
 800a8a0:	9301      	str	r3, [sp, #4]
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	9300      	str	r3, [sp, #0]
 800a8a6:	2304      	movs	r3, #4
 800a8a8:	68b9      	ldr	r1, [r7, #8]
 800a8aa:	f7fe fe1f 	bl	80094ec <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>
 800a8ae:	4a04      	ldr	r2, [pc, #16]	; (800a8c0 <_ZN11SolarGators11DataModules11OrionBMSRx4C1Emm+0x38>)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	601a      	str	r2, [r3, #0]
  { }
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	0801a340 	.word	0x0801a340

0800a8c4 <_ZNK11SolarGators11DataModules11OrionBMSRx411ToByteArrayEPh>:

  void OrionBMSRx4::ToByteArray(uint8_t* buff) const
  {
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
    buff[0]  = (static_cast<uint8_t>(internal_cell_communication_fault_)   << 0);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(cell_balancing_stuck_off_fault_)      << 1);
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	b25a      	sxtb	r2, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800a8e6:	005b      	lsls	r3, r3, #1
 800a8e8:	b25b      	sxtb	r3, r3
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	b25b      	sxtb	r3, r3
 800a8ee:	b2da      	uxtb	r2, r3
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(weak_cell_fault_)                     << 2);
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	b25a      	sxtb	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	b25b      	sxtb	r3, r3
 800a904:	4313      	orrs	r3, r2
 800a906:	b25b      	sxtb	r3, r3
 800a908:	b2da      	uxtb	r2, r3
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(low_cell_voltage_fault_)              << 3);
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	b25a      	sxtb	r2, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800a91a:	00db      	lsls	r3, r3, #3
 800a91c:	b25b      	sxtb	r3, r3
 800a91e:	4313      	orrs	r3, r2
 800a920:	b25b      	sxtb	r3, r3
 800a922:	b2da      	uxtb	r2, r3
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(cell_open_wiring_fault_)              << 4);
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	b25a      	sxtb	r2, r3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a934:	011b      	lsls	r3, r3, #4
 800a936:	b25b      	sxtb	r3, r3
 800a938:	4313      	orrs	r3, r2
 800a93a:	b25b      	sxtb	r3, r3
 800a93c:	b2da      	uxtb	r2, r3
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(current_sensor_fault_)                << 5);
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	b25a      	sxtb	r2, r3
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a94e:	015b      	lsls	r3, r3, #5
 800a950:	b25b      	sxtb	r3, r3
 800a952:	4313      	orrs	r3, r2
 800a954:	b25b      	sxtb	r3, r3
 800a956:	b2da      	uxtb	r2, r3
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(cell_voltage_over_5v_fault_)          << 6);
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	b25a      	sxtb	r2, r3
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a968:	019b      	lsls	r3, r3, #6
 800a96a:	b25b      	sxtb	r3, r3
 800a96c:	4313      	orrs	r3, r2
 800a96e:	b25b      	sxtb	r3, r3
 800a970:	b2da      	uxtb	r2, r3
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(cell_bank_fault_)                     << 7);
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	b25a      	sxtb	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800a982:	01db      	lsls	r3, r3, #7
 800a984:	b25b      	sxtb	r3, r3
 800a986:	4313      	orrs	r3, r2
 800a988:	b25b      	sxtb	r3, r3
 800a98a:	b2da      	uxtb	r2, r3
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	701a      	strb	r2, [r3, #0]

    buff[1]  = (static_cast<uint8_t>(weak_pack_fault_)                     << 0);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	3301      	adds	r3, #1
 800a99a:	701a      	strb	r2, [r3, #0]
    buff[1] |= (static_cast<uint8_t>(fan_monitor_fault_)                   << 1);
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	3301      	adds	r3, #1
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	b25a      	sxtb	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a9aa:	005b      	lsls	r3, r3, #1
 800a9ac:	b25b      	sxtb	r3, r3
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	b25a      	sxtb	r2, r3
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	b2d2      	uxtb	r2, r2
 800a9b8:	701a      	strb	r2, [r3, #0]
    buff[1] |= (static_cast<uint8_t>(thermistor_fault_)                    << 2);
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	b25a      	sxtb	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	b25b      	sxtb	r3, r3
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	b25a      	sxtb	r2, r3
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	b2d2      	uxtb	r2, r2
 800a9d6:	701a      	strb	r2, [r3, #0]
    buff[1] |= (static_cast<uint8_t>(can_communication_fault_)             << 3);
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	3301      	adds	r3, #1
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	b25a      	sxtb	r2, r3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800a9e6:	00db      	lsls	r3, r3, #3
 800a9e8:	b25b      	sxtb	r3, r3
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	b25a      	sxtb	r2, r3
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	b2d2      	uxtb	r2, r2
 800a9f4:	701a      	strb	r2, [r3, #0]
    buff[1] |= (static_cast<uint8_t>(redundant_power_supply_fault_)        << 4);
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	b25a      	sxtb	r2, r3
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aa04:	011b      	lsls	r3, r3, #4
 800aa06:	b25b      	sxtb	r3, r3
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	b25a      	sxtb	r2, r3
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	b2d2      	uxtb	r2, r2
 800aa12:	701a      	strb	r2, [r3, #0]
    buff[1] |= (static_cast<uint8_t>(high_voltage_isolation_fault_)        << 5);
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	3301      	adds	r3, #1
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	b25a      	sxtb	r2, r3
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800aa22:	015b      	lsls	r3, r3, #5
 800aa24:	b25b      	sxtb	r3, r3
 800aa26:	4313      	orrs	r3, r2
 800aa28:	b25a      	sxtb	r2, r3
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	b2d2      	uxtb	r2, r2
 800aa30:	701a      	strb	r2, [r3, #0]
    buff[1] |= (static_cast<uint8_t>(invalid_input_supply_voltage_fault_)  << 6);
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	3301      	adds	r3, #1
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	b25a      	sxtb	r2, r3
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800aa40:	019b      	lsls	r3, r3, #6
 800aa42:	b25b      	sxtb	r3, r3
 800aa44:	4313      	orrs	r3, r2
 800aa46:	b25a      	sxtb	r2, r3
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	b2d2      	uxtb	r2, r2
 800aa4e:	701a      	strb	r2, [r3, #0]
    buff[1] |= (static_cast<uint8_t>(chargeenable_relay_fault_)            << 7);
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	3301      	adds	r3, #1
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	b25a      	sxtb	r2, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800aa5e:	01db      	lsls	r3, r3, #7
 800aa60:	b25b      	sxtb	r3, r3
 800aa62:	4313      	orrs	r3, r2
 800aa64:	b25a      	sxtb	r2, r3
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	b2d2      	uxtb	r2, r2
 800aa6c:	701a      	strb	r2, [r3, #0]

    buff[2]  = (static_cast<uint8_t>(dischargeenable_relay_fault_)         << 0);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	3302      	adds	r3, #2
 800aa78:	701a      	strb	r2, [r3, #0]
    buff[2] |= (static_cast<uint8_t>(charger_safety_relay_fault_)          << 1);
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	3302      	adds	r3, #2
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	b25a      	sxtb	r2, r3
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800aa88:	005b      	lsls	r3, r3, #1
 800aa8a:	b25b      	sxtb	r3, r3
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	b25a      	sxtb	r2, r3
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	3302      	adds	r3, #2
 800aa94:	b2d2      	uxtb	r2, r2
 800aa96:	701a      	strb	r2, [r3, #0]
    buff[2] |= (static_cast<uint8_t>(internal_hardware_fault_)             << 2);
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	3302      	adds	r3, #2
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	b25a      	sxtb	r2, r3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	b25b      	sxtb	r3, r3
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	b25a      	sxtb	r2, r3
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	3302      	adds	r3, #2
 800aab2:	b2d2      	uxtb	r2, r2
 800aab4:	701a      	strb	r2, [r3, #0]
    buff[2] |= (static_cast<uint8_t>(internal_heatsink_thermistor_fault_)  << 3);
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	3302      	adds	r3, #2
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	b25a      	sxtb	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800aac4:	00db      	lsls	r3, r3, #3
 800aac6:	b25b      	sxtb	r3, r3
 800aac8:	4313      	orrs	r3, r2
 800aaca:	b25a      	sxtb	r2, r3
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	3302      	adds	r3, #2
 800aad0:	b2d2      	uxtb	r2, r2
 800aad2:	701a      	strb	r2, [r3, #0]
    buff[2] |= (static_cast<uint8_t>(internal_logic_fault_)                << 4);
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	3302      	adds	r3, #2
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	b25a      	sxtb	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800aae2:	011b      	lsls	r3, r3, #4
 800aae4:	b25b      	sxtb	r3, r3
 800aae6:	4313      	orrs	r3, r2
 800aae8:	b25a      	sxtb	r2, r3
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	3302      	adds	r3, #2
 800aaee:	b2d2      	uxtb	r2, r2
 800aaf0:	701a      	strb	r2, [r3, #0]
    buff[2] |= (static_cast<uint8_t>(highest_cell_voltage_too_high_fault_) << 5);
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	3302      	adds	r3, #2
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	b25a      	sxtb	r2, r3
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800ab00:	015b      	lsls	r3, r3, #5
 800ab02:	b25b      	sxtb	r3, r3
 800ab04:	4313      	orrs	r3, r2
 800ab06:	b25a      	sxtb	r2, r3
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	3302      	adds	r3, #2
 800ab0c:	b2d2      	uxtb	r2, r2
 800ab0e:	701a      	strb	r2, [r3, #0]
    buff[2] |= (static_cast<uint8_t>(lowest_cell_voltage_too_low_fault_)   << 6);
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	3302      	adds	r3, #2
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	b25a      	sxtb	r2, r3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800ab1e:	019b      	lsls	r3, r3, #6
 800ab20:	b25b      	sxtb	r3, r3
 800ab22:	4313      	orrs	r3, r2
 800ab24:	b25a      	sxtb	r2, r3
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	3302      	adds	r3, #2
 800ab2a:	b2d2      	uxtb	r2, r2
 800ab2c:	701a      	strb	r2, [r3, #0]
    buff[2] |= (static_cast<uint8_t>(pack_too_hot_fault_)                  << 7);
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	3302      	adds	r3, #2
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	b25a      	sxtb	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800ab3c:	01db      	lsls	r3, r3, #7
 800ab3e:	b25b      	sxtb	r3, r3
 800ab40:	4313      	orrs	r3, r2
 800ab42:	b25a      	sxtb	r2, r3
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	3302      	adds	r3, #2
 800ab48:	b2d2      	uxtb	r2, r2
 800ab4a:	701a      	strb	r2, [r3, #0]

    buff[3]  = pack_soc_;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	3303      	adds	r3, #3
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	f892 2090 	ldrb.w	r2, [r2, #144]	; 0x90
 800ab56:	701a      	strb	r2, [r3, #0]
  }
 800ab58:	bf00      	nop
 800ab5a:	370c      	adds	r7, #12
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <_ZN11SolarGators11DataModules11OrionBMSRx413FromByteArrayEPh>:

  void OrionBMSRx4::FromByteArray(uint8_t* buff)
  {
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
    internal_cell_communication_fault_  = buff[0] & (1 << 0);
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	f003 0301 	and.w	r3, r3, #1
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	bf14      	ite	ne
 800ab7a:	2301      	movne	r3, #1
 800ab7c:	2300      	moveq	r3, #0
 800ab7e:	b2da      	uxtb	r2, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    cell_balancing_stuck_off_fault_     = buff[0] & (1 << 1);
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	f003 0302 	and.w	r3, r3, #2
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	bf14      	ite	ne
 800ab92:	2301      	movne	r3, #1
 800ab94:	2300      	moveq	r3, #0
 800ab96:	b2da      	uxtb	r2, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    weak_cell_fault_                    = buff[0] & (1 << 2);
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	f003 0304 	and.w	r3, r3, #4
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	bf14      	ite	ne
 800abaa:	2301      	movne	r3, #1
 800abac:	2300      	moveq	r3, #0
 800abae:	b2da      	uxtb	r2, r3
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    low_cell_voltage_fault_             = buff[0] & (1 << 3);
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	f003 0308 	and.w	r3, r3, #8
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	bf14      	ite	ne
 800abc2:	2301      	movne	r3, #1
 800abc4:	2300      	moveq	r3, #0
 800abc6:	b2da      	uxtb	r2, r3
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
    cell_open_wiring_fault_             = buff[0] & (1 << 4);
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	f003 0310 	and.w	r3, r3, #16
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	bf14      	ite	ne
 800abda:	2301      	movne	r3, #1
 800abdc:	2300      	moveq	r3, #0
 800abde:	b2da      	uxtb	r2, r3
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    current_sensor_fault_               = buff[0] & (1 << 5);
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	f003 0320 	and.w	r3, r3, #32
 800abee:	2b00      	cmp	r3, #0
 800abf0:	bf14      	ite	ne
 800abf2:	2301      	movne	r3, #1
 800abf4:	2300      	moveq	r3, #0
 800abf6:	b2da      	uxtb	r2, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    cell_voltage_over_5v_fault_         = buff[0] & (1 << 6);
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	bf14      	ite	ne
 800ac0a:	2301      	movne	r3, #1
 800ac0c:	2300      	moveq	r3, #0
 800ac0e:	b2da      	uxtb	r2, r3
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    cell_bank_fault_                    = buff[0] & (1 << 7);
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	b25b      	sxtb	r3, r3
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	09db      	lsrs	r3, r3, #7
 800ac20:	b2da      	uxtb	r2, r3
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f

    weak_pack_fault_                    = buff[1] & (1 << 0);
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	f003 0301 	and.w	r3, r3, #1
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	bf14      	ite	ne
 800ac36:	2301      	movne	r3, #1
 800ac38:	2300      	moveq	r3, #0
 800ac3a:	b2da      	uxtb	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    fan_monitor_fault_                  = buff[1] & (1 << 1);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	3301      	adds	r3, #1
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	f003 0302 	and.w	r3, r3, #2
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	bf14      	ite	ne
 800ac50:	2301      	movne	r3, #1
 800ac52:	2300      	moveq	r3, #0
 800ac54:	b2da      	uxtb	r2, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    thermistor_fault_                   = buff[1] & (1 << 2);
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	3301      	adds	r3, #1
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	f003 0304 	and.w	r3, r3, #4
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	bf14      	ite	ne
 800ac6a:	2301      	movne	r3, #1
 800ac6c:	2300      	moveq	r3, #0
 800ac6e:	b2da      	uxtb	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    can_communication_fault_            = buff[1] & (1 << 3);
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	f003 0308 	and.w	r3, r3, #8
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	bf14      	ite	ne
 800ac84:	2301      	movne	r3, #1
 800ac86:	2300      	moveq	r3, #0
 800ac88:	b2da      	uxtb	r2, r3
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
    redundant_power_supply_fault_       = buff[1] & (1 << 4);
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	3301      	adds	r3, #1
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	f003 0310 	and.w	r3, r3, #16
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	bf14      	ite	ne
 800ac9e:	2301      	movne	r3, #1
 800aca0:	2300      	moveq	r3, #0
 800aca2:	b2da      	uxtb	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    high_voltage_isolation_fault_       = buff[1] & (1 << 5);
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	3301      	adds	r3, #1
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	f003 0320 	and.w	r3, r3, #32
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	bf14      	ite	ne
 800acb8:	2301      	movne	r3, #1
 800acba:	2300      	moveq	r3, #0
 800acbc:	b2da      	uxtb	r2, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
    invalid_input_supply_voltage_fault_ = buff[1] & (1 << 6);
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	3301      	adds	r3, #1
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acce:	2b00      	cmp	r3, #0
 800acd0:	bf14      	ite	ne
 800acd2:	2301      	movne	r3, #1
 800acd4:	2300      	moveq	r3, #0
 800acd6:	b2da      	uxtb	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
    chargeenable_relay_fault_           = buff[1] & (1 << 7);
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	3301      	adds	r3, #1
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	b25b      	sxtb	r3, r3
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	09db      	lsrs	r3, r3, #7
 800acea:	b2da      	uxtb	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87

    dischargeenable_relay_fault_        = buff[2] & (1 << 0);
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	3302      	adds	r3, #2
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	f003 0301 	and.w	r3, r3, #1
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	bf14      	ite	ne
 800ad00:	2301      	movne	r3, #1
 800ad02:	2300      	moveq	r3, #0
 800ad04:	b2da      	uxtb	r2, r3
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    charger_safety_relay_fault_         = buff[2] & (1 << 1);
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	3302      	adds	r3, #2
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	f003 0302 	and.w	r3, r3, #2
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	bf14      	ite	ne
 800ad1a:	2301      	movne	r3, #1
 800ad1c:	2300      	moveq	r3, #0
 800ad1e:	b2da      	uxtb	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    internal_hardware_fault_            = buff[2] & (1 << 2);
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	3302      	adds	r3, #2
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	f003 0304 	and.w	r3, r3, #4
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	bf14      	ite	ne
 800ad34:	2301      	movne	r3, #1
 800ad36:	2300      	moveq	r3, #0
 800ad38:	b2da      	uxtb	r2, r3
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    internal_heatsink_thermistor_fault_ = buff[2] & (1 << 3);
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	3302      	adds	r3, #2
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	f003 0308 	and.w	r3, r3, #8
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	bf14      	ite	ne
 800ad4e:	2301      	movne	r3, #1
 800ad50:	2300      	moveq	r3, #0
 800ad52:	b2da      	uxtb	r2, r3
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
    internal_logic_fault_               = buff[2] & (1 << 4);
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	3302      	adds	r3, #2
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	f003 0310 	and.w	r3, r3, #16
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	bf14      	ite	ne
 800ad68:	2301      	movne	r3, #1
 800ad6a:	2300      	moveq	r3, #0
 800ad6c:	b2da      	uxtb	r2, r3
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    highest_cell_voltage_too_high_fault_= buff[2] & (1 << 5);
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	3302      	adds	r3, #2
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	f003 0320 	and.w	r3, r3, #32
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	bf14      	ite	ne
 800ad82:	2301      	movne	r3, #1
 800ad84:	2300      	moveq	r3, #0
 800ad86:	b2da      	uxtb	r2, r3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
    lowest_cell_voltage_too_low_fault_  = buff[2] & (1 << 6);
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	3302      	adds	r3, #2
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	bf14      	ite	ne
 800ad9c:	2301      	movne	r3, #1
 800ad9e:	2300      	moveq	r3, #0
 800ada0:	b2da      	uxtb	r2, r3
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    pack_too_hot_fault_                 = buff[2] & (1 << 7);
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	3302      	adds	r3, #2
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	b25b      	sxtb	r3, r3
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	09db      	lsrs	r3, r3, #7
 800adb4:	b2da      	uxtb	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f

    pack_soc_ = buff[3];
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	78da      	ldrb	r2, [r3, #3]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }
 800adc6:	bf00      	nop
 800adc8:	370c      	adds	r7, #12
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr

0800add2 <_ZNK11SolarGators11DataModules11OrionBMSRx423isCanCommunicationFaultEv>:

  bool OrionBMSRx4::isCanCommunicationFault() const {
 800add2:	b480      	push	{r7}
 800add4:	b083      	sub	sp, #12
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
    return can_communication_fault_;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
  }
 800ade0:	4618      	mov	r0, r3
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <_ZNK11SolarGators11DataModules11OrionBMSRx428isCellBalancingStuckOffFaultEv>:

  bool OrionBMSRx4::isCellBalancingStuckOffFault() const {
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
    return cell_balancing_stuck_off_fault_;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
  }
 800adfa:	4618      	mov	r0, r3
 800adfc:	370c      	adds	r7, #12
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr

0800ae06 <_ZNK11SolarGators11DataModules11OrionBMSRx415isCellBankFaultEv>:

  bool OrionBMSRx4::isCellBankFault() const {
 800ae06:	b480      	push	{r7}
 800ae08:	b083      	sub	sp, #12
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
    return cell_bank_fault_;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
  }
 800ae14:	4618      	mov	r0, r3
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <_ZNK11SolarGators11DataModules11OrionBMSRx421isCellOpenWiringFaultEv>:

  bool OrionBMSRx4::isCellOpenWiringFault() const {
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
    return cell_open_wiring_fault_;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
  }
 800ae2e:	4618      	mov	r0, r3
 800ae30:	370c      	adds	r7, #12
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr

0800ae3a <_ZNK11SolarGators11DataModules11OrionBMSRx424isCellVoltageOver5vFaultEv>:

  bool OrionBMSRx4::isCellVoltageOver5vFault() const {
 800ae3a:	b480      	push	{r7}
 800ae3c:	b083      	sub	sp, #12
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
    return cell_voltage_over_5v_fault_;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
  }
 800ae48:	4618      	mov	r0, r3
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <_ZNK11SolarGators11DataModules11OrionBMSRx424isChargeenableRelayFaultEv>:

  bool OrionBMSRx4::isChargeenableRelayFault() const {
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
    return chargeenable_relay_fault_;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
  }
 800ae62:	4618      	mov	r0, r3
 800ae64:	370c      	adds	r7, #12
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr

0800ae6e <_ZNK11SolarGators11DataModules11OrionBMSRx425isChargerSafetyRelayFaultEv>:

  bool OrionBMSRx4::isChargerSafetyRelayFault() const {
 800ae6e:	b480      	push	{r7}
 800ae70:	b083      	sub	sp, #12
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
    return charger_safety_relay_fault_;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
  }
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	370c      	adds	r7, #12
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr

0800ae88 <_ZNK11SolarGators11DataModules11OrionBMSRx420isCurrentSensorFaultEv>:

  bool OrionBMSRx4::isCurrentSensorFault() const {
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
    return current_sensor_fault_;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
  }
 800ae96:	4618      	mov	r0, r3
 800ae98:	370c      	adds	r7, #12
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr

0800aea2 <_ZNK11SolarGators11DataModules11OrionBMSRx427isDischargeenableRelayFaultEv>:

  bool OrionBMSRx4::isDischargeenableRelayFault() const {
 800aea2:	b480      	push	{r7}
 800aea4:	b083      	sub	sp, #12
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
    return dischargeenable_relay_fault_;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
  }
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	370c      	adds	r7, #12
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <_ZNK11SolarGators11DataModules11OrionBMSRx417isFanMonitorFaultEv>:

  bool OrionBMSRx4::isFanMonitorFault() const {
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
    return fan_monitor_fault_;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
  }
 800aeca:	4618      	mov	r0, r3
 800aecc:	370c      	adds	r7, #12
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr

0800aed6 <_ZNK11SolarGators11DataModules11OrionBMSRx427isHighVoltageIsolationFaultEv>:

  bool OrionBMSRx4::isHighVoltageIsolationFault() const {
 800aed6:	b480      	push	{r7}
 800aed8:	b083      	sub	sp, #12
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
    return high_voltage_isolation_fault_;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
  }
 800aee4:	4618      	mov	r0, r3
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr

0800aef0 <_ZNK11SolarGators11DataModules11OrionBMSRx432isHighestCellVoltageTooHighFaultEv>:

  bool OrionBMSRx4::isHighestCellVoltageTooHighFault() const {
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
    return highest_cell_voltage_too_high_fault_;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
  }
 800aefe:	4618      	mov	r0, r3
 800af00:	370c      	adds	r7, #12
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <_ZNK11SolarGators11DataModules11OrionBMSRx432isInternalCellCommunicationFaultEv>:

  bool OrionBMSRx4::isInternalCellCommunicationFault() const {
 800af0a:	b480      	push	{r7}
 800af0c:	b083      	sub	sp, #12
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
    return internal_cell_communication_fault_;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
  }
 800af18:	4618      	mov	r0, r3
 800af1a:	370c      	adds	r7, #12
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr

0800af24 <_ZNK11SolarGators11DataModules11OrionBMSRx423isInternalHardwareFaultEv>:

  bool OrionBMSRx4::isInternalHardwareFault() const {
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
    return internal_hardware_fault_;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
  }
 800af32:	4618      	mov	r0, r3
 800af34:	370c      	adds	r7, #12
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr

0800af3e <_ZNK11SolarGators11DataModules11OrionBMSRx433isInternalHeatsinkThermistorFaultEv>:

  bool OrionBMSRx4::isInternalHeatsinkThermistorFault() const {
 800af3e:	b480      	push	{r7}
 800af40:	b083      	sub	sp, #12
 800af42:	af00      	add	r7, sp, #0
 800af44:	6078      	str	r0, [r7, #4]
    return internal_heatsink_thermistor_fault_;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
  }
 800af4c:	4618      	mov	r0, r3
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <_ZNK11SolarGators11DataModules11OrionBMSRx420isInternalLogicFaultEv>:

  bool OrionBMSRx4::isInternalLogicFault() const {
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
    return internal_logic_fault_;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
  }
 800af66:	4618      	mov	r0, r3
 800af68:	370c      	adds	r7, #12
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr

0800af72 <_ZNK11SolarGators11DataModules11OrionBMSRx432isInvalidInputSupplyVoltageFaultEv>:

  bool OrionBMSRx4::isInvalidInputSupplyVoltageFault() const {
 800af72:	b480      	push	{r7}
 800af74:	b083      	sub	sp, #12
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
    return invalid_input_supply_voltage_fault_;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
  }
 800af80:	4618      	mov	r0, r3
 800af82:	370c      	adds	r7, #12
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <_ZNK11SolarGators11DataModules11OrionBMSRx421isLowCellVoltageFaultEv>:

  bool OrionBMSRx4::isLowCellVoltageFault() const {
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
    return low_cell_voltage_fault_;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
  }
 800af9a:	4618      	mov	r0, r3
 800af9c:	370c      	adds	r7, #12
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr

0800afa6 <_ZNK11SolarGators11DataModules11OrionBMSRx430isLowestCellVoltageTooLowFaultEv>:

  bool OrionBMSRx4::isLowestCellVoltageTooLowFault() const {
 800afa6:	b480      	push	{r7}
 800afa8:	b083      	sub	sp, #12
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
    return lowest_cell_voltage_too_low_fault_;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
  }
 800afb4:	4618      	mov	r0, r3
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <_ZNK11SolarGators11DataModules11OrionBMSRx417isPackTooHotFaultEv>:

  bool OrionBMSRx4::isPackTooHotFault() const {
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
    return pack_too_hot_fault_;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
  }
 800afce:	4618      	mov	r0, r3
 800afd0:	370c      	adds	r7, #12
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr

0800afda <_ZNK11SolarGators11DataModules11OrionBMSRx427isRedundantPowerSupplyFaultEv>:

  bool OrionBMSRx4::isRedundantPowerSupplyFault() const {
 800afda:	b480      	push	{r7}
 800afdc:	b083      	sub	sp, #12
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
    return redundant_power_supply_fault_;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
  }
 800afe8:	4618      	mov	r0, r3
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <_ZNK11SolarGators11DataModules11OrionBMSRx415isWeakCellFaultEv>:

  bool OrionBMSRx4::isThermistorFault() const {
    return thermistor_fault_;
  }

  bool OrionBMSRx4::isWeakCellFault() const {
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
    return weak_cell_fault_;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
  }
 800b002:	4618      	mov	r0, r3
 800b004:	370c      	adds	r7, #12
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr

0800b00e <_ZNK11SolarGators11DataModules11OrionBMSRx415isWeakPackFaultEv>:

  bool OrionBMSRx4::isWeakPackFault() const {
 800b00e:	b480      	push	{r7}
 800b010:	b083      	sub	sp, #12
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
    return weak_pack_fault_;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
  }
 800b01c:	4618      	mov	r0, r3
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <_ZNK11SolarGators11DataModules11OrionBMSRx410getPackSocEv>:

  float OrionBMSRx4::getPackSoc() const {
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
    return pack_soc_ * 0.5;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800b036:	4618      	mov	r0, r3
 800b038:	f7f5 fbb6 	bl	80007a8 <__aeabi_i2d>
 800b03c:	f04f 0200 	mov.w	r2, #0
 800b040:	4b08      	ldr	r3, [pc, #32]	; (800b064 <_ZNK11SolarGators11DataModules11OrionBMSRx410getPackSocEv+0x3c>)
 800b042:	f7f5 f935 	bl	80002b0 <__aeabi_dmul>
 800b046:	4602      	mov	r2, r0
 800b048:	460b      	mov	r3, r1
 800b04a:	4610      	mov	r0, r2
 800b04c:	4619      	mov	r1, r3
 800b04e:	f7f5 fc9d 	bl	800098c <__aeabi_d2f>
 800b052:	4603      	mov	r3, r0
 800b054:	ee07 3a90 	vmov	s15, r3
  }
 800b058:	eeb0 0a67 	vmov.f32	s0, s15
 800b05c:	3708      	adds	r7, #8
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	3fe00000 	.word	0x3fe00000

0800b068 <_ZN11SolarGators11DataModules10PowerBoardC1Ev>:
namespace {
  static constexpr uint32_t ID = 0x235;
  static constexpr uint32_t SIZE = 2;
}

PowerBoard::PowerBoard():
 800b068:	b580      	push	{r7, lr}
 800b06a:	b086      	sub	sp, #24
 800b06c:	af04      	add	r7, sp, #16
 800b06e:	6078      	str	r0, [r7, #4]
        DataModule(ID, 0, SIZE),
        SupBatVoltage_(0),
		SupBatPower_(0),
		MainBatPower_(0),
		PowerSource_(0)
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	2300      	movs	r3, #0
 800b074:	9302      	str	r3, [sp, #8]
 800b076:	2300      	movs	r3, #0
 800b078:	9301      	str	r3, [sp, #4]
 800b07a:	2300      	movs	r3, #0
 800b07c:	9300      	str	r3, [sp, #0]
 800b07e:	2302      	movs	r3, #2
 800b080:	2200      	movs	r2, #0
 800b082:	f240 2135 	movw	r1, #565	; 0x235
 800b086:	f7fe fa31 	bl	80094ec <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>
 800b08a:	4a0c      	ldr	r2, [pc, #48]	; (800b0bc <_ZN11SolarGators11DataModules10PowerBoardC1Ev+0x54>)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	601a      	str	r2, [r3, #0]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2200      	movs	r2, #0
 800b094:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2200      	movs	r2, #0
 800b09c:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
{ }
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3708      	adds	r7, #8
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	0801a3a0 	.word	0x0801a3a0

0800b0c0 <_ZN11SolarGators11DataModules10PowerBoardD1Ev>:

PowerBoard::~PowerBoard()
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	4a05      	ldr	r2, [pc, #20]	; (800b0e0 <_ZN11SolarGators11DataModules10PowerBoardD1Ev+0x20>)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	601a      	str	r2, [r3, #0]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7f7 fbfb 	bl	80028cc <_ZN11SolarGators11DataModules10DataModuleD1Ev>
{ }
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	0801a3a0 	.word	0x0801a3a0

0800b0e4 <_ZN11SolarGators11DataModules10PowerBoardD0Ev>:
PowerBoard::~PowerBoard()
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
{ }
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f7ff ffe7 	bl	800b0c0 <_ZN11SolarGators11DataModules10PowerBoardD1Ev>
 800b0f2:	2180      	movs	r1, #128	; 0x80
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f00c ff31 	bl	8017f5c <_ZdlPvj>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3708      	adds	r7, #8
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <_ZN11SolarGators11DataModules10PowerBoard16GetSupBatVoltageEv>:

float PowerBoard::GetSupBatVoltage()
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  return ((float)SupBatVoltage_)/100;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800b112:	ee07 3a90 	vmov	s15, r3
 800b116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b11a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800b134 <_ZN11SolarGators11DataModules10PowerBoard16GetSupBatVoltageEv+0x30>
 800b11e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b122:	eef0 7a66 	vmov.f32	s15, s13
}
 800b126:	eeb0 0a67 	vmov.f32	s0, s15
 800b12a:	370c      	adds	r7, #12
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr
 800b134:	42c80000 	.word	0x42c80000

0800b138 <_ZNK11SolarGators11DataModules10PowerBoard11ToByteArrayEPh>:
	return PowerSource_;
}


void PowerBoard::ToByteArray(uint8_t* buff)const
{
 800b138:	b480      	push	{r7}
 800b13a:	b083      	sub	sp, #12
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
	buff[0] = SupBatVoltage_ >> 8;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800b148:	0a1b      	lsrs	r3, r3, #8
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	b2da      	uxtb	r2, r3
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	701a      	strb	r2, [r3, #0]
	buff[1] = SupBatVoltage_ & 0xFF;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	3301      	adds	r3, #1
 800b15c:	b2d2      	uxtb	r2, r2
 800b15e:	701a      	strb	r2, [r3, #0]
	buff[2] = SupBatPower_ >> 8;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800b166:	0a1b      	lsrs	r3, r3, #8
 800b168:	b29a      	uxth	r2, r3
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	3302      	adds	r3, #2
 800b16e:	b2d2      	uxtb	r2, r2
 800b170:	701a      	strb	r2, [r3, #0]
	buff[3] = SupBatPower_ & 0xFF;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	3303      	adds	r3, #3
 800b17c:	b2d2      	uxtb	r2, r2
 800b17e:	701a      	strb	r2, [r3, #0]
	buff[4] = MainBatPower_ >> 8;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800b186:	0a1b      	lsrs	r3, r3, #8
 800b188:	b29a      	uxth	r2, r3
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	3304      	adds	r3, #4
 800b18e:	b2d2      	uxtb	r2, r2
 800b190:	701a      	strb	r2, [r3, #0]
	buff[5] = MainBatPower_ & 0xFF;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	3305      	adds	r3, #5
 800b19c:	b2d2      	uxtb	r2, r2
 800b19e:	701a      	strb	r2, [r3, #0]
	buff[6] = PowerSource_;
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	3306      	adds	r3, #6
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 800b1aa:	701a      	strb	r2, [r3, #0]
}
 800b1ac:	bf00      	nop
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <_ZN11SolarGators11DataModules10PowerBoard13FromByteArrayEPh>:

void PowerBoard::FromByteArray(uint8_t* buff)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
	SupBatVoltage_ = (static_cast<uint16_t>(buff[0]) << 8) | buff[1];
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	021b      	lsls	r3, r3, #8
 800b1c8:	b21a      	sxth	r2, r3
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	b21b      	sxth	r3, r3
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	b21b      	sxth	r3, r3
 800b1d6:	b29a      	uxth	r2, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	SupBatPower_   = (static_cast<uint16_t>(buff[2]) << 8) | buff[3];
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	3302      	adds	r3, #2
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	021b      	lsls	r3, r3, #8
 800b1e6:	b21a      	sxth	r2, r3
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	3303      	adds	r3, #3
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	b21b      	sxth	r3, r3
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	b21b      	sxth	r3, r3
 800b1f4:	b29a      	uxth	r2, r3
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	MainBatPower_  = (static_cast<uint16_t>(buff[4]) << 8) | buff[5];
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	3304      	adds	r3, #4
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	021b      	lsls	r3, r3, #8
 800b204:	b21a      	sxth	r2, r3
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	3305      	adds	r3, #5
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	b21b      	sxth	r3, r3
 800b20e:	4313      	orrs	r3, r2
 800b210:	b21b      	sxth	r3, r3
 800b212:	b29a      	uxth	r2, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	PowerSource_ = buff[6];
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	799a      	ldrb	r2, [r3, #6]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
}
 800b224:	bf00      	nop
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <_ZN11SolarGators11DataModules10RearLightsC1Ev>:
namespace {
  static constexpr uint32_t ID = 0x2345;
  static constexpr uint32_t SIZE = 1;
}

RearLights::RearLights():
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af04      	add	r7, sp, #16
 800b236:	6078      	str	r0, [r7, #4]
            DataModule(ID, 0, SIZE),
            break_(false),
			killsw_(false),
			contactor_status_(true){
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	2300      	movs	r3, #0
 800b23c:	9302      	str	r3, [sp, #8]
 800b23e:	2300      	movs	r3, #0
 800b240:	9301      	str	r3, [sp, #4]
 800b242:	2300      	movs	r3, #0
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	2301      	movs	r3, #1
 800b248:	2200      	movs	r2, #0
 800b24a:	f242 3145 	movw	r1, #9029	; 0x2345
 800b24e:	f7fe f94d 	bl	80094ec <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>
 800b252:	4a0a      	ldr	r2, [pc, #40]	; (800b27c <_ZN11SolarGators11DataModules10RearLightsC1Ev+0x4c>)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	601a      	str	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2200      	movs	r2, #0
 800b25c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2201      	movs	r2, #1
 800b26c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
  // TODO Auto-generated constructor stub

}
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	4618      	mov	r0, r3
 800b274:	3708      	adds	r7, #8
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	0801a3b8 	.word	0x0801a3b8

0800b280 <_ZN11SolarGators11DataModules10RearLightsD1Ev>:

RearLights::~RearLights() {
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	4a05      	ldr	r2, [pc, #20]	; (800b2a0 <_ZN11SolarGators11DataModules10RearLightsD1Ev+0x20>)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	601a      	str	r2, [r3, #0]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4618      	mov	r0, r3
 800b292:	f7f7 fb1b 	bl	80028cc <_ZN11SolarGators11DataModules10DataModuleD1Ev>
  // TODO Auto-generated destructor stub
}
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4618      	mov	r0, r3
 800b29a:	3708      	adds	r7, #8
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	0801a3b8 	.word	0x0801a3b8

0800b2a4 <_ZN11SolarGators11DataModules10RearLightsD0Ev>:
RearLights::~RearLights() {
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
}
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f7ff ffe7 	bl	800b280 <_ZN11SolarGators11DataModules10RearLightsD1Ev>
 800b2b2:	217c      	movs	r1, #124	; 0x7c
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f00c fe51 	bl	8017f5c <_ZdlPvj>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <_ZNK11SolarGators11DataModules10RearLights18getContactorStatusEv>:

void RearLights::setKillSwStatus(bool status){
	killsw_ = status;
}

bool RearLights::getContactorStatus() const{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
	return contactor_status_;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	370c      	adds	r7, #12
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr

0800b2de <_ZNK11SolarGators11DataModules10RearLights11ToByteArrayEPh>:
void RearLights::doATrip(){
	//HAL_GPIO_WritePin(HORN_EN_GPIO_Port, HORN_EN_Pin, GPIO_PIN_RESET);
}

void RearLights::ToByteArray(uint8_t* buff) const
{
 800b2de:	b480      	push	{r7}
 800b2e0:	b083      	sub	sp, #12
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
 800b2e6:	6039      	str	r1, [r7, #0]
  buff[0] = static_cast<uint8_t>(break_);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(killsw_) << 1;
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	b25a      	sxtb	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800b300:	005b      	lsls	r3, r3, #1
 800b302:	b25b      	sxtb	r3, r3
 800b304:	4313      	orrs	r3, r2
 800b306:	b25b      	sxtb	r3, r3
 800b308:	b2da      	uxtb	r2, r3
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(contactor_status_) << 2;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	b25a      	sxtb	r2, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	b25b      	sxtb	r3, r3
 800b31e:	4313      	orrs	r3, r2
 800b320:	b25b      	sxtb	r3, r3
 800b322:	b2da      	uxtb	r2, r3
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	701a      	strb	r2, [r3, #0]

}
 800b328:	bf00      	nop
 800b32a:	370c      	adds	r7, #12
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <_ZN11SolarGators11DataModules10RearLights13FromByteArrayEPh>:
void RearLights::FromByteArray(uint8_t* buff)
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
  break_ = static_cast<bool>(buff[0] & 0x1);
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	f003 0301 	and.w	r3, r3, #1
 800b346:	2b00      	cmp	r3, #0
 800b348:	bf14      	ite	ne
 800b34a:	2301      	movne	r3, #1
 800b34c:	2300      	moveq	r3, #0
 800b34e:	b2da      	uxtb	r2, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  killsw_ = static_cast<bool>(buff[0] & (0x1 << 1));
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	f003 0302 	and.w	r3, r3, #2
 800b35e:	2b00      	cmp	r3, #0
 800b360:	bf14      	ite	ne
 800b362:	2301      	movne	r3, #1
 800b364:	2300      	moveq	r3, #0
 800b366:	b2da      	uxtb	r2, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
  contactor_status_ = static_cast<bool>(buff[0] & (0x1 << 2));
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	f003 0304 	and.w	r3, r3, #4
 800b376:	2b00      	cmp	r3, #0
 800b378:	bf14      	ite	ne
 800b37a:	2301      	movne	r3, #1
 800b37c:	2300      	moveq	r3, #0
 800b37e:	b2da      	uxtb	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

}
 800b386:	bf00      	nop
 800b388:	370c      	adds	r7, #12
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr
	...

0800b394 <_ZN11SolarGators11DataModules8SteeringC1Ev>:
  static constexpr uint32_t ID = 10;
  static constexpr uint32_t SIZE = 3;
}
namespace SolarGators::DataModules
{
  Steering::Steering():
 800b394:	b580      	push	{r7, lr}
 800b396:	b086      	sub	sp, #24
 800b398:	af04      	add	r7, sp, #16
 800b39a:	6078      	str	r0, [r7, #4]
    eco_enable_(true),
    headlights_(false),
    horn_(false),
    reverse_(false),
	regen_(false),
    cruise_speed_(Min_Cruise_Speed_)
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	2300      	movs	r3, #0
 800b3a0:	9302      	str	r3, [sp, #8]
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	9301      	str	r3, [sp, #4]
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	9300      	str	r3, [sp, #0]
 800b3aa:	2303      	movs	r3, #3
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	210a      	movs	r1, #10
 800b3b0:	f7fe f89c 	bl	80094ec <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>
 800b3b4:	4a19      	ldr	r2, [pc, #100]	; (800b41c <_ZN11SolarGators11DataModules8SteeringC1Ev+0x88>)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	601a      	str	r2, [r3, #0]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  {}
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	4618      	mov	r0, r3
 800b416:	3708      	adds	r7, #8
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	0801a3d0 	.word	0x0801a3d0

0800b420 <_ZN11SolarGators11DataModules8SteeringD1Ev>:
  Steering::~Steering()
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	4a05      	ldr	r2, [pc, #20]	; (800b440 <_ZN11SolarGators11DataModules8SteeringD1Ev+0x20>)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	601a      	str	r2, [r3, #0]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	4618      	mov	r0, r3
 800b432:	f7f7 fa4b 	bl	80028cc <_ZN11SolarGators11DataModules10DataModuleD1Ev>
  {}
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4618      	mov	r0, r3
 800b43a:	3708      	adds	r7, #8
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}
 800b440:	0801a3d0 	.word	0x0801a3d0

0800b444 <_ZN11SolarGators11DataModules8SteeringD0Ev>:
  Steering::~Steering()
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  {}
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f7ff ffe7 	bl	800b420 <_ZN11SolarGators11DataModules8SteeringD1Ev>
 800b452:	2184      	movs	r1, #132	; 0x84
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f00c fd81 	bl	8017f5c <_ZdlPvj>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	4618      	mov	r0, r3
 800b45e:	3708      	adds	r7, #8
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <_ZNK11SolarGators11DataModules8Steering17GetLeftTurnStatusEv>:
  bool Steering::GetLeftTurnStatus() const
  {
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
    return left_turn_;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
  }
 800b472:	4618      	mov	r0, r3
 800b474:	370c      	adds	r7, #12
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr

0800b47e <_ZNK11SolarGators11DataModules8Steering18GetRightTurnStatusEv>:
  bool Steering::GetRightTurnStatus() const
  {
 800b47e:	b480      	push	{r7}
 800b480:	b083      	sub	sp, #12
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
    return right_turn_;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
  }
 800b48c:	4618      	mov	r0, r3
 800b48e:	370c      	adds	r7, #12
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr

0800b498 <_ZNK11SolarGators11DataModules8Steering16GetHazardsStatusEv>:
  bool Steering::GetHazardsStatus() const
  {
 800b498:	b480      	push	{r7}
 800b49a:	b083      	sub	sp, #12
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
    return hazards_;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
  }
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	370c      	adds	r7, #12
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr

0800b4b2 <_ZNK11SolarGators11DataModules8Steering22GetCruiseEnabledStatusEv>:
  bool Steering::GetBpFaultStatus() const
  {
    return bps_fault_;
  }
  bool Steering::GetCruiseEnabledStatus() const
  {
 800b4b2:	b480      	push	{r7}
 800b4b4:	b083      	sub	sp, #12
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
    return cruise_enable_;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
  }
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <_ZNK11SolarGators11DataModules8Steering19GetHeadlightsStatusEv>:
  bool Steering::GetEcoEnabledStatus() const
  {
    return eco_enable_;
  }
  bool Steering::GetHeadlightsStatus() const
  {
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
    return headlights_;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
  }
 800b4da:	4618      	mov	r0, r3
 800b4dc:	370c      	adds	r7, #12
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr

0800b4e6 <_ZNK11SolarGators11DataModules8Steering16GetReverseStatusEv>:
  bool Steering::GetHornStatus() const
  {
    return horn_;
  }
  bool Steering::GetReverseStatus() const
  {
 800b4e6:	b480      	push	{r7}
 800b4e8:	b083      	sub	sp, #12
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
    return reverse_;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
  }
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <_ZNK11SolarGators11DataModules8Steering8GetRegenEv>:
  uint8_t Steering::GetCruiseSpeed() const
  {
    return cruise_speed_;
  }
  uint8_t Steering::GetRegen() const
  {
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
	  return regen_;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
  }
 800b50e:	4618      	mov	r0, r3
 800b510:	370c      	adds	r7, #12
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr

0800b51a <_ZNK11SolarGators11DataModules8Steering11ToByteArrayEPh>:
  void Steering::ToByteArray(uint8_t* buff) const
  {
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b082      	sub	sp, #8
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
 800b522:	6039      	str	r1, [r7, #0]
    memset(buff, 0, sizeof(buff));
 800b524:	2204      	movs	r2, #4
 800b526:	2100      	movs	r1, #0
 800b528:	6838      	ldr	r0, [r7, #0]
 800b52a:	f00c fe29 	bl	8018180 <memset>
    buff[0] |= (static_cast<uint8_t>(left_turn_)     << 0);
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800b538:	4313      	orrs	r3, r2
 800b53a:	b2da      	uxtb	r2, r3
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(right_turn_)    << 1);
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	b25a      	sxtb	r2, r3
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800b54c:	005b      	lsls	r3, r3, #1
 800b54e:	b25b      	sxtb	r3, r3
 800b550:	4313      	orrs	r3, r2
 800b552:	b25b      	sxtb	r3, r3
 800b554:	b2da      	uxtb	r2, r3
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(hazards_)       << 2);
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	b25a      	sxtb	r2, r3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	b25b      	sxtb	r3, r3
 800b56a:	4313      	orrs	r3, r2
 800b56c:	b25b      	sxtb	r3, r3
 800b56e:	b2da      	uxtb	r2, r3
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(bps_fault_)     << 3);
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	b25a      	sxtb	r2, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800b580:	00db      	lsls	r3, r3, #3
 800b582:	b25b      	sxtb	r3, r3
 800b584:	4313      	orrs	r3, r2
 800b586:	b25b      	sxtb	r3, r3
 800b588:	b2da      	uxtb	r2, r3
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(cruise_enable_) << 4);
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	b25a      	sxtb	r2, r3
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b59a:	011b      	lsls	r3, r3, #4
 800b59c:	b25b      	sxtb	r3, r3
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	b25b      	sxtb	r3, r3
 800b5a2:	b2da      	uxtb	r2, r3
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(eco_enable_)    << 5);
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	b25a      	sxtb	r2, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800b5b4:	015b      	lsls	r3, r3, #5
 800b5b6:	b25b      	sxtb	r3, r3
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	b25b      	sxtb	r3, r3
 800b5bc:	b2da      	uxtb	r2, r3
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(headlights_)    << 6);
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	b25a      	sxtb	r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800b5ce:	019b      	lsls	r3, r3, #6
 800b5d0:	b25b      	sxtb	r3, r3
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	b25b      	sxtb	r3, r3
 800b5d6:	b2da      	uxtb	r2, r3
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(horn_)          << 7);
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	b25a      	sxtb	r2, r3
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800b5e8:	01db      	lsls	r3, r3, #7
 800b5ea:	b25b      	sxtb	r3, r3
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	b25b      	sxtb	r3, r3
 800b5f0:	b2da      	uxtb	r2, r3
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	701a      	strb	r2, [r3, #0]
    buff[1] |= (static_cast<uint8_t>(reverse_)       << 0);
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	781a      	ldrb	r2, [r3, #0]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b602:	4619      	mov	r1, r3
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	3301      	adds	r3, #1
 800b608:	430a      	orrs	r2, r1
 800b60a:	b2d2      	uxtb	r2, r2
 800b60c:	701a      	strb	r2, [r3, #0]
    buff[1] |= regen_ 								 << 1;
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	3301      	adds	r3, #1
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	b25a      	sxtb	r2, r3
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800b61c:	005b      	lsls	r3, r3, #1
 800b61e:	b25b      	sxtb	r3, r3
 800b620:	4313      	orrs	r3, r2
 800b622:	b25a      	sxtb	r2, r3
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	3301      	adds	r3, #1
 800b628:	b2d2      	uxtb	r2, r2
 800b62a:	701a      	strb	r2, [r3, #0]
    buff[2] |= cruise_speed_;
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	3302      	adds	r3, #2
 800b630:	7819      	ldrb	r1, [r3, #0]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	3302      	adds	r3, #2
 800b63c:	430a      	orrs	r2, r1
 800b63e:	b2d2      	uxtb	r2, r2
 800b640:	701a      	strb	r2, [r3, #0]
  }
 800b642:	bf00      	nop
 800b644:	3708      	adds	r7, #8
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <_ZN11SolarGators11DataModules8Steering13FromByteArrayEPh>:
  void Steering::FromByteArray(uint8_t* buff)
  {
 800b64a:	b480      	push	{r7}
 800b64c:	b083      	sub	sp, #12
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
 800b652:	6039      	str	r1, [r7, #0]
    left_turn_      = buff[0] & (1 << 0);
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	f003 0301 	and.w	r3, r3, #1
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	bf14      	ite	ne
 800b660:	2301      	movne	r3, #1
 800b662:	2300      	moveq	r3, #0
 800b664:	b2da      	uxtb	r2, r3
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    right_turn_     = buff[0] & (1 << 1);
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	f003 0302 	and.w	r3, r3, #2
 800b674:	2b00      	cmp	r3, #0
 800b676:	bf14      	ite	ne
 800b678:	2301      	movne	r3, #1
 800b67a:	2300      	moveq	r3, #0
 800b67c:	b2da      	uxtb	r2, r3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    hazards_        = buff[0] & (1 << 2);
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	f003 0304 	and.w	r3, r3, #4
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	bf14      	ite	ne
 800b690:	2301      	movne	r3, #1
 800b692:	2300      	moveq	r3, #0
 800b694:	b2da      	uxtb	r2, r3
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    bps_fault_      = buff[0] & (1 << 3);
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	f003 0308 	and.w	r3, r3, #8
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	bf14      	ite	ne
 800b6a8:	2301      	movne	r3, #1
 800b6aa:	2300      	moveq	r3, #0
 800b6ac:	b2da      	uxtb	r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
    cruise_enable_  = buff[0] & (1 << 4);
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	f003 0310 	and.w	r3, r3, #16
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	bf14      	ite	ne
 800b6c0:	2301      	movne	r3, #1
 800b6c2:	2300      	moveq	r3, #0
 800b6c4:	b2da      	uxtb	r2, r3
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    eco_enable_     = buff[0] & (1 << 5);
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	f003 0320 	and.w	r3, r3, #32
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	bf14      	ite	ne
 800b6d8:	2301      	movne	r3, #1
 800b6da:	2300      	moveq	r3, #0
 800b6dc:	b2da      	uxtb	r2, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    headlights_     = buff[0] & (1 << 6);
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	bf14      	ite	ne
 800b6f0:	2301      	movne	r3, #1
 800b6f2:	2300      	moveq	r3, #0
 800b6f4:	b2da      	uxtb	r2, r3
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    horn_           = buff[0] & (1 << 7);
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	b25b      	sxtb	r3, r3
 800b702:	b2db      	uxtb	r3, r3
 800b704:	09db      	lsrs	r3, r3, #7
 800b706:	b2da      	uxtb	r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    reverse_        = buff[1] & (1 << 0);
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	3301      	adds	r3, #1
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	f003 0301 	and.w	r3, r3, #1
 800b718:	2b00      	cmp	r3, #0
 800b71a:	bf14      	ite	ne
 800b71c:	2301      	movne	r3, #1
 800b71e:	2300      	moveq	r3, #0
 800b720:	b2da      	uxtb	r2, r3
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    regen_			= (buff[1] & (3 << 1)) >> 1;
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	3301      	adds	r3, #1
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	105b      	asrs	r3, r3, #1
 800b730:	b2db      	uxtb	r3, r3
 800b732:	f003 0303 	and.w	r3, r3, #3
 800b736:	b2da      	uxtb	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    cruise_speed_   = buff[2];
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	789a      	ldrb	r2, [r3, #2]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }
 800b748:	bf00      	nop
 800b74a:	370c      	adds	r7, #12
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800b754:	b480      	push	{r7}
 800b756:	b083      	sub	sp, #12
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	4618      	mov	r0, r3
 800b762:	370c      	adds	r7, #12
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <_ZN3etl5ipool7releaseEPKv>:
    /// Release an object in the pool.
    /// If asserts or exceptions are enabled and the object does not belong to this
    /// pool then an etl::pool_object_not_in_pool is thrown.
    /// \param p_object A pointer to the object to be released.
    //*************************************************************************
    void release(const void* const p_object)
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
    {
      const uintptr_t p = uintptr_t(p_object);
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	60fb      	str	r3, [r7, #12]
      release_item((char*)p);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	4619      	mov	r1, r3
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 f878 	bl	800b874 <_ZN3etl5ipool12release_itemEPc>
    }
 800b784:	bf00      	nop
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <_ZN3etl5ipoolC1EPcmm>:
  protected:

    //*************************************************************************
    /// Constructor
    //*************************************************************************
    ipool(char* p_buffer_, uint32_t item_size_, uint32_t max_size_)
 800b78c:	b480      	push	{r7}
 800b78e:	b085      	sub	sp, #20
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	607a      	str	r2, [r7, #4]
 800b798:	603b      	str	r3, [r7, #0]
      : p_buffer(p_buffer_),
      p_next(p_buffer_),
      items_allocated(0),
      items_initialised(0),
      Item_Size(item_size_),
      Max_Size(max_size_)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	68ba      	ldr	r2, [r7, #8]
 800b79e:	601a      	str	r2, [r3, #0]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	68ba      	ldr	r2, [r7, #8]
 800b7a4:	605a      	str	r2, [r3, #4]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	609a      	str	r2, [r3, #8]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	60da      	str	r2, [r3, #12]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	611a      	str	r2, [r3, #16]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	683a      	ldr	r2, [r7, #0]
 800b7bc:	615a      	str	r2, [r3, #20]
    {
    }
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3714      	adds	r7, #20
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <_ZN3etl5ipool13allocate_itemEv>:
  private:

    //*************************************************************************
    /// Allocate an item from the pool.
    //*************************************************************************
    char* allocate_item()
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b086      	sub	sp, #24
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
    {
      char* p_value = ETL_NULLPTR;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	617b      	str	r3, [r7, #20]

      // Any free space left?
      if (items_allocated < Max_Size)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	689a      	ldr	r2, [r3, #8]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	695b      	ldr	r3, [r3, #20]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d234      	bcs.n	800b84e <_ZN3etl5ipool13allocate_itemEv+0x82>
      {
        // Initialise another one if necessary.
        if (items_initialised < Max_Size)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	68da      	ldr	r2, [r3, #12]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	695b      	ldr	r3, [r3, #20]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d216      	bcs.n	800b81e <_ZN3etl5ipool13allocate_itemEv+0x52>
        {
          char* p = p_buffer + (items_initialised * Item_Size);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	6879      	ldr	r1, [r7, #4]
 800b7fa:	6909      	ldr	r1, [r1, #16]
 800b7fc:	fb01 f303 	mul.w	r3, r1, r3
 800b800:	4413      	add	r3, r2
 800b802:	613b      	str	r3, [r7, #16]
          char* np = p + Item_Size;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	691b      	ldr	r3, [r3, #16]
 800b808:	693a      	ldr	r2, [r7, #16]
 800b80a:	4413      	add	r3, r2
 800b80c:	60fb      	str	r3, [r7, #12]
          *reinterpret_cast<char**>(p) = np;
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	601a      	str	r2, [r3, #0]
          ++items_initialised;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	1c5a      	adds	r2, r3, #1
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	60da      	str	r2, [r3, #12]
        }

        // Get the address of new allocated item.
        p_value = p_next;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	617b      	str	r3, [r7, #20]

        ++items_allocated;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	1c5a      	adds	r2, r3, #1
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	609a      	str	r2, [r3, #8]
        if (items_allocated < Max_Size)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	689a      	ldr	r2, [r3, #8]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	695b      	ldr	r3, [r3, #20]
 800b836:	429a      	cmp	r2, r3
 800b838:	d205      	bcs.n	800b846 <_ZN3etl5ipool13allocate_itemEv+0x7a>
        {
          // Set up the pointer to the next free item
          p_next = *reinterpret_cast<char**>(p_next);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	681a      	ldr	r2, [r3, #0]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	605a      	str	r2, [r3, #4]
 800b844:	e00a      	b.n	800b85c <_ZN3etl5ipool13allocate_itemEv+0x90>
        }
        else
        {
          // No more left!
          p_next = ETL_NULLPTR;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2200      	movs	r2, #0
 800b84a:	605a      	str	r2, [r3, #4]
 800b84c:	e006      	b.n	800b85c <_ZN3etl5ipool13allocate_itemEv+0x90>
        }
      }
      else
      {
        ETL_ASSERT(false, ETL_ERROR(pool_no_allocation));
 800b84e:	4b06      	ldr	r3, [pc, #24]	; (800b868 <_ZN3etl5ipool13allocate_itemEv+0x9c>)
 800b850:	4a06      	ldr	r2, [pc, #24]	; (800b86c <_ZN3etl5ipool13allocate_itemEv+0xa0>)
 800b852:	f240 1171 	movw	r1, #369	; 0x171
 800b856:	4806      	ldr	r0, [pc, #24]	; (800b870 <_ZN3etl5ipool13allocate_itemEv+0xa4>)
 800b858:	f00c fc08 	bl	801806c <__assert_func>
      }

      return p_value;
 800b85c:	697b      	ldr	r3, [r7, #20]
    }
 800b85e:	4618      	mov	r0, r3
 800b860:	3718      	adds	r7, #24
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	08019294 	.word	0x08019294
 800b86c:	0801929c 	.word	0x0801929c
 800b870:	080192c0 	.word	0x080192c0

0800b874 <_ZN3etl5ipool12release_itemEPc>:

    //*************************************************************************
    /// Release an item back to the pool.
    //*************************************************************************
    void release_item(char* p_value)
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
    {
      // Does it belong to us?
      ETL_ASSERT(is_item_in_pool(p_value), ETL_ERROR(pool_object_not_in_pool));
 800b87e:	6839      	ldr	r1, [r7, #0]
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 f829 	bl	800b8d8 <_ZNK3etl5ipool15is_item_in_poolEPKc>
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d106      	bne.n	800b89a <_ZN3etl5ipool12release_itemEPc+0x26>
 800b88c:	4b0f      	ldr	r3, [pc, #60]	; (800b8cc <_ZN3etl5ipool12release_itemEPc+0x58>)
 800b88e:	4a10      	ldr	r2, [pc, #64]	; (800b8d0 <_ZN3etl5ipool12release_itemEPc+0x5c>)
 800b890:	f240 117d 	movw	r1, #381	; 0x17d
 800b894:	480f      	ldr	r0, [pc, #60]	; (800b8d4 <_ZN3etl5ipool12release_itemEPc+0x60>)
 800b896:	f00c fbe9 	bl	801806c <__assert_func>

      if (p_next != ETL_NULLPTR)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d005      	beq.n	800b8ae <_ZN3etl5ipool12release_itemEPc+0x3a>
      {
        // Point it to the current free item.
        *(uintptr_t*)p_value = reinterpret_cast<uintptr_t>(p_next);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	601a      	str	r2, [r3, #0]
 800b8ac:	e002      	b.n	800b8b4 <_ZN3etl5ipool12release_itemEPc+0x40>
      }
      else
      {
        // This is the only free item.
        *((uintptr_t*)p_value) = 0;
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	601a      	str	r2, [r3, #0]
      }

      p_next = p_value;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	683a      	ldr	r2, [r7, #0]
 800b8b8:	605a      	str	r2, [r3, #4]

      --items_allocated;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	1e5a      	subs	r2, r3, #1
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	609a      	str	r2, [r3, #8]
    }
 800b8c4:	bf00      	nop
 800b8c6:	3708      	adds	r7, #8
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	0801933c 	.word	0x0801933c
 800b8d0:	08019358 	.word	0x08019358
 800b8d4:	080192c0 	.word	0x080192c0

0800b8d8 <_ZNK3etl5ipool15is_item_in_poolEPKc>:

    //*************************************************************************
    /// Check if the item belongs to this pool.
    //*************************************************************************
    bool is_item_in_pool(const char* p) const
 800b8d8:	b480      	push	{r7}
 800b8da:	b085      	sub	sp, #20
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
    {
      // Within the range of the buffer?
      intptr_t distance = p - p_buffer;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	683a      	ldr	r2, [r7, #0]
 800b8e8:	1ad3      	subs	r3, r2, r3
 800b8ea:	60fb      	str	r3, [r7, #12]
      bool is_within_range = (distance >= 0) && (distance <= intptr_t((Item_Size * Max_Size) - Item_Size));
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	db0c      	blt.n	800b90c <_ZNK3etl5ipool15is_item_in_poolEPKc+0x34>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	695b      	ldr	r3, [r3, #20]
 800b8f6:	3b01      	subs	r3, #1
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	6912      	ldr	r2, [r2, #16]
 800b8fc:	fb02 f303 	mul.w	r3, r2, r3
 800b900:	461a      	mov	r2, r3
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	4293      	cmp	r3, r2
 800b906:	dc01      	bgt.n	800b90c <_ZNK3etl5ipool15is_item_in_poolEPKc+0x34>
 800b908:	2301      	movs	r3, #1
 800b90a:	e000      	b.n	800b90e <_ZNK3etl5ipool15is_item_in_poolEPKc+0x36>
 800b90c:	2300      	movs	r3, #0
 800b90e:	72fb      	strb	r3, [r7, #11]

      // Modulus and division can be slow on some architectures, so only do this in debug.
#if defined(ETL_DEBUG)
      // Is the address on a valid object boundary?
      bool is_valid_address = ((distance % Item_Size) == 0);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	6912      	ldr	r2, [r2, #16]
 800b916:	fbb3 f1f2 	udiv	r1, r3, r2
 800b91a:	fb01 f202 	mul.w	r2, r1, r2
 800b91e:	1a9b      	subs	r3, r3, r2
 800b920:	2b00      	cmp	r3, #0
 800b922:	bf0c      	ite	eq
 800b924:	2301      	moveq	r3, #1
 800b926:	2300      	movne	r3, #0
 800b928:	72bb      	strb	r3, [r7, #10]
#else
      bool is_valid_address = true;
#endif

      return is_within_range && is_valid_address;
 800b92a:	7afb      	ldrb	r3, [r7, #11]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d004      	beq.n	800b93a <_ZNK3etl5ipool15is_item_in_poolEPKc+0x62>
 800b930:	7abb      	ldrb	r3, [r7, #10]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d001      	beq.n	800b93a <_ZNK3etl5ipool15is_item_in_poolEPKc+0x62>
 800b936:	2301      	movs	r3, #1
 800b938:	e000      	b.n	800b93c <_ZNK3etl5ipool15is_item_in_poolEPKc+0x64>
 800b93a:	2300      	movs	r3, #0
    }
 800b93c:	4618      	mov	r0, r3
 800b93e:	3714      	adds	r7, #20
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <_ZN3etl5ipoolD1Ev>:
    virtual ~ipool()
    {
    }
#else
  protected:
    ~ipool()
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
    {
    }
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	4618      	mov	r0, r3
 800b954:	370c      	adds	r7, #12
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr

0800b95e <_ZNK3etl8map_base4fullEv>:
    }

    //*************************************************************************
    /// Checks to see if the map is full.
    //*************************************************************************
    bool full() const
 800b95e:	b480      	push	{r7}
 800b960:	b083      	sub	sp, #12
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
    {
      return current_size == CAPACITY;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	429a      	cmp	r2, r3
 800b970:	bf0c      	ite	eq
 800b972:	2301      	moveq	r3, #1
 800b974:	2300      	movne	r3, #0
 800b976:	b2db      	uxtb	r3, r3
    }
 800b978:	4618      	mov	r0, r3
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <_ZN3etl8map_base4Node12mark_as_leafEv>:
      }

      //***********************************************************************
      /// Marks the node as a leaf.
      //***********************************************************************
      void mark_as_leaf()
 800b984:	b480      	push	{r7}
 800b986:	b083      	sub	sp, #12
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
      {
        weight = uint_least8_t(kNeither);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2202      	movs	r2, #2
 800b990:	721a      	strb	r2, [r3, #8]
        dir = uint_least8_t(kNeither);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2202      	movs	r2, #2
 800b996:	725a      	strb	r2, [r3, #9]
        children[0] = ETL_NULLPTR;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	601a      	str	r2, [r3, #0]
        children[1] = ETL_NULLPTR;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	605a      	str	r2, [r3, #4]
      }
 800b9a4:	bf00      	nop
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <_ZN3etl8map_baseC1Ej>:
    };

    //*************************************************************************
    /// The constructor that is called from derived classes.
    //*************************************************************************
    map_base(size_type max_size_)
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
      : current_size(0)
      , CAPACITY(max_size_)
      , root_node(ETL_NULLPTR)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	601a      	str	r2, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	683a      	ldr	r2, [r7, #0]
 800b9c4:	605a      	str	r2, [r3, #4]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	609a      	str	r2, [r3, #8]

    {
    }
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	370c      	adds	r7, #12
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr

0800b9da <_ZN3etl8map_baseD1Ev>:

    //*************************************************************************
    /// Destructor
    //*************************************************************************
    ~map_base()
 800b9da:	b480      	push	{r7}
 800b9dc:	b083      	sub	sp, #12
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
    {
    }
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE>:

    //*************************************************************************
    /// Balance the critical node at the position provided as needed
    //*************************************************************************
    void balance_node(Node*& critical_node)
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
    {
      // Step 1: Update weights for all children of the critical node up to the
      // newly inserted node. This step is costly (in terms of traversing nodes
      // multiple times during insertion) but doesn't require as much recursion
      Node* weight_node = critical_node->children[critical_node->dir];
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	683a      	ldr	r2, [r7, #0]
 800ba00:	6812      	ldr	r2, [r2, #0]
 800ba02:	7a52      	ldrb	r2, [r2, #9]
 800ba04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba08:	60fb      	str	r3, [r7, #12]
      while (weight_node)
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d01d      	beq.n	800ba4c <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x5c>
      {
        // Keep going until we reach a terminal node (dir == kNeither)
        if (uint_least8_t(kNeither) != weight_node->dir)
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	7a5b      	ldrb	r3, [r3, #9]
 800ba14:	2b02      	cmp	r3, #2
 800ba16:	d018      	beq.n	800ba4a <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x5a>
        {
          // Does this insert balance the previous weight factor value?
          if (weight_node->weight == 1 - weight_node->dir)
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	7a1b      	ldrb	r3, [r3, #8]
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	7a5b      	ldrb	r3, [r3, #9]
 800ba22:	f1c3 0301 	rsb	r3, r3, #1
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d103      	bne.n	800ba32 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x42>
          {
            weight_node->weight = uint_least8_t(kNeither);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2202      	movs	r2, #2
 800ba2e:	721a      	strb	r2, [r3, #8]
 800ba30:	e003      	b.n	800ba3a <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x4a>
          }
          else
          {
            weight_node->weight = weight_node->dir;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	7a5a      	ldrb	r2, [r3, #9]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	721a      	strb	r2, [r3, #8]
          }

          // Update weight factor node to point to next node
          weight_node = weight_node->children[weight_node->dir];
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	7a5b      	ldrb	r3, [r3, #9]
 800ba3e:	461a      	mov	r2, r3
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba46:	60fb      	str	r3, [r7, #12]
      while (weight_node)
 800ba48:	e7df      	b.n	800ba0a <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x1a>
        }
        else
        {
          // Stop loop, terminal node found
          break;
 800ba4a:	bf00      	nop
        }
      } // while(weight_node)

        // Step 2: Update weight for critical_node or rotate tree to balance node
      if (uint_least8_t(kNeither) == critical_node->weight)
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	7a1b      	ldrb	r3, [r3, #8]
 800ba52:	2b02      	cmp	r3, #2
 800ba54:	d106      	bne.n	800ba64 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x74>
      {
        critical_node->weight = critical_node->dir;
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	7a52      	ldrb	r2, [r2, #9]
 800ba60:	721a      	strb	r2, [r3, #8]
        {
          rotate_3node(critical_node, critical_node->dir,
            critical_node->children[critical_node->dir]->children[1 - critical_node->dir]->dir);
        }
      }
    }
 800ba62:	e039      	b.n	800bad8 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0xe8>
      else if (critical_node->dir != critical_node->weight)
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	7a5a      	ldrb	r2, [r3, #9]
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	7a1b      	ldrb	r3, [r3, #8]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d004      	beq.n	800ba7e <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x8e>
        critical_node->weight = uint_least8_t(kNeither);
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2202      	movs	r2, #2
 800ba7a:	721a      	strb	r2, [r3, #8]
    }
 800ba7c:	e02c      	b.n	800bad8 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0xe8>
        if (critical_node->weight == critical_node->children[critical_node->dir]->dir)
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	7a1a      	ldrb	r2, [r3, #8]
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	6839      	ldr	r1, [r7, #0]
 800ba8a:	6809      	ldr	r1, [r1, #0]
 800ba8c:	7a49      	ldrb	r1, [r1, #9]
 800ba8e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba92:	7a5b      	ldrb	r3, [r3, #9]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d108      	bne.n	800baaa <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0xba>
          rotate_2node(critical_node, critical_node->dir);
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	7a5b      	ldrb	r3, [r3, #9]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	6839      	ldr	r1, [r7, #0]
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 f81c 	bl	800bae0 <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
    }
 800baa8:	e016      	b.n	800bad8 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0xe8>
          rotate_3node(critical_node, critical_node->dir,
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	7a59      	ldrb	r1, [r3, #9]
            critical_node->children[critical_node->dir]->children[1 - critical_node->dir]->dir);
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	683a      	ldr	r2, [r7, #0]
 800bab6:	6812      	ldr	r2, [r2, #0]
 800bab8:	7a52      	ldrb	r2, [r2, #9]
 800baba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800babe:	683a      	ldr	r2, [r7, #0]
 800bac0:	6812      	ldr	r2, [r2, #0]
 800bac2:	7a52      	ldrb	r2, [r2, #9]
 800bac4:	f1c2 0201 	rsb	r2, r2, #1
 800bac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
          rotate_3node(critical_node, critical_node->dir,
 800bacc:	7a5b      	ldrb	r3, [r3, #9]
 800bace:	460a      	mov	r2, r1
 800bad0:	6839      	ldr	r1, [r7, #0]
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 f835 	bl	800bb42 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh>
    }
 800bad8:	bf00      	nop
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>:

    //*************************************************************************
    /// Rotate two nodes at the position provided the to balance the tree
    //*************************************************************************
    void rotate_2node(Node*& position, uint_least8_t dir)
 800bae0:	b480      	push	{r7}
 800bae2:	b087      	sub	sp, #28
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	4613      	mov	r3, r2
 800baec:	71fb      	strb	r3, [r7, #7]
      // B (new position) becomes the root
      // A (position) takes ownership of E as its left child
      // B (new position) takes ownership of A as its right child

      // Capture new root
      Node* new_root = position->children[dir];
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	79fa      	ldrb	r2, [r7, #7]
 800baf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baf8:	617b      	str	r3, [r7, #20]
      // Replace position's previous child with new root's other child
      position->children[dir] = new_root->children[1 - dir];
 800bafa:	79fb      	ldrb	r3, [r7, #7]
 800bafc:	f1c3 0001 	rsb	r0, r3, #1
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	79fa      	ldrb	r2, [r7, #7]
 800bb06:	6979      	ldr	r1, [r7, #20]
 800bb08:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800bb0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      // New root now becomes parent of current position
      new_root->children[1 - dir] = position;
 800bb10:	79fb      	ldrb	r3, [r7, #7]
 800bb12:	f1c3 0201 	rsb	r2, r3, #1
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	6819      	ldr	r1, [r3, #0]
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      // Clear weight factor from current position
      position->weight = uint_least8_t(kNeither);
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2202      	movs	r2, #2
 800bb26:	721a      	strb	r2, [r3, #8]
      // Newly detached right now becomes current position
      position = new_root;
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	697a      	ldr	r2, [r7, #20]
 800bb2c:	601a      	str	r2, [r3, #0]
      // Clear weight factor from new root
      position->weight = uint_least8_t(kNeither);
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2202      	movs	r2, #2
 800bb34:	721a      	strb	r2, [r3, #8]
    }
 800bb36:	bf00      	nop
 800bb38:	371c      	adds	r7, #28
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr

0800bb42 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh>:

    //*************************************************************************
    /// Rotate three nodes at the position provided the to balance the tree
    //*************************************************************************
    void rotate_3node(Node*& position, uint_least8_t dir, uint_least8_t third)
 800bb42:	b480      	push	{r7}
 800bb44:	b087      	sub	sp, #28
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	60f8      	str	r0, [r7, #12]
 800bb4a:	60b9      	str	r1, [r7, #8]
 800bb4c:	4611      	mov	r1, r2
 800bb4e:	461a      	mov	r2, r3
 800bb50:	460b      	mov	r3, r1
 800bb52:	71fb      	strb	r3, [r7, #7]
 800bb54:	4613      	mov	r3, r2
 800bb56:	71bb      	strb	r3, [r7, #6]
      // D (new position) becomes the root
      // A (position) takes ownership of F as its right child
      // C takes ownership of G as its left child

      // Capture new root (either E or D depending on dir)
      Node* new_root = position->children[dir]->children[1 - dir];
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	79fa      	ldrb	r2, [r7, #7]
 800bb5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb62:	79fa      	ldrb	r2, [r7, #7]
 800bb64:	f1c2 0201 	rsb	r2, r2, #1
 800bb68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb6c:	617b      	str	r3, [r7, #20]
      // Set weight factor for B or C based on F or G existing and being a different than dir
      position->children[dir]->weight = third != uint_least8_t(kNeither) && third != dir ? dir : uint_least8_t(kNeither);
 800bb6e:	79bb      	ldrb	r3, [r7, #6]
 800bb70:	2b02      	cmp	r3, #2
 800bb72:	d005      	beq.n	800bb80 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0x3e>
 800bb74:	79ba      	ldrb	r2, [r7, #6]
 800bb76:	79fb      	ldrb	r3, [r7, #7]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d001      	beq.n	800bb80 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0x3e>
 800bb7c:	79f9      	ldrb	r1, [r7, #7]
 800bb7e:	e000      	b.n	800bb82 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0x40>
 800bb80:	2102      	movs	r1, #2
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	79fa      	ldrb	r2, [r7, #7]
 800bb88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb8c:	460a      	mov	r2, r1
 800bb8e:	721a      	strb	r2, [r3, #8]

      // Detach new root from its tree (replace with new roots child)
      position->children[dir]->children[1 - dir] =
        new_root->children[dir];
 800bb90:	79f8      	ldrb	r0, [r7, #7]
      position->children[dir]->children[1 - dir] =
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	79fa      	ldrb	r2, [r7, #7]
 800bb98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb9c:	79fa      	ldrb	r2, [r7, #7]
 800bb9e:	f1c2 0201 	rsb	r2, r2, #1
        new_root->children[dir];
 800bba2:	6979      	ldr	r1, [r7, #20]
 800bba4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
      position->children[dir]->children[1 - dir] =
 800bba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      // Attach current left tree to new root
      new_root->children[dir] = position->children[dir];
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	79f9      	ldrb	r1, [r7, #7]
 800bbb2:	79fa      	ldrb	r2, [r7, #7]
 800bbb4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      // Set weight factor for A based on F or G
      position->weight = third != uint_least8_t(kNeither) && third == dir ? 1 - dir : uint_least8_t(kNeither);
 800bbbe:	79bb      	ldrb	r3, [r7, #6]
 800bbc0:	2b02      	cmp	r3, #2
 800bbc2:	d008      	beq.n	800bbd6 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0x94>
 800bbc4:	79ba      	ldrb	r2, [r7, #6]
 800bbc6:	79fb      	ldrb	r3, [r7, #7]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d104      	bne.n	800bbd6 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0x94>
 800bbcc:	79fb      	ldrb	r3, [r7, #7]
 800bbce:	f1c3 0301 	rsb	r3, r3, #1
 800bbd2:	b2da      	uxtb	r2, r3
 800bbd4:	e000      	b.n	800bbd8 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0x96>
 800bbd6:	2202      	movs	r2, #2
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	721a      	strb	r2, [r3, #8]

      // Move new root's right tree to current roots left tree
      position->children[dir] = new_root->children[1 - dir];
 800bbde:	79fb      	ldrb	r3, [r7, #7]
 800bbe0:	f1c3 0001 	rsb	r0, r3, #1
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	79fa      	ldrb	r2, [r7, #7]
 800bbea:	6979      	ldr	r1, [r7, #20]
 800bbec:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800bbf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      // Attach current root to new roots right tree
      new_root->children[1 - dir] = position;
 800bbf4:	79fb      	ldrb	r3, [r7, #7]
 800bbf6:	f1c3 0201 	rsb	r2, r3, #1
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	6819      	ldr	r1, [r3, #0]
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      // Replace current position with new root
      position = new_root;
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	697a      	ldr	r2, [r7, #20]
 800bc08:	601a      	str	r2, [r3, #0]
      // Clear weight factor for new current position
      position->weight = uint_least8_t(kNeither);
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2202      	movs	r2, #2
 800bc10:	721a      	strb	r2, [r3, #8]
    }
 800bc12:	bf00      	nop
 800bc14:	371c      	adds	r7, #28
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr

0800bc1e <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa>:

    //*************************************************************************
    /// Find the node whose key would go before all the other keys from the
    /// position provided
    //*************************************************************************
    Node* find_limit_node(Node* position, const int8_t dir) const
 800bc1e:	b480      	push	{r7}
 800bc20:	b087      	sub	sp, #28
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	60f8      	str	r0, [r7, #12]
 800bc26:	60b9      	str	r1, [r7, #8]
 800bc28:	4613      	mov	r3, r2
 800bc2a:	71fb      	strb	r3, [r7, #7]
    {
      // Something at this position and in the direction specified? keep going
      Node* limit_node = position;
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	617b      	str	r3, [r7, #20]
      while (limit_node && limit_node->children[dir])
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d00d      	beq.n	800bc52 <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa+0x34>
 800bc36:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d006      	beq.n	800bc52 <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa+0x34>
      {
        limit_node = limit_node->children[dir];
 800bc44:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc4e:	617b      	str	r3, [r7, #20]
      while (limit_node && limit_node->children[dir])
 800bc50:	e7ee      	b.n	800bc30 <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa+0x12>
      }

      // Return the limit node position found
      return limit_node;
 800bc52:	697b      	ldr	r3, [r7, #20]
    }
 800bc54:	4618      	mov	r0, r3
 800bc56:	371c      	adds	r7, #28
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <_ZN3etl8map_base11attach_nodeERPNS0_4NodeERS1_>:
    }

    //*************************************************************************
    /// Attach the provided node to the position provided
    //*************************************************************************
    void attach_node(Node*& position, Node& node)
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	607a      	str	r2, [r7, #4]
    {
      // Mark new node as leaf on attach to tree at position provided
      node.mark_as_leaf();
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f7ff fe89 	bl	800b984 <_ZN3etl8map_base4Node12mark_as_leafEv>

      // Add the node here
      position = &node;
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	601a      	str	r2, [r3, #0]

      // One more.
      ++current_size;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	1c5a      	adds	r2, r3, #1
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	601a      	str	r2, [r3, #0]
    }
 800bc82:	bf00      	nop
 800bc84:	3710      	adds	r7, #16
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <_ZN3etl8map_base11detach_nodeERPNS0_4NodeES3_>:

    //*************************************************************************
    /// Detach the node at the position provided
    //*************************************************************************
    void detach_node(Node*& position, Node*& replacement)
 800bc8a:	b480      	push	{r7}
 800bc8c:	b087      	sub	sp, #28
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	60f8      	str	r0, [r7, #12]
 800bc92:	60b9      	str	r1, [r7, #8]
 800bc94:	607a      	str	r2, [r7, #4]
    {
      // Make temporary copy of actual nodes involved because we might lose
      // their references in the process (e.g. position is the same as
      // replacement or replacement is a child of position)
      Node* detached = position;
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	617b      	str	r3, [r7, #20]
      Node* swap = replacement;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	613b      	str	r3, [r7, #16]

      // Update current position to point to swap (replacement) node first
      position = swap;
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	693a      	ldr	r2, [r7, #16]
 800bca6:	601a      	str	r2, [r3, #0]

      // Update replacement node to point to child in opposite direction
      // otherwise we might lose the other child of the swap node
      replacement = swap->children[1 - swap->dir];
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	7a5b      	ldrb	r3, [r3, #9]
 800bcac:	f1c3 0201 	rsb	r2, r3, #1
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	601a      	str	r2, [r3, #0]

      // Point swap node to detached node's children and weight
      swap->children[kLeft] = detached->children[kLeft];
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	601a      	str	r2, [r3, #0]
      swap->children[kRight] = detached->children[kRight];
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	685a      	ldr	r2, [r3, #4]
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	605a      	str	r2, [r3, #4]
      swap->weight = detached->weight;
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	7a1a      	ldrb	r2, [r3, #8]
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	721a      	strb	r2, [r3, #8]
    }
 800bcd2:	bf00      	nop
 800bcd4:	371c      	adds	r7, #28
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr
	...

0800bce0 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev>:
namespace SolarGators {
namespace DataModules {

// TODO: Currently left turn and right turn are able to be true at the same time

  SteeringController::SteeringController()
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7ff fb52 	bl	800b394 <_ZN11SolarGators11DataModules8SteeringC1Ev>
 800bcf0:	4a3f      	ldr	r2, [pc, #252]	; (800bdf0 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0x110>)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	601a      	str	r2, [r3, #0]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	33fc      	adds	r3, #252	; 0xfc
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	601a      	str	r2, [r3, #0]
 800bcfe:	605a      	str	r2, [r3, #4]
 800bd00:	609a      	str	r2, [r3, #8]
 800bd02:	60da      	str	r2, [r3, #12]
 800bd04:	611a      	str	r2, [r3, #16]
 800bd06:	615a      	str	r2, [r3, #20]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	4a3a      	ldr	r2, [pc, #232]	; (800bdf4 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0x114>)
 800bd0c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2250      	movs	r2, #80	; 0x50
 800bd20:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2220      	movs	r2, #32
 800bd34:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f503 735d 	add.w	r3, r3, #884	; 0x374
 800bd3e:	2224      	movs	r2, #36	; 0x24
 800bd40:	2100      	movs	r1, #0
 800bd42:	4618      	mov	r0, r3
 800bd44:	f00c fa1c 	bl	8018180 <memset>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	4a2b      	ldr	r2, [pc, #172]	; (800bdf8 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0x118>)
 800bd4c:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f503 7246 	add.w	r2, r3, #792	; 0x318
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	225c      	movs	r2, #92	; 0x5c
 800bd60:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f503 728c 	add.w	r2, r3, #280	; 0x118
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd76:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2237      	movs	r2, #55	; 0x37
 800bd7e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f503 7366 	add.w	r3, r3, #920	; 0x398
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f000 fb4c 	bl	800c426 <_ZN3etl3mapItN11SolarGators7Drivers6ButtonELj10ENS_4lessItEEEC1Ev>
  {
    button_handle_ = osThreadNew((osThreadFunc_t)&SteeringController::ButtonHandler, this, &button_attributes_);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f503 735d 	add.w	r3, r3, #884	; 0x374
 800bd94:	461a      	mov	r2, r3
 800bd96:	6879      	ldr	r1, [r7, #4]
 800bd98:	4818      	ldr	r0, [pc, #96]	; (800bdfc <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0x11c>)
 800bd9a:	f007 fd86 	bl	80138aa <osThreadNew>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    button_event_ = osEventFlagsNew(NULL);
 800bda6:	2000      	movs	r0, #0
 800bda8:	f007 feec 	bl	8013b84 <osEventFlagsNew>
 800bdac:	4602      	mov	r2, r0
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (button_event_ == NULL)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d101      	bne.n	800bdc2 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0xe2>
    {
        Error_Handler();
 800bdbe:	f7f6 fa21 	bl	8002204 <Error_Handler>
    }
    button_queue_ = osMessageQueueNew(16, sizeof(uint16_t), &button_queue_attributes_);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	33fc      	adds	r3, #252	; 0xfc
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	2102      	movs	r1, #2
 800bdca:	2010      	movs	r0, #16
 800bdcc:	f008 fa12 	bl	80141f4 <osMessageQueueNew>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    if (button_queue_ == NULL)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d101      	bne.n	800bde6 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0x106>
    {
        Error_Handler();
 800bde2:	f7f6 fa0f 	bl	8002204 <Error_Handler>
    }
  }
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	4618      	mov	r0, r3
 800bdea:	3708      	adds	r7, #8
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	0801a3e8 	.word	0x0801a3e8
 800bdf4:	08019380 	.word	0x08019380
 800bdf8:	08019390 	.word	0x08019390
 800bdfc:	0800c36f 	.word	0x0800c36f

0800be00 <_ZN11SolarGators11DataModules18SteeringControllerD1Ev>:

  SteeringController::~SteeringController() {
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	4a0e      	ldr	r2, [pc, #56]	; (800be44 <_ZN11SolarGators11DataModules18SteeringControllerD1Ev+0x44>)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	601a      	str	r2, [r3, #0]
    osEventFlagsDelete(button_event_);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be14:	4618      	mov	r0, r3
 800be16:	f007 ff9f 	bl	8013d58 <osEventFlagsDelete>
    osMessageQueueDelete(button_queue_);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be20:	4618      	mov	r0, r3
 800be22:	f008 fb39 	bl	8014498 <osMessageQueueDelete>
  SteeringController::~SteeringController() {
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f503 7366 	add.w	r3, r3, #920	; 0x398
 800be2c:	4618      	mov	r0, r3
 800be2e:	f000 fb13 	bl	800c458 <_ZN3etl3mapItN11SolarGators7Drivers6ButtonELj10ENS_4lessItEEED1Ev>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4618      	mov	r0, r3
 800be36:	f7ff faf3 	bl	800b420 <_ZN11SolarGators11DataModules8SteeringD1Ev>
  }
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4618      	mov	r0, r3
 800be3e:	3708      	adds	r7, #8
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}
 800be44:	0801a3e8 	.word	0x0801a3e8

0800be48 <_ZN11SolarGators11DataModules18SteeringControllerD0Ev>:
  SteeringController::~SteeringController() {
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  }
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f7ff ffd5 	bl	800be00 <_ZN11SolarGators11DataModules18SteeringControllerD1Ev>
 800be56:	f240 51cc 	movw	r1, #1484	; 0x5cc
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f00c f87e 	bl	8017f5c <_ZdlPvj>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	4618      	mov	r0, r3
 800be64:	3708      	adds	r7, #8
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}

0800be6a <_ZN11SolarGators11DataModules18SteeringController20EnableLeftTurnSignalEv>:

  void SteeringController::EnableLeftTurnSignal()
  {
 800be6a:	b480      	push	{r7}
 800be6c:	b083      	sub	sp, #12
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
    if(!hazards_)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800be78:	f083 0301 	eor.w	r3, r3, #1
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d003      	beq.n	800be8a <_ZN11SolarGators11DataModules18SteeringController20EnableLeftTurnSignalEv+0x20>
      left_turn_ = true;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2201      	movs	r2, #1
 800be86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  }
 800be8a:	bf00      	nop
 800be8c:	370c      	adds	r7, #12
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr

0800be96 <_ZN11SolarGators11DataModules18SteeringController21DisableLeftTurnSignalEv>:

  void SteeringController::DisableLeftTurnSignal()
  {
 800be96:	b480      	push	{r7}
 800be98:	b083      	sub	sp, #12
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
    left_turn_ = false;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2200      	movs	r2, #0
 800bea2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  }
 800bea6:	bf00      	nop
 800bea8:	370c      	adds	r7, #12
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr

0800beb2 <_ZN11SolarGators11DataModules18SteeringController20ToggleLeftTurnSignalEv>:

  void SteeringController::ToggleLeftTurnSignal()
  {
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b082      	sub	sp, #8
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
    if(left_turn_) {
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d003      	beq.n	800becc <_ZN11SolarGators11DataModules18SteeringController20ToggleLeftTurnSignalEv+0x1a>
      DisableLeftTurnSignal();
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f7ff ffe6 	bl	800be96 <_ZN11SolarGators11DataModules18SteeringController21DisableLeftTurnSignalEv>
    } else {
      EnableLeftTurnSignal();
      DisableRightTurnSignal();
      hazards_ = false;
    }
  }
 800beca:	e009      	b.n	800bee0 <_ZN11SolarGators11DataModules18SteeringController20ToggleLeftTurnSignalEv+0x2e>
      EnableLeftTurnSignal();
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f7ff ffcc 	bl	800be6a <_ZN11SolarGators11DataModules18SteeringController20EnableLeftTurnSignalEv>
      DisableRightTurnSignal();
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 f81e 	bl	800bf14 <_ZN11SolarGators11DataModules18SteeringController22DisableRightTurnSignalEv>
      hazards_ = false;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
  }
 800bee0:	bf00      	nop
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <_ZN11SolarGators11DataModules18SteeringController21EnableRightTurnSignalEv>:

  void SteeringController::EnableRightTurnSignal()
  {
 800bee8:	b480      	push	{r7}
 800beea:	b083      	sub	sp, #12
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
    if(!hazards_)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800bef6:	f083 0301 	eor.w	r3, r3, #1
 800befa:	b2db      	uxtb	r3, r3
 800befc:	2b00      	cmp	r3, #0
 800befe:	d003      	beq.n	800bf08 <_ZN11SolarGators11DataModules18SteeringController21EnableRightTurnSignalEv+0x20>
      right_turn_ = true;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
  }
 800bf08:	bf00      	nop
 800bf0a:	370c      	adds	r7, #12
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <_ZN11SolarGators11DataModules18SteeringController22DisableRightTurnSignalEv>:

  void SteeringController::DisableRightTurnSignal()
  {
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
    right_turn_ = false;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
  }
 800bf24:	bf00      	nop
 800bf26:	370c      	adds	r7, #12
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <_ZN11SolarGators11DataModules18SteeringController21ToggleRightTurnSignalEv>:

  void SteeringController::ToggleRightTurnSignal()
  {
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
    if(right_turn_) {
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d003      	beq.n	800bf4a <_ZN11SolarGators11DataModules18SteeringController21ToggleRightTurnSignalEv+0x1a>
      DisableRightTurnSignal();
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f7ff ffe6 	bl	800bf14 <_ZN11SolarGators11DataModules18SteeringController22DisableRightTurnSignalEv>
    } else {
      EnableRightTurnSignal();
      DisableLeftTurnSignal();
	  hazards_ = false;
    }
  }
 800bf48:	e009      	b.n	800bf5e <_ZN11SolarGators11DataModules18SteeringController21ToggleRightTurnSignalEv+0x2e>
      EnableRightTurnSignal();
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f7ff ffcc 	bl	800bee8 <_ZN11SolarGators11DataModules18SteeringController21EnableRightTurnSignalEv>
      DisableLeftTurnSignal();
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f7ff ffa0 	bl	800be96 <_ZN11SolarGators11DataModules18SteeringController21DisableLeftTurnSignalEv>
	  hazards_ = false;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
  }
 800bf5e:	bf00      	nop
 800bf60:	3708      	adds	r7, #8
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <_ZN11SolarGators11DataModules18SteeringController13EnableHazardsEv>:

  void SteeringController::EnableHazards()
  {
 800bf66:	b580      	push	{r7, lr}
 800bf68:	b082      	sub	sp, #8
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
    DisableLeftTurnSignal();
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f7ff ff91 	bl	800be96 <_ZN11SolarGators11DataModules18SteeringController21DisableLeftTurnSignalEv>
    DisableRightTurnSignal();
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f7ff ffcd 	bl	800bf14 <_ZN11SolarGators11DataModules18SteeringController22DisableRightTurnSignalEv>
    hazards_ = true;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
  }
 800bf82:	bf00      	nop
 800bf84:	3708      	adds	r7, #8
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <_ZN11SolarGators11DataModules18SteeringController14DisableHazardsEv>:

  void SteeringController::DisableHazards()
  {
 800bf8a:	b480      	push	{r7}
 800bf8c:	b083      	sub	sp, #12
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
    hazards_ = false;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2200      	movs	r2, #0
 800bf96:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
  }
 800bf9a:	bf00      	nop
 800bf9c:	370c      	adds	r7, #12
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr

0800bfa6 <_ZN11SolarGators11DataModules18SteeringController13ToggleHazardsEv>:

  void SteeringController::ToggleHazards()
  {
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b082      	sub	sp, #8
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
    if(hazards_) {
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d003      	beq.n	800bfc0 <_ZN11SolarGators11DataModules18SteeringController13ToggleHazardsEv+0x1a>
      DisableHazards();
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f7ff ffe6 	bl	800bf8a <_ZN11SolarGators11DataModules18SteeringController14DisableHazardsEv>
  	} else {
      EnableHazards();
      DisableRightTurnSignal();
      DisableLeftTurnSignal();
    }
  }
 800bfbe:	e008      	b.n	800bfd2 <_ZN11SolarGators11DataModules18SteeringController13ToggleHazardsEv+0x2c>
      EnableHazards();
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f7ff ffd0 	bl	800bf66 <_ZN11SolarGators11DataModules18SteeringController13EnableHazardsEv>
      DisableRightTurnSignal();
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f7ff ffa4 	bl	800bf14 <_ZN11SolarGators11DataModules18SteeringController22DisableRightTurnSignalEv>
      DisableLeftTurnSignal();
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f7ff ff62 	bl	800be96 <_ZN11SolarGators11DataModules18SteeringController21DisableLeftTurnSignalEv>
  }
 800bfd2:	bf00      	nop
 800bfd4:	3708      	adds	r7, #8
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <_ZN11SolarGators11DataModules18SteeringController12EnableCruiseEv>:
  {
    bps_fault_ = fault;
  }

  void SteeringController::EnableCruise()
  {
 800bfda:	b480      	push	{r7}
 800bfdc:	b083      	sub	sp, #12
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
    // Don't allow cruise to be enabled in reverse
    if(!reverse_)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bfe8:	f083 0301 	eor.w	r3, r3, #1
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d003      	beq.n	800bffa <_ZN11SolarGators11DataModules18SteeringController12EnableCruiseEv+0x20>
      cruise_enable_ = true;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2201      	movs	r2, #1
 800bff6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  }
 800bffa:	bf00      	nop
 800bffc:	370c      	adds	r7, #12
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr

0800c006 <_ZN11SolarGators11DataModules18SteeringController13DisableCruiseEv>:

  void SteeringController::DisableCruise()
  {
 800c006:	b480      	push	{r7}
 800c008:	b083      	sub	sp, #12
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
    cruise_enable_ = false;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2200      	movs	r2, #0
 800c012:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  }
 800c016:	bf00      	nop
 800c018:	370c      	adds	r7, #12
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr

0800c022 <_ZN11SolarGators11DataModules18SteeringController12ToggleCruiseEv>:
  void SteeringController::ToggleCruise()
  {
 800c022:	b580      	push	{r7, lr}
 800c024:	b082      	sub	sp, #8
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
    if(cruise_enable_)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c030:	2b00      	cmp	r3, #0
 800c032:	d003      	beq.n	800c03c <_ZN11SolarGators11DataModules18SteeringController12ToggleCruiseEv+0x1a>
      DisableCruise();
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f7ff ffe6 	bl	800c006 <_ZN11SolarGators11DataModules18SteeringController13DisableCruiseEv>
    else
      EnableCruise();
  }
 800c03a:	e002      	b.n	800c042 <_ZN11SolarGators11DataModules18SteeringController12ToggleCruiseEv+0x20>
      EnableCruise();
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f7ff ffcc 	bl	800bfda <_ZN11SolarGators11DataModules18SteeringController12EnableCruiseEv>
  }
 800c042:	bf00      	nop
 800c044:	3708      	adds	r7, #8
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}

0800c04a <_ZN11SolarGators11DataModules18SteeringController16EnableHeadlightsEv>:

  void SteeringController::EnableHeadlights()
  {
 800c04a:	b480      	push	{r7}
 800c04c:	b083      	sub	sp, #12
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
    headlights_ = true;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2201      	movs	r2, #1
 800c056:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  }
 800c05a:	bf00      	nop
 800c05c:	370c      	adds	r7, #12
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr

0800c066 <_ZN11SolarGators11DataModules18SteeringController17DisableHeadlightsEv>:

  void SteeringController::DisableHeadlights()
  {
 800c066:	b480      	push	{r7}
 800c068:	b083      	sub	sp, #12
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
    headlights_ = false;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2200      	movs	r2, #0
 800c072:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  }
 800c076:	bf00      	nop
 800c078:	370c      	adds	r7, #12
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr

0800c082 <_ZN11SolarGators11DataModules18SteeringController16ToggleHeadlightsEv>:

  void SteeringController::ToggleHeadlights()
  {
 800c082:	b580      	push	{r7, lr}
 800c084:	b082      	sub	sp, #8
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
    if(headlights_)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800c090:	2b00      	cmp	r3, #0
 800c092:	d003      	beq.n	800c09c <_ZN11SolarGators11DataModules18SteeringController16ToggleHeadlightsEv+0x1a>
      DisableHeadlights();
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f7ff ffe6 	bl	800c066 <_ZN11SolarGators11DataModules18SteeringController17DisableHeadlightsEv>
    else
      EnableHeadlights();
  }
 800c09a:	e002      	b.n	800c0a2 <_ZN11SolarGators11DataModules18SteeringController16ToggleHeadlightsEv+0x20>
      EnableHeadlights();
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f7ff ffd4 	bl	800c04a <_ZN11SolarGators11DataModules18SteeringController16EnableHeadlightsEv>
  }
 800c0a2:	bf00      	nop
 800c0a4:	3708      	adds	r7, #8
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}

0800c0aa <_ZN11SolarGators11DataModules18SteeringController10EnableHornEv>:

  void SteeringController::EnableHorn()
  {
 800c0aa:	b480      	push	{r7}
 800c0ac:	b083      	sub	sp, #12
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
    horn_ = true;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  }
 800c0ba:	bf00      	nop
 800c0bc:	370c      	adds	r7, #12
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr

0800c0c6 <_ZN11SolarGators11DataModules18SteeringController11DisableHornEv>:

  void SteeringController::DisableHorn()
  {
 800c0c6:	b480      	push	{r7}
 800c0c8:	b083      	sub	sp, #12
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
    horn_ = false;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  }
 800c0d6:	bf00      	nop
 800c0d8:	370c      	adds	r7, #12
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr

0800c0e2 <_ZN11SolarGators11DataModules18SteeringController19IncreaseCruiseSpeedEv>:
    else
      EnableHorn();
  }

  void SteeringController::IncreaseCruiseSpeed()
  {
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b082      	sub	sp, #8
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
	  if (!regen_) {
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d10c      	bne.n	800c10e <_ZN11SolarGators11DataModules18SteeringController19IncreaseCruiseSpeedEv+0x2c>
		  SetCruiseSpeed(cruise_speed_++);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c0fa:	1c5a      	adds	r2, r3, #1
 800c0fc:	b2d1      	uxtb	r1, r2
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	f882 1081 	strb.w	r1, [r2, #129]	; 0x81
 800c104:	4619      	mov	r1, r3
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 f825 	bl	800c156 <_ZN11SolarGators11DataModules18SteeringController14SetCruiseSpeedEh>
	  } else {
		  IncreaseRegen();
	  }
  }
 800c10c:	e002      	b.n	800c114 <_ZN11SolarGators11DataModules18SteeringController19IncreaseCruiseSpeedEv+0x32>
		  IncreaseRegen();
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 f837 	bl	800c182 <_ZN11SolarGators11DataModules18SteeringController13IncreaseRegenEv>
  }
 800c114:	bf00      	nop
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <_ZN11SolarGators11DataModules18SteeringController19DecreaseCruiseSpeedEv>:

  void SteeringController::DecreaseCruiseSpeed()
  {
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
	  if (!regen_) {
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d10c      	bne.n	800c148 <_ZN11SolarGators11DataModules18SteeringController19DecreaseCruiseSpeedEv+0x2c>
		  SetCruiseSpeed(cruise_speed_--);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c134:	1e5a      	subs	r2, r3, #1
 800c136:	b2d1      	uxtb	r1, r2
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	f882 1081 	strb.w	r1, [r2, #129]	; 0x81
 800c13e:	4619      	mov	r1, r3
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 f808 	bl	800c156 <_ZN11SolarGators11DataModules18SteeringController14SetCruiseSpeedEh>
	  } else {
		  DecreaseRegen();
	  }
  }
 800c146:	e002      	b.n	800c14e <_ZN11SolarGators11DataModules18SteeringController19DecreaseCruiseSpeedEv+0x32>
		  DecreaseRegen();
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f000 f836 	bl	800c1ba <_ZN11SolarGators11DataModules18SteeringController13DecreaseRegenEv>
  }
 800c14e:	bf00      	nop
 800c150:	3708      	adds	r7, #8
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <_ZN11SolarGators11DataModules18SteeringController14SetCruiseSpeedEh>:

  void SteeringController::SetCruiseSpeed(uint8_t speed)
  {
 800c156:	b480      	push	{r7}
 800c158:	b083      	sub	sp, #12
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
 800c15e:	460b      	mov	r3, r1
 800c160:	70fb      	strb	r3, [r7, #3]
    // Make sure the the requested cruise speed is acceptable
    if(speed < Max_Cruise_Speed_ && speed > Min_Cruise_Speed_)
 800c162:	78fb      	ldrb	r3, [r7, #3]
 800c164:	2bdb      	cmp	r3, #219	; 0xdb
 800c166:	d806      	bhi.n	800c176 <_ZN11SolarGators11DataModules18SteeringController14SetCruiseSpeedEh+0x20>
 800c168:	78fb      	ldrb	r3, [r7, #3]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d003      	beq.n	800c176 <_ZN11SolarGators11DataModules18SteeringController14SetCruiseSpeedEh+0x20>
      cruise_speed_ = speed;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	78fa      	ldrb	r2, [r7, #3]
 800c172:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }
 800c176:	bf00      	nop
 800c178:	370c      	adds	r7, #12
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr

0800c182 <_ZN11SolarGators11DataModules18SteeringController13IncreaseRegenEv>:

  void SteeringController::IncreaseRegen() {
 800c182:	b480      	push	{r7}
 800c184:	b083      	sub	sp, #12
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
	  if (regen_ > 0 && regen_ < 3) {
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800c190:	2b00      	cmp	r3, #0
 800c192:	d00c      	beq.n	800c1ae <_ZN11SolarGators11DataModules18SteeringController13IncreaseRegenEv+0x2c>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800c19a:	2b02      	cmp	r3, #2
 800c19c:	d807      	bhi.n	800c1ae <_ZN11SolarGators11DataModules18SteeringController13IncreaseRegenEv+0x2c>
		  regen_++;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	b2da      	uxtb	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	  }
  }
 800c1ae:	bf00      	nop
 800c1b0:	370c      	adds	r7, #12
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr

0800c1ba <_ZN11SolarGators11DataModules18SteeringController13DecreaseRegenEv>:

  void SteeringController::DecreaseRegen() {
 800c1ba:	b480      	push	{r7}
 800c1bc:	b083      	sub	sp, #12
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
	  if (regen_ > 1) {
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d907      	bls.n	800c1dc <_ZN11SolarGators11DataModules18SteeringController13DecreaseRegenEv+0x22>
		  regen_--;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800c1d2:	3b01      	subs	r3, #1
 800c1d4:	b2da      	uxtb	r2, r3
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	  }
  }
 800c1dc:	bf00      	nop
 800c1de:	370c      	adds	r7, #12
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <_ZN11SolarGators11DataModules18SteeringController11EnableRegenEv>:

  void SteeringController::EnableRegen() {
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
	  if (!regen_) {
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d103      	bne.n	800c202 <_ZN11SolarGators11DataModules18SteeringController11EnableRegenEv+0x1a>
		  regen_ = 3;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2203      	movs	r2, #3
 800c1fe:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	  }
  }
 800c202:	bf00      	nop
 800c204:	370c      	adds	r7, #12
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr

0800c20e <_ZN11SolarGators11DataModules18SteeringController12DisableRegenEv>:

  void SteeringController::DisableRegen() {
 800c20e:	b480      	push	{r7}
 800c210:	b083      	sub	sp, #12
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
	  regen_ = 0;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  }
 800c21e:	bf00      	nop
 800c220:	370c      	adds	r7, #12
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr

0800c22a <_ZN11SolarGators11DataModules18SteeringController13EnableReverseEv>:

  void SteeringController::EnableReverse()
  {
 800c22a:	b580      	push	{r7, lr}
 800c22c:	b082      	sub	sp, #8
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
    // Disable cruise if switching into reverse (should never need to happen but just in case)
    DisableCruise();
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f7ff fee7 	bl	800c006 <_ZN11SolarGators11DataModules18SteeringController13DisableCruiseEv>
    reverse_ = true;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2201      	movs	r2, #1
 800c23c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }
 800c240:	bf00      	nop
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <_ZN11SolarGators11DataModules18SteeringController14DisableReverseEv>:

  void SteeringController::DisableReverse()
  {
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
    reverse_ = false;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }
 800c258:	bf00      	nop
 800c25a:	370c      	adds	r7, #12
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <_ZN11SolarGators11DataModules18SteeringController13ToggleReverseEv>:

  void SteeringController::ToggleReverse()
  {
 800c264:	b580      	push	{r7, lr}
 800c266:	b082      	sub	sp, #8
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
    if(reverse_)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c272:	2b00      	cmp	r3, #0
 800c274:	d003      	beq.n	800c27e <_ZN11SolarGators11DataModules18SteeringController13ToggleReverseEv+0x1a>
      DisableReverse();
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f7ff ffe6 	bl	800c248 <_ZN11SolarGators11DataModules18SteeringController14DisableReverseEv>
    else
      EnableReverse();
  }
 800c27c:	e002      	b.n	800c284 <_ZN11SolarGators11DataModules18SteeringController13ToggleReverseEv+0x20>
      EnableReverse();
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f7ff ffd3 	bl	800c22a <_ZN11SolarGators11DataModules18SteeringController13EnableReverseEv>
  }
 800c284:	bf00      	nop
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <_ZN11SolarGators11DataModules18SteeringController9EnableEcoEv>:

  void SteeringController::EnableEco()
  {
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
    eco_enable_ = true;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2201      	movs	r2, #1
 800c298:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
 800c29c:	bf00      	nop
 800c29e:	370c      	adds	r7, #12
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr

0800c2a8 <_ZN11SolarGators11DataModules18SteeringController11HandlePressEt>:
    else
      EnableEco();
  }

  void SteeringController::HandlePress(uint16_t pin)
  {
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	807b      	strh	r3, [r7, #2]
    // Handles calling the action debouncing
    osEventFlagsSet(button_event_, 0x1);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2ba:	2101      	movs	r1, #1
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f007 fca1 	bl	8013c04 <osEventFlagsSet>
    osMessageQueuePut(button_queue_, &pin, 0, 0);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 800c2c8:	1cb9      	adds	r1, r7, #2
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f008 f805 	bl	80142dc <osMessageQueuePut>
  }
 800c2d2:	bf00      	nop
 800c2d4:	3708      	adds	r7, #8
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <_ZNSt4pairIKtN11SolarGators7Drivers6ButtonEED1Ev>:
   *  @tparam _T2  Type of second object.
   *
   *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
   */
  template<typename _T1, typename _T2>
    struct pair
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	b082      	sub	sp, #8
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	6078      	str	r0, [r7, #4]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f001 f8e2 	bl	800d4b0 <_ZN11SolarGators7Drivers6ButtonD1Ev>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3708      	adds	r7, #8
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <_ZNSt4pairIN3etl4imapItN11SolarGators7Drivers6ButtonENS0_4lessItEEE8iteratorEbED1Ev>:
 800c2f6:	b580      	push	{r7, lr}
 800c2f8:	b082      	sub	sp, #8
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	4618      	mov	r0, r3
 800c302:	f000 f95d 	bl	800c5c0 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorD1Ev>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	4618      	mov	r0, r3
 800c30a:	3708      	adds	r7, #8
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>:

  void SteeringController::AddButton(Drivers::Button* button)
  {
 800c310:	b590      	push	{r4, r7, lr}
 800c312:	b093      	sub	sp, #76	; 0x4c
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
    buttons_.insert(etl::make_pair(button->pin_, *button));
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f503 7466 	add.w	r4, r3, #920	; 0x398
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	f103 0110 	add.w	r1, r3, #16
 800c326:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c32a:	683a      	ldr	r2, [r7, #0]
 800c32c:	4618      	mov	r0, r3
 800c32e:	f000 f8a9 	bl	800c484 <_ZN3etl9make_pairIRtRN11SolarGators7Drivers6ButtonEEENS_4pairIT_T0_EEOS7_OS8_>
 800c332:	f107 0318 	add.w	r3, r7, #24
 800c336:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c33a:	4611      	mov	r1, r2
 800c33c:	4618      	mov	r0, r3
 800c33e:	f000 f8cd 	bl	800c4dc <_ZN3etl4pairIRtRN11SolarGators7Drivers6ButtonEEcvSt4pairIT_T0_EIKtS4_EEv>
 800c342:	f107 030c 	add.w	r3, r7, #12
 800c346:	f107 0218 	add.w	r2, r7, #24
 800c34a:	4621      	mov	r1, r4
 800c34c:	4618      	mov	r0, r3
 800c34e:	f000 f8e3 	bl	800c518 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE6insertEOSt4pairIKtS3_E>
 800c352:	f107 030c 	add.w	r3, r7, #12
 800c356:	4618      	mov	r0, r3
 800c358:	f7ff ffcd 	bl	800c2f6 <_ZNSt4pairIN3etl4imapItN11SolarGators7Drivers6ButtonENS0_4lessItEEE8iteratorEbED1Ev>
 800c35c:	f107 0318 	add.w	r3, r7, #24
 800c360:	4618      	mov	r0, r3
 800c362:	f7ff ffba 	bl	800c2da <_ZNSt4pairIKtN11SolarGators7Drivers6ButtonEED1Ev>
  }
 800c366:	bf00      	nop
 800c368:	374c      	adds	r7, #76	; 0x4c
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd90      	pop	{r4, r7, pc}

0800c36e <_ZN11SolarGators11DataModules18SteeringController13ButtonHandlerEv>:

  void SteeringController::ButtonHandler()
  {
 800c36e:	b580      	push	{r7, lr}
 800c370:	b086      	sub	sp, #24
 800c372:	af00      	add	r7, sp, #0
 800c374:	6078      	str	r0, [r7, #4]
    while(1)
    {
      // Wait for event to be set, no timeout
      osEventFlagsWait(button_event_, 0x1, osFlagsWaitAny, osWaitForever);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800c37c:	f04f 33ff 	mov.w	r3, #4294967295
 800c380:	2200      	movs	r2, #0
 800c382:	2101      	movs	r1, #1
 800c384:	f007 fc82 	bl	8013c8c <osEventFlagsWait>
      while(osMessageQueueGetCount(button_queue_) > 0)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c38e:	4618      	mov	r0, r3
 800c390:	f008 f862 	bl	8014458 <osMessageQueueGetCount>
 800c394:	4603      	mov	r3, r0
 800c396:	2b00      	cmp	r3, #0
 800c398:	bf14      	ite	ne
 800c39a:	2301      	movne	r3, #1
 800c39c:	2300      	moveq	r3, #0
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d0e8      	beq.n	800c376 <_ZN11SolarGators11DataModules18SteeringController13ButtonHandlerEv+0x8>
      {
        uint16_t pin;
        osMessageQueueGet(button_queue_, &pin, NULL, 0);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 800c3aa:	f107 010a 	add.w	r1, r7, #10
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f007 fff3 	bl	801439c <osMessageQueueGet>
        Drivers::Button* button = &(*buttons_.find(pin)).second;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f503 7166 	add.w	r1, r3, #920	; 0x398
 800c3bc:	f107 030c 	add.w	r3, r7, #12
 800c3c0:	f107 020a 	add.w	r2, r7, #10
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f000 f906 	bl	800c5d6 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE4findERKt>
 800c3ca:	f107 030c 	add.w	r3, r7, #12
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f000 f918 	bl	800c604 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratordeEv>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	3304      	adds	r3, #4
 800c3d8:	617b      	str	r3, [r7, #20]
 800c3da:	f107 030c 	add.w	r3, r7, #12
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f000 f8ee 	bl	800c5c0 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorD1Ev>
        if(button != nullptr)
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d0ce      	beq.n	800c388 <_ZN11SolarGators11DataModules18SteeringController13ButtonHandlerEv+0x1a>
          button->HandlePress();
 800c3ea:	6978      	ldr	r0, [r7, #20]
 800c3ec:	f001 f87c 	bl	800d4e8 <_ZN11SolarGators7Drivers6Button11HandlePressEv>
      while(osMessageQueueGetCount(button_queue_) > 0)
 800c3f0:	e7ca      	b.n	800c388 <_ZN11SolarGators11DataModules18SteeringController13ButtonHandlerEv+0x1a>

0800c3f2 <_ZN3etl12generic_poolILj52ELj4ELj10EED1Ev>:
  //*************************************************************************
  /// A templated abstract pool implementation that uses a fixed size pool.
  ///\ingroup pool
  //*************************************************************************
  template <const size_t VTypeSize, const size_t VAlignment, const size_t VSize>
  class generic_pool : public etl::ipool
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b082      	sub	sp, #8
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7ff faa3 	bl	800b948 <_ZN3etl5ipoolD1Ev>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	4618      	mov	r0, r3
 800c406:	3708      	adds	r7, #8
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <_ZN3etl4poolINS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9Data_NodeELj10EED1Ev>:
  //*************************************************************************
  /// A templated pool implementation that uses a fixed size pool.
  ///\ingroup pool
  //*************************************************************************
  template <typename T, const size_t VSize>
  class pool : public etl::generic_pool<sizeof(T), etl::alignment_of<T>::value, VSize>
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	4618      	mov	r0, r3
 800c418:	f7ff ffeb 	bl	800c3f2 <_ZN3etl12generic_poolILj52ELj4ELj10EED1Ev>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	4618      	mov	r0, r3
 800c420:	3708      	adds	r7, #8
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}

0800c426 <_ZN3etl3mapItN11SolarGators7Drivers6ButtonELj10ENS_4lessItEEEC1Ev>:
    static ETL_CONSTANT size_t MAX_SIZE = MAX_SIZE_;

    //*************************************************************************
    /// Default constructor.
    //*************************************************************************
    map()
 800c426:	b580      	push	{r7, lr}
 800c428:	b082      	sub	sp, #8
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
      : etl::imap<TKey, TValue, TCompare>(node_pool, MAX_SIZE)
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	3314      	adds	r3, #20
 800c434:	220a      	movs	r2, #10
 800c436:	4619      	mov	r1, r3
 800c438:	f000 f8f3 	bl	800c622 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEEC1ERNS_5ipoolEj>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	3314      	adds	r3, #20
 800c440:	4618      	mov	r0, r3
 800c442:	f000 f90e 	bl	800c662 <_ZN3etl4poolINS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9Data_NodeELj10EEC1Ev>
    {
      this->initialise();
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	4618      	mov	r0, r3
 800c44a:	f000 f917 	bl	800c67c <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE10initialiseEv>
    }
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	4618      	mov	r0, r3
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <_ZN3etl3mapItN11SolarGators7Drivers6ButtonELj10ENS_4lessItEEED1Ev>:
#endif

    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~map()
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
    {
      this->initialise();
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	4618      	mov	r0, r3
 800c464:	f000 f90a 	bl	800c67c <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE10initialiseEv>
    }
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	3314      	adds	r3, #20
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7ff ffcd 	bl	800c40c <_ZN3etl4poolINS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9Data_NodeELj10EED1Ev>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	4618      	mov	r0, r3
 800c476:	f000 f8e7 	bl	800c648 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEED1Ev>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	4618      	mov	r0, r3
 800c47e:	3708      	adds	r7, #8
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <_ZN3etl9make_pairIRtRN11SolarGators7Drivers6ButtonEEENS_4pairIT_T0_EEOS7_OS8_>:
  };

  //******************************************************************************
#if ETL_CPP11_SUPPORTED
  template <typename T1, typename T2>
  inline pair<T1, T2> make_pair(T1&& a, T2&& b)
 800c484:	b590      	push	{r4, r7, lr}
 800c486:	b087      	sub	sp, #28
 800c488:	af00      	add	r7, sp, #0
 800c48a:	60f8      	str	r0, [r7, #12]
 800c48c:	60b9      	str	r1, [r7, #8]
 800c48e:	607a      	str	r2, [r7, #4]
  {
    return pair<T1, T2>(etl::forward<T1>(a), etl::forward<T2>(b));
 800c490:	68b8      	ldr	r0, [r7, #8]
 800c492:	f000 f967 	bl	800c764 <_ZN3etl7forwardIRtEEOT_RNS_16remove_referenceIS2_E4typeE>
 800c496:	4604      	mov	r4, r0
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f000 f96e 	bl	800c77a <_ZN3etl7forwardIRN11SolarGators7Drivers6ButtonEEEOT_RNS_16remove_referenceIS5_E4typeE>
 800c49e:	4602      	mov	r2, r0
 800c4a0:	f107 0310 	add.w	r3, r7, #16
 800c4a4:	4621      	mov	r1, r4
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f000 f972 	bl	800c790 <_ZN3etl4pairIRtRN11SolarGators7Drivers6ButtonEEC1ES1_S5_>
 800c4ac:	f107 0310 	add.w	r3, r7, #16
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	68f8      	ldr	r0, [r7, #12]
 800c4b4:	f000 f97f 	bl	800c7b6 <_ZN3etl4pairIRtRN11SolarGators7Drivers6ButtonEEC1IS1_S5_EEONS0_IT_T0_EE>
  }
 800c4b8:	68f8      	ldr	r0, [r7, #12]
 800c4ba:	371c      	adds	r7, #28
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd90      	pop	{r4, r7, pc}

0800c4c0 <_ZNSt4pairItN11SolarGators7Drivers6ButtonEED1Ev>:
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	3304      	adds	r3, #4
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f000 ffef 	bl	800d4b0 <_ZN11SolarGators7Drivers6ButtonD1Ev>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3708      	adds	r7, #8
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <_ZN3etl4pairIRtRN11SolarGators7Drivers6ButtonEEcvSt4pairIT_T0_EIKtS4_EEv>:
    operator std::pair<U1, U2>()
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b08c      	sub	sp, #48	; 0x30
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
      return std::make_pair(first, second);
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	6819      	ldr	r1, [r3, #0]
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	685a      	ldr	r2, [r3, #4]
 800c4ee:	f107 0308 	add.w	r3, r7, #8
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f000 f979 	bl	800c7ea <_ZSt9make_pairIRtRN11SolarGators7Drivers6ButtonEESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS6_INS7_IT0_E4typeEE6__typeEEOS8_OSD_>
 800c4f8:	f107 0308 	add.w	r3, r7, #8
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 f98a 	bl	800c818 <_ZNSt4pairIKtN11SolarGators7Drivers6ButtonEEC1ItS3_Lb1EEEOS_IT_T0_E>
 800c504:	f107 0308 	add.w	r3, r7, #8
 800c508:	4618      	mov	r0, r3
 800c50a:	f7ff ffd9 	bl	800c4c0 <_ZNSt4pairItN11SolarGators7Drivers6ButtonEED1Ev>
    }
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	3730      	adds	r7, #48	; 0x30
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
	...

0800c518 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE6insertEOSt4pairIKtS3_E>:
    ETL_OR_STD::pair<iterator, bool> insert(rvalue_reference value)
 800c518:	b580      	push	{r7, lr}
 800c51a:	b08a      	sub	sp, #40	; 0x28
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	607a      	str	r2, [r7, #4]
      Node* inserted_node = ETL_NULLPTR;
 800c524:	2300      	movs	r3, #0
 800c526:	627b      	str	r3, [r7, #36]	; 0x24
      bool inserted = false;
 800c528:	2300      	movs	r3, #0
 800c52a:	75fb      	strb	r3, [r7, #23]
      ETL_ASSERT(!full(), ETL_ERROR(map_full));
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	4618      	mov	r0, r3
 800c530:	f7ff fa15 	bl	800b95e <_ZNK3etl8map_base4fullEv>
 800c534:	4603      	mov	r3, r0
 800c536:	f083 0301 	eor.w	r3, r3, #1
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d106      	bne.n	800c54e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE6insertEOSt4pairIKtS3_E+0x36>
 800c540:	4b1c      	ldr	r3, [pc, #112]	; (800c5b4 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE6insertEOSt4pairIKtS3_E+0x9c>)
 800c542:	4a1d      	ldr	r2, [pc, #116]	; (800c5b8 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE6insertEOSt4pairIKtS3_E+0xa0>)
 800c544:	f240 41a7 	movw	r1, #1191	; 0x4a7
 800c548:	481c      	ldr	r0, [pc, #112]	; (800c5bc <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE6insertEOSt4pairIKtS3_E+0xa4>)
 800c54a:	f00b fd8f 	bl	801806c <__assert_func>
      Data_Node& node = allocate_data_node(etl::move(value));
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 f983 	bl	800c85a <_ZN3etl4moveIRSt4pairIKtN11SolarGators7Drivers6ButtonEEEEONS_16remove_referenceIT_E4typeEOS9_>
 800c554:	4603      	mov	r3, r0
 800c556:	4619      	mov	r1, r3
 800c558:	68b8      	ldr	r0, [r7, #8]
 800c55a:	f000 f989 	bl	800c870 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE18allocate_data_nodeEOSt4pairIKtS3_E>
 800c55e:	6238      	str	r0, [r7, #32]
      inserted_node = insert_node(root_node, node);
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	3308      	adds	r3, #8
 800c564:	6a3a      	ldr	r2, [r7, #32]
 800c566:	4619      	mov	r1, r3
 800c568:	68b8      	ldr	r0, [r7, #8]
 800c56a:	f000 f9a3 	bl	800c8b4 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE>
 800c56e:	6278      	str	r0, [r7, #36]	; 0x24
      inserted = inserted_node == &node;
 800c570:	6a3b      	ldr	r3, [r7, #32]
 800c572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c574:	429a      	cmp	r2, r3
 800c576:	bf0c      	ite	eq
 800c578:	2301      	moveq	r3, #1
 800c57a:	2300      	movne	r3, #0
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	75fb      	strb	r3, [r7, #23]
      return ETL_OR_STD::make_pair(iterator(*this, inserted_node), inserted);
 800c580:	f107 0318 	add.w	r3, r7, #24
 800c584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c586:	68b9      	ldr	r1, [r7, #8]
 800c588:	4618      	mov	r0, r3
 800c58a:	f000 fa3d 	bl	800ca08 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorC1ERS6_PNS_8map_base4NodeE>
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f107 0217 	add.w	r2, r7, #23
 800c594:	f107 0118 	add.w	r1, r7, #24
 800c598:	4618      	mov	r0, r3
 800c59a:	f000 fa48 	bl	800ca2e <_ZSt9make_pairIN3etl4imapItN11SolarGators7Drivers6ButtonENS0_4lessItEEE8iteratorERbESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENSB_INSC_IT0_E4typeEE6__typeEEOSD_OSI_>
 800c59e:	f107 0318 	add.w	r3, r7, #24
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f000 f80c 	bl	800c5c0 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorD1Ev>
 800c5a8:	bf00      	nop
    }
 800c5aa:	68f8      	ldr	r0, [r7, #12]
 800c5ac:	3728      	adds	r7, #40	; 0x28
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	080193a0 	.word	0x080193a0
 800c5b8:	080193ac 	.word	0x080193ac
 800c5bc:	080195c0 	.word	0x080195c0

0800c5c0 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorD1Ev>:
      ~iterator()
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
      }
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	370c      	adds	r7, #12
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr

0800c5d6 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE4findERKt>:
    iterator find(key_parameter_t key)
 800c5d6:	b580      	push	{r7, lr}
 800c5d8:	b084      	sub	sp, #16
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	60f8      	str	r0, [r7, #12]
 800c5de:	60b9      	str	r1, [r7, #8]
 800c5e0:	607a      	str	r2, [r7, #4]
      return iterator(*this, find_node(root_node, key));
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	689b      	ldr	r3, [r3, #8]
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	68b8      	ldr	r0, [r7, #8]
 800c5ec:	f000 fa4a 	bl	800ca84 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	68b9      	ldr	r1, [r7, #8]
 800c5f6:	68f8      	ldr	r0, [r7, #12]
 800c5f8:	f000 fa06 	bl	800ca08 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorC1ERS6_PNS_8map_base4NodeE>
    }
 800c5fc:	68f8      	ldr	r0, [r7, #12]
 800c5fe:	3710      	adds	r7, #16
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratordeEv>:
      reference operator *() const
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
        return imap::data_cast(p_node)->value;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	4618      	mov	r0, r3
 800c612:	f000 fa64 	bl	800cade <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castEPNS_8map_base4NodeE>
 800c616:	4603      	mov	r3, r0
 800c618:	330c      	adds	r3, #12
      }
 800c61a:	4618      	mov	r0, r3
 800c61c:	3708      	adds	r7, #8
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEEC1ERNS_5ipoolEj>:
    imap(etl::ipool& node_pool, size_t max_size_)
 800c622:	b580      	push	{r7, lr}
 800c624:	b084      	sub	sp, #16
 800c626:	af00      	add	r7, sp, #0
 800c628:	60f8      	str	r0, [r7, #12]
 800c62a:	60b9      	str	r1, [r7, #8]
 800c62c:	607a      	str	r2, [r7, #4]
      , p_node_pool(&node_pool)
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	6879      	ldr	r1, [r7, #4]
 800c632:	4618      	mov	r0, r3
 800c634:	f7ff f9bc 	bl	800b9b0 <_ZN3etl8map_baseC1Ej>
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	68ba      	ldr	r2, [r7, #8]
 800c63c:	60da      	str	r2, [r3, #12]
    }
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	4618      	mov	r0, r3
 800c642:	3710      	adds	r7, #16
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEED1Ev>:
    ~imap()
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
    }
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	4618      	mov	r0, r3
 800c654:	f7ff f9c1 	bl	800b9da <_ZN3etl8map_baseD1Ev>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4618      	mov	r0, r3
 800c65c:	3708      	adds	r7, #8
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <_ZN3etl4poolINS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9Data_NodeELj10EEC1Ev>:
    using base_t::TYPE_SIZE;

    //*************************************************************************
    /// Constructor
    //*************************************************************************
    pool()
 800c662:	b580      	push	{r7, lr}
 800c664:	b082      	sub	sp, #8
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
    {
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4618      	mov	r0, r3
 800c66e:	f000 fa41 	bl	800caf4 <_ZN3etl12generic_poolILj52ELj4ELj10EEC1Ev>
    }
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4618      	mov	r0, r3
 800c676:	3708      	adds	r7, #8
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE10initialiseEv>:
    void initialise()
 800c67c:	b590      	push	{r4, r7, lr}
 800c67e:	b091      	sub	sp, #68	; 0x44
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
      const_iterator item = begin();
 800c684:	f107 0310 	add.w	r3, r7, #16
 800c688:	6879      	ldr	r1, [r7, #4]
 800c68a:	4618      	mov	r0, r3
 800c68c:	f000 fa43 	bl	800cb16 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE5beginEv>
 800c690:	f107 0210 	add.w	r2, r7, #16
 800c694:	f107 0308 	add.w	r3, r7, #8
 800c698:	4611      	mov	r1, r2
 800c69a:	4618      	mov	r0, r3
 800c69c:	f000 fa51 	bl	800cb42 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorC1ERKNS6_8iteratorE>
 800c6a0:	f107 0310 	add.w	r3, r7, #16
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7ff ff8b 	bl	800c5c0 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorD1Ev>
      while (item != end())
 800c6aa:	f107 0320 	add.w	r3, r7, #32
 800c6ae:	6879      	ldr	r1, [r7, #4]
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f000 fa79 	bl	800cba8 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE3endEv>
 800c6b6:	f107 0220 	add.w	r2, r7, #32
 800c6ba:	f107 0318 	add.w	r3, r7, #24
 800c6be:	4611      	mov	r1, r2
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f000 fa3e 	bl	800cb42 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorC1ERKNS6_8iteratorE>
 800c6c6:	f107 0218 	add.w	r2, r7, #24
 800c6ca:	f107 0308 	add.w	r3, r7, #8
 800c6ce:	4611      	mov	r1, r2
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f000 fa76 	bl	800cbc2 <_ZN3etlneERKNS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorES9_>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	461c      	mov	r4, r3
 800c6da:	f107 0318 	add.w	r3, r7, #24
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f000 fa43 	bl	800cb6a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorD1Ev>
 800c6e4:	f107 0320 	add.w	r3, r7, #32
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f7ff ff69 	bl	800c5c0 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorD1Ev>
 800c6ee:	2c00      	cmp	r4, #0
 800c6f0:	d02f      	beq.n	800c752 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE10initialiseEv+0xd6>
        item = erase(item);
 800c6f2:	f107 0208 	add.w	r2, r7, #8
 800c6f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c6fa:	4611      	mov	r1, r2
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f000 fa3f 	bl	800cb80 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorC1ERKS7_>
 800c702:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c706:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800c70a:	6879      	ldr	r1, [r7, #4]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f000 fa69 	bl	800cbe4 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE5eraseENS6_14const_iteratorE>
 800c712:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c716:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c71a:	4611      	mov	r1, r2
 800c71c:	4618      	mov	r0, r3
 800c71e:	f000 fa10 	bl	800cb42 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorC1ERKNS6_8iteratorE>
 800c722:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c726:	f107 0308 	add.w	r3, r7, #8
 800c72a:	4611      	mov	r1, r2
 800c72c:	4618      	mov	r0, r3
 800c72e:	f000 fa84 	bl	800cc3a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratoraSERKS7_>
 800c732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c736:	4618      	mov	r0, r3
 800c738:	f000 fa17 	bl	800cb6a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorD1Ev>
 800c73c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c740:	4618      	mov	r0, r3
 800c742:	f7ff ff3d 	bl	800c5c0 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorD1Ev>
 800c746:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c74a:	4618      	mov	r0, r3
 800c74c:	f000 fa0d 	bl	800cb6a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorD1Ev>
      while (item != end())
 800c750:	e7ab      	b.n	800c6aa <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE10initialiseEv+0x2e>
      const_iterator item = begin();
 800c752:	f107 0308 	add.w	r3, r7, #8
 800c756:	4618      	mov	r0, r3
 800c758:	f000 fa07 	bl	800cb6a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorD1Ev>
    }
 800c75c:	bf00      	nop
 800c75e:	3744      	adds	r7, #68	; 0x44
 800c760:	46bd      	mov	sp, r7
 800c762:	bd90      	pop	{r4, r7, pc}

0800c764 <_ZN3etl7forwardIRtEEOT_RNS_16remove_referenceIS2_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 800c764:	b480      	push	{r7}
 800c766:	b083      	sub	sp, #12
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 800c76c:	687b      	ldr	r3, [r7, #4]
  }
 800c76e:	4618      	mov	r0, r3
 800c770:	370c      	adds	r7, #12
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr

0800c77a <_ZN3etl7forwardIRN11SolarGators7Drivers6ButtonEEEOT_RNS_16remove_referenceIS5_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 800c77a:	b480      	push	{r7}
 800c77c:	b083      	sub	sp, #12
 800c77e:	af00      	add	r7, sp, #0
 800c780:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 800c782:	687b      	ldr	r3, [r7, #4]
  }
 800c784:	4618      	mov	r0, r3
 800c786:	370c      	adds	r7, #12
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <_ZN3etl4pairIRtRN11SolarGators7Drivers6ButtonEEC1ES1_S5_>:
    ETL_CONSTEXPR14 pair(const T1& a, const T2& b)
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	607a      	str	r2, [r7, #4]
      , second(b)
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	68ba      	ldr	r2, [r7, #8]
 800c7a0:	601a      	str	r2, [r3, #0]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	605a      	str	r2, [r3, #4]
    }
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3714      	adds	r7, #20
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr

0800c7b6 <_ZN3etl4pairIRtRN11SolarGators7Drivers6ButtonEEC1IS1_S5_EEONS0_IT_T0_EE>:
    ETL_CONSTEXPR14 pair(pair<U1, U2>&& other)
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b082      	sub	sp, #8
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
 800c7be:	6039      	str	r1, [r7, #0]
      : first(etl::forward<U1>(other.first))
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f7ff ffcd 	bl	800c764 <_ZN3etl7forwardIRtEEOT_RNS_16remove_referenceIS2_E4typeE>
 800c7ca:	4602      	mov	r2, r0
      , second(etl::forward<U2>(other.second))
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	601a      	str	r2, [r3, #0]
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7ff ffd0 	bl	800c77a <_ZN3etl7forwardIRN11SolarGators7Drivers6ButtonEEEOT_RNS_16remove_referenceIS5_E4typeE>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	605a      	str	r2, [r3, #4]
    }
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3708      	adds	r7, #8
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <_ZSt9make_pairIRtRN11SolarGators7Drivers6ButtonEESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS6_INS7_IT0_E4typeEE6__typeEEOS8_OSD_>:
#if __cplusplus >= 201103L
  // NB: DR 706.
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
 800c7ea:	b590      	push	{r4, r7, lr}
 800c7ec:	b085      	sub	sp, #20
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	60f8      	str	r0, [r7, #12]
 800c7f2:	60b9      	str	r1, [r7, #8]
 800c7f4:	607a      	str	r2, [r7, #4]
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> 	      __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 800c7f6:	68b8      	ldr	r0, [r7, #8]
 800c7f8:	f000 fa33 	bl	800cc62 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 800c7fc:	4604      	mov	r4, r0
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 fa3a 	bl	800cc78 <_ZSt7forwardIRN11SolarGators7Drivers6ButtonEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c804:	4603      	mov	r3, r0
 800c806:	461a      	mov	r2, r3
 800c808:	4621      	mov	r1, r4
 800c80a:	68f8      	ldr	r0, [r7, #12]
 800c80c:	f000 fa3f 	bl	800cc8e <_ZNSt4pairItN11SolarGators7Drivers6ButtonEEC1IRtRS2_Lb1EEEOT_OT0_>
    }
 800c810:	68f8      	ldr	r0, [r7, #12]
 800c812:	3714      	adds	r7, #20
 800c814:	46bd      	mov	sp, r7
 800c816:	bd90      	pop	{r4, r7, pc}

0800c818 <_ZNSt4pairIKtN11SolarGators7Drivers6ButtonEEC1ItS3_Lb1EEEOS_IT_T0_E>:
	constexpr pair(pair<_U1, _U2>&& __p)
 800c818:	b5b0      	push	{r4, r5, r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
	: first(std::forward<_U1>(__p.first)),
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	4618      	mov	r0, r3
 800c826:	f000 fa51 	bl	800cccc <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 800c82a:	4603      	mov	r3, r0
	  second(std::forward<_U2>(__p.second)) { }
 800c82c:	881a      	ldrh	r2, [r3, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	801a      	strh	r2, [r3, #0]
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	3304      	adds	r3, #4
 800c836:	4618      	mov	r0, r3
 800c838:	f000 fa53 	bl	800cce2 <_ZSt7forwardIN11SolarGators7Drivers6ButtonEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c83c:	4602      	mov	r2, r0
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	1d1c      	adds	r4, r3, #4
 800c842:	4615      	mov	r5, r2
 800c844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c84a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c84c:	682b      	ldr	r3, [r5, #0]
 800c84e:	6023      	str	r3, [r4, #0]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	4618      	mov	r0, r3
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bdb0      	pop	{r4, r5, r7, pc}

0800c85a <_ZN3etl4moveIRSt4pairIKtN11SolarGators7Drivers6ButtonEEEEONS_16remove_referenceIT_E4typeEOS9_>:
  constexpr typename etl::remove_reference<T>::type&& move(T&& t) ETL_NOEXCEPT
 800c85a:	b480      	push	{r7}
 800c85c:	b083      	sub	sp, #12
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
    return static_cast<typename etl::remove_reference<T>::type&&>(t);
 800c862:	687b      	ldr	r3, [r7, #4]
  }
 800c864:	4618      	mov	r0, r3
 800c866:	370c      	adds	r7, #12
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr

0800c870 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE18allocate_data_nodeEOSt4pairIKtS3_E>:
    Data_Node& allocate_data_node(rvalue_reference value)
 800c870:	b5b0      	push	{r4, r5, r7, lr}
 800c872:	b084      	sub	sp, #16
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
      Data_Node& node = create_data_node();
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 fa3c 	bl	800ccf8 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16create_data_nodeEv>
 800c880:	60f8      	str	r0, [r7, #12]
      ::new (&node.value) value_type(etl::move(value));
 800c882:	6838      	ldr	r0, [r7, #0]
 800c884:	f7ff ffe9 	bl	800c85a <_ZN3etl4moveIRSt4pairIKtN11SolarGators7Drivers6ButtonEEEEONS_16remove_referenceIT_E4typeEOS9_>
 800c888:	4605      	mov	r5, r0
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	330c      	adds	r3, #12
 800c88e:	4619      	mov	r1, r3
 800c890:	2028      	movs	r0, #40	; 0x28
 800c892:	f7fe ff5f 	bl	800b754 <_ZnwjPv>
 800c896:	4603      	mov	r3, r0
 800c898:	461c      	mov	r4, r3
 800c89a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c89c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c89e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c8a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c8a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c8a6:	e884 0003 	stmia.w	r4, {r0, r1}
      return node;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
    }
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3710      	adds	r7, #16
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bdb0      	pop	{r4, r5, r7, pc}

0800c8b4 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE>:
    Node* insert_node(Node*& position, Data_Node& node)
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b088      	sub	sp, #32
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	60f8      	str	r0, [r7, #12]
 800c8bc:	60b9      	str	r1, [r7, #8]
 800c8be:	607a      	str	r2, [r7, #4]
      Node* found = position;
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	61fb      	str	r3, [r7, #28]
      if (position)
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	f000 808e 	beq.w	800c9ec <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x138>
        Node* critical_parent_node = ETL_NULLPTR;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	61bb      	str	r3, [r7, #24]
        Node* critical_node = root_node;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	617b      	str	r3, [r7, #20]
        while (found)
 800c8da:	69fb      	ldr	r3, [r7, #28]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d057      	beq.n	800c990 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0xdc>
          if (kNeither != found->weight)
 800c8e0:	69fb      	ldr	r3, [r7, #28]
 800c8e2:	7a1b      	ldrb	r3, [r3, #8]
 800c8e4:	2b02      	cmp	r3, #2
 800c8e6:	d001      	beq.n	800c8ec <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x38>
            critical_node = found;
 800c8e8:	69fb      	ldr	r3, [r7, #28]
 800c8ea:	617b      	str	r3, [r7, #20]
          Data_Node& found_data_node = imap::data_cast(*found);
 800c8ec:	69f8      	ldr	r0, [r7, #28]
 800c8ee:	f000 fa29 	bl	800cd44 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 800c8f2:	6138      	str	r0, [r7, #16]
          if (node_comp(node, found_data_node))
 800c8f4:	693a      	ldr	r2, [r7, #16]
 800c8f6:	6879      	ldr	r1, [r7, #4]
 800c8f8:	68f8      	ldr	r0, [r7, #12]
 800c8fa:	f000 fa2e 	bl	800cd5a <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKNS6_9Data_NodeES9_>
 800c8fe:	4603      	mov	r3, r0
 800c900:	2b00      	cmp	r3, #0
 800c902:	d003      	beq.n	800c90c <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x58>
            found->dir = kLeft;
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	2200      	movs	r2, #0
 800c908:	725a      	strb	r2, [r3, #9]
 800c90a:	e015      	b.n	800c938 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x84>
          else if (node_comp(found_data_node, node))
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	6939      	ldr	r1, [r7, #16]
 800c910:	68f8      	ldr	r0, [r7, #12]
 800c912:	f000 fa22 	bl	800cd5a <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKNS6_9Data_NodeES9_>
 800c916:	4603      	mov	r3, r0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d003      	beq.n	800c924 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x70>
            found->dir = kRight;
 800c91c:	69fb      	ldr	r3, [r7, #28]
 800c91e:	2201      	movs	r2, #1
 800c920:	725a      	strb	r2, [r3, #9]
 800c922:	e009      	b.n	800c938 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x84>
            found->dir = kNeither;
 800c924:	69fb      	ldr	r3, [r7, #28]
 800c926:	2202      	movs	r2, #2
 800c928:	725a      	strb	r2, [r3, #9]
            critical_node = ETL_NULLPTR;
 800c92a:	2300      	movs	r3, #0
 800c92c:	617b      	str	r3, [r7, #20]
            destroy_data_node(node);
 800c92e:	6879      	ldr	r1, [r7, #4]
 800c930:	68f8      	ldr	r0, [r7, #12]
 800c932:	f000 fa28 	bl	800cd86 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE17destroy_data_nodeERNS6_9Data_NodeE>
            break;
 800c936:	e02b      	b.n	800c990 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0xdc>
          if (found->children[found->dir])
 800c938:	69fb      	ldr	r3, [r7, #28]
 800c93a:	7a5b      	ldrb	r3, [r3, #9]
 800c93c:	461a      	mov	r2, r3
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d012      	beq.n	800c96e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0xba>
            if (kNeither != found->children[found->dir]->weight)
 800c948:	69fb      	ldr	r3, [r7, #28]
 800c94a:	7a5b      	ldrb	r3, [r3, #9]
 800c94c:	461a      	mov	r2, r3
 800c94e:	69fb      	ldr	r3, [r7, #28]
 800c950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c954:	7a1b      	ldrb	r3, [r3, #8]
 800c956:	2b02      	cmp	r3, #2
 800c958:	d001      	beq.n	800c95e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0xaa>
              critical_parent_node = found;
 800c95a:	69fb      	ldr	r3, [r7, #28]
 800c95c:	61bb      	str	r3, [r7, #24]
            found = found->children[found->dir];
 800c95e:	69fb      	ldr	r3, [r7, #28]
 800c960:	7a5b      	ldrb	r3, [r3, #9]
 800c962:	461a      	mov	r2, r3
 800c964:	69fb      	ldr	r3, [r7, #28]
 800c966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c96a:	61fb      	str	r3, [r7, #28]
 800c96c:	e7b5      	b.n	800c8da <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x26>
            attach_node(found->children[found->dir], node);
 800c96e:	68f8      	ldr	r0, [r7, #12]
 800c970:	69fb      	ldr	r3, [r7, #28]
 800c972:	7a5b      	ldrb	r3, [r3, #9]
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	69fa      	ldr	r2, [r7, #28]
 800c978:	4413      	add	r3, r2
 800c97a:	687a      	ldr	r2, [r7, #4]
 800c97c:	4619      	mov	r1, r3
 800c97e:	f7ff f96f 	bl	800bc60 <_ZN3etl8map_base11attach_nodeERPNS0_4NodeERS1_>
            found = found->children[found->dir];
 800c982:	69fb      	ldr	r3, [r7, #28]
 800c984:	7a5b      	ldrb	r3, [r3, #9]
 800c986:	461a      	mov	r2, r3
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c98e:	61fb      	str	r3, [r7, #28]
        if (critical_node)
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d033      	beq.n	800c9fe <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x14a>
          if (critical_parent_node == ETL_NULLPTR && critical_node == root_node)
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d10c      	bne.n	800c9b6 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x102>
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	697a      	ldr	r2, [r7, #20]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d107      	bne.n	800c9b6 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x102>
            balance_node(root_node);
 800c9a6:	68fa      	ldr	r2, [r7, #12]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	3308      	adds	r3, #8
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	4610      	mov	r0, r2
 800c9b0:	f7ff f81e 	bl	800b9f0 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE>
 800c9b4:	e023      	b.n	800c9fe <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x14a>
          else if (critical_parent_node == ETL_NULLPTR && critical_node == position)
 800c9b6:	69bb      	ldr	r3, [r7, #24]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d10a      	bne.n	800c9d2 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x11e>
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	697a      	ldr	r2, [r7, #20]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d105      	bne.n	800c9d2 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x11e>
            balance_node(position);
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	68b9      	ldr	r1, [r7, #8]
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7ff f810 	bl	800b9f0 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE>
 800c9d0:	e015      	b.n	800c9fe <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x14a>
            if (critical_parent_node != ETL_NULLPTR)
 800c9d2:	69bb      	ldr	r3, [r7, #24]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d012      	beq.n	800c9fe <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x14a>
              balance_node(critical_parent_node->children[critical_parent_node->dir]);
 800c9d8:	68f8      	ldr	r0, [r7, #12]
 800c9da:	69bb      	ldr	r3, [r7, #24]
 800c9dc:	7a5b      	ldrb	r3, [r3, #9]
 800c9de:	009b      	lsls	r3, r3, #2
 800c9e0:	69ba      	ldr	r2, [r7, #24]
 800c9e2:	4413      	add	r3, r2
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	f7ff f803 	bl	800b9f0 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE>
 800c9ea:	e008      	b.n	800c9fe <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x14a>
        attach_node(position, node);
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	68b9      	ldr	r1, [r7, #8]
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7ff f934 	bl	800bc60 <_ZN3etl8map_base11attach_nodeERPNS0_4NodeERS1_>
        found = position;
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	61fb      	str	r3, [r7, #28]
      return found;
 800c9fe:	69fb      	ldr	r3, [r7, #28]
    }
 800ca00:	4618      	mov	r0, r3
 800ca02:	3720      	adds	r7, #32
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}

0800ca08 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorC1ERS6_PNS_8map_base4NodeE>:
      iterator(imap& map, Node* node)
 800ca08:	b480      	push	{r7}
 800ca0a:	b085      	sub	sp, #20
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	60f8      	str	r0, [r7, #12]
 800ca10:	60b9      	str	r1, [r7, #8]
 800ca12:	607a      	str	r2, [r7, #4]
        , p_node(node)
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	68ba      	ldr	r2, [r7, #8]
 800ca18:	601a      	str	r2, [r3, #0]
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	605a      	str	r2, [r3, #4]
      }
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	4618      	mov	r0, r3
 800ca24:	3714      	adds	r7, #20
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr

0800ca2e <_ZSt9make_pairIN3etl4imapItN11SolarGators7Drivers6ButtonENS0_4lessItEEE8iteratorERbESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENSB_INSC_IT0_E4typeEE6__typeEEOSD_OSI_>:
    make_pair(_T1&& __x, _T2&& __y)
 800ca2e:	b590      	push	{r4, r7, lr}
 800ca30:	b085      	sub	sp, #20
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	60f8      	str	r0, [r7, #12]
 800ca36:	60b9      	str	r1, [r7, #8]
 800ca38:	607a      	str	r2, [r7, #4]
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 800ca3a:	68b8      	ldr	r0, [r7, #8]
 800ca3c:	f000 f9b7 	bl	800cdae <_ZSt7forwardIN3etl4imapItN11SolarGators7Drivers6ButtonENS0_4lessItEEE8iteratorEEOT_RNSt16remove_referenceIS9_E4typeE>
 800ca40:	4604      	mov	r4, r0
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 f9be 	bl	800cdc4 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	4621      	mov	r1, r4
 800ca4e:	68f8      	ldr	r0, [r7, #12]
 800ca50:	f000 f9c3 	bl	800cdda <_ZNSt4pairIN3etl4imapItN11SolarGators7Drivers6ButtonENS0_4lessItEEE8iteratorEbEC1IS8_RbLb1EEEOT_OT0_>
    }
 800ca54:	68f8      	ldr	r0, [r7, #12]
 800ca56:	3714      	adds	r7, #20
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd90      	pop	{r4, r7, pc}

0800ca5c <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorC1ERKS7_>:
      iterator(const iterator& other)
 800ca5c:	b480      	push	{r7}
 800ca5e:	b083      	sub	sp, #12
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	6039      	str	r1, [r7, #0]
        : p_map(other.p_map)
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	681a      	ldr	r2, [r3, #0]
        , p_node(other.p_node)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	601a      	str	r2, [r3, #0]
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	685a      	ldr	r2, [r3, #4]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	605a      	str	r2, [r3, #4]
      }
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	4618      	mov	r0, r3
 800ca7a:	370c      	adds	r7, #12
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt>:
    Node* find_node(Node* position, key_parameter_t key)
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b086      	sub	sp, #24
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	607a      	str	r2, [r7, #4]
      Node* found = position;
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	617b      	str	r3, [r7, #20]
      while (found)
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d01c      	beq.n	800cad4 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x50>
        Data_Node& found_data_node = imap::data_cast(*found);
 800ca9a:	6978      	ldr	r0, [r7, #20]
 800ca9c:	f000 f952 	bl	800cd44 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 800caa0:	6138      	str	r0, [r7, #16]
        if (node_comp(key, found_data_node))
 800caa2:	693a      	ldr	r2, [r7, #16]
 800caa4:	6879      	ldr	r1, [r7, #4]
 800caa6:	68f8      	ldr	r0, [r7, #12]
 800caa8:	f000 f9b2 	bl	800ce10 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKtRKNS6_9Data_NodeE>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d003      	beq.n	800caba <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x36>
          found = found->children[kLeft];
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	617b      	str	r3, [r7, #20]
 800cab8:	e7ec      	b.n	800ca94 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x10>
        else if (node_comp(found_data_node, key))
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	6939      	ldr	r1, [r7, #16]
 800cabe:	68f8      	ldr	r0, [r7, #12]
 800cac0:	f000 f9ba 	bl	800ce38 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKNS6_9Data_NodeERKt>
 800cac4:	4603      	mov	r3, r0
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d003      	beq.n	800cad2 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x4e>
          found = found->children[kRight];
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	617b      	str	r3, [r7, #20]
      while (found)
 800cad0:	e7e0      	b.n	800ca94 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x10>
          break;
 800cad2:	bf00      	nop
      return found;
 800cad4:	697b      	ldr	r3, [r7, #20]
    }
 800cad6:	4618      	mov	r0, r3
 800cad8:	3718      	adds	r7, #24
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}

0800cade <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castEPNS_8map_base4NodeE>:
    static Data_Node* data_cast(Node* p_node)
 800cade:	b480      	push	{r7}
 800cae0:	b083      	sub	sp, #12
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
      return static_cast<Data_Node*>(p_node);
 800cae6:	687b      	ldr	r3, [r7, #4]
    }
 800cae8:	4618      	mov	r0, r3
 800caea:	370c      	adds	r7, #12
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <_ZN3etl12generic_poolILj52ELj4ELj10EEC1Ev>:
    static ETL_CONSTANT size_t TYPE_SIZE = VTypeSize;

    //*************************************************************************
    /// Constructor
    //*************************************************************************
    generic_pool()
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
      : etl::ipool(reinterpret_cast<char*>(&buffer[0]), Element_Size, VSize)
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f103 0118 	add.w	r1, r3, #24
 800cb04:	230a      	movs	r3, #10
 800cb06:	2234      	movs	r2, #52	; 0x34
 800cb08:	f7fe fe40 	bl	800b78c <_ZN3etl5ipoolC1EPcmm>
    {
    }
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3708      	adds	r7, #8
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}

0800cb16 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE5beginEv>:
    iterator begin()
 800cb16:	b580      	push	{r7, lr}
 800cb18:	b082      	sub	sp, #8
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
 800cb1e:	6039      	str	r1, [r7, #0]
      return iterator(*this, find_limit_node(root_node, kLeft));
 800cb20:	6838      	ldr	r0, [r7, #0]
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	689b      	ldr	r3, [r3, #8]
 800cb26:	2200      	movs	r2, #0
 800cb28:	4619      	mov	r1, r3
 800cb2a:	f7ff f878 	bl	800bc1e <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	461a      	mov	r2, r3
 800cb32:	6839      	ldr	r1, [r7, #0]
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f7ff ff67 	bl	800ca08 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorC1ERS6_PNS_8map_base4NodeE>
    }
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	3708      	adds	r7, #8
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}

0800cb42 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorC1ERKNS6_8iteratorE>:
      const_iterator(const typename imap::iterator& other)
 800cb42:	b480      	push	{r7}
 800cb44:	b083      	sub	sp, #12
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	6078      	str	r0, [r7, #4]
 800cb4a:	6039      	str	r1, [r7, #0]
        : p_map(other.p_map)
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	681a      	ldr	r2, [r3, #0]
        , p_node(other.p_node)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	601a      	str	r2, [r3, #0]
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	685a      	ldr	r2, [r3, #4]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	605a      	str	r2, [r3, #4]
      }
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4618      	mov	r0, r3
 800cb60:	370c      	adds	r7, #12
 800cb62:	46bd      	mov	sp, r7
 800cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb68:	4770      	bx	lr

0800cb6a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorD1Ev>:
      ~const_iterator()
 800cb6a:	b480      	push	{r7}
 800cb6c:	b083      	sub	sp, #12
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
      }
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	4618      	mov	r0, r3
 800cb76:	370c      	adds	r7, #12
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr

0800cb80 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorC1ERKS7_>:
      const_iterator(const const_iterator& other)
 800cb80:	b480      	push	{r7}
 800cb82:	b083      	sub	sp, #12
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
        : p_map(other.p_map)
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	681a      	ldr	r2, [r3, #0]
        , p_node(other.p_node)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	601a      	str	r2, [r3, #0]
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	685a      	ldr	r2, [r3, #4]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	605a      	str	r2, [r3, #4]
      }
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	370c      	adds	r7, #12
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr

0800cba8 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE3endEv>:
    iterator end()
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
      return iterator(*this);
 800cbb2:	6839      	ldr	r1, [r7, #0]
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 f953 	bl	800ce60 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorC1ERS6_>
    }
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	3708      	adds	r7, #8
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}

0800cbc2 <_ZN3etlneERKNS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorES9_>:
      friend bool operator != (const const_iterator& lhs, const const_iterator& rhs)
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b082      	sub	sp, #8
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
 800cbca:	6039      	str	r1, [r7, #0]
        return !(lhs == rhs);
 800cbcc:	6839      	ldr	r1, [r7, #0]
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 f958 	bl	800ce84 <_ZN3etleqERKNS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorES9_>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	f083 0301 	eor.w	r3, r3, #1
 800cbda:	b2db      	uxtb	r3, r3
      }
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3708      	adds	r7, #8
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE5eraseENS6_14const_iteratorE>:
    iterator erase(const_iterator position)
 800cbe4:	b590      	push	{r4, r7, lr}
 800cbe6:	b087      	sub	sp, #28
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	607a      	str	r2, [r7, #4]
      Node*& reference_node = find_node(root_node, position.p_node);
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	f103 0108 	add.w	r1, r3, #8
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	68b8      	ldr	r0, [r7, #8]
 800cbfe:	f000 f95b 	bl	800ceb8 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_>
 800cc02:	6178      	str	r0, [r7, #20]
      iterator next(*this, reference_node);
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	461a      	mov	r2, r3
 800cc0a:	68b9      	ldr	r1, [r7, #8]
 800cc0c:	68f8      	ldr	r0, [r7, #12]
 800cc0e:	f7ff fefb 	bl	800ca08 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorC1ERS6_PNS_8map_base4NodeE>
      ++next;
 800cc12:	68f8      	ldr	r0, [r7, #12]
 800cc14:	f000 f993 	bl	800cf3e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorppEv>
      remove_node(root_node, (*position).first);
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	f103 0408 	add.w	r4, r3, #8
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 f99e 	bl	800cf60 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratordeEv>
 800cc24:	4603      	mov	r3, r0
 800cc26:	461a      	mov	r2, r3
 800cc28:	4621      	mov	r1, r4
 800cc2a:	68b8      	ldr	r0, [r7, #8]
 800cc2c:	f000 f9a7 	bl	800cf7e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt>
      return next;
 800cc30:	bf00      	nop
    }
 800cc32:	68f8      	ldr	r0, [r7, #12]
 800cc34:	371c      	adds	r7, #28
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd90      	pop	{r4, r7, pc}

0800cc3a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratoraSERKS7_>:
      const_iterator& operator =(const const_iterator& other)
 800cc3a:	b480      	push	{r7}
 800cc3c:	b083      	sub	sp, #12
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
 800cc42:	6039      	str	r1, [r7, #0]
        p_map = other.p_map;
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	601a      	str	r2, [r3, #0]
        p_node = other.p_node;
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	685a      	ldr	r2, [r3, #4]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	605a      	str	r2, [r3, #4]
        return *this;
 800cc54:	687b      	ldr	r3, [r7, #4]
      }
 800cc56:	4618      	mov	r0, r3
 800cc58:	370c      	adds	r7, #12
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr

0800cc62 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cc62:	b480      	push	{r7}
 800cc64:	b083      	sub	sp, #12
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	370c      	adds	r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr

0800cc78 <_ZSt7forwardIRN11SolarGators7Drivers6ButtonEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cc78:	b480      	push	{r7}
 800cc7a:	b083      	sub	sp, #12
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	4618      	mov	r0, r3
 800cc84:	370c      	adds	r7, #12
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr

0800cc8e <_ZNSt4pairItN11SolarGators7Drivers6ButtonEEC1IRtRS2_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800cc8e:	b5b0      	push	{r4, r5, r7, lr}
 800cc90:	b084      	sub	sp, #16
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	60f8      	str	r0, [r7, #12]
 800cc96:	60b9      	str	r1, [r7, #8]
 800cc98:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800cc9a:	68b8      	ldr	r0, [r7, #8]
 800cc9c:	f7ff ffe1 	bl	800cc62 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 800cca0:	4603      	mov	r3, r0
 800cca2:	881a      	ldrh	r2, [r3, #0]
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	801a      	strh	r2, [r3, #0]
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f7ff ffe5 	bl	800cc78 <_ZSt7forwardIRN11SolarGators7Drivers6ButtonEEOT_RNSt16remove_referenceIS4_E4typeE>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	1d1c      	adds	r4, r3, #4
 800ccb4:	4615      	mov	r5, r2
 800ccb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ccb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ccba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ccbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ccbe:	682b      	ldr	r3, [r5, #0]
 800ccc0:	6023      	str	r3, [r4, #0]
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3710      	adds	r7, #16
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bdb0      	pop	{r4, r5, r7, pc}

0800cccc <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cccc:	b480      	push	{r7}
 800ccce:	b083      	sub	sp, #12
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	370c      	adds	r7, #12
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr

0800cce2 <_ZSt7forwardIN11SolarGators7Drivers6ButtonEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cce2:	b480      	push	{r7}
 800cce4:	b083      	sub	sp, #12
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	4618      	mov	r0, r3
 800ccee:	370c      	adds	r7, #12
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16create_data_nodeEv>:
    Data_Node& create_data_node()
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
      Data_Node* (etl::ipool::*func)() = &etl::ipool::allocate<Data_Node>;
 800cd00:	4b0f      	ldr	r3, [pc, #60]	; (800cd40 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16create_data_nodeEv+0x48>)
 800cd02:	60bb      	str	r3, [r7, #8]
 800cd04:	2300      	movs	r3, #0
 800cd06:	60fb      	str	r3, [r7, #12]
      return *(p_node_pool->*func)();
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	68fa      	ldr	r2, [r7, #12]
 800cd0e:	1052      	asrs	r2, r2, #1
 800cd10:	1899      	adds	r1, r3, r2
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f003 0301 	and.w	r3, r3, #1
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d101      	bne.n	800cd20 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16create_data_nodeEv+0x28>
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	e008      	b.n	800cd32 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16create_data_nodeEv+0x3a>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	68fa      	ldr	r2, [r7, #12]
 800cd26:	1052      	asrs	r2, r2, #1
 800cd28:	4413      	add	r3, r2
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	68ba      	ldr	r2, [r7, #8]
 800cd2e:	4413      	add	r3, r2
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4608      	mov	r0, r1
 800cd34:	4798      	blx	r3
 800cd36:	4603      	mov	r3, r0
    }
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3710      	adds	r7, #16
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}
 800cd40:	0800d2c5 	.word	0x0800d2c5

0800cd44 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castERNS_8map_base4NodeE>:
    static Data_Node& data_cast(Node& node)
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
      return static_cast<Data_Node&>(node);
 800cd4c:	687b      	ldr	r3, [r7, #4]
    }
 800cd4e:	4618      	mov	r0, r3
 800cd50:	370c      	adds	r7, #12
 800cd52:	46bd      	mov	sp, r7
 800cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd58:	4770      	bx	lr

0800cd5a <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKNS6_9Data_NodeES9_>:
    bool node_comp(const Data_Node& node1, const Data_Node& node2) const
 800cd5a:	b580      	push	{r7, lr}
 800cd5c:	b084      	sub	sp, #16
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	60f8      	str	r0, [r7, #12]
 800cd62:	60b9      	str	r1, [r7, #8]
 800cd64:	607a      	str	r2, [r7, #4]
      return kcompare(node1.value.first, node2.value.first);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	f103 0010 	add.w	r0, r3, #16
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	f103 010c 	add.w	r1, r3, #12
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	330c      	adds	r3, #12
 800cd76:	461a      	mov	r2, r3
 800cd78:	f000 fac0 	bl	800d2fc <_ZNK3etl4lessItEclERKtS3_>
 800cd7c:	4603      	mov	r3, r0
    }
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3710      	adds	r7, #16
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}

0800cd86 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE17destroy_data_nodeERNS6_9Data_NodeE>:
    void destroy_data_node(Data_Node& node)
 800cd86:	b580      	push	{r7, lr}
 800cd88:	b082      	sub	sp, #8
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	6078      	str	r0, [r7, #4]
 800cd8e:	6039      	str	r1, [r7, #0]
      node.value.~value_type();
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	330c      	adds	r3, #12
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7ff faa0 	bl	800c2da <_ZNSt4pairIKtN11SolarGators7Drivers6ButtonEED1Ev>
      p_node_pool->release(&node);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	68db      	ldr	r3, [r3, #12]
 800cd9e:	6839      	ldr	r1, [r7, #0]
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7fe fce3 	bl	800b76c <_ZN3etl5ipool7releaseEPKv>
    }
 800cda6:	bf00      	nop
 800cda8:	3708      	adds	r7, #8
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <_ZSt7forwardIN3etl4imapItN11SolarGators7Drivers6ButtonENS0_4lessItEEE8iteratorEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cdae:	b480      	push	{r7}
 800cdb0:	b083      	sub	sp, #12
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	4618      	mov	r0, r3
 800cdba:	370c      	adds	r7, #12
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr

0800cdc4 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cdc4:	b480      	push	{r7}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	4618      	mov	r0, r3
 800cdd0:	370c      	adds	r7, #12
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr

0800cdda <_ZNSt4pairIN3etl4imapItN11SolarGators7Drivers6ButtonENS0_4lessItEEE8iteratorEbEC1IS8_RbLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800cdda:	b590      	push	{r4, r7, lr}
 800cddc:	b085      	sub	sp, #20
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	60f8      	str	r0, [r7, #12]
 800cde2:	60b9      	str	r1, [r7, #8]
 800cde4:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800cde6:	68fc      	ldr	r4, [r7, #12]
 800cde8:	68b8      	ldr	r0, [r7, #8]
 800cdea:	f7ff ffe0 	bl	800cdae <_ZSt7forwardIN3etl4imapItN11SolarGators7Drivers6ButtonENS0_4lessItEEE8iteratorEEOT_RNSt16remove_referenceIS9_E4typeE>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	f7ff fe32 	bl	800ca5c <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorC1ERKS7_>
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f7ff ffe3 	bl	800cdc4 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	781a      	ldrb	r2, [r3, #0]
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	721a      	strb	r2, [r3, #8]
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3714      	adds	r7, #20
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd90      	pop	{r4, r7, pc}

0800ce10 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKtRKNS6_9Data_NodeE>:
    bool node_comp(key_parameter_t key, const Data_Node& node) const
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b084      	sub	sp, #16
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	607a      	str	r2, [r7, #4]
      return kcompare(key, node.value.first);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f103 0010 	add.w	r0, r3, #16
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	330c      	adds	r3, #12
 800ce26:	461a      	mov	r2, r3
 800ce28:	68b9      	ldr	r1, [r7, #8]
 800ce2a:	f000 fa67 	bl	800d2fc <_ZNK3etl4lessItEclERKtS3_>
 800ce2e:	4603      	mov	r3, r0
    }
 800ce30:	4618      	mov	r0, r3
 800ce32:	3710      	adds	r7, #16
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKNS6_9Data_NodeERKt>:
    bool node_comp(const Data_Node& node, key_parameter_t key) const
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
      return kcompare(node.value.first, key);
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f103 0010 	add.w	r0, r3, #16
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	330c      	adds	r3, #12
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	4619      	mov	r1, r3
 800ce52:	f000 fa53 	bl	800d2fc <_ZNK3etl4lessItEclERKtS3_>
 800ce56:	4603      	mov	r3, r0
    }
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3710      	adds	r7, #16
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}

0800ce60 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorC1ERS6_>:
      iterator(imap& map)
 800ce60:	b480      	push	{r7}
 800ce62:	b083      	sub	sp, #12
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	6039      	str	r1, [r7, #0]
        , p_node(ETL_NULLPTR)
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	683a      	ldr	r2, [r7, #0]
 800ce6e:	601a      	str	r2, [r3, #0]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2200      	movs	r2, #0
 800ce74:	605a      	str	r2, [r3, #4]
      }
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	4618      	mov	r0, r3
 800ce7a:	370c      	adds	r7, #12
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr

0800ce84 <_ZN3etleqERKNS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorES9_>:
      friend bool operator == (const const_iterator& lhs, const const_iterator& rhs)
 800ce84:	b480      	push	{r7}
 800ce86:	b083      	sub	sp, #12
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
        return lhs.p_map == rhs.p_map && lhs.p_node == rhs.p_node;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681a      	ldr	r2, [r3, #0]
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d107      	bne.n	800ceaa <_ZN3etleqERKNS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorES9_+0x26>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	685a      	ldr	r2, [r3, #4]
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	685b      	ldr	r3, [r3, #4]
 800cea2:	429a      	cmp	r2, r3
 800cea4:	d101      	bne.n	800ceaa <_ZN3etleqERKNS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorES9_+0x26>
 800cea6:	2301      	movs	r3, #1
 800cea8:	e000      	b.n	800ceac <_ZN3etleqERKNS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorES9_+0x28>
 800ceaa:	2300      	movs	r3, #0
      }
 800ceac:	4618      	mov	r0, r3
 800ceae:	370c      	adds	r7, #12
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr

0800ceb8 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_>:
    Node*& find_node(Node*& position, const Node* node)
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b088      	sub	sp, #32
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	607a      	str	r2, [r7, #4]
      Node* found = position;
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	61fb      	str	r3, [r7, #28]
      while (found)
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d030      	beq.n	800cf32 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_+0x7a>
        if (found->children[kLeft] == node)
 800ced0:	69fb      	ldr	r3, [r7, #28]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d101      	bne.n	800cede <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_+0x26>
          return found->children[kLeft];
 800ceda:	69fb      	ldr	r3, [r7, #28]
 800cedc:	e02b      	b.n	800cf36 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_+0x7e>
        else if (found->children[kRight] == node)
 800cede:	69fb      	ldr	r3, [r7, #28]
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	687a      	ldr	r2, [r7, #4]
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d102      	bne.n	800ceee <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_+0x36>
          return found->children[kRight];
 800cee8:	69fb      	ldr	r3, [r7, #28]
 800ceea:	3304      	adds	r3, #4
 800ceec:	e023      	b.n	800cf36 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_+0x7e>
          Data_Node& found_data_node = imap::data_cast(*found);
 800ceee:	69f8      	ldr	r0, [r7, #28]
 800cef0:	f7ff ff28 	bl	800cd44 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 800cef4:	61b8      	str	r0, [r7, #24]
          const Data_Node& data_node = imap::data_cast(*node);
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 fa15 	bl	800d326 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castERKNS_8map_base4NodeE>
 800cefc:	6178      	str	r0, [r7, #20]
          if (node_comp(data_node, found_data_node))
 800cefe:	69ba      	ldr	r2, [r7, #24]
 800cf00:	6979      	ldr	r1, [r7, #20]
 800cf02:	68f8      	ldr	r0, [r7, #12]
 800cf04:	f7ff ff29 	bl	800cd5a <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKNS6_9Data_NodeES9_>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d003      	beq.n	800cf16 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_+0x5e>
            found = found->children[kLeft];
 800cf0e:	69fb      	ldr	r3, [r7, #28]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	61fb      	str	r3, [r7, #28]
 800cf14:	e7d9      	b.n	800ceca <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_+0x12>
          else if (node_comp(found_data_node, data_node))
 800cf16:	697a      	ldr	r2, [r7, #20]
 800cf18:	69b9      	ldr	r1, [r7, #24]
 800cf1a:	68f8      	ldr	r0, [r7, #12]
 800cf1c:	f7ff ff1d 	bl	800cd5a <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKNS6_9Data_NodeES9_>
 800cf20:	4603      	mov	r3, r0
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d003      	beq.n	800cf2e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_+0x76>
            found = found->children[kRight];
 800cf26:	69fb      	ldr	r3, [r7, #28]
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	61fb      	str	r3, [r7, #28]
 800cf2c:	e7cd      	b.n	800ceca <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_+0x12>
            return position;
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	e001      	b.n	800cf36 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_+0x7e>
      return root_node;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	3308      	adds	r3, #8
    }
 800cf36:	4618      	mov	r0, r3
 800cf38:	3720      	adds	r7, #32
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}

0800cf3e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorppEv>:
      iterator& operator ++()
 800cf3e:	b580      	push	{r7, lr}
 800cf40:	b082      	sub	sp, #8
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
        p_map->next_node(p_node);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	3304      	adds	r3, #4
 800cf4e:	4619      	mov	r1, r3
 800cf50:	4610      	mov	r0, r2
 800cf52:	f000 f9f3 	bl	800d33c <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE>
        return *this;
 800cf56:	687b      	ldr	r3, [r7, #4]
      }
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3708      	adds	r7, #8
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratordeEv>:
      const_reference operator *() const
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b082      	sub	sp, #8
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
        return imap::data_cast(p_node)->value;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f000 fa1f 	bl	800d3b0 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castEPKNS_8map_base4NodeE>
 800cf72:	4603      	mov	r3, r0
 800cf74:	330c      	adds	r3, #12
      }
 800cf76:	4618      	mov	r0, r3
 800cf78:	3708      	adds	r7, #8
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}

0800cf7e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt>:
    Node* remove_node(Node*& position, key_parameter_t key)
 800cf7e:	b590      	push	{r4, r7, lr}
 800cf80:	b08f      	sub	sp, #60	; 0x3c
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	60f8      	str	r0, [r7, #12]
 800cf86:	60b9      	str	r1, [r7, #8]
 800cf88:	607a      	str	r2, [r7, #4]
      Node* found_parent = ETL_NULLPTR;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	637b      	str	r3, [r7, #52]	; 0x34
      Node* found = ETL_NULLPTR;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	633b      	str	r3, [r7, #48]	; 0x30
      Node* replace_parent = ETL_NULLPTR;
 800cf92:	2300      	movs	r3, #0
 800cf94:	62fb      	str	r3, [r7, #44]	; 0x2c
      Node* replace = position;
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	62bb      	str	r3, [r7, #40]	; 0x28
      Node* balance_parent = ETL_NULLPTR;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	627b      	str	r3, [r7, #36]	; 0x24
      Node* balance = root_node;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	623b      	str	r3, [r7, #32]
      while (replace)
 800cfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d057      	beq.n	800d05c <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xde>
        Data_Node& replace_data_node = imap::data_cast(*replace);
 800cfac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfae:	f7ff fec9 	bl	800cd44 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 800cfb2:	61f8      	str	r0, [r7, #28]
        if (node_comp(key, replace_data_node))
 800cfb4:	69fa      	ldr	r2, [r7, #28]
 800cfb6:	6879      	ldr	r1, [r7, #4]
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f7ff ff29 	bl	800ce10 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKtRKNS6_9Data_NodeE>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d003      	beq.n	800cfcc <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x4e>
          replace->dir = kLeft;
 800cfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	725a      	strb	r2, [r3, #9]
 800cfca:	e019      	b.n	800d000 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x82>
        else if (node_comp(replace_data_node, key))
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	69f9      	ldr	r1, [r7, #28]
 800cfd0:	68f8      	ldr	r0, [r7, #12]
 800cfd2:	f7ff ff31 	bl	800ce38 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKNS6_9Data_NodeERKt>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d003      	beq.n	800cfe4 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x66>
          replace->dir = kRight;
 800cfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfde:	2201      	movs	r2, #1
 800cfe0:	725a      	strb	r2, [r3, #9]
 800cfe2:	e00d      	b.n	800d000 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x82>
          replace->dir = replace->children[kLeft] ? kLeft : kRight;
 800cfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	bf0c      	ite	eq
 800cfec:	2301      	moveq	r3, #1
 800cfee:	2300      	movne	r3, #0
 800cff0:	b2db      	uxtb	r3, r3
 800cff2:	461a      	mov	r2, r3
 800cff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff6:	725a      	strb	r2, [r3, #9]
          found_parent = replace_parent;
 800cff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffa:	637b      	str	r3, [r7, #52]	; 0x34
          found = replace;
 800cffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffe:	633b      	str	r3, [r7, #48]	; 0x30
        if (replace->children[replace->dir] == ETL_NULLPTR)
 800d000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d002:	7a5b      	ldrb	r3, [r3, #9]
 800d004:	461a      	mov	r2, r3
 800d006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d024      	beq.n	800d05a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xdc>
        if ((replace->weight == kNeither) ||
 800d010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d012:	7a1b      	ldrb	r3, [r3, #8]
 800d014:	2b02      	cmp	r3, #2
 800d016:	d012      	beq.n	800d03e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xc0>
          (replace->weight == (1 - replace->dir) &&
 800d018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01a:	7a1b      	ldrb	r3, [r3, #8]
 800d01c:	461a      	mov	r2, r3
 800d01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d020:	7a5b      	ldrb	r3, [r3, #9]
 800d022:	f1c3 0301 	rsb	r3, r3, #1
        if ((replace->weight == kNeither) ||
 800d026:	429a      	cmp	r2, r3
 800d028:	d10d      	bne.n	800d046 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xc8>
            replace->children[1 - replace->dir]->weight == kNeither))
 800d02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02c:	7a5b      	ldrb	r3, [r3, #9]
 800d02e:	f1c3 0201 	rsb	r2, r3, #1
 800d032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d038:	7a1b      	ldrb	r3, [r3, #8]
          (replace->weight == (1 - replace->dir) &&
 800d03a:	2b02      	cmp	r3, #2
 800d03c:	d103      	bne.n	800d046 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xc8>
          balance_parent = replace_parent;
 800d03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d040:	627b      	str	r3, [r7, #36]	; 0x24
          balance = replace;
 800d042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d044:	623b      	str	r3, [r7, #32]
        replace_parent = replace;
 800d046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d048:	62fb      	str	r3, [r7, #44]	; 0x2c
        replace = replace->children[replace->dir];
 800d04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d04c:	7a5b      	ldrb	r3, [r3, #9]
 800d04e:	461a      	mov	r2, r3
 800d050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d056:	62bb      	str	r3, [r7, #40]	; 0x28
      while (replace)
 800d058:	e7a5      	b.n	800cfa6 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x28>
          break;
 800d05a:	bf00      	nop
      if (found)
 800d05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05e:	2b00      	cmp	r3, #0
 800d060:	f000 812a 	beq.w	800d2b8 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x33a>
        while (balance)
 800d064:	6a3b      	ldr	r3, [r7, #32]
 800d066:	2b00      	cmp	r3, #0
 800d068:	f000 80ee 	beq.w	800d248 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2ca>
          if (balance->children[balance->dir] == ETL_NULLPTR)
 800d06c:	6a3b      	ldr	r3, [r7, #32]
 800d06e:	7a5b      	ldrb	r3, [r3, #9]
 800d070:	461a      	mov	r2, r3
 800d072:	6a3b      	ldr	r3, [r7, #32]
 800d074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	f000 80e4 	beq.w	800d246 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2c8>
          if (balance->weight == kNeither)
 800d07e:	6a3b      	ldr	r3, [r7, #32]
 800d080:	7a1b      	ldrb	r3, [r3, #8]
 800d082:	2b02      	cmp	r3, #2
 800d084:	d107      	bne.n	800d096 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x118>
            balance->weight = 1 - balance->dir;
 800d086:	6a3b      	ldr	r3, [r7, #32]
 800d088:	7a5b      	ldrb	r3, [r3, #9]
 800d08a:	f1c3 0301 	rsb	r3, r3, #1
 800d08e:	b2da      	uxtb	r2, r3
 800d090:	6a3b      	ldr	r3, [r7, #32]
 800d092:	721a      	strb	r2, [r3, #8]
 800d094:	e0cd      	b.n	800d232 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2b4>
          else if (balance->weight == balance->dir)
 800d096:	6a3b      	ldr	r3, [r7, #32]
 800d098:	7a1a      	ldrb	r2, [r3, #8]
 800d09a:	6a3b      	ldr	r3, [r7, #32]
 800d09c:	7a5b      	ldrb	r3, [r3, #9]
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d103      	bne.n	800d0aa <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x12c>
            balance->weight = kNeither;
 800d0a2:	6a3b      	ldr	r3, [r7, #32]
 800d0a4:	2202      	movs	r2, #2
 800d0a6:	721a      	strb	r2, [r3, #8]
 800d0a8:	e0c3      	b.n	800d232 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2b4>
            int weight = balance->children[1 - balance->dir]->weight;
 800d0aa:	6a3b      	ldr	r3, [r7, #32]
 800d0ac:	7a5b      	ldrb	r3, [r3, #9]
 800d0ae:	f1c3 0201 	rsb	r2, r3, #1
 800d0b2:	6a3b      	ldr	r3, [r7, #32]
 800d0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0b8:	7a1b      	ldrb	r3, [r3, #8]
 800d0ba:	61bb      	str	r3, [r7, #24]
            if (weight == balance->dir)
 800d0bc:	6a3b      	ldr	r3, [r7, #32]
 800d0be:	7a5b      	ldrb	r3, [r3, #9]
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d136      	bne.n	800d136 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x1b8>
              if (balance_parent == ETL_NULLPTR)
 800d0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d118      	bne.n	800d100 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x182>
                rotate_3node(root_node, 1 - balance->dir,
 800d0ce:	68f8      	ldr	r0, [r7, #12]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f103 0108 	add.w	r1, r3, #8
 800d0d6:	6a3b      	ldr	r3, [r7, #32]
 800d0d8:	7a5b      	ldrb	r3, [r3, #9]
 800d0da:	f1c3 0301 	rsb	r3, r3, #1
 800d0de:	b2dc      	uxtb	r4, r3
                  balance->children[1 - balance->dir]->children[balance->dir]->weight);
 800d0e0:	6a3b      	ldr	r3, [r7, #32]
 800d0e2:	7a5b      	ldrb	r3, [r3, #9]
 800d0e4:	f1c3 0201 	rsb	r2, r3, #1
 800d0e8:	6a3b      	ldr	r3, [r7, #32]
 800d0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ee:	6a3a      	ldr	r2, [r7, #32]
 800d0f0:	7a52      	ldrb	r2, [r2, #9]
 800d0f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                rotate_3node(root_node, 1 - balance->dir,
 800d0f6:	7a1b      	ldrb	r3, [r3, #8]
 800d0f8:	4622      	mov	r2, r4
 800d0fa:	f7fe fd22 	bl	800bb42 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh>
 800d0fe:	e06f      	b.n	800d1e0 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x262>
                rotate_3node(balance_parent->children[balance_parent->dir], 1 - balance->dir,
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d104:	7a5b      	ldrb	r3, [r3, #9]
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d10a:	18d1      	adds	r1, r2, r3
 800d10c:	6a3b      	ldr	r3, [r7, #32]
 800d10e:	7a5b      	ldrb	r3, [r3, #9]
 800d110:	f1c3 0301 	rsb	r3, r3, #1
 800d114:	b2dc      	uxtb	r4, r3
                  balance->children[1 - balance->dir]->children[balance->dir]->weight);
 800d116:	6a3b      	ldr	r3, [r7, #32]
 800d118:	7a5b      	ldrb	r3, [r3, #9]
 800d11a:	f1c3 0201 	rsb	r2, r3, #1
 800d11e:	6a3b      	ldr	r3, [r7, #32]
 800d120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d124:	6a3a      	ldr	r2, [r7, #32]
 800d126:	7a52      	ldrb	r2, [r2, #9]
 800d128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                rotate_3node(balance_parent->children[balance_parent->dir], 1 - balance->dir,
 800d12c:	7a1b      	ldrb	r3, [r3, #8]
 800d12e:	4622      	mov	r2, r4
 800d130:	f7fe fd07 	bl	800bb42 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh>
 800d134:	e054      	b.n	800d1e0 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x262>
            else if (weight == kNeither)
 800d136:	69bb      	ldr	r3, [r7, #24]
 800d138:	2b02      	cmp	r3, #2
 800d13a:	d133      	bne.n	800d1a4 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x226>
              if (balance_parent == ETL_NULLPTR)
 800d13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d111      	bne.n	800d166 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x1e8>
                rotate_2node(root_node, 1 - balance->dir);
 800d142:	68f8      	ldr	r0, [r7, #12]
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f103 0108 	add.w	r1, r3, #8
 800d14a:	6a3b      	ldr	r3, [r7, #32]
 800d14c:	7a5b      	ldrb	r3, [r3, #9]
 800d14e:	f1c3 0301 	rsb	r3, r3, #1
 800d152:	b2db      	uxtb	r3, r3
 800d154:	461a      	mov	r2, r3
 800d156:	f7fe fcc3 	bl	800bae0 <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
                root_node->weight = balance->dir;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	689b      	ldr	r3, [r3, #8]
 800d15e:	6a3a      	ldr	r2, [r7, #32]
 800d160:	7a52      	ldrb	r2, [r2, #9]
 800d162:	721a      	strb	r2, [r3, #8]
 800d164:	e016      	b.n	800d194 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x216>
                rotate_2node(balance_parent->children[balance_parent->dir], 1 - balance->dir);
 800d166:	68f8      	ldr	r0, [r7, #12]
 800d168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16a:	7a5b      	ldrb	r3, [r3, #9]
 800d16c:	009b      	lsls	r3, r3, #2
 800d16e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d170:	18d1      	adds	r1, r2, r3
 800d172:	6a3b      	ldr	r3, [r7, #32]
 800d174:	7a5b      	ldrb	r3, [r3, #9]
 800d176:	f1c3 0301 	rsb	r3, r3, #1
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	461a      	mov	r2, r3
 800d17e:	f7fe fcaf 	bl	800bae0 <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
                balance_parent->children[balance_parent->dir]->weight = balance->dir;
 800d182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d184:	7a5b      	ldrb	r3, [r3, #9]
 800d186:	461a      	mov	r2, r3
 800d188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d18e:	6a3a      	ldr	r2, [r7, #32]
 800d190:	7a52      	ldrb	r2, [r2, #9]
 800d192:	721a      	strb	r2, [r3, #8]
              balance->weight = 1 - balance->dir;
 800d194:	6a3b      	ldr	r3, [r7, #32]
 800d196:	7a5b      	ldrb	r3, [r3, #9]
 800d198:	f1c3 0301 	rsb	r3, r3, #1
 800d19c:	b2da      	uxtb	r2, r3
 800d19e:	6a3b      	ldr	r3, [r7, #32]
 800d1a0:	721a      	strb	r2, [r3, #8]
 800d1a2:	e01d      	b.n	800d1e0 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x262>
              if (balance_parent == ETL_NULLPTR)
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d10c      	bne.n	800d1c4 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x246>
                rotate_2node(root_node, 1 - balance->dir);
 800d1aa:	68f8      	ldr	r0, [r7, #12]
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	f103 0108 	add.w	r1, r3, #8
 800d1b2:	6a3b      	ldr	r3, [r7, #32]
 800d1b4:	7a5b      	ldrb	r3, [r3, #9]
 800d1b6:	f1c3 0301 	rsb	r3, r3, #1
 800d1ba:	b2db      	uxtb	r3, r3
 800d1bc:	461a      	mov	r2, r3
 800d1be:	f7fe fc8f 	bl	800bae0 <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
 800d1c2:	e00d      	b.n	800d1e0 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x262>
                rotate_2node(balance_parent->children[balance_parent->dir], 1 - balance->dir);
 800d1c4:	68f8      	ldr	r0, [r7, #12]
 800d1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c8:	7a5b      	ldrb	r3, [r3, #9]
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1ce:	18d1      	adds	r1, r2, r3
 800d1d0:	6a3b      	ldr	r3, [r7, #32]
 800d1d2:	7a5b      	ldrb	r3, [r3, #9]
 800d1d4:	f1c3 0301 	rsb	r3, r3, #1
 800d1d8:	b2db      	uxtb	r3, r3
 800d1da:	461a      	mov	r2, r3
 800d1dc:	f7fe fc80 	bl	800bae0 <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
            if (balance == found)
 800d1e0:	6a3a      	ldr	r2, [r7, #32]
 800d1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d124      	bne.n	800d232 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2b4>
              if (balance_parent)
 800d1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d012      	beq.n	800d214 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x296>
                found_parent = balance_parent->children[balance_parent->dir];
 800d1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f0:	7a5b      	ldrb	r3, [r3, #9]
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1fa:	637b      	str	r3, [r7, #52]	; 0x34
                found_parent->dir = found_parent->children[kLeft] == found ? kLeft : kRight;
 800d1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d202:	429a      	cmp	r2, r3
 800d204:	bf14      	ite	ne
 800d206:	2301      	movne	r3, #1
 800d208:	2300      	moveq	r3, #0
 800d20a:	b2db      	uxtb	r3, r3
 800d20c:	461a      	mov	r2, r3
 800d20e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d210:	725a      	strb	r2, [r3, #9]
 800d212:	e00e      	b.n	800d232 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2b4>
                found_parent = root_node;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	689b      	ldr	r3, [r3, #8]
 800d218:	637b      	str	r3, [r7, #52]	; 0x34
                root_node->dir = root_node->children[kLeft] == found ? kLeft : kRight;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	689b      	ldr	r3, [r3, #8]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d222:	429a      	cmp	r2, r3
 800d224:	bf14      	ite	ne
 800d226:	2301      	movne	r3, #1
 800d228:	2300      	moveq	r3, #0
 800d22a:	b2da      	uxtb	r2, r3
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	689b      	ldr	r3, [r3, #8]
 800d230:	725a      	strb	r2, [r3, #9]
          balance_parent = balance;
 800d232:	6a3b      	ldr	r3, [r7, #32]
 800d234:	627b      	str	r3, [r7, #36]	; 0x24
          balance = balance->children[balance->dir];
 800d236:	6a3b      	ldr	r3, [r7, #32]
 800d238:	7a5b      	ldrb	r3, [r3, #9]
 800d23a:	461a      	mov	r2, r3
 800d23c:	6a3b      	ldr	r3, [r7, #32]
 800d23e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d242:	623b      	str	r3, [r7, #32]
        while (balance)
 800d244:	e70e      	b.n	800d064 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xe6>
            break;
 800d246:	bf00      	nop
        if (found_parent)
 800d248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d00e      	beq.n	800d26c <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2ee>
          detach_node(found_parent->children[found_parent->dir],
 800d24e:	68f8      	ldr	r0, [r7, #12]
 800d250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d252:	7a5b      	ldrb	r3, [r3, #9]
 800d254:	009b      	lsls	r3, r3, #2
 800d256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d258:	18d1      	adds	r1, r2, r3
            replace_parent->children[replace_parent->dir]);
 800d25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25c:	7a5b      	ldrb	r3, [r3, #9]
 800d25e:	009b      	lsls	r3, r3, #2
 800d260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d262:	4413      	add	r3, r2
          detach_node(found_parent->children[found_parent->dir],
 800d264:	461a      	mov	r2, r3
 800d266:	f7fe fd10 	bl	800bc8a <_ZN3etl8map_base11detach_nodeERPNS0_4NodeES3_>
 800d26a:	e018      	b.n	800d29e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x320>
          if (replace_parent)
 800d26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d00c      	beq.n	800d28c <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x30e>
            detach_node(root_node, replace_parent->children[replace_parent->dir]);
 800d272:	68f8      	ldr	r0, [r7, #12]
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f103 0108 	add.w	r1, r3, #8
 800d27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27c:	7a5b      	ldrb	r3, [r3, #9]
 800d27e:	009b      	lsls	r3, r3, #2
 800d280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d282:	4413      	add	r3, r2
 800d284:	461a      	mov	r2, r3
 800d286:	f7fe fd00 	bl	800bc8a <_ZN3etl8map_base11detach_nodeERPNS0_4NodeES3_>
 800d28a:	e008      	b.n	800d29e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x320>
            detach_node(root_node, root_node);
 800d28c:	68f8      	ldr	r0, [r7, #12]
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	f103 0108 	add.w	r1, r3, #8
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	3308      	adds	r3, #8
 800d298:	461a      	mov	r2, r3
 800d29a:	f7fe fcf6 	bl	800bc8a <_ZN3etl8map_base11detach_nodeERPNS0_4NodeES3_>
        Data_Node& found_data_node = imap::data_cast(*found);
 800d29e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2a0:	f7ff fd50 	bl	800cd44 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 800d2a4:	6178      	str	r0, [r7, #20]
        --current_size;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	1e5a      	subs	r2, r3, #1
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	601a      	str	r2, [r3, #0]
        destroy_data_node(found_data_node);
 800d2b0:	6979      	ldr	r1, [r7, #20]
 800d2b2:	68f8      	ldr	r0, [r7, #12]
 800d2b4:	f7ff fd67 	bl	800cd86 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE17destroy_data_nodeERNS6_9Data_NodeE>
      return found;
 800d2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	373c      	adds	r7, #60	; 0x3c
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd90      	pop	{r4, r7, pc}
	...

0800d2c4 <_ZN3etl5ipool8allocateINS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9Data_NodeEEEPT_v>:
    T* allocate()
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b082      	sub	sp, #8
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
      if (sizeof(T) > Item_Size)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	691b      	ldr	r3, [r3, #16]
 800d2d0:	2b33      	cmp	r3, #51	; 0x33
 800d2d2:	d805      	bhi.n	800d2e0 <_ZN3etl5ipool8allocateINS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9Data_NodeEEEPT_v+0x1c>
        ETL_ASSERT(false, ETL_ERROR(etl::pool_element_size));
 800d2d4:	4b06      	ldr	r3, [pc, #24]	; (800d2f0 <_ZN3etl5ipool8allocateINS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9Data_NodeEEEPT_v+0x2c>)
 800d2d6:	4a07      	ldr	r2, [pc, #28]	; (800d2f4 <_ZN3etl5ipool8allocateINS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9Data_NodeEEEPT_v+0x30>)
 800d2d8:	2175      	movs	r1, #117	; 0x75
 800d2da:	4807      	ldr	r0, [pc, #28]	; (800d2f8 <_ZN3etl5ipool8allocateINS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9Data_NodeEEEPT_v+0x34>)
 800d2dc:	f00a fec6 	bl	801806c <__assert_func>
      return reinterpret_cast<T*>(allocate_item());
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f7fe fa73 	bl	800b7cc <_ZN3etl5ipool13allocate_itemEv>
 800d2e6:	4603      	mov	r3, r0
    }
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3708      	adds	r7, #8
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}
 800d2f0:	08019294 	.word	0x08019294
 800d2f4:	08019638 	.word	0x08019638
 800d2f8:	080192c0 	.word	0x080192c0

0800d2fc <_ZNK3etl4lessItEclERKtS3_>:
    ETL_CONSTEXPR bool operator()(const T &lhs, const T &rhs) const
 800d2fc:	b480      	push	{r7}
 800d2fe:	b085      	sub	sp, #20
 800d300:	af00      	add	r7, sp, #0
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	60b9      	str	r1, [r7, #8]
 800d306:	607a      	str	r2, [r7, #4]
      return (lhs < rhs);
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	881a      	ldrh	r2, [r3, #0]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	881b      	ldrh	r3, [r3, #0]
 800d310:	429a      	cmp	r2, r3
 800d312:	bf34      	ite	cc
 800d314:	2301      	movcc	r3, #1
 800d316:	2300      	movcs	r3, #0
 800d318:	b2db      	uxtb	r3, r3
    }
 800d31a:	4618      	mov	r0, r3
 800d31c:	3714      	adds	r7, #20
 800d31e:	46bd      	mov	sp, r7
 800d320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d324:	4770      	bx	lr

0800d326 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castERKNS_8map_base4NodeE>:
    static const Data_Node& data_cast(const Node& node)
 800d326:	b480      	push	{r7}
 800d328:	b083      	sub	sp, #12
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
      return static_cast<const Data_Node&>(node);
 800d32e:	687b      	ldr	r3, [r7, #4]
    }
 800d330:	4618      	mov	r0, r3
 800d332:	370c      	adds	r7, #12
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE>:
    void next_node(Node*&position)
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b084      	sub	sp, #16
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
      if (position)
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d02c      	beq.n	800d3a8 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x6c>
        if (position->children[kRight])
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	685b      	ldr	r3, [r3, #4]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d00b      	beq.n	800d370 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x34>
          position = find_limit_node(position->children[kRight], kLeft);
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	685b      	ldr	r3, [r3, #4]
 800d360:	2200      	movs	r2, #0
 800d362:	4619      	mov	r1, r3
 800d364:	f7fe fc5b 	bl	800bc1e <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa>
 800d368:	4602      	mov	r2, r0
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	601a      	str	r2, [r3, #0]
    }
 800d36e:	e01b      	b.n	800d3a8 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x6c>
          Node* parent = position;
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	60fb      	str	r3, [r7, #12]
            position = parent;
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	68fa      	ldr	r2, [r7, #12]
 800d37a:	601a      	str	r2, [r3, #0]
            parent = find_parent_node(root_node, position);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6899      	ldr	r1, [r3, #8]
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	461a      	mov	r2, r3
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 f81d 	bl	800d3c6 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_>
 800d38c:	60f8      	str	r0, [r7, #12]
          } while (parent && parent->children[kRight] == position);
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d006      	beq.n	800d3a2 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x66>
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	685a      	ldr	r2, [r3, #4]
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d100      	bne.n	800d3a2 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x66>
          do {
 800d3a0:	e7e9      	b.n	800d376 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x3a>
          position = parent;
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	68fa      	ldr	r2, [r7, #12]
 800d3a6:	601a      	str	r2, [r3, #0]
    }
 800d3a8:	bf00      	nop
 800d3aa:	3710      	adds	r7, #16
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}

0800d3b0 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castEPKNS_8map_base4NodeE>:
    static const Data_Node* data_cast(const Node* p_node)
 800d3b0:	b480      	push	{r7}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
      return static_cast<const Data_Node*>(p_node);
 800d3b8:	687b      	ldr	r3, [r7, #4]
    }
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	370c      	adds	r7, #12
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c4:	4770      	bx	lr

0800d3c6 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_>:
    Node* find_parent_node(Node* position, const Node* node)
 800d3c6:	b580      	push	{r7, lr}
 800d3c8:	b088      	sub	sp, #32
 800d3ca:	af00      	add	r7, sp, #0
 800d3cc:	60f8      	str	r0, [r7, #12]
 800d3ce:	60b9      	str	r1, [r7, #8]
 800d3d0:	607a      	str	r2, [r7, #4]
      Node* found = ETL_NULLPTR;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	61fb      	str	r3, [r7, #28]
      if (position && node && position != node)
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d038      	beq.n	800d44e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x88>
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d035      	beq.n	800d44e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x88>
 800d3e2:	68ba      	ldr	r2, [r7, #8]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d031      	beq.n	800d44e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x88>
        while (position)
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d02e      	beq.n	800d44e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x88>
          if (position->children[kLeft] != node &&
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d024      	beq.n	800d444 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x7e>
            position->children[kRight] != node)
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	685b      	ldr	r3, [r3, #4]
          if (position->children[kLeft] != node &&
 800d3fe:	687a      	ldr	r2, [r7, #4]
 800d400:	429a      	cmp	r2, r3
 800d402:	d01f      	beq.n	800d444 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x7e>
            const Data_Node& node_data_node = imap::data_cast(*node);
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f7ff ff8e 	bl	800d326 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castERKNS_8map_base4NodeE>
 800d40a:	61b8      	str	r0, [r7, #24]
            Data_Node& position_data_node = imap::data_cast(*position);
 800d40c:	68b8      	ldr	r0, [r7, #8]
 800d40e:	f7ff fc99 	bl	800cd44 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 800d412:	6178      	str	r0, [r7, #20]
            if (node_comp(node_data_node, position_data_node))
 800d414:	697a      	ldr	r2, [r7, #20]
 800d416:	69b9      	ldr	r1, [r7, #24]
 800d418:	68f8      	ldr	r0, [r7, #12]
 800d41a:	f7ff fc9e 	bl	800cd5a <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKNS6_9Data_NodeES9_>
 800d41e:	4603      	mov	r3, r0
 800d420:	2b00      	cmp	r3, #0
 800d422:	d003      	beq.n	800d42c <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x66>
              position = position->children[kLeft];
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	60bb      	str	r3, [r7, #8]
            }
 800d42a:	e00e      	b.n	800d44a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x84>
            else if (node_comp(position_data_node, node_data_node))
 800d42c:	69ba      	ldr	r2, [r7, #24]
 800d42e:	6979      	ldr	r1, [r7, #20]
 800d430:	68f8      	ldr	r0, [r7, #12]
 800d432:	f7ff fc92 	bl	800cd5a <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKNS6_9Data_NodeES9_>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d006      	beq.n	800d44a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x84>
              position = position->children[kRight];
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	60bb      	str	r3, [r7, #8]
            }
 800d442:	e002      	b.n	800d44a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x84>
            found = position;
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	61fb      	str	r3, [r7, #28]
            break;
 800d448:	e001      	b.n	800d44e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x88>
            }
 800d44a:	bf00      	nop
        while (position)
 800d44c:	e7cd      	b.n	800d3ea <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x24>
      return found;
 800d44e:	69fb      	ldr	r3, [r7, #28]
    }
 800d450:	4618      	mov	r0, r3
 800d452:	3720      	adds	r7, #32
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>:
#include "Button.hpp"

#include "map"
namespace SolarGators::Drivers {

Button::Button(const char* name, GPIO_TypeDef* port, uint16_t pin, uint16_t press_time, GPIO_PinState active_state):
 800d458:	b580      	push	{r7, lr}
 800d45a:	b084      	sub	sp, #16
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	60f8      	str	r0, [r7, #12]
 800d460:	60b9      	str	r1, [r7, #8]
 800d462:	607a      	str	r2, [r7, #4]
 800d464:	807b      	strh	r3, [r7, #2]
    name_(name),port_(port),pin_(pin),press_time_(press_time), active_state_(active_state), press_count_(0), last_valid_press_time_(0)
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	4618      	mov	r0, r3
 800d46a:	f000 f887 	bl	800d57c <_ZN3etl8delegateIFvvEEC1Ev>
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	68ba      	ldr	r2, [r7, #8]
 800d472:	609a      	str	r2, [r3, #8]
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	60da      	str	r2, [r3, #12]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	887a      	ldrh	r2, [r7, #2]
 800d47e:	821a      	strh	r2, [r3, #16]
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	8b3a      	ldrh	r2, [r7, #24]
 800d484:	829a      	strh	r2, [r3, #20]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	7f3a      	ldrb	r2, [r7, #28]
 800d48a:	759a      	strb	r2, [r3, #22]
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2200      	movs	r2, #0
 800d490:	619a      	str	r2, [r3, #24]
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2200      	movs	r2, #0
 800d496:	61da      	str	r2, [r3, #28]
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2232      	movs	r2, #50	; 0x32
 800d49c:	841a      	strh	r2, [r3, #32]
{
  disabled_ = false;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3710      	adds	r7, #16
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <_ZN11SolarGators7Drivers6ButtonD1Ev>:

Button::~Button()
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
{
}
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	370c      	adds	r7, #12
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c4:	4770      	bx	lr

0800d4c6 <_ZN11SolarGators7Drivers6Button7ReadPinEv>:

GPIO_PinState Button::ReadPin()
{
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b082      	sub	sp, #8
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin(port_, pin_);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	68da      	ldr	r2, [r3, #12]
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	8a1b      	ldrh	r3, [r3, #16]
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	4610      	mov	r0, r2
 800d4da:	f7fa f9e1 	bl	80078a0 <HAL_GPIO_ReadPin>
 800d4de:	4603      	mov	r3, r0
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3708      	adds	r7, #8
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <_ZN11SolarGators7Drivers6Button11HandlePressEv>:

void Button::HandlePress()
{
 800d4e8:	b590      	push	{r4, r7, lr}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
  if(last_valid_press_time_ + debounce_time_ < osKernelGetTickCount())
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	69db      	ldr	r3, [r3, #28]
 800d4f4:	687a      	ldr	r2, [r7, #4]
 800d4f6:	8c12      	ldrh	r2, [r2, #32]
 800d4f8:	189c      	adds	r4, r3, r2
 800d4fa:	f006 f9c1 	bl	8013880 <osKernelGetTickCount>
 800d4fe:	4603      	mov	r3, r0
 800d500:	429c      	cmp	r4, r3
 800d502:	bf34      	ite	cc
 800d504:	2301      	movcc	r3, #1
 800d506:	2300      	movcs	r3, #0
 800d508:	b2db      	uxtb	r3, r3
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d033      	beq.n	800d576 <_ZN11SolarGators7Drivers6Button11HandlePressEv+0x8e>
  {
    press_count_++;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	699b      	ldr	r3, [r3, #24]
 800d512:	1c5a      	adds	r2, r3, #1
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	619a      	str	r2, [r3, #24]
    last_valid_press_time_ = osKernelGetTickCount();
 800d518:	f006 f9b2 	bl	8013880 <osKernelGetTickCount>
 800d51c:	4602      	mov	r2, r0
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	61da      	str	r2, [r3, #28]
    // Sleep until we should call action
    osDelay(debounce_time_ + press_time_);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	8c1b      	ldrh	r3, [r3, #32]
 800d526:	461a      	mov	r2, r3
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	8a9b      	ldrh	r3, [r3, #20]
 800d52c:	4413      	add	r3, r2
 800d52e:	4618      	mov	r0, r3
 800d530:	f006 fa4d 	bl	80139ce <osDelay>
    if(ReadPin() != active_state_)
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f7ff ffc6 	bl	800d4c6 <_ZN11SolarGators7Drivers6Button7ReadPinEv>
 800d53a:	4603      	mov	r3, r0
 800d53c:	461a      	mov	r2, r3
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	7d9b      	ldrb	r3, [r3, #22]
 800d542:	429a      	cmp	r2, r3
 800d544:	bf14      	ite	ne
 800d546:	2301      	movne	r3, #1
 800d548:	2300      	moveq	r3, #0
 800d54a:	b2db      	uxtb	r3, r3
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d111      	bne.n	800d574 <_ZN11SolarGators7Drivers6Button11HandlePressEv+0x8c>
      return;
    // Make sure button is still pressed
    // and there is an action assigned to it
    if(action_)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	4618      	mov	r0, r3
 800d554:	f000 f81f 	bl	800d596 <_ZNK3etl8delegateIFvvEEcvbEv>
 800d558:	4603      	mov	r3, r0
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d00b      	beq.n	800d576 <_ZN11SolarGators7Drivers6Button11HandlePressEv+0x8e>
    {
      action_();
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	4618      	mov	r0, r3
 800d562:	f000 f835 	bl	800d5d0 <_ZNK3etl8delegateIFvvEEclEv>
      action_called_time_++;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	7c9b      	ldrb	r3, [r3, #18]
 800d56a:	3301      	adds	r3, #1
 800d56c:	b2da      	uxtb	r2, r3
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	749a      	strb	r2, [r3, #18]
 800d572:	e000      	b.n	800d576 <_ZN11SolarGators7Drivers6Button11HandlePressEv+0x8e>
      return;
 800d574:	bf00      	nop
    }
  }
}
 800d576:	370c      	adds	r7, #12
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd90      	pop	{r4, r7, pc}

0800d57c <_ZN3etl8delegateIFvvEEC1Ev>:
    ETL_CONSTEXPR14 delegate()
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
    {
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	4618      	mov	r0, r3
 800d588:	f7f7 f8c6 	bl	8004718 <_ZN3etl8delegateIFvvEE18invocation_elementC1Ev>
    }
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	4618      	mov	r0, r3
 800d590:	3708      	adds	r7, #8
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}

0800d596 <_ZNK3etl8delegateIFvvEEcvbEv>:
    ETL_CONSTEXPR14 operator bool() const
 800d596:	b580      	push	{r7, lr}
 800d598:	b082      	sub	sp, #8
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
      return is_valid();
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f000 f805 	bl	800d5ae <_ZNK3etl8delegateIFvvEE8is_validEv>
 800d5a4:	4603      	mov	r3, r0
    }
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3708      	adds	r7, #8
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}

0800d5ae <_ZNK3etl8delegateIFvvEE8is_validEv>:
    ETL_CONSTEXPR14 bool is_valid() const
 800d5ae:	b480      	push	{r7}
 800d5b0:	b083      	sub	sp, #12
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
      return invocation.stub != ETL_NULLPTR;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	bf14      	ite	ne
 800d5be:	2301      	movne	r3, #1
 800d5c0:	2300      	moveq	r3, #0
 800d5c2:	b2db      	uxtb	r3, r3
    }
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	370c      	adds	r7, #12
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr

0800d5d0 <_ZNK3etl8delegateIFvvEEclEv>:
    TReturn operator()(TParams... args) const
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
      ETL_ASSERT(is_valid(), ETL_ERROR(delegate_uninitialised));
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f7ff ffe8 	bl	800d5ae <_ZNK3etl8delegateIFvvEE8is_validEv>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d106      	bne.n	800d5f2 <_ZNK3etl8delegateIFvvEEclEv+0x22>
 800d5e4:	4b08      	ldr	r3, [pc, #32]	; (800d608 <_ZNK3etl8delegateIFvvEEclEv+0x38>)
 800d5e6:	4a09      	ldr	r2, [pc, #36]	; (800d60c <_ZNK3etl8delegateIFvvEEclEv+0x3c>)
 800d5e8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d5ec:	4808      	ldr	r0, [pc, #32]	; (800d610 <_ZNK3etl8delegateIFvvEEclEv+0x40>)
 800d5ee:	f00a fd3d 	bl	801806c <__assert_func>
      return (*invocation.stub)(invocation.object, etl::forward<TParams>(args)...);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	685b      	ldr	r3, [r3, #4]
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	6812      	ldr	r2, [r2, #0]
 800d5fa:	4610      	mov	r0, r2
 800d5fc:	4798      	blx	r3
 800d5fe:	bf00      	nop
    }
 800d600:	3708      	adds	r7, #8
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop
 800d608:	080196c4 	.word	0x080196c4
 800d60c:	080196d4 	.word	0x080196d4
 800d610:	08019744 	.word	0x08019744

0800d614 <_ZN11SolarGators7Drivers9CANDriverC1EP19__CAN_HandleTypeDefm>:
extern SolarGators::DataModules::DataModule* MPPT2_ptr;

namespace SolarGators {
namespace Drivers {

CANDriver::CANDriver(CAN_HandleTypeDef* hcan, uint32_t rx_fifo_num_):hcan_(hcan),rx_fifo_num_(rx_fifo_num_)
 800d614:	b580      	push	{r7, lr}
 800d616:	b084      	sub	sp, #16
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	607a      	str	r2, [r7, #4]
 800d620:	4a1c      	ldr	r2, [pc, #112]	; (800d694 <_ZN11SolarGators7Drivers9CANDriverC1EP19__CAN_HandleTypeDefm+0x80>)
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	601a      	str	r2, [r3, #0]
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	3304      	adds	r3, #4
 800d62a:	4618      	mov	r0, r3
 800d62c:	f000 fb36 	bl	800dc9c <_ZN3etl3mapImPN11SolarGators11DataModules10DataModuleELj15ENS_4lessImEEEC1Ev>
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	68ba      	ldr	r2, [r7, #8]
 800d634:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	f503 63b9 	add.w	r3, r3, #1480	; 0x5c8
 800d646:	2224      	movs	r2, #36	; 0x24
 800d648:	2100      	movs	r1, #0
 800d64a:	4618      	mov	r0, r3
 800d64c:	f00a fd98 	bl	8018180 <memset>
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	4a11      	ldr	r2, [pc, #68]	; (800d698 <_ZN11SolarGators7Drivers9CANDriverC1EP19__CAN_HandleTypeDefm+0x84>)
 800d654:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f203 526c 	addw	r2, r3, #1388	; 0x56c
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	f8c3 25d0 	str.w	r2, [r3, #1488]	; 0x5d0
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	225c      	movs	r2, #92	; 0x5c
 800d668:	f8c3 25d4 	str.w	r2, [r3, #1492]	; 0x5d4
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	f503 72b6 	add.w	r2, r3, #364	; 0x16c
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f8c3 25d8 	str.w	r2, [r3, #1496]	; 0x5d8
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d67e:	f8c3 25dc 	str.w	r2, [r3, #1500]	; 0x5dc
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	2221      	movs	r2, #33	; 0x21
 800d686:	f8c3 25e0 	str.w	r2, [r3, #1504]	; 0x5e0
{

}
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	4618      	mov	r0, r3
 800d68e:	3710      	adds	r7, #16
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	0801a400 	.word	0x0801a400
 800d698:	080198bc 	.word	0x080198bc

0800d69c <_ZN11SolarGators7Drivers9CANDriver4InitEv>:

void CANDriver::Init()
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b08c      	sub	sp, #48	; 0x30
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  // Configure Filter
  //Initialize a hardware filter that passes everything
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE; /*Enable the filter*/
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;   /*Mask mode*/
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterMaskIdHigh = 0;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterMaskIdLow = 0;                  /*Accept everything*/
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;  /*One 32-bit filter*/
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	627b      	str	r3, [r7, #36]	; 0x24
  sFilterConfig.FilterBank = 0;                       /*Init bank 0*/
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterFIFOAssignment = 0;             /*Assign to FIFO 0*/
 800d6bc:	2300      	movs	r3, #0
 800d6be:	61bb      	str	r3, [r7, #24]
  HAL_CAN_ConfigFilter(hcan_, &sFilterConfig);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800d6c6:	f107 0208 	add.w	r2, r7, #8
 800d6ca:	4611      	mov	r1, r2
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7f8 fc85 	bl	8005fdc <HAL_CAN_ConfigFilter>
//  if (can_rx_event_ == NULL)
//  {
//      Error_Handler();
//  }

  rx_task_handle_ = osThreadNew((osThreadFunc_t)&CANDriver::HandleReceive, this, &rx_task_attributes_);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f503 63b9 	add.w	r3, r3, #1480	; 0x5c8
 800d6d8:	461a      	mov	r2, r3
 800d6da:	6879      	ldr	r1, [r7, #4]
 800d6dc:	480b      	ldr	r0, [pc, #44]	; (800d70c <_ZN11SolarGators7Drivers9CANDriver4InitEv+0x70>)
 800d6de:	f006 f8e4 	bl	80138aa <osThreadNew>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
  if (rx_task_handle_ == NULL)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d101      	bne.n	800d6f8 <_ZN11SolarGators7Drivers9CANDriver4InitEv+0x5c>
  {
      Error_Handler();
 800d6f4:	f7f4 fd86 	bl	8002204 <Error_Handler>
  }
  //HAL_CAN_ActivateNotification(hcan_, CAN_IT_RX_FIFO0_MSG_PENDING);
  HAL_CAN_Start(hcan_);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7f8 fd4c 	bl	800619c <HAL_CAN_Start>
}
 800d704:	bf00      	nop
 800d706:	3730      	adds	r7, #48	; 0x30
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	0800d75d 	.word	0x0800d75d

0800d710 <_ZN11SolarGators7Drivers9CANDriverD1Ev>:

CANDriver::~CANDriver()
 800d710:	b580      	push	{r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	4a06      	ldr	r2, [pc, #24]	; (800d734 <_ZN11SolarGators7Drivers9CANDriverD1Ev+0x24>)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	601a      	str	r2, [r3, #0]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	3304      	adds	r3, #4
 800d722:	4618      	mov	r0, r3
 800d724:	f000 fad3 	bl	800dcce <_ZN3etl3mapImPN11SolarGators11DataModules10DataModuleELj15ENS_4lessImEEED1Ev>
{ }
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	4618      	mov	r0, r3
 800d72c:	3708      	adds	r7, #8
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
 800d732:	bf00      	nop
 800d734:	0801a400 	.word	0x0801a400

0800d738 <_ZN11SolarGators7Drivers9CANDriverD0Ev>:
CANDriver::~CANDriver()
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
{ }
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f7ff ffe5 	bl	800d710 <_ZN11SolarGators7Drivers9CANDriverD1Ev>
 800d746:	f240 51ec 	movw	r1, #1516	; 0x5ec
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f00a fc06 	bl	8017f5c <_ZdlPvj>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	4618      	mov	r0, r3
 800d754:	3708      	adds	r7, #8
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
	...

0800d75c <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv>:

void CANDriver::HandleReceive()
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b08c      	sub	sp, #48	; 0x30
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
	//osSemaphoreAcquire(canSem, osWaitForever);

    CAN_RxHeaderTypeDef pHeader;
    uint8_t aData[MAX_DATA_SIZE];

    while(HAL_CAN_GetRxFifoFillLevel(hcan_, rx_fifo_num_))
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800d770:	4619      	mov	r1, r3
 800d772:	4610      	mov	r0, r2
 800d774:	f7f8 ff78 	bl	8006668 <HAL_CAN_GetRxFifoFillLevel>
 800d778:	4603      	mov	r3, r0
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	bf14      	ite	ne
 800d77e:	2301      	movne	r3, #1
 800d780:	2300      	moveq	r3, #0
 800d782:	b2db      	uxtb	r3, r3
 800d784:	2b00      	cmp	r3, #0
 800d786:	f000 81d9 	beq.w	800db3c <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3e0>
    {
      HAL_CAN_GetRxMessage(hcan_, rx_fifo_num_, &pHeader, aData);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8d3 1160 	ldr.w	r1, [r3, #352]	; 0x160
 800d796:	f107 030c 	add.w	r3, r7, #12
 800d79a:	f107 0214 	add.w	r2, r7, #20
 800d79e:	f7f8 fe51 	bl	8006444 <HAL_CAN_GetRxMessage>
//			  osMutexRelease(Motor_Rx_2_ptr->mutex_id_);
//			  HAL_GPIO_TogglePin(STM_OK_GPIO_Port, STM_OK_Pin);
//
//			}

      	  if (pHeader.IDE == CAN_ID_STD) {
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	f040 817c 	bne.w	800daa2 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x346>

      		  if (pHeader.StdId == BMS_Rx_0_ptr->can_id_) {
 800d7aa:	697a      	ldr	r2, [r7, #20]
 800d7ac:	4b8f      	ldr	r3, [pc, #572]	; (800d9ec <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x290>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	685b      	ldr	r3, [r3, #4]
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d11d      	bne.n	800d7f2 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x96>

				  osMutexAcquire(BMS_Rx_0_ptr->mutex_id_, osWaitForever);
 800d7b6:	4b8d      	ldr	r3, [pc, #564]	; (800d9ec <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x290>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	695b      	ldr	r3, [r3, #20]
 800d7bc:	f04f 31ff 	mov.w	r1, #4294967295
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f006 fb70 	bl	8013ea6 <osMutexAcquire>
				  BMS_Rx_0_ptr->FromByteArray(aData);
 800d7c6:	4b89      	ldr	r3, [pc, #548]	; (800d9ec <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x290>)
 800d7c8:	681a      	ldr	r2, [r3, #0]
 800d7ca:	4b88      	ldr	r3, [pc, #544]	; (800d9ec <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x290>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	330c      	adds	r3, #12
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f107 010c 	add.w	r1, r7, #12
 800d7d8:	4610      	mov	r0, r2
 800d7da:	4798      	blx	r3
				  osMutexRelease(BMS_Rx_0_ptr->mutex_id_);
 800d7dc:	4b83      	ldr	r3, [pc, #524]	; (800d9ec <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x290>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	695b      	ldr	r3, [r3, #20]
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f006 fbaa 	bl	8013f3c <osMutexRelease>
				  HAL_GPIO_TogglePin(STM_OK_GPIO_Port, STM_OK_Pin);
 800d7e8:	2101      	movs	r1, #1
 800d7ea:	4881      	ldr	r0, [pc, #516]	; (800d9f0 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x294>)
 800d7ec:	f7fa f889 	bl	8007902 <HAL_GPIO_TogglePin>
 800d7f0:	e7b8      	b.n	800d764 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x8>

			  } else if (pHeader.StdId == BMS_Rx_1_ptr->can_id_) {
 800d7f2:	697a      	ldr	r2, [r7, #20]
 800d7f4:	4b7f      	ldr	r3, [pc, #508]	; (800d9f4 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x298>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d11d      	bne.n	800d83a <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0xde>

				  osMutexAcquire(BMS_Rx_1_ptr->mutex_id_, osWaitForever);
 800d7fe:	4b7d      	ldr	r3, [pc, #500]	; (800d9f4 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x298>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	695b      	ldr	r3, [r3, #20]
 800d804:	f04f 31ff 	mov.w	r1, #4294967295
 800d808:	4618      	mov	r0, r3
 800d80a:	f006 fb4c 	bl	8013ea6 <osMutexAcquire>
				  BMS_Rx_1_ptr->FromByteArray(aData);
 800d80e:	4b79      	ldr	r3, [pc, #484]	; (800d9f4 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x298>)
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	4b78      	ldr	r3, [pc, #480]	; (800d9f4 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x298>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	330c      	adds	r3, #12
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f107 010c 	add.w	r1, r7, #12
 800d820:	4610      	mov	r0, r2
 800d822:	4798      	blx	r3
				  osMutexRelease(BMS_Rx_1_ptr->mutex_id_);
 800d824:	4b73      	ldr	r3, [pc, #460]	; (800d9f4 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x298>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	695b      	ldr	r3, [r3, #20]
 800d82a:	4618      	mov	r0, r3
 800d82c:	f006 fb86 	bl	8013f3c <osMutexRelease>
				  HAL_GPIO_TogglePin(STM_OK_GPIO_Port, STM_OK_Pin);
 800d830:	2101      	movs	r1, #1
 800d832:	486f      	ldr	r0, [pc, #444]	; (800d9f0 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x294>)
 800d834:	f7fa f865 	bl	8007902 <HAL_GPIO_TogglePin>
 800d838:	e794      	b.n	800d764 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x8>

			  } else if (pHeader.StdId == BMS_Rx_2_ptr->can_id_) {
 800d83a:	697a      	ldr	r2, [r7, #20]
 800d83c:	4b6e      	ldr	r3, [pc, #440]	; (800d9f8 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x29c>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	429a      	cmp	r2, r3
 800d844:	d11d      	bne.n	800d882 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x126>

				  osMutexAcquire(BMS_Rx_2_ptr->mutex_id_, osWaitForever);
 800d846:	4b6c      	ldr	r3, [pc, #432]	; (800d9f8 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x29c>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	695b      	ldr	r3, [r3, #20]
 800d84c:	f04f 31ff 	mov.w	r1, #4294967295
 800d850:	4618      	mov	r0, r3
 800d852:	f006 fb28 	bl	8013ea6 <osMutexAcquire>
				  BMS_Rx_2_ptr->FromByteArray(aData);
 800d856:	4b68      	ldr	r3, [pc, #416]	; (800d9f8 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x29c>)
 800d858:	681a      	ldr	r2, [r3, #0]
 800d85a:	4b67      	ldr	r3, [pc, #412]	; (800d9f8 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x29c>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	330c      	adds	r3, #12
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f107 010c 	add.w	r1, r7, #12
 800d868:	4610      	mov	r0, r2
 800d86a:	4798      	blx	r3
				  osMutexRelease(BMS_Rx_2_ptr->mutex_id_);
 800d86c:	4b62      	ldr	r3, [pc, #392]	; (800d9f8 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x29c>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	695b      	ldr	r3, [r3, #20]
 800d872:	4618      	mov	r0, r3
 800d874:	f006 fb62 	bl	8013f3c <osMutexRelease>
				  HAL_GPIO_TogglePin(STM_OK_GPIO_Port, STM_OK_Pin);
 800d878:	2101      	movs	r1, #1
 800d87a:	485d      	ldr	r0, [pc, #372]	; (800d9f0 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x294>)
 800d87c:	f7fa f841 	bl	8007902 <HAL_GPIO_TogglePin>
 800d880:	e770      	b.n	800d764 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x8>

			  } else if (pHeader.StdId == BMS_Rx_4_ptr->can_id_) {
 800d882:	697a      	ldr	r2, [r7, #20]
 800d884:	4b5d      	ldr	r3, [pc, #372]	; (800d9fc <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2a0>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	685b      	ldr	r3, [r3, #4]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d11d      	bne.n	800d8ca <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x16e>

				  osMutexAcquire(BMS_Rx_4_ptr->mutex_id_, osWaitForever);
 800d88e:	4b5b      	ldr	r3, [pc, #364]	; (800d9fc <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2a0>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	695b      	ldr	r3, [r3, #20]
 800d894:	f04f 31ff 	mov.w	r1, #4294967295
 800d898:	4618      	mov	r0, r3
 800d89a:	f006 fb04 	bl	8013ea6 <osMutexAcquire>
				  BMS_Rx_4_ptr->FromByteArray(aData);
 800d89e:	4b57      	ldr	r3, [pc, #348]	; (800d9fc <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2a0>)
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	4b56      	ldr	r3, [pc, #344]	; (800d9fc <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2a0>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	330c      	adds	r3, #12
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f107 010c 	add.w	r1, r7, #12
 800d8b0:	4610      	mov	r0, r2
 800d8b2:	4798      	blx	r3
				  osMutexRelease(BMS_Rx_4_ptr->mutex_id_);
 800d8b4:	4b51      	ldr	r3, [pc, #324]	; (800d9fc <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2a0>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	695b      	ldr	r3, [r3, #20]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f006 fb3e 	bl	8013f3c <osMutexRelease>
				  HAL_GPIO_TogglePin(STM_OK_GPIO_Port, STM_OK_Pin);
 800d8c0:	2101      	movs	r1, #1
 800d8c2:	484b      	ldr	r0, [pc, #300]	; (800d9f0 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x294>)
 800d8c4:	f7fa f81d 	bl	8007902 <HAL_GPIO_TogglePin>
 800d8c8:	e74c      	b.n	800d764 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x8>

			  } else if (pHeader.StdId == PowerBoard_ptr->can_id_) {
 800d8ca:	697a      	ldr	r2, [r7, #20]
 800d8cc:	4b4c      	ldr	r3, [pc, #304]	; (800da00 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2a4>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	685b      	ldr	r3, [r3, #4]
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d11d      	bne.n	800d912 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x1b6>

				  osMutexAcquire(PowerBoard_ptr->mutex_id_, osWaitForever);
 800d8d6:	4b4a      	ldr	r3, [pc, #296]	; (800da00 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2a4>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	695b      	ldr	r3, [r3, #20]
 800d8dc:	f04f 31ff 	mov.w	r1, #4294967295
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f006 fae0 	bl	8013ea6 <osMutexAcquire>
				  PowerBoard_ptr->FromByteArray(aData);
 800d8e6:	4b46      	ldr	r3, [pc, #280]	; (800da00 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2a4>)
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	4b45      	ldr	r3, [pc, #276]	; (800da00 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2a4>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	330c      	adds	r3, #12
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f107 010c 	add.w	r1, r7, #12
 800d8f8:	4610      	mov	r0, r2
 800d8fa:	4798      	blx	r3
				  osMutexRelease(PowerBoard_ptr->mutex_id_);
 800d8fc:	4b40      	ldr	r3, [pc, #256]	; (800da00 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2a4>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	695b      	ldr	r3, [r3, #20]
 800d902:	4618      	mov	r0, r3
 800d904:	f006 fb1a 	bl	8013f3c <osMutexRelease>
				  HAL_GPIO_TogglePin(STM_OK_GPIO_Port, STM_OK_Pin);
 800d908:	2101      	movs	r1, #1
 800d90a:	4839      	ldr	r0, [pc, #228]	; (800d9f0 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x294>)
 800d90c:	f7f9 fff9 	bl	8007902 <HAL_GPIO_TogglePin>
 800d910:	e728      	b.n	800d764 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x8>

			  } else if (pHeader.StdId == FLights_ptr->can_id_) {
 800d912:	697a      	ldr	r2, [r7, #20]
 800d914:	4b3b      	ldr	r3, [pc, #236]	; (800da04 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2a8>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	429a      	cmp	r2, r3
 800d91c:	d11d      	bne.n	800d95a <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x1fe>

				  osMutexAcquire(FLights_ptr->mutex_id_, osWaitForever);
 800d91e:	4b39      	ldr	r3, [pc, #228]	; (800da04 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2a8>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	695b      	ldr	r3, [r3, #20]
 800d924:	f04f 31ff 	mov.w	r1, #4294967295
 800d928:	4618      	mov	r0, r3
 800d92a:	f006 fabc 	bl	8013ea6 <osMutexAcquire>
				  FLights_ptr->FromByteArray(aData);
 800d92e:	4b35      	ldr	r3, [pc, #212]	; (800da04 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2a8>)
 800d930:	681a      	ldr	r2, [r3, #0]
 800d932:	4b34      	ldr	r3, [pc, #208]	; (800da04 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2a8>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	330c      	adds	r3, #12
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	f107 010c 	add.w	r1, r7, #12
 800d940:	4610      	mov	r0, r2
 800d942:	4798      	blx	r3
				  osMutexRelease(FLights_ptr->mutex_id_);
 800d944:	4b2f      	ldr	r3, [pc, #188]	; (800da04 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2a8>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	695b      	ldr	r3, [r3, #20]
 800d94a:	4618      	mov	r0, r3
 800d94c:	f006 faf6 	bl	8013f3c <osMutexRelease>
				  HAL_GPIO_TogglePin(STM_OK_GPIO_Port, STM_OK_Pin);
 800d950:	2101      	movs	r1, #1
 800d952:	4827      	ldr	r0, [pc, #156]	; (800d9f0 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x294>)
 800d954:	f7f9 ffd5 	bl	8007902 <HAL_GPIO_TogglePin>
 800d958:	e704      	b.n	800d764 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x8>

			  } else if (pHeader.StdId == RLights_ptr->can_id_) {
 800d95a:	697a      	ldr	r2, [r7, #20]
 800d95c:	4b2a      	ldr	r3, [pc, #168]	; (800da08 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2ac>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	685b      	ldr	r3, [r3, #4]
 800d962:	429a      	cmp	r2, r3
 800d964:	d11d      	bne.n	800d9a2 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x246>

				  osMutexAcquire(RLights_ptr->mutex_id_, osWaitForever);
 800d966:	4b28      	ldr	r3, [pc, #160]	; (800da08 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2ac>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	695b      	ldr	r3, [r3, #20]
 800d96c:	f04f 31ff 	mov.w	r1, #4294967295
 800d970:	4618      	mov	r0, r3
 800d972:	f006 fa98 	bl	8013ea6 <osMutexAcquire>
				  RLights_ptr->FromByteArray(aData);
 800d976:	4b24      	ldr	r3, [pc, #144]	; (800da08 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2ac>)
 800d978:	681a      	ldr	r2, [r3, #0]
 800d97a:	4b23      	ldr	r3, [pc, #140]	; (800da08 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2ac>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	330c      	adds	r3, #12
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f107 010c 	add.w	r1, r7, #12
 800d988:	4610      	mov	r0, r2
 800d98a:	4798      	blx	r3
				  osMutexRelease(RLights_ptr->mutex_id_);
 800d98c:	4b1e      	ldr	r3, [pc, #120]	; (800da08 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2ac>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	695b      	ldr	r3, [r3, #20]
 800d992:	4618      	mov	r0, r3
 800d994:	f006 fad2 	bl	8013f3c <osMutexRelease>
				  HAL_GPIO_TogglePin(STM_OK_GPIO_Port, STM_OK_Pin);
 800d998:	2101      	movs	r1, #1
 800d99a:	4815      	ldr	r0, [pc, #84]	; (800d9f0 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x294>)
 800d99c:	f7f9 ffb1 	bl	8007902 <HAL_GPIO_TogglePin>
 800d9a0:	e6e0      	b.n	800d764 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x8>

			  } else if (pHeader.StdId == MPPT0_ptr->can_id_) {
 800d9a2:	697a      	ldr	r2, [r7, #20]
 800d9a4:	4b19      	ldr	r3, [pc, #100]	; (800da0c <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2b0>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d130      	bne.n	800da10 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2b4>

				  osMutexAcquire(MPPT0_ptr->mutex_id_, osWaitForever);
 800d9ae:	4b17      	ldr	r3, [pc, #92]	; (800da0c <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2b0>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	695b      	ldr	r3, [r3, #20]
 800d9b4:	f04f 31ff 	mov.w	r1, #4294967295
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f006 fa74 	bl	8013ea6 <osMutexAcquire>
				  MPPT0_ptr->FromByteArray(aData);
 800d9be:	4b13      	ldr	r3, [pc, #76]	; (800da0c <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2b0>)
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	4b12      	ldr	r3, [pc, #72]	; (800da0c <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2b0>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	330c      	adds	r3, #12
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f107 010c 	add.w	r1, r7, #12
 800d9d0:	4610      	mov	r0, r2
 800d9d2:	4798      	blx	r3
				  osMutexRelease(MPPT0_ptr->mutex_id_);
 800d9d4:	4b0d      	ldr	r3, [pc, #52]	; (800da0c <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2b0>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	695b      	ldr	r3, [r3, #20]
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f006 faae 	bl	8013f3c <osMutexRelease>
				  HAL_GPIO_TogglePin(STM_OK_GPIO_Port, STM_OK_Pin);
 800d9e0:	2101      	movs	r1, #1
 800d9e2:	4803      	ldr	r0, [pc, #12]	; (800d9f0 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x294>)
 800d9e4:	f7f9 ff8d 	bl	8007902 <HAL_GPIO_TogglePin>
 800d9e8:	e6bc      	b.n	800d764 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x8>
 800d9ea:	bf00      	nop
 800d9ec:	20004a20 	.word	0x20004a20
 800d9f0:	40020400 	.word	0x40020400
 800d9f4:	20004a24 	.word	0x20004a24
 800d9f8:	20004a28 	.word	0x20004a28
 800d9fc:	20004a2c 	.word	0x20004a2c
 800da00:	20004a40 	.word	0x20004a40
 800da04:	20004a38 	.word	0x20004a38
 800da08:	20004a3c 	.word	0x20004a3c
 800da0c:	20004a44 	.word	0x20004a44

			  } else if (pHeader.StdId == MPPT1_ptr->can_id_) {
 800da10:	697a      	ldr	r2, [r7, #20]
 800da12:	4b4c      	ldr	r3, [pc, #304]	; (800db44 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3e8>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	429a      	cmp	r2, r3
 800da1a:	d11d      	bne.n	800da58 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x2fc>

				  osMutexAcquire(MPPT1_ptr->mutex_id_, osWaitForever);
 800da1c:	4b49      	ldr	r3, [pc, #292]	; (800db44 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3e8>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	695b      	ldr	r3, [r3, #20]
 800da22:	f04f 31ff 	mov.w	r1, #4294967295
 800da26:	4618      	mov	r0, r3
 800da28:	f006 fa3d 	bl	8013ea6 <osMutexAcquire>
				  MPPT1_ptr->FromByteArray(aData);
 800da2c:	4b45      	ldr	r3, [pc, #276]	; (800db44 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3e8>)
 800da2e:	681a      	ldr	r2, [r3, #0]
 800da30:	4b44      	ldr	r3, [pc, #272]	; (800db44 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3e8>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	330c      	adds	r3, #12
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f107 010c 	add.w	r1, r7, #12
 800da3e:	4610      	mov	r0, r2
 800da40:	4798      	blx	r3
				  osMutexRelease(MPPT1_ptr->mutex_id_);
 800da42:	4b40      	ldr	r3, [pc, #256]	; (800db44 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3e8>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	695b      	ldr	r3, [r3, #20]
 800da48:	4618      	mov	r0, r3
 800da4a:	f006 fa77 	bl	8013f3c <osMutexRelease>
				  HAL_GPIO_TogglePin(STM_OK_GPIO_Port, STM_OK_Pin);
 800da4e:	2101      	movs	r1, #1
 800da50:	483d      	ldr	r0, [pc, #244]	; (800db48 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3ec>)
 800da52:	f7f9 ff56 	bl	8007902 <HAL_GPIO_TogglePin>
 800da56:	e685      	b.n	800d764 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x8>

			  } else if (pHeader.StdId == MPPT2_ptr->can_id_) {
 800da58:	697a      	ldr	r2, [r7, #20]
 800da5a:	4b3c      	ldr	r3, [pc, #240]	; (800db4c <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3f0>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	685b      	ldr	r3, [r3, #4]
 800da60:	429a      	cmp	r2, r3
 800da62:	f47f ae7f 	bne.w	800d764 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x8>

				  osMutexAcquire(MPPT2_ptr->mutex_id_, osWaitForever);
 800da66:	4b39      	ldr	r3, [pc, #228]	; (800db4c <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3f0>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	695b      	ldr	r3, [r3, #20]
 800da6c:	f04f 31ff 	mov.w	r1, #4294967295
 800da70:	4618      	mov	r0, r3
 800da72:	f006 fa18 	bl	8013ea6 <osMutexAcquire>
				  MPPT2_ptr->FromByteArray(aData);
 800da76:	4b35      	ldr	r3, [pc, #212]	; (800db4c <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3f0>)
 800da78:	681a      	ldr	r2, [r3, #0]
 800da7a:	4b34      	ldr	r3, [pc, #208]	; (800db4c <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3f0>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	330c      	adds	r3, #12
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f107 010c 	add.w	r1, r7, #12
 800da88:	4610      	mov	r0, r2
 800da8a:	4798      	blx	r3
				  osMutexRelease(MPPT2_ptr->mutex_id_);
 800da8c:	4b2f      	ldr	r3, [pc, #188]	; (800db4c <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3f0>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	695b      	ldr	r3, [r3, #20]
 800da92:	4618      	mov	r0, r3
 800da94:	f006 fa52 	bl	8013f3c <osMutexRelease>
				  HAL_GPIO_TogglePin(STM_OK_GPIO_Port, STM_OK_Pin);
 800da98:	2101      	movs	r1, #1
 800da9a:	482b      	ldr	r0, [pc, #172]	; (800db48 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3ec>)
 800da9c:	f7f9 ff31 	bl	8007902 <HAL_GPIO_TogglePin>
 800daa0:	e660      	b.n	800d764 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x8>

			  }

      	  } else if (pHeader.IDE == CAN_ID_EXT) {
 800daa2:	69fb      	ldr	r3, [r7, #28]
 800daa4:	2b04      	cmp	r3, #4
 800daa6:	f47f ae5d 	bne.w	800d764 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x8>

      		if (pHeader.ExtId == Motor_Rx_0_ptr->can_id_) {
 800daaa:	69ba      	ldr	r2, [r7, #24]
 800daac:	4b28      	ldr	r3, [pc, #160]	; (800db50 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3f4>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d11d      	bne.n	800daf2 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x396>

			  osMutexAcquire(Motor_Rx_0_ptr->mutex_id_, osWaitForever);
 800dab6:	4b26      	ldr	r3, [pc, #152]	; (800db50 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3f4>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	695b      	ldr	r3, [r3, #20]
 800dabc:	f04f 31ff 	mov.w	r1, #4294967295
 800dac0:	4618      	mov	r0, r3
 800dac2:	f006 f9f0 	bl	8013ea6 <osMutexAcquire>
			  Motor_Rx_0_ptr->FromByteArray(aData);
 800dac6:	4b22      	ldr	r3, [pc, #136]	; (800db50 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3f4>)
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	4b21      	ldr	r3, [pc, #132]	; (800db50 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3f4>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	330c      	adds	r3, #12
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	f107 010c 	add.w	r1, r7, #12
 800dad8:	4610      	mov	r0, r2
 800dada:	4798      	blx	r3
			  osMutexRelease(Motor_Rx_0_ptr->mutex_id_);
 800dadc:	4b1c      	ldr	r3, [pc, #112]	; (800db50 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3f4>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	695b      	ldr	r3, [r3, #20]
 800dae2:	4618      	mov	r0, r3
 800dae4:	f006 fa2a 	bl	8013f3c <osMutexRelease>
			  HAL_GPIO_TogglePin(STM_OK_GPIO_Port, STM_OK_Pin);
 800dae8:	2101      	movs	r1, #1
 800daea:	4817      	ldr	r0, [pc, #92]	; (800db48 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3ec>)
 800daec:	f7f9 ff09 	bl	8007902 <HAL_GPIO_TogglePin>
 800daf0:	e638      	b.n	800d764 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x8>

			} else if (pHeader.ExtId == Motor_Rx_2_ptr->can_id_) {
 800daf2:	69ba      	ldr	r2, [r7, #24]
 800daf4:	4b17      	ldr	r3, [pc, #92]	; (800db54 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3f8>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	f47f ae32 	bne.w	800d764 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x8>

			  osMutexAcquire(Motor_Rx_2_ptr->mutex_id_, osWaitForever);
 800db00:	4b14      	ldr	r3, [pc, #80]	; (800db54 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3f8>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	695b      	ldr	r3, [r3, #20]
 800db06:	f04f 31ff 	mov.w	r1, #4294967295
 800db0a:	4618      	mov	r0, r3
 800db0c:	f006 f9cb 	bl	8013ea6 <osMutexAcquire>
			  Motor_Rx_2_ptr->FromByteArray(aData);
 800db10:	4b10      	ldr	r3, [pc, #64]	; (800db54 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3f8>)
 800db12:	681a      	ldr	r2, [r3, #0]
 800db14:	4b0f      	ldr	r3, [pc, #60]	; (800db54 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3f8>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	330c      	adds	r3, #12
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	f107 010c 	add.w	r1, r7, #12
 800db22:	4610      	mov	r0, r2
 800db24:	4798      	blx	r3
			  osMutexRelease(Motor_Rx_2_ptr->mutex_id_);
 800db26:	4b0b      	ldr	r3, [pc, #44]	; (800db54 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3f8>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	695b      	ldr	r3, [r3, #20]
 800db2c:	4618      	mov	r0, r3
 800db2e:	f006 fa05 	bl	8013f3c <osMutexRelease>
			  HAL_GPIO_TogglePin(STM_OK_GPIO_Port, STM_OK_Pin);
 800db32:	2101      	movs	r1, #1
 800db34:	4804      	ldr	r0, [pc, #16]	; (800db48 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x3ec>)
 800db36:	f7f9 fee4 	bl	8007902 <HAL_GPIO_TogglePin>
    while(HAL_CAN_GetRxFifoFillLevel(hcan_, rx_fifo_num_))
 800db3a:	e613      	b.n	800d764 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x8>
//		  }
    }
    //osDelay(2);
    //osSemaphoreRelease(canSem);
    //HAL_CAN_ActivateNotification(hcan_, CAN_IT_RX_FIFO0_MSG_PENDING);
    osDelay(10);
 800db3c:	200a      	movs	r0, #10
 800db3e:	f005 ff46 	bl	80139ce <osDelay>
  }
 800db42:	e60f      	b.n	800d764 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x8>
 800db44:	20004a48 	.word	0x20004a48
 800db48:	40020400 	.word	0x40020400
 800db4c:	20004a4c 	.word	0x20004a4c
 800db50:	20004a30 	.word	0x20004a30
 800db54:	20004a34 	.word	0x20004a34

0800db58 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE>:
}

void CANDriver::Send(SolarGators::DataModules::DataModule* data)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b08c      	sub	sp, #48	; 0x30
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
  //Spinlock until a tx mailbox is empty
  while(!HAL_CAN_GetTxMailboxesFreeLevel(hcan_));
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800db68:	4618      	mov	r0, r3
 800db6a:	f7f8 fc36 	bl	80063da <HAL_CAN_GetTxMailboxesFreeLevel>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	bf0c      	ite	eq
 800db74:	2301      	moveq	r3, #1
 800db76:	2300      	movne	r3, #0
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d000      	beq.n	800db80 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0x28>
 800db7e:	e7f0      	b.n	800db62 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0xa>

  //Initialize Header
  uint32_t pTxMailbox;
  CAN_TxHeaderTypeDef pHeader;
  pHeader.RTR = data->is_rtr_ ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	7cdb      	ldrb	r3, [r3, #19]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d001      	beq.n	800db8c <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0x34>
 800db88:	2302      	movs	r3, #2
 800db8a:	e000      	b.n	800db8e <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0x36>
 800db8c:	2300      	movs	r3, #0
 800db8e:	623b      	str	r3, [r7, #32]
  pHeader.DLC = data->size_;
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	68db      	ldr	r3, [r3, #12]
 800db94:	627b      	str	r3, [r7, #36]	; 0x24
  if(data->is_ext_id_)
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	7c9b      	ldrb	r3, [r3, #18]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d005      	beq.n	800dbaa <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0x52>
  {
    pHeader.ExtId = data->can_id_;
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	685b      	ldr	r3, [r3, #4]
 800dba2:	61bb      	str	r3, [r7, #24]
    pHeader.IDE = CAN_ID_EXT;
 800dba4:	2304      	movs	r3, #4
 800dba6:	61fb      	str	r3, [r7, #28]
 800dba8:	e004      	b.n	800dbb4 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0x5c>
  }
  else
  {
    pHeader.StdId = data->can_id_;
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	685b      	ldr	r3, [r3, #4]
 800dbae:	617b      	str	r3, [r7, #20]
    pHeader.IDE = CAN_ID_STD;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	61fb      	str	r3, [r7, #28]
  }
  //Put CAN message in tx mailbox
  uint8_t aData[MAX_DATA_SIZE];
  osMutexAcquire(data->mutex_id_, osWaitForever);
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	695b      	ldr	r3, [r3, #20]
 800dbb8:	f04f 31ff 	mov.w	r1, #4294967295
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f006 f972 	bl	8013ea6 <osMutexAcquire>
  data->ToByteArray(aData);
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	3308      	adds	r3, #8
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f107 020c 	add.w	r2, r7, #12
 800dbce:	4611      	mov	r1, r2
 800dbd0:	6838      	ldr	r0, [r7, #0]
 800dbd2:	4798      	blx	r3
  osMutexRelease(data->mutex_id_);
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	695b      	ldr	r3, [r3, #20]
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f006 f9af 	bl	8013f3c <osMutexRelease>
  HAL_CAN_AddTxMessage(hcan_, &pHeader, aData, &pTxMailbox);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800dbe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dbe8:	f107 020c 	add.w	r2, r7, #12
 800dbec:	f107 0114 	add.w	r1, r7, #20
 800dbf0:	f7f8 fb18 	bl	8006224 <HAL_CAN_AddTxMessage>
}
 800dbf4:	bf00      	nop
 800dbf6:	3730      	adds	r7, #48	; 0x30
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <_ZNSt4pairIN3etl4imapImPN11SolarGators11DataModules10DataModuleENS0_4lessImEEE8iteratorEbED1Ev>:
    struct pair
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	4618      	mov	r0, r3
 800dc08:	f000 f902 	bl	800de10 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE8iteratorD1Ev>
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3708      	adds	r7, #8
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}

0800dc16 <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>:

bool CANDriver::AddRxModule(DataModules::DataModule* module)
{
 800dc16:	b590      	push	{r4, r7, lr}
 800dc18:	b08b      	sub	sp, #44	; 0x2c
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	6078      	str	r0, [r7, #4]
 800dc1e:	6039      	str	r1, [r7, #0]
  modules_.insert(etl::make_pair(module->can_id_, module));
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	1d1c      	adds	r4, r3, #4
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	1d19      	adds	r1, r3, #4
 800dc28:	f107 0320 	add.w	r3, r7, #32
 800dc2c:	463a      	mov	r2, r7
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f000 f863 	bl	800dcfa <_ZN3etl9make_pairIRKmRPN11SolarGators11DataModules10DataModuleEEENS_4pairIT_T0_EEOS9_OSA_>
 800dc34:	f107 0318 	add.w	r3, r7, #24
 800dc38:	f107 0220 	add.w	r2, r7, #32
 800dc3c:	4611      	mov	r1, r2
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f000 f879 	bl	800dd36 <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEcvSt4pairIT_T0_EIS1_S6_EEv>
 800dc44:	f107 030c 	add.w	r3, r7, #12
 800dc48:	f107 0218 	add.w	r2, r7, #24
 800dc4c:	4621      	mov	r1, r4
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f000 f88a 	bl	800dd68 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE6insertEOSt4pairIKmS4_E>
 800dc54:	f107 030c 	add.w	r3, r7, #12
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7ff ffcf 	bl	800dbfc <_ZNSt4pairIN3etl4imapImPN11SolarGators11DataModules10DataModuleENS0_4lessImEEE8iteratorEbED1Ev>
  // TODO: Check if successful insertion
  return true;
 800dc5e:	2301      	movs	r3, #1
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	372c      	adds	r7, #44	; 0x2c
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd90      	pop	{r4, r7, pc}

0800dc68 <_ZN3etl12generic_poolILj20ELj4ELj15EED1Ev>:
  class generic_pool : public etl::ipool
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7fd fe68 	bl	800b948 <_ZN3etl5ipoolD1Ev>
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3708      	adds	r7, #8
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <_ZN3etl4poolINS_4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9Data_NodeELj15EED1Ev>:
  class pool : public etl::generic_pool<sizeof(T), etl::alignment_of<T>::value, VSize>
 800dc82:	b580      	push	{r7, lr}
 800dc84:	b082      	sub	sp, #8
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	6078      	str	r0, [r7, #4]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f7ff ffeb 	bl	800dc68 <_ZN3etl12generic_poolILj20ELj4ELj15EED1Ev>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	4618      	mov	r0, r3
 800dc96:	3708      	adds	r7, #8
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <_ZN3etl3mapImPN11SolarGators11DataModules10DataModuleELj15ENS_4lessImEEEC1Ev>:
    map()
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b082      	sub	sp, #8
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
      : etl::imap<TKey, TValue, TCompare>(node_pool, MAX_SIZE)
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	3314      	adds	r3, #20
 800dcaa:	220f      	movs	r2, #15
 800dcac:	4619      	mov	r1, r3
 800dcae:	f000 f8ba 	bl	800de26 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEEC1ERNS_5ipoolEj>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	3314      	adds	r3, #20
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f000 f8d5 	bl	800de66 <_ZN3etl4poolINS_4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9Data_NodeELj15EEC1Ev>
      this->initialise();
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f000 f8de 	bl	800de80 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE10initialiseEv>
    }
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3708      	adds	r7, #8
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <_ZN3etl3mapImPN11SolarGators11DataModules10DataModuleELj15ENS_4lessImEEED1Ev>:
    ~map()
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b082      	sub	sp, #8
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
      this->initialise();
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f000 f8d1 	bl	800de80 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE10initialiseEv>
    }
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	3314      	adds	r3, #20
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7ff ffcd 	bl	800dc82 <_ZN3etl4poolINS_4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9Data_NodeELj15EED1Ev>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	4618      	mov	r0, r3
 800dcec:	f000 f8ae 	bl	800de4c <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEED1Ev>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3708      	adds	r7, #8
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}

0800dcfa <_ZN3etl9make_pairIRKmRPN11SolarGators11DataModules10DataModuleEEENS_4pairIT_T0_EEOS9_OSA_>:
  inline pair<T1, T2> make_pair(T1&& a, T2&& b)
 800dcfa:	b590      	push	{r4, r7, lr}
 800dcfc:	b087      	sub	sp, #28
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	60f8      	str	r0, [r7, #12]
 800dd02:	60b9      	str	r1, [r7, #8]
 800dd04:	607a      	str	r2, [r7, #4]
    return pair<T1, T2>(etl::forward<T1>(a), etl::forward<T2>(b));
 800dd06:	68b8      	ldr	r0, [r7, #8]
 800dd08:	f000 f92e 	bl	800df68 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>
 800dd0c:	4604      	mov	r4, r0
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f000 f935 	bl	800df7e <_ZN3etl7forwardIRPN11SolarGators11DataModules10DataModuleEEEOT_RNS_16remove_referenceIS6_E4typeE>
 800dd14:	4602      	mov	r2, r0
 800dd16:	f107 0310 	add.w	r3, r7, #16
 800dd1a:	4621      	mov	r1, r4
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f000 f939 	bl	800df94 <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEC1ES2_S7_>
 800dd22:	f107 0310 	add.w	r3, r7, #16
 800dd26:	4619      	mov	r1, r3
 800dd28:	68f8      	ldr	r0, [r7, #12]
 800dd2a:	f000 f946 	bl	800dfba <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEC1IS2_S7_EEONS0_IT_T0_EE>
  }
 800dd2e:	68f8      	ldr	r0, [r7, #12]
 800dd30:	371c      	adds	r7, #28
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd90      	pop	{r4, r7, pc}

0800dd36 <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEcvSt4pairIT_T0_EIS1_S6_EEv>:
    operator std::pair<U1, U2>()
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b084      	sub	sp, #16
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
 800dd3e:	6039      	str	r1, [r7, #0]
      return std::make_pair(first, second);
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	6819      	ldr	r1, [r3, #0]
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	685a      	ldr	r2, [r3, #4]
 800dd48:	f107 0308 	add.w	r3, r7, #8
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f000 f94e 	bl	800dfee <_ZSt9make_pairIRKmRPN11SolarGators11DataModules10DataModuleEESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS8_INS9_IT0_E4typeEE6__typeEEOSA_OSF_>
 800dd52:	f107 0308 	add.w	r3, r7, #8
 800dd56:	4619      	mov	r1, r3
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f000 f95f 	bl	800e01c <_ZNSt4pairIKmPN11SolarGators11DataModules10DataModuleEEC1ImS4_Lb1EEEOS_IT_T0_E>
    }
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	3710      	adds	r7, #16
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
	...

0800dd68 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE6insertEOSt4pairIKmS4_E>:
    ETL_OR_STD::pair<iterator, bool> insert(rvalue_reference value)
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b08a      	sub	sp, #40	; 0x28
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	60f8      	str	r0, [r7, #12]
 800dd70:	60b9      	str	r1, [r7, #8]
 800dd72:	607a      	str	r2, [r7, #4]
      Node* inserted_node = ETL_NULLPTR;
 800dd74:	2300      	movs	r3, #0
 800dd76:	627b      	str	r3, [r7, #36]	; 0x24
      bool inserted = false;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	75fb      	strb	r3, [r7, #23]
      ETL_ASSERT(!full(), ETL_ERROR(map_full));
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7fd fded 	bl	800b95e <_ZNK3etl8map_base4fullEv>
 800dd84:	4603      	mov	r3, r0
 800dd86:	f083 0301 	eor.w	r3, r3, #1
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d106      	bne.n	800dd9e <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE6insertEOSt4pairIKmS4_E+0x36>
 800dd90:	4b1c      	ldr	r3, [pc, #112]	; (800de04 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE6insertEOSt4pairIKmS4_E+0x9c>)
 800dd92:	4a1d      	ldr	r2, [pc, #116]	; (800de08 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE6insertEOSt4pairIKmS4_E+0xa0>)
 800dd94:	f240 41a7 	movw	r1, #1191	; 0x4a7
 800dd98:	481c      	ldr	r0, [pc, #112]	; (800de0c <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE6insertEOSt4pairIKmS4_E+0xa4>)
 800dd9a:	f00a f967 	bl	801806c <__assert_func>
      Data_Node& node = allocate_data_node(etl::move(value));
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f000 f957 	bl	800e052 <_ZN3etl4moveIRSt4pairIKmPN11SolarGators11DataModules10DataModuleEEEEONS_16remove_referenceIT_E4typeEOSA_>
 800dda4:	4603      	mov	r3, r0
 800dda6:	4619      	mov	r1, r3
 800dda8:	68b8      	ldr	r0, [r7, #8]
 800ddaa:	f000 f95d 	bl	800e068 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE18allocate_data_nodeEOSt4pairIKmS4_E>
 800ddae:	6238      	str	r0, [r7, #32]
      inserted_node = insert_node(root_node, node);
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	3308      	adds	r3, #8
 800ddb4:	6a3a      	ldr	r2, [r7, #32]
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	68b8      	ldr	r0, [r7, #8]
 800ddba:	f000 f973 	bl	800e0a4 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE>
 800ddbe:	6278      	str	r0, [r7, #36]	; 0x24
      inserted = inserted_node == &node;
 800ddc0:	6a3b      	ldr	r3, [r7, #32]
 800ddc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	bf0c      	ite	eq
 800ddc8:	2301      	moveq	r3, #1
 800ddca:	2300      	movne	r3, #0
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	75fb      	strb	r3, [r7, #23]
      return ETL_OR_STD::make_pair(iterator(*this, inserted_node), inserted);
 800ddd0:	f107 0318 	add.w	r3, r7, #24
 800ddd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddd6:	68b9      	ldr	r1, [r7, #8]
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f000 fa0d 	bl	800e1f8 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE8iteratorC1ERS7_PNS_8map_base4NodeE>
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	f107 0217 	add.w	r2, r7, #23
 800dde4:	f107 0118 	add.w	r1, r7, #24
 800dde8:	4618      	mov	r0, r3
 800ddea:	f000 fa18 	bl	800e21e <_ZSt9make_pairIN3etl4imapImPN11SolarGators11DataModules10DataModuleENS0_4lessImEEE8iteratorERbESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENSC_INSD_IT0_E4typeEE6__typeEEOSE_OSJ_>
 800ddee:	f107 0318 	add.w	r3, r7, #24
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f000 f80c 	bl	800de10 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE8iteratorD1Ev>
 800ddf8:	bf00      	nop
    }
 800ddfa:	68f8      	ldr	r0, [r7, #12]
 800ddfc:	3728      	adds	r7, #40	; 0x28
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}
 800de02:	bf00      	nop
 800de04:	080198cc 	.word	0x080198cc
 800de08:	080198d8 	.word	0x080198d8
 800de0c:	08019b04 	.word	0x08019b04

0800de10 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE8iteratorD1Ev>:
      ~iterator()
 800de10:	b480      	push	{r7}
 800de12:	b083      	sub	sp, #12
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
      }
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	4618      	mov	r0, r3
 800de1c:	370c      	adds	r7, #12
 800de1e:	46bd      	mov	sp, r7
 800de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de24:	4770      	bx	lr

0800de26 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEEC1ERNS_5ipoolEj>:
    imap(etl::ipool& node_pool, size_t max_size_)
 800de26:	b580      	push	{r7, lr}
 800de28:	b084      	sub	sp, #16
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	60f8      	str	r0, [r7, #12]
 800de2e:	60b9      	str	r1, [r7, #8]
 800de30:	607a      	str	r2, [r7, #4]
      , p_node_pool(&node_pool)
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	6879      	ldr	r1, [r7, #4]
 800de36:	4618      	mov	r0, r3
 800de38:	f7fd fdba 	bl	800b9b0 <_ZN3etl8map_baseC1Ej>
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	68ba      	ldr	r2, [r7, #8]
 800de40:	60da      	str	r2, [r3, #12]
    }
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	4618      	mov	r0, r3
 800de46:	3710      	adds	r7, #16
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}

0800de4c <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEED1Ev>:
    ~imap()
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b082      	sub	sp, #8
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
    }
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	4618      	mov	r0, r3
 800de58:	f7fd fdbf 	bl	800b9da <_ZN3etl8map_baseD1Ev>
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	4618      	mov	r0, r3
 800de60:	3708      	adds	r7, #8
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}

0800de66 <_ZN3etl4poolINS_4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9Data_NodeELj15EEC1Ev>:
    pool()
 800de66:	b580      	push	{r7, lr}
 800de68:	b082      	sub	sp, #8
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	6078      	str	r0, [r7, #4]
    {
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4618      	mov	r0, r3
 800de72:	f000 f9ff 	bl	800e274 <_ZN3etl12generic_poolILj20ELj4ELj15EEC1Ev>
    }
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4618      	mov	r0, r3
 800de7a:	3708      	adds	r7, #8
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE10initialiseEv>:
    void initialise()
 800de80:	b590      	push	{r4, r7, lr}
 800de82:	b091      	sub	sp, #68	; 0x44
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
      const_iterator item = begin();
 800de88:	f107 0310 	add.w	r3, r7, #16
 800de8c:	6879      	ldr	r1, [r7, #4]
 800de8e:	4618      	mov	r0, r3
 800de90:	f000 fa01 	bl	800e296 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE5beginEv>
 800de94:	f107 0210 	add.w	r2, r7, #16
 800de98:	f107 0308 	add.w	r3, r7, #8
 800de9c:	4611      	mov	r1, r2
 800de9e:	4618      	mov	r0, r3
 800dea0:	f000 fa0f 	bl	800e2c2 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE14const_iteratorC1ERKNS7_8iteratorE>
 800dea4:	f107 0310 	add.w	r3, r7, #16
 800dea8:	4618      	mov	r0, r3
 800deaa:	f7ff ffb1 	bl	800de10 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE8iteratorD1Ev>
      while (item != end())
 800deae:	f107 0320 	add.w	r3, r7, #32
 800deb2:	6879      	ldr	r1, [r7, #4]
 800deb4:	4618      	mov	r0, r3
 800deb6:	f000 fa37 	bl	800e328 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE3endEv>
 800deba:	f107 0220 	add.w	r2, r7, #32
 800debe:	f107 0318 	add.w	r3, r7, #24
 800dec2:	4611      	mov	r1, r2
 800dec4:	4618      	mov	r0, r3
 800dec6:	f000 f9fc 	bl	800e2c2 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE14const_iteratorC1ERKNS7_8iteratorE>
 800deca:	f107 0218 	add.w	r2, r7, #24
 800dece:	f107 0308 	add.w	r3, r7, #8
 800ded2:	4611      	mov	r1, r2
 800ded4:	4618      	mov	r0, r3
 800ded6:	f000 fa34 	bl	800e342 <_ZN3etlneERKNS_4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE14const_iteratorESA_>
 800deda:	4603      	mov	r3, r0
 800dedc:	461c      	mov	r4, r3
 800dede:	f107 0318 	add.w	r3, r7, #24
 800dee2:	4618      	mov	r0, r3
 800dee4:	f000 fa01 	bl	800e2ea <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE14const_iteratorD1Ev>
 800dee8:	f107 0320 	add.w	r3, r7, #32
 800deec:	4618      	mov	r0, r3
 800deee:	f7ff ff8f 	bl	800de10 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE8iteratorD1Ev>
 800def2:	2c00      	cmp	r4, #0
 800def4:	d02f      	beq.n	800df56 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE10initialiseEv+0xd6>
        item = erase(item);
 800def6:	f107 0208 	add.w	r2, r7, #8
 800defa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800defe:	4611      	mov	r1, r2
 800df00:	4618      	mov	r0, r3
 800df02:	f000 f9fd 	bl	800e300 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE14const_iteratorC1ERKS8_>
 800df06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800df0a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800df0e:	6879      	ldr	r1, [r7, #4]
 800df10:	4618      	mov	r0, r3
 800df12:	f000 fa27 	bl	800e364 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE5eraseENS7_14const_iteratorE>
 800df16:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800df1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800df1e:	4611      	mov	r1, r2
 800df20:	4618      	mov	r0, r3
 800df22:	f000 f9ce 	bl	800e2c2 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE14const_iteratorC1ERKNS7_8iteratorE>
 800df26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800df2a:	f107 0308 	add.w	r3, r7, #8
 800df2e:	4611      	mov	r1, r2
 800df30:	4618      	mov	r0, r3
 800df32:	f000 fa42 	bl	800e3ba <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE14const_iteratoraSERKS8_>
 800df36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800df3a:	4618      	mov	r0, r3
 800df3c:	f000 f9d5 	bl	800e2ea <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE14const_iteratorD1Ev>
 800df40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800df44:	4618      	mov	r0, r3
 800df46:	f7ff ff63 	bl	800de10 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE8iteratorD1Ev>
 800df4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800df4e:	4618      	mov	r0, r3
 800df50:	f000 f9cb 	bl	800e2ea <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE14const_iteratorD1Ev>
      while (item != end())
 800df54:	e7ab      	b.n	800deae <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE10initialiseEv+0x2e>
      const_iterator item = begin();
 800df56:	f107 0308 	add.w	r3, r7, #8
 800df5a:	4618      	mov	r0, r3
 800df5c:	f000 f9c5 	bl	800e2ea <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE14const_iteratorD1Ev>
    }
 800df60:	bf00      	nop
 800df62:	3744      	adds	r7, #68	; 0x44
 800df64:	46bd      	mov	sp, r7
 800df66:	bd90      	pop	{r4, r7, pc}

0800df68 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 800df68:	b480      	push	{r7}
 800df6a:	b083      	sub	sp, #12
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 800df70:	687b      	ldr	r3, [r7, #4]
  }
 800df72:	4618      	mov	r0, r3
 800df74:	370c      	adds	r7, #12
 800df76:	46bd      	mov	sp, r7
 800df78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7c:	4770      	bx	lr

0800df7e <_ZN3etl7forwardIRPN11SolarGators11DataModules10DataModuleEEEOT_RNS_16remove_referenceIS6_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 800df7e:	b480      	push	{r7}
 800df80:	b083      	sub	sp, #12
 800df82:	af00      	add	r7, sp, #0
 800df84:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 800df86:	687b      	ldr	r3, [r7, #4]
  }
 800df88:	4618      	mov	r0, r3
 800df8a:	370c      	adds	r7, #12
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr

0800df94 <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEC1ES2_S7_>:
    ETL_CONSTEXPR14 pair(const T1& a, const T2& b)
 800df94:	b480      	push	{r7}
 800df96:	b085      	sub	sp, #20
 800df98:	af00      	add	r7, sp, #0
 800df9a:	60f8      	str	r0, [r7, #12]
 800df9c:	60b9      	str	r1, [r7, #8]
 800df9e:	607a      	str	r2, [r7, #4]
      , second(b)
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	68ba      	ldr	r2, [r7, #8]
 800dfa4:	601a      	str	r2, [r3, #0]
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	687a      	ldr	r2, [r7, #4]
 800dfaa:	605a      	str	r2, [r3, #4]
    }
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3714      	adds	r7, #20
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb8:	4770      	bx	lr

0800dfba <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEC1IS2_S7_EEONS0_IT_T0_EE>:
    ETL_CONSTEXPR14 pair(pair<U1, U2>&& other)
 800dfba:	b580      	push	{r7, lr}
 800dfbc:	b082      	sub	sp, #8
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	6078      	str	r0, [r7, #4]
 800dfc2:	6039      	str	r1, [r7, #0]
      : first(etl::forward<U1>(other.first))
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7ff ffcd 	bl	800df68 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>
 800dfce:	4602      	mov	r2, r0
      , second(etl::forward<U2>(other.second))
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	601a      	str	r2, [r3, #0]
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	685b      	ldr	r3, [r3, #4]
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7ff ffd0 	bl	800df7e <_ZN3etl7forwardIRPN11SolarGators11DataModules10DataModuleEEEOT_RNS_16remove_referenceIS6_E4typeE>
 800dfde:	4602      	mov	r2, r0
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	605a      	str	r2, [r3, #4]
    }
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3708      	adds	r7, #8
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}

0800dfee <_ZSt9make_pairIRKmRPN11SolarGators11DataModules10DataModuleEESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS8_INS9_IT0_E4typeEE6__typeEEOSA_OSF_>:
    make_pair(_T1&& __x, _T2&& __y)
 800dfee:	b590      	push	{r4, r7, lr}
 800dff0:	b085      	sub	sp, #20
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	60f8      	str	r0, [r7, #12]
 800dff6:	60b9      	str	r1, [r7, #8]
 800dff8:	607a      	str	r2, [r7, #4]
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 800dffa:	68b8      	ldr	r0, [r7, #8]
 800dffc:	f000 f9f1 	bl	800e3e2 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800e000:	4604      	mov	r4, r0
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 f9f8 	bl	800e3f8 <_ZSt7forwardIRPN11SolarGators11DataModules10DataModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 800e008:	4603      	mov	r3, r0
 800e00a:	461a      	mov	r2, r3
 800e00c:	4621      	mov	r1, r4
 800e00e:	68f8      	ldr	r0, [r7, #12]
 800e010:	f000 f9fd 	bl	800e40e <_ZNSt4pairImPN11SolarGators11DataModules10DataModuleEEC1IRS3_Lb1EEERKmOT_>
    }
 800e014:	68f8      	ldr	r0, [r7, #12]
 800e016:	3714      	adds	r7, #20
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd90      	pop	{r4, r7, pc}

0800e01c <_ZNSt4pairIKmPN11SolarGators11DataModules10DataModuleEEC1ImS4_Lb1EEEOS_IT_T0_E>:
	constexpr pair(pair<_U1, _U2>&& __p)
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	6039      	str	r1, [r7, #0]
	: first(std::forward<_U1>(__p.first)),
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	4618      	mov	r0, r3
 800e02a:	f000 fa06 	bl	800e43a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800e02e:	4603      	mov	r3, r0
	  second(std::forward<_U2>(__p.second)) { }
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	601a      	str	r2, [r3, #0]
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	3304      	adds	r3, #4
 800e03a:	4618      	mov	r0, r3
 800e03c:	f000 fa08 	bl	800e450 <_ZSt7forwardIPN11SolarGators11DataModules10DataModuleEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e040:	4603      	mov	r3, r0
 800e042:	681a      	ldr	r2, [r3, #0]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	605a      	str	r2, [r3, #4]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	4618      	mov	r0, r3
 800e04c:	3708      	adds	r7, #8
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}

0800e052 <_ZN3etl4moveIRSt4pairIKmPN11SolarGators11DataModules10DataModuleEEEEONS_16remove_referenceIT_E4typeEOSA_>:
  constexpr typename etl::remove_reference<T>::type&& move(T&& t) ETL_NOEXCEPT
 800e052:	b480      	push	{r7}
 800e054:	b083      	sub	sp, #12
 800e056:	af00      	add	r7, sp, #0
 800e058:	6078      	str	r0, [r7, #4]
    return static_cast<typename etl::remove_reference<T>::type&&>(t);
 800e05a:	687b      	ldr	r3, [r7, #4]
  }
 800e05c:	4618      	mov	r0, r3
 800e05e:	370c      	adds	r7, #12
 800e060:	46bd      	mov	sp, r7
 800e062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e066:	4770      	bx	lr

0800e068 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE18allocate_data_nodeEOSt4pairIKmS4_E>:
    Data_Node& allocate_data_node(rvalue_reference value)
 800e068:	b590      	push	{r4, r7, lr}
 800e06a:	b085      	sub	sp, #20
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
 800e070:	6039      	str	r1, [r7, #0]
      Data_Node& node = create_data_node();
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f000 f9f8 	bl	800e468 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE16create_data_nodeEv>
 800e078:	60f8      	str	r0, [r7, #12]
      ::new (&node.value) value_type(etl::move(value));
 800e07a:	6838      	ldr	r0, [r7, #0]
 800e07c:	f7ff ffe9 	bl	800e052 <_ZN3etl4moveIRSt4pairIKmPN11SolarGators11DataModules10DataModuleEEEEONS_16remove_referenceIT_E4typeEOSA_>
 800e080:	4604      	mov	r4, r0
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	330c      	adds	r3, #12
 800e086:	4619      	mov	r1, r3
 800e088:	2008      	movs	r0, #8
 800e08a:	f7fd fb63 	bl	800b754 <_ZnwjPv>
 800e08e:	4603      	mov	r3, r0
 800e090:	4622      	mov	r2, r4
 800e092:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e096:	e883 0003 	stmia.w	r3, {r0, r1}
      return node;
 800e09a:	68fb      	ldr	r3, [r7, #12]
    }
 800e09c:	4618      	mov	r0, r3
 800e09e:	3714      	adds	r7, #20
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd90      	pop	{r4, r7, pc}

0800e0a4 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE>:
    Node* insert_node(Node*& position, Data_Node& node)
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b088      	sub	sp, #32
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	60f8      	str	r0, [r7, #12]
 800e0ac:	60b9      	str	r1, [r7, #8]
 800e0ae:	607a      	str	r2, [r7, #4]
      Node* found = position;
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	61fb      	str	r3, [r7, #28]
      if (position)
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	f000 808e 	beq.w	800e1dc <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x138>
        Node* critical_parent_node = ETL_NULLPTR;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	61bb      	str	r3, [r7, #24]
        Node* critical_node = root_node;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	689b      	ldr	r3, [r3, #8]
 800e0c8:	617b      	str	r3, [r7, #20]
        while (found)
 800e0ca:	69fb      	ldr	r3, [r7, #28]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d057      	beq.n	800e180 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0xdc>
          if (kNeither != found->weight)
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	7a1b      	ldrb	r3, [r3, #8]
 800e0d4:	2b02      	cmp	r3, #2
 800e0d6:	d001      	beq.n	800e0dc <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x38>
            critical_node = found;
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	617b      	str	r3, [r7, #20]
          Data_Node& found_data_node = imap::data_cast(*found);
 800e0dc:	69f8      	ldr	r0, [r7, #28]
 800e0de:	f000 f9e9 	bl	800e4b4 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9data_castERNS_8map_base4NodeE>
 800e0e2:	6138      	str	r0, [r7, #16]
          if (node_comp(node, found_data_node))
 800e0e4:	693a      	ldr	r2, [r7, #16]
 800e0e6:	6879      	ldr	r1, [r7, #4]
 800e0e8:	68f8      	ldr	r0, [r7, #12]
 800e0ea:	f000 f9ee 	bl	800e4ca <_ZNK3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9node_compERKNS7_9Data_NodeESA_>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d003      	beq.n	800e0fc <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x58>
            found->dir = kLeft;
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	725a      	strb	r2, [r3, #9]
 800e0fa:	e015      	b.n	800e128 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x84>
          else if (node_comp(found_data_node, node))
 800e0fc:	687a      	ldr	r2, [r7, #4]
 800e0fe:	6939      	ldr	r1, [r7, #16]
 800e100:	68f8      	ldr	r0, [r7, #12]
 800e102:	f000 f9e2 	bl	800e4ca <_ZNK3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9node_compERKNS7_9Data_NodeESA_>
 800e106:	4603      	mov	r3, r0
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d003      	beq.n	800e114 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x70>
            found->dir = kRight;
 800e10c:	69fb      	ldr	r3, [r7, #28]
 800e10e:	2201      	movs	r2, #1
 800e110:	725a      	strb	r2, [r3, #9]
 800e112:	e009      	b.n	800e128 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x84>
            found->dir = kNeither;
 800e114:	69fb      	ldr	r3, [r7, #28]
 800e116:	2202      	movs	r2, #2
 800e118:	725a      	strb	r2, [r3, #9]
            critical_node = ETL_NULLPTR;
 800e11a:	2300      	movs	r3, #0
 800e11c:	617b      	str	r3, [r7, #20]
            destroy_data_node(node);
 800e11e:	6879      	ldr	r1, [r7, #4]
 800e120:	68f8      	ldr	r0, [r7, #12]
 800e122:	f000 f9e8 	bl	800e4f6 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE17destroy_data_nodeERNS7_9Data_NodeE>
            break;
 800e126:	e02b      	b.n	800e180 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0xdc>
          if (found->children[found->dir])
 800e128:	69fb      	ldr	r3, [r7, #28]
 800e12a:	7a5b      	ldrb	r3, [r3, #9]
 800e12c:	461a      	mov	r2, r3
 800e12e:	69fb      	ldr	r3, [r7, #28]
 800e130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d012      	beq.n	800e15e <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0xba>
            if (kNeither != found->children[found->dir]->weight)
 800e138:	69fb      	ldr	r3, [r7, #28]
 800e13a:	7a5b      	ldrb	r3, [r3, #9]
 800e13c:	461a      	mov	r2, r3
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e144:	7a1b      	ldrb	r3, [r3, #8]
 800e146:	2b02      	cmp	r3, #2
 800e148:	d001      	beq.n	800e14e <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0xaa>
              critical_parent_node = found;
 800e14a:	69fb      	ldr	r3, [r7, #28]
 800e14c:	61bb      	str	r3, [r7, #24]
            found = found->children[found->dir];
 800e14e:	69fb      	ldr	r3, [r7, #28]
 800e150:	7a5b      	ldrb	r3, [r3, #9]
 800e152:	461a      	mov	r2, r3
 800e154:	69fb      	ldr	r3, [r7, #28]
 800e156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e15a:	61fb      	str	r3, [r7, #28]
 800e15c:	e7b5      	b.n	800e0ca <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x26>
            attach_node(found->children[found->dir], node);
 800e15e:	68f8      	ldr	r0, [r7, #12]
 800e160:	69fb      	ldr	r3, [r7, #28]
 800e162:	7a5b      	ldrb	r3, [r3, #9]
 800e164:	009b      	lsls	r3, r3, #2
 800e166:	69fa      	ldr	r2, [r7, #28]
 800e168:	4413      	add	r3, r2
 800e16a:	687a      	ldr	r2, [r7, #4]
 800e16c:	4619      	mov	r1, r3
 800e16e:	f7fd fd77 	bl	800bc60 <_ZN3etl8map_base11attach_nodeERPNS0_4NodeERS1_>
            found = found->children[found->dir];
 800e172:	69fb      	ldr	r3, [r7, #28]
 800e174:	7a5b      	ldrb	r3, [r3, #9]
 800e176:	461a      	mov	r2, r3
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e17e:	61fb      	str	r3, [r7, #28]
        if (critical_node)
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d033      	beq.n	800e1ee <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x14a>
          if (critical_parent_node == ETL_NULLPTR && critical_node == root_node)
 800e186:	69bb      	ldr	r3, [r7, #24]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d10c      	bne.n	800e1a6 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x102>
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	689b      	ldr	r3, [r3, #8]
 800e190:	697a      	ldr	r2, [r7, #20]
 800e192:	429a      	cmp	r2, r3
 800e194:	d107      	bne.n	800e1a6 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x102>
            balance_node(root_node);
 800e196:	68fa      	ldr	r2, [r7, #12]
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	3308      	adds	r3, #8
 800e19c:	4619      	mov	r1, r3
 800e19e:	4610      	mov	r0, r2
 800e1a0:	f7fd fc26 	bl	800b9f0 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE>
 800e1a4:	e023      	b.n	800e1ee <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x14a>
          else if (critical_parent_node == ETL_NULLPTR && critical_node == position)
 800e1a6:	69bb      	ldr	r3, [r7, #24]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d10a      	bne.n	800e1c2 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x11e>
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	697a      	ldr	r2, [r7, #20]
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	d105      	bne.n	800e1c2 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x11e>
            balance_node(position);
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	68b9      	ldr	r1, [r7, #8]
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7fd fc18 	bl	800b9f0 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE>
 800e1c0:	e015      	b.n	800e1ee <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x14a>
            if (critical_parent_node != ETL_NULLPTR)
 800e1c2:	69bb      	ldr	r3, [r7, #24]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d012      	beq.n	800e1ee <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x14a>
              balance_node(critical_parent_node->children[critical_parent_node->dir]);
 800e1c8:	68f8      	ldr	r0, [r7, #12]
 800e1ca:	69bb      	ldr	r3, [r7, #24]
 800e1cc:	7a5b      	ldrb	r3, [r3, #9]
 800e1ce:	009b      	lsls	r3, r3, #2
 800e1d0:	69ba      	ldr	r2, [r7, #24]
 800e1d2:	4413      	add	r3, r2
 800e1d4:	4619      	mov	r1, r3
 800e1d6:	f7fd fc0b 	bl	800b9f0 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE>
 800e1da:	e008      	b.n	800e1ee <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x14a>
        attach_node(position, node);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	68b9      	ldr	r1, [r7, #8]
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7fd fd3c 	bl	800bc60 <_ZN3etl8map_base11attach_nodeERPNS0_4NodeERS1_>
        found = position;
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	61fb      	str	r3, [r7, #28]
      return found;
 800e1ee:	69fb      	ldr	r3, [r7, #28]
    }
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3720      	adds	r7, #32
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE8iteratorC1ERS7_PNS_8map_base4NodeE>:
      iterator(imap& map, Node* node)
 800e1f8:	b480      	push	{r7}
 800e1fa:	b085      	sub	sp, #20
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	60f8      	str	r0, [r7, #12]
 800e200:	60b9      	str	r1, [r7, #8]
 800e202:	607a      	str	r2, [r7, #4]
        , p_node(node)
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	68ba      	ldr	r2, [r7, #8]
 800e208:	601a      	str	r2, [r3, #0]
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	687a      	ldr	r2, [r7, #4]
 800e20e:	605a      	str	r2, [r3, #4]
      }
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	4618      	mov	r0, r3
 800e214:	3714      	adds	r7, #20
 800e216:	46bd      	mov	sp, r7
 800e218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21c:	4770      	bx	lr

0800e21e <_ZSt9make_pairIN3etl4imapImPN11SolarGators11DataModules10DataModuleENS0_4lessImEEE8iteratorERbESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENSC_INSD_IT0_E4typeEE6__typeEEOSE_OSJ_>:
    make_pair(_T1&& __x, _T2&& __y)
 800e21e:	b590      	push	{r4, r7, lr}
 800e220:	b085      	sub	sp, #20
 800e222:	af00      	add	r7, sp, #0
 800e224:	60f8      	str	r0, [r7, #12]
 800e226:	60b9      	str	r1, [r7, #8]
 800e228:	607a      	str	r2, [r7, #4]
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 800e22a:	68b8      	ldr	r0, [r7, #8]
 800e22c:	f000 f972 	bl	800e514 <_ZSt7forwardIN3etl4imapImPN11SolarGators11DataModules10DataModuleENS0_4lessImEEE8iteratorEEOT_RNSt16remove_referenceISA_E4typeE>
 800e230:	4604      	mov	r4, r0
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f7fe fdc6 	bl	800cdc4 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 800e238:	4603      	mov	r3, r0
 800e23a:	461a      	mov	r2, r3
 800e23c:	4621      	mov	r1, r4
 800e23e:	68f8      	ldr	r0, [r7, #12]
 800e240:	f000 f973 	bl	800e52a <_ZNSt4pairIN3etl4imapImPN11SolarGators11DataModules10DataModuleENS0_4lessImEEE8iteratorEbEC1IS9_RbLb1EEEOT_OT0_>
    }
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	3714      	adds	r7, #20
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd90      	pop	{r4, r7, pc}

0800e24c <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE8iteratorC1ERKS8_>:
      iterator(const iterator& other)
 800e24c:	b480      	push	{r7}
 800e24e:	b083      	sub	sp, #12
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
        : p_map(other.p_map)
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	681a      	ldr	r2, [r3, #0]
        , p_node(other.p_node)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	601a      	str	r2, [r3, #0]
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	685a      	ldr	r2, [r3, #4]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	605a      	str	r2, [r3, #4]
      }
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	4618      	mov	r0, r3
 800e26a:	370c      	adds	r7, #12
 800e26c:	46bd      	mov	sp, r7
 800e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e272:	4770      	bx	lr

0800e274 <_ZN3etl12generic_poolILj20ELj4ELj15EEC1Ev>:
    generic_pool()
 800e274:	b580      	push	{r7, lr}
 800e276:	b082      	sub	sp, #8
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
      : etl::ipool(reinterpret_cast<char*>(&buffer[0]), Element_Size, VSize)
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f103 0118 	add.w	r1, r3, #24
 800e284:	230f      	movs	r3, #15
 800e286:	2214      	movs	r2, #20
 800e288:	f7fd fa80 	bl	800b78c <_ZN3etl5ipoolC1EPcmm>
    }
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	4618      	mov	r0, r3
 800e290:	3708      	adds	r7, #8
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}

0800e296 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE5beginEv>:
    iterator begin()
 800e296:	b580      	push	{r7, lr}
 800e298:	b082      	sub	sp, #8
 800e29a:	af00      	add	r7, sp, #0
 800e29c:	6078      	str	r0, [r7, #4]
 800e29e:	6039      	str	r1, [r7, #0]
      return iterator(*this, find_limit_node(root_node, kLeft));
 800e2a0:	6838      	ldr	r0, [r7, #0]
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	689b      	ldr	r3, [r3, #8]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	f7fd fcb8 	bl	800bc1e <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	6839      	ldr	r1, [r7, #0]
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f7ff ff9f 	bl	800e1f8 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE8iteratorC1ERS7_PNS_8map_base4NodeE>
    }
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	3708      	adds	r7, #8
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}

0800e2c2 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE14const_iteratorC1ERKNS7_8iteratorE>:
      const_iterator(const typename imap::iterator& other)
 800e2c2:	b480      	push	{r7}
 800e2c4:	b083      	sub	sp, #12
 800e2c6:	af00      	add	r7, sp, #0
 800e2c8:	6078      	str	r0, [r7, #4]
 800e2ca:	6039      	str	r1, [r7, #0]
        : p_map(other.p_map)
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	681a      	ldr	r2, [r3, #0]
        , p_node(other.p_node)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	601a      	str	r2, [r3, #0]
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	685a      	ldr	r2, [r3, #4]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	605a      	str	r2, [r3, #4]
      }
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	4618      	mov	r0, r3
 800e2e0:	370c      	adds	r7, #12
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e8:	4770      	bx	lr

0800e2ea <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE14const_iteratorD1Ev>:
      ~const_iterator()
 800e2ea:	b480      	push	{r7}
 800e2ec:	b083      	sub	sp, #12
 800e2ee:	af00      	add	r7, sp, #0
 800e2f0:	6078      	str	r0, [r7, #4]
      }
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	370c      	adds	r7, #12
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr

0800e300 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE14const_iteratorC1ERKS8_>:
      const_iterator(const const_iterator& other)
 800e300:	b480      	push	{r7}
 800e302:	b083      	sub	sp, #12
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	6039      	str	r1, [r7, #0]
        : p_map(other.p_map)
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	681a      	ldr	r2, [r3, #0]
        , p_node(other.p_node)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	601a      	str	r2, [r3, #0]
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	685a      	ldr	r2, [r3, #4]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	605a      	str	r2, [r3, #4]
      }
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	4618      	mov	r0, r3
 800e31e:	370c      	adds	r7, #12
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr

0800e328 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE3endEv>:
    iterator end()
 800e328:	b580      	push	{r7, lr}
 800e32a:	b082      	sub	sp, #8
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
      return iterator(*this);
 800e332:	6839      	ldr	r1, [r7, #0]
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f000 f913 	bl	800e560 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE8iteratorC1ERS7_>
    }
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	3708      	adds	r7, #8
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}

0800e342 <_ZN3etlneERKNS_4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE14const_iteratorESA_>:
      friend bool operator != (const const_iterator& lhs, const const_iterator& rhs)
 800e342:	b580      	push	{r7, lr}
 800e344:	b082      	sub	sp, #8
 800e346:	af00      	add	r7, sp, #0
 800e348:	6078      	str	r0, [r7, #4]
 800e34a:	6039      	str	r1, [r7, #0]
        return !(lhs == rhs);
 800e34c:	6839      	ldr	r1, [r7, #0]
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f000 f918 	bl	800e584 <_ZN3etleqERKNS_4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE14const_iteratorESA_>
 800e354:	4603      	mov	r3, r0
 800e356:	f083 0301 	eor.w	r3, r3, #1
 800e35a:	b2db      	uxtb	r3, r3
      }
 800e35c:	4618      	mov	r0, r3
 800e35e:	3708      	adds	r7, #8
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE5eraseENS7_14const_iteratorE>:
    iterator erase(const_iterator position)
 800e364:	b590      	push	{r4, r7, lr}
 800e366:	b087      	sub	sp, #28
 800e368:	af00      	add	r7, sp, #0
 800e36a:	60f8      	str	r0, [r7, #12]
 800e36c:	60b9      	str	r1, [r7, #8]
 800e36e:	607a      	str	r2, [r7, #4]
      Node*& reference_node = find_node(root_node, position.p_node);
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	f103 0108 	add.w	r1, r3, #8
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	461a      	mov	r2, r3
 800e37c:	68b8      	ldr	r0, [r7, #8]
 800e37e:	f000 f91b 	bl	800e5b8 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9find_nodeERPNS_8map_base4NodeEPKS9_>
 800e382:	6178      	str	r0, [r7, #20]
      iterator next(*this, reference_node);
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	461a      	mov	r2, r3
 800e38a:	68b9      	ldr	r1, [r7, #8]
 800e38c:	68f8      	ldr	r0, [r7, #12]
 800e38e:	f7ff ff33 	bl	800e1f8 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE8iteratorC1ERS7_PNS_8map_base4NodeE>
      ++next;
 800e392:	68f8      	ldr	r0, [r7, #12]
 800e394:	f000 f953 	bl	800e63e <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE8iteratorppEv>
      remove_node(root_node, (*position).first);
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	f103 0408 	add.w	r4, r3, #8
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f000 f95e 	bl	800e660 <_ZNK3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE14const_iteratordeEv>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	4621      	mov	r1, r4
 800e3aa:	68b8      	ldr	r0, [r7, #8]
 800e3ac:	f000 f967 	bl	800e67e <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm>
      return next;
 800e3b0:	bf00      	nop
    }
 800e3b2:	68f8      	ldr	r0, [r7, #12]
 800e3b4:	371c      	adds	r7, #28
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd90      	pop	{r4, r7, pc}

0800e3ba <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE14const_iteratoraSERKS8_>:
      const_iterator& operator =(const const_iterator& other)
 800e3ba:	b480      	push	{r7}
 800e3bc:	b083      	sub	sp, #12
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	6078      	str	r0, [r7, #4]
 800e3c2:	6039      	str	r1, [r7, #0]
        p_map = other.p_map;
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	601a      	str	r2, [r3, #0]
        p_node = other.p_node;
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	685a      	ldr	r2, [r3, #4]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	605a      	str	r2, [r3, #4]
        return *this;
 800e3d4:	687b      	ldr	r3, [r7, #4]
      }
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	370c      	adds	r7, #12
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e0:	4770      	bx	lr

0800e3e2 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e3e2:	b480      	push	{r7}
 800e3e4:	b083      	sub	sp, #12
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	370c      	adds	r7, #12
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr

0800e3f8 <_ZSt7forwardIRPN11SolarGators11DataModules10DataModuleEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e3f8:	b480      	push	{r7}
 800e3fa:	b083      	sub	sp, #12
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	4618      	mov	r0, r3
 800e404:	370c      	adds	r7, #12
 800e406:	46bd      	mov	sp, r7
 800e408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40c:	4770      	bx	lr

0800e40e <_ZNSt4pairImPN11SolarGators11DataModules10DataModuleEEC1IRS3_Lb1EEERKmOT_>:
       constexpr pair(const _T1& __x, _U2&& __y)
 800e40e:	b580      	push	{r7, lr}
 800e410:	b084      	sub	sp, #16
 800e412:	af00      	add	r7, sp, #0
 800e414:	60f8      	str	r0, [r7, #12]
 800e416:	60b9      	str	r1, [r7, #8]
 800e418:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	681a      	ldr	r2, [r3, #0]
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	601a      	str	r2, [r3, #0]
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f7ff ffe8 	bl	800e3f8 <_ZSt7forwardIRPN11SolarGators11DataModules10DataModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 800e428:	4603      	mov	r3, r0
 800e42a:	681a      	ldr	r2, [r3, #0]
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	605a      	str	r2, [r3, #4]
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	4618      	mov	r0, r3
 800e434:	3710      	adds	r7, #16
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}

0800e43a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e43a:	b480      	push	{r7}
 800e43c:	b083      	sub	sp, #12
 800e43e:	af00      	add	r7, sp, #0
 800e440:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	4618      	mov	r0, r3
 800e446:	370c      	adds	r7, #12
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <_ZSt7forwardIPN11SolarGators11DataModules10DataModuleEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e450:	b480      	push	{r7}
 800e452:	b083      	sub	sp, #12
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	4618      	mov	r0, r3
 800e45c:	370c      	adds	r7, #12
 800e45e:	46bd      	mov	sp, r7
 800e460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e464:	4770      	bx	lr
	...

0800e468 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE16create_data_nodeEv>:
    Data_Node& create_data_node()
 800e468:	b580      	push	{r7, lr}
 800e46a:	b084      	sub	sp, #16
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
      Data_Node* (etl::ipool::*func)() = &etl::ipool::allocate<Data_Node>;
 800e470:	4b0f      	ldr	r3, [pc, #60]	; (800e4b0 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE16create_data_nodeEv+0x48>)
 800e472:	60bb      	str	r3, [r7, #8]
 800e474:	2300      	movs	r3, #0
 800e476:	60fb      	str	r3, [r7, #12]
      return *(p_node_pool->*func)();
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	68db      	ldr	r3, [r3, #12]
 800e47c:	68fa      	ldr	r2, [r7, #12]
 800e47e:	1052      	asrs	r2, r2, #1
 800e480:	1899      	adds	r1, r3, r2
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f003 0301 	and.w	r3, r3, #1
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d101      	bne.n	800e490 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE16create_data_nodeEv+0x28>
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	e008      	b.n	800e4a2 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE16create_data_nodeEv+0x3a>
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	68db      	ldr	r3, [r3, #12]
 800e494:	68fa      	ldr	r2, [r7, #12]
 800e496:	1052      	asrs	r2, r2, #1
 800e498:	4413      	add	r3, r2
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	68ba      	ldr	r2, [r7, #8]
 800e49e:	4413      	add	r3, r2
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	4608      	mov	r0, r1
 800e4a4:	4798      	blx	r3
 800e4a6:	4603      	mov	r3, r0
    }
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3710      	adds	r7, #16
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}
 800e4b0:	0800e9c5 	.word	0x0800e9c5

0800e4b4 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9data_castERNS_8map_base4NodeE>:
    static Data_Node& data_cast(Node& node)
 800e4b4:	b480      	push	{r7}
 800e4b6:	b083      	sub	sp, #12
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
      return static_cast<Data_Node&>(node);
 800e4bc:	687b      	ldr	r3, [r7, #4]
    }
 800e4be:	4618      	mov	r0, r3
 800e4c0:	370c      	adds	r7, #12
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c8:	4770      	bx	lr

0800e4ca <_ZNK3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9node_compERKNS7_9Data_NodeESA_>:
    bool node_comp(const Data_Node& node1, const Data_Node& node2) const
 800e4ca:	b580      	push	{r7, lr}
 800e4cc:	b084      	sub	sp, #16
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	60f8      	str	r0, [r7, #12]
 800e4d2:	60b9      	str	r1, [r7, #8]
 800e4d4:	607a      	str	r2, [r7, #4]
      return kcompare(node1.value.first, node2.value.first);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	f103 0010 	add.w	r0, r3, #16
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	f103 010c 	add.w	r1, r3, #12
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	330c      	adds	r3, #12
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	f000 fa88 	bl	800e9fc <_ZNK3etl4lessImEclERKmS3_>
 800e4ec:	4603      	mov	r3, r0
    }
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3710      	adds	r7, #16
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}

0800e4f6 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE17destroy_data_nodeERNS7_9Data_NodeE>:
    void destroy_data_node(Data_Node& node)
 800e4f6:	b580      	push	{r7, lr}
 800e4f8:	b082      	sub	sp, #8
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	6078      	str	r0, [r7, #4]
 800e4fe:	6039      	str	r1, [r7, #0]
      p_node_pool->release(&node);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	68db      	ldr	r3, [r3, #12]
 800e504:	6839      	ldr	r1, [r7, #0]
 800e506:	4618      	mov	r0, r3
 800e508:	f7fd f930 	bl	800b76c <_ZN3etl5ipool7releaseEPKv>
    }
 800e50c:	bf00      	nop
 800e50e:	3708      	adds	r7, #8
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <_ZSt7forwardIN3etl4imapImPN11SolarGators11DataModules10DataModuleENS0_4lessImEEE8iteratorEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e514:	b480      	push	{r7}
 800e516:	b083      	sub	sp, #12
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	4618      	mov	r0, r3
 800e520:	370c      	adds	r7, #12
 800e522:	46bd      	mov	sp, r7
 800e524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e528:	4770      	bx	lr

0800e52a <_ZNSt4pairIN3etl4imapImPN11SolarGators11DataModules10DataModuleENS0_4lessImEEE8iteratorEbEC1IS9_RbLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800e52a:	b590      	push	{r4, r7, lr}
 800e52c:	b085      	sub	sp, #20
 800e52e:	af00      	add	r7, sp, #0
 800e530:	60f8      	str	r0, [r7, #12]
 800e532:	60b9      	str	r1, [r7, #8]
 800e534:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800e536:	68fc      	ldr	r4, [r7, #12]
 800e538:	68b8      	ldr	r0, [r7, #8]
 800e53a:	f7ff ffeb 	bl	800e514 <_ZSt7forwardIN3etl4imapImPN11SolarGators11DataModules10DataModuleENS0_4lessImEEE8iteratorEEOT_RNSt16remove_referenceISA_E4typeE>
 800e53e:	4603      	mov	r3, r0
 800e540:	4619      	mov	r1, r3
 800e542:	4620      	mov	r0, r4
 800e544:	f7ff fe82 	bl	800e24c <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE8iteratorC1ERKS8_>
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f7fe fc3b 	bl	800cdc4 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 800e54e:	4603      	mov	r3, r0
 800e550:	781a      	ldrb	r2, [r3, #0]
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	721a      	strb	r2, [r3, #8]
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	4618      	mov	r0, r3
 800e55a:	3714      	adds	r7, #20
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd90      	pop	{r4, r7, pc}

0800e560 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE8iteratorC1ERS7_>:
      iterator(imap& map)
 800e560:	b480      	push	{r7}
 800e562:	b083      	sub	sp, #12
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
 800e568:	6039      	str	r1, [r7, #0]
        , p_node(ETL_NULLPTR)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	683a      	ldr	r2, [r7, #0]
 800e56e:	601a      	str	r2, [r3, #0]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2200      	movs	r2, #0
 800e574:	605a      	str	r2, [r3, #4]
      }
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	4618      	mov	r0, r3
 800e57a:	370c      	adds	r7, #12
 800e57c:	46bd      	mov	sp, r7
 800e57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e582:	4770      	bx	lr

0800e584 <_ZN3etleqERKNS_4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE14const_iteratorESA_>:
      friend bool operator == (const const_iterator& lhs, const const_iterator& rhs)
 800e584:	b480      	push	{r7}
 800e586:	b083      	sub	sp, #12
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	6039      	str	r1, [r7, #0]
        return lhs.p_map == rhs.p_map && lhs.p_node == rhs.p_node;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	429a      	cmp	r2, r3
 800e598:	d107      	bne.n	800e5aa <_ZN3etleqERKNS_4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE14const_iteratorESA_+0x26>
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	685a      	ldr	r2, [r3, #4]
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	685b      	ldr	r3, [r3, #4]
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d101      	bne.n	800e5aa <_ZN3etleqERKNS_4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE14const_iteratorESA_+0x26>
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	e000      	b.n	800e5ac <_ZN3etleqERKNS_4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE14const_iteratorESA_+0x28>
 800e5aa:	2300      	movs	r3, #0
      }
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	370c      	adds	r7, #12
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b6:	4770      	bx	lr

0800e5b8 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9find_nodeERPNS_8map_base4NodeEPKS9_>:
    Node*& find_node(Node*& position, const Node* node)
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b088      	sub	sp, #32
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	60f8      	str	r0, [r7, #12]
 800e5c0:	60b9      	str	r1, [r7, #8]
 800e5c2:	607a      	str	r2, [r7, #4]
      Node* found = position;
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	61fb      	str	r3, [r7, #28]
      while (found)
 800e5ca:	69fb      	ldr	r3, [r7, #28]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d030      	beq.n	800e632 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x7a>
        if (found->children[kLeft] == node)
 800e5d0:	69fb      	ldr	r3, [r7, #28]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	687a      	ldr	r2, [r7, #4]
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d101      	bne.n	800e5de <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x26>
          return found->children[kLeft];
 800e5da:	69fb      	ldr	r3, [r7, #28]
 800e5dc:	e02b      	b.n	800e636 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x7e>
        else if (found->children[kRight] == node)
 800e5de:	69fb      	ldr	r3, [r7, #28]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	687a      	ldr	r2, [r7, #4]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d102      	bne.n	800e5ee <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x36>
          return found->children[kRight];
 800e5e8:	69fb      	ldr	r3, [r7, #28]
 800e5ea:	3304      	adds	r3, #4
 800e5ec:	e023      	b.n	800e636 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x7e>
          Data_Node& found_data_node = imap::data_cast(*found);
 800e5ee:	69f8      	ldr	r0, [r7, #28]
 800e5f0:	f7ff ff60 	bl	800e4b4 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9data_castERNS_8map_base4NodeE>
 800e5f4:	61b8      	str	r0, [r7, #24]
          const Data_Node& data_node = imap::data_cast(*node);
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f000 fa15 	bl	800ea26 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9data_castERKNS_8map_base4NodeE>
 800e5fc:	6178      	str	r0, [r7, #20]
          if (node_comp(data_node, found_data_node))
 800e5fe:	69ba      	ldr	r2, [r7, #24]
 800e600:	6979      	ldr	r1, [r7, #20]
 800e602:	68f8      	ldr	r0, [r7, #12]
 800e604:	f7ff ff61 	bl	800e4ca <_ZNK3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9node_compERKNS7_9Data_NodeESA_>
 800e608:	4603      	mov	r3, r0
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d003      	beq.n	800e616 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x5e>
            found = found->children[kLeft];
 800e60e:	69fb      	ldr	r3, [r7, #28]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	61fb      	str	r3, [r7, #28]
 800e614:	e7d9      	b.n	800e5ca <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x12>
          else if (node_comp(found_data_node, data_node))
 800e616:	697a      	ldr	r2, [r7, #20]
 800e618:	69b9      	ldr	r1, [r7, #24]
 800e61a:	68f8      	ldr	r0, [r7, #12]
 800e61c:	f7ff ff55 	bl	800e4ca <_ZNK3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9node_compERKNS7_9Data_NodeESA_>
 800e620:	4603      	mov	r3, r0
 800e622:	2b00      	cmp	r3, #0
 800e624:	d003      	beq.n	800e62e <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x76>
            found = found->children[kRight];
 800e626:	69fb      	ldr	r3, [r7, #28]
 800e628:	685b      	ldr	r3, [r3, #4]
 800e62a:	61fb      	str	r3, [r7, #28]
 800e62c:	e7cd      	b.n	800e5ca <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x12>
            return position;
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	e001      	b.n	800e636 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x7e>
      return root_node;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	3308      	adds	r3, #8
    }
 800e636:	4618      	mov	r0, r3
 800e638:	3720      	adds	r7, #32
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}

0800e63e <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE8iteratorppEv>:
      iterator& operator ++()
 800e63e:	b580      	push	{r7, lr}
 800e640:	b082      	sub	sp, #8
 800e642:	af00      	add	r7, sp, #0
 800e644:	6078      	str	r0, [r7, #4]
        p_map->next_node(p_node);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681a      	ldr	r2, [r3, #0]
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	3304      	adds	r3, #4
 800e64e:	4619      	mov	r1, r3
 800e650:	4610      	mov	r0, r2
 800e652:	f000 f9f3 	bl	800ea3c <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9next_nodeERPNS_8map_base4NodeE>
        return *this;
 800e656:	687b      	ldr	r3, [r7, #4]
      }
 800e658:	4618      	mov	r0, r3
 800e65a:	3708      	adds	r7, #8
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <_ZNK3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE14const_iteratordeEv>:
      const_reference operator *() const
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
        return imap::data_cast(p_node)->value;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	4618      	mov	r0, r3
 800e66e:	f000 fa1f 	bl	800eab0 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9data_castEPKNS_8map_base4NodeE>
 800e672:	4603      	mov	r3, r0
 800e674:	330c      	adds	r3, #12
      }
 800e676:	4618      	mov	r0, r3
 800e678:	3708      	adds	r7, #8
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}

0800e67e <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm>:
    Node* remove_node(Node*& position, key_parameter_t key)
 800e67e:	b590      	push	{r4, r7, lr}
 800e680:	b08f      	sub	sp, #60	; 0x3c
 800e682:	af00      	add	r7, sp, #0
 800e684:	60f8      	str	r0, [r7, #12]
 800e686:	60b9      	str	r1, [r7, #8]
 800e688:	607a      	str	r2, [r7, #4]
      Node* found_parent = ETL_NULLPTR;
 800e68a:	2300      	movs	r3, #0
 800e68c:	637b      	str	r3, [r7, #52]	; 0x34
      Node* found = ETL_NULLPTR;
 800e68e:	2300      	movs	r3, #0
 800e690:	633b      	str	r3, [r7, #48]	; 0x30
      Node* replace_parent = ETL_NULLPTR;
 800e692:	2300      	movs	r3, #0
 800e694:	62fb      	str	r3, [r7, #44]	; 0x2c
      Node* replace = position;
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	62bb      	str	r3, [r7, #40]	; 0x28
      Node* balance_parent = ETL_NULLPTR;
 800e69c:	2300      	movs	r3, #0
 800e69e:	627b      	str	r3, [r7, #36]	; 0x24
      Node* balance = root_node;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	689b      	ldr	r3, [r3, #8]
 800e6a4:	623b      	str	r3, [r7, #32]
      while (replace)
 800e6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d057      	beq.n	800e75c <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0xde>
        Data_Node& replace_data_node = imap::data_cast(*replace);
 800e6ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6ae:	f7ff ff01 	bl	800e4b4 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9data_castERNS_8map_base4NodeE>
 800e6b2:	61f8      	str	r0, [r7, #28]
        if (node_comp(key, replace_data_node))
 800e6b4:	69fa      	ldr	r2, [r7, #28]
 800e6b6:	6879      	ldr	r1, [r7, #4]
 800e6b8:	68f8      	ldr	r0, [r7, #12]
 800e6ba:	f000 fa04 	bl	800eac6 <_ZNK3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9node_compERKmRKNS7_9Data_NodeE>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d003      	beq.n	800e6cc <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x4e>
          replace->dir = kLeft;
 800e6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	725a      	strb	r2, [r3, #9]
 800e6ca:	e019      	b.n	800e700 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x82>
        else if (node_comp(replace_data_node, key))
 800e6cc:	687a      	ldr	r2, [r7, #4]
 800e6ce:	69f9      	ldr	r1, [r7, #28]
 800e6d0:	68f8      	ldr	r0, [r7, #12]
 800e6d2:	f000 fa0c 	bl	800eaee <_ZNK3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9node_compERKNS7_9Data_NodeERKm>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d003      	beq.n	800e6e4 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x66>
          replace->dir = kRight;
 800e6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6de:	2201      	movs	r2, #1
 800e6e0:	725a      	strb	r2, [r3, #9]
 800e6e2:	e00d      	b.n	800e700 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x82>
          replace->dir = replace->children[kLeft] ? kLeft : kRight;
 800e6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	bf0c      	ite	eq
 800e6ec:	2301      	moveq	r3, #1
 800e6ee:	2300      	movne	r3, #0
 800e6f0:	b2db      	uxtb	r3, r3
 800e6f2:	461a      	mov	r2, r3
 800e6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f6:	725a      	strb	r2, [r3, #9]
          found_parent = replace_parent;
 800e6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fa:	637b      	str	r3, [r7, #52]	; 0x34
          found = replace;
 800e6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6fe:	633b      	str	r3, [r7, #48]	; 0x30
        if (replace->children[replace->dir] == ETL_NULLPTR)
 800e700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e702:	7a5b      	ldrb	r3, [r3, #9]
 800e704:	461a      	mov	r2, r3
 800e706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d024      	beq.n	800e75a <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0xdc>
        if ((replace->weight == kNeither) ||
 800e710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e712:	7a1b      	ldrb	r3, [r3, #8]
 800e714:	2b02      	cmp	r3, #2
 800e716:	d012      	beq.n	800e73e <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0xc0>
          (replace->weight == (1 - replace->dir) &&
 800e718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e71a:	7a1b      	ldrb	r3, [r3, #8]
 800e71c:	461a      	mov	r2, r3
 800e71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e720:	7a5b      	ldrb	r3, [r3, #9]
 800e722:	f1c3 0301 	rsb	r3, r3, #1
        if ((replace->weight == kNeither) ||
 800e726:	429a      	cmp	r2, r3
 800e728:	d10d      	bne.n	800e746 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0xc8>
            replace->children[1 - replace->dir]->weight == kNeither))
 800e72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e72c:	7a5b      	ldrb	r3, [r3, #9]
 800e72e:	f1c3 0201 	rsb	r2, r3, #1
 800e732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e738:	7a1b      	ldrb	r3, [r3, #8]
          (replace->weight == (1 - replace->dir) &&
 800e73a:	2b02      	cmp	r3, #2
 800e73c:	d103      	bne.n	800e746 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0xc8>
          balance_parent = replace_parent;
 800e73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e740:	627b      	str	r3, [r7, #36]	; 0x24
          balance = replace;
 800e742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e744:	623b      	str	r3, [r7, #32]
        replace_parent = replace;
 800e746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e748:	62fb      	str	r3, [r7, #44]	; 0x2c
        replace = replace->children[replace->dir];
 800e74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74c:	7a5b      	ldrb	r3, [r3, #9]
 800e74e:	461a      	mov	r2, r3
 800e750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e756:	62bb      	str	r3, [r7, #40]	; 0x28
      while (replace)
 800e758:	e7a5      	b.n	800e6a6 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x28>
          break;
 800e75a:	bf00      	nop
      if (found)
 800e75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e75e:	2b00      	cmp	r3, #0
 800e760:	f000 812a 	beq.w	800e9b8 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x33a>
        while (balance)
 800e764:	6a3b      	ldr	r3, [r7, #32]
 800e766:	2b00      	cmp	r3, #0
 800e768:	f000 80ee 	beq.w	800e948 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x2ca>
          if (balance->children[balance->dir] == ETL_NULLPTR)
 800e76c:	6a3b      	ldr	r3, [r7, #32]
 800e76e:	7a5b      	ldrb	r3, [r3, #9]
 800e770:	461a      	mov	r2, r3
 800e772:	6a3b      	ldr	r3, [r7, #32]
 800e774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	f000 80e4 	beq.w	800e946 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x2c8>
          if (balance->weight == kNeither)
 800e77e:	6a3b      	ldr	r3, [r7, #32]
 800e780:	7a1b      	ldrb	r3, [r3, #8]
 800e782:	2b02      	cmp	r3, #2
 800e784:	d107      	bne.n	800e796 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x118>
            balance->weight = 1 - balance->dir;
 800e786:	6a3b      	ldr	r3, [r7, #32]
 800e788:	7a5b      	ldrb	r3, [r3, #9]
 800e78a:	f1c3 0301 	rsb	r3, r3, #1
 800e78e:	b2da      	uxtb	r2, r3
 800e790:	6a3b      	ldr	r3, [r7, #32]
 800e792:	721a      	strb	r2, [r3, #8]
 800e794:	e0cd      	b.n	800e932 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x2b4>
          else if (balance->weight == balance->dir)
 800e796:	6a3b      	ldr	r3, [r7, #32]
 800e798:	7a1a      	ldrb	r2, [r3, #8]
 800e79a:	6a3b      	ldr	r3, [r7, #32]
 800e79c:	7a5b      	ldrb	r3, [r3, #9]
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d103      	bne.n	800e7aa <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x12c>
            balance->weight = kNeither;
 800e7a2:	6a3b      	ldr	r3, [r7, #32]
 800e7a4:	2202      	movs	r2, #2
 800e7a6:	721a      	strb	r2, [r3, #8]
 800e7a8:	e0c3      	b.n	800e932 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x2b4>
            int weight = balance->children[1 - balance->dir]->weight;
 800e7aa:	6a3b      	ldr	r3, [r7, #32]
 800e7ac:	7a5b      	ldrb	r3, [r3, #9]
 800e7ae:	f1c3 0201 	rsb	r2, r3, #1
 800e7b2:	6a3b      	ldr	r3, [r7, #32]
 800e7b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7b8:	7a1b      	ldrb	r3, [r3, #8]
 800e7ba:	61bb      	str	r3, [r7, #24]
            if (weight == balance->dir)
 800e7bc:	6a3b      	ldr	r3, [r7, #32]
 800e7be:	7a5b      	ldrb	r3, [r3, #9]
 800e7c0:	461a      	mov	r2, r3
 800e7c2:	69bb      	ldr	r3, [r7, #24]
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d136      	bne.n	800e836 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x1b8>
              if (balance_parent == ETL_NULLPTR)
 800e7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d118      	bne.n	800e800 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x182>
                rotate_3node(root_node, 1 - balance->dir,
 800e7ce:	68f8      	ldr	r0, [r7, #12]
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	f103 0108 	add.w	r1, r3, #8
 800e7d6:	6a3b      	ldr	r3, [r7, #32]
 800e7d8:	7a5b      	ldrb	r3, [r3, #9]
 800e7da:	f1c3 0301 	rsb	r3, r3, #1
 800e7de:	b2dc      	uxtb	r4, r3
                  balance->children[1 - balance->dir]->children[balance->dir]->weight);
 800e7e0:	6a3b      	ldr	r3, [r7, #32]
 800e7e2:	7a5b      	ldrb	r3, [r3, #9]
 800e7e4:	f1c3 0201 	rsb	r2, r3, #1
 800e7e8:	6a3b      	ldr	r3, [r7, #32]
 800e7ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7ee:	6a3a      	ldr	r2, [r7, #32]
 800e7f0:	7a52      	ldrb	r2, [r2, #9]
 800e7f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                rotate_3node(root_node, 1 - balance->dir,
 800e7f6:	7a1b      	ldrb	r3, [r3, #8]
 800e7f8:	4622      	mov	r2, r4
 800e7fa:	f7fd f9a2 	bl	800bb42 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh>
 800e7fe:	e06f      	b.n	800e8e0 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x262>
                rotate_3node(balance_parent->children[balance_parent->dir], 1 - balance->dir,
 800e800:	68f8      	ldr	r0, [r7, #12]
 800e802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e804:	7a5b      	ldrb	r3, [r3, #9]
 800e806:	009b      	lsls	r3, r3, #2
 800e808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e80a:	18d1      	adds	r1, r2, r3
 800e80c:	6a3b      	ldr	r3, [r7, #32]
 800e80e:	7a5b      	ldrb	r3, [r3, #9]
 800e810:	f1c3 0301 	rsb	r3, r3, #1
 800e814:	b2dc      	uxtb	r4, r3
                  balance->children[1 - balance->dir]->children[balance->dir]->weight);
 800e816:	6a3b      	ldr	r3, [r7, #32]
 800e818:	7a5b      	ldrb	r3, [r3, #9]
 800e81a:	f1c3 0201 	rsb	r2, r3, #1
 800e81e:	6a3b      	ldr	r3, [r7, #32]
 800e820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e824:	6a3a      	ldr	r2, [r7, #32]
 800e826:	7a52      	ldrb	r2, [r2, #9]
 800e828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                rotate_3node(balance_parent->children[balance_parent->dir], 1 - balance->dir,
 800e82c:	7a1b      	ldrb	r3, [r3, #8]
 800e82e:	4622      	mov	r2, r4
 800e830:	f7fd f987 	bl	800bb42 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh>
 800e834:	e054      	b.n	800e8e0 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x262>
            else if (weight == kNeither)
 800e836:	69bb      	ldr	r3, [r7, #24]
 800e838:	2b02      	cmp	r3, #2
 800e83a:	d133      	bne.n	800e8a4 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x226>
              if (balance_parent == ETL_NULLPTR)
 800e83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d111      	bne.n	800e866 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x1e8>
                rotate_2node(root_node, 1 - balance->dir);
 800e842:	68f8      	ldr	r0, [r7, #12]
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	f103 0108 	add.w	r1, r3, #8
 800e84a:	6a3b      	ldr	r3, [r7, #32]
 800e84c:	7a5b      	ldrb	r3, [r3, #9]
 800e84e:	f1c3 0301 	rsb	r3, r3, #1
 800e852:	b2db      	uxtb	r3, r3
 800e854:	461a      	mov	r2, r3
 800e856:	f7fd f943 	bl	800bae0 <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
                root_node->weight = balance->dir;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	689b      	ldr	r3, [r3, #8]
 800e85e:	6a3a      	ldr	r2, [r7, #32]
 800e860:	7a52      	ldrb	r2, [r2, #9]
 800e862:	721a      	strb	r2, [r3, #8]
 800e864:	e016      	b.n	800e894 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x216>
                rotate_2node(balance_parent->children[balance_parent->dir], 1 - balance->dir);
 800e866:	68f8      	ldr	r0, [r7, #12]
 800e868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86a:	7a5b      	ldrb	r3, [r3, #9]
 800e86c:	009b      	lsls	r3, r3, #2
 800e86e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e870:	18d1      	adds	r1, r2, r3
 800e872:	6a3b      	ldr	r3, [r7, #32]
 800e874:	7a5b      	ldrb	r3, [r3, #9]
 800e876:	f1c3 0301 	rsb	r3, r3, #1
 800e87a:	b2db      	uxtb	r3, r3
 800e87c:	461a      	mov	r2, r3
 800e87e:	f7fd f92f 	bl	800bae0 <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
                balance_parent->children[balance_parent->dir]->weight = balance->dir;
 800e882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e884:	7a5b      	ldrb	r3, [r3, #9]
 800e886:	461a      	mov	r2, r3
 800e888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e88e:	6a3a      	ldr	r2, [r7, #32]
 800e890:	7a52      	ldrb	r2, [r2, #9]
 800e892:	721a      	strb	r2, [r3, #8]
              balance->weight = 1 - balance->dir;
 800e894:	6a3b      	ldr	r3, [r7, #32]
 800e896:	7a5b      	ldrb	r3, [r3, #9]
 800e898:	f1c3 0301 	rsb	r3, r3, #1
 800e89c:	b2da      	uxtb	r2, r3
 800e89e:	6a3b      	ldr	r3, [r7, #32]
 800e8a0:	721a      	strb	r2, [r3, #8]
 800e8a2:	e01d      	b.n	800e8e0 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x262>
              if (balance_parent == ETL_NULLPTR)
 800e8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d10c      	bne.n	800e8c4 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x246>
                rotate_2node(root_node, 1 - balance->dir);
 800e8aa:	68f8      	ldr	r0, [r7, #12]
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	f103 0108 	add.w	r1, r3, #8
 800e8b2:	6a3b      	ldr	r3, [r7, #32]
 800e8b4:	7a5b      	ldrb	r3, [r3, #9]
 800e8b6:	f1c3 0301 	rsb	r3, r3, #1
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	461a      	mov	r2, r3
 800e8be:	f7fd f90f 	bl	800bae0 <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
 800e8c2:	e00d      	b.n	800e8e0 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x262>
                rotate_2node(balance_parent->children[balance_parent->dir], 1 - balance->dir);
 800e8c4:	68f8      	ldr	r0, [r7, #12]
 800e8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c8:	7a5b      	ldrb	r3, [r3, #9]
 800e8ca:	009b      	lsls	r3, r3, #2
 800e8cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8ce:	18d1      	adds	r1, r2, r3
 800e8d0:	6a3b      	ldr	r3, [r7, #32]
 800e8d2:	7a5b      	ldrb	r3, [r3, #9]
 800e8d4:	f1c3 0301 	rsb	r3, r3, #1
 800e8d8:	b2db      	uxtb	r3, r3
 800e8da:	461a      	mov	r2, r3
 800e8dc:	f7fd f900 	bl	800bae0 <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
            if (balance == found)
 800e8e0:	6a3a      	ldr	r2, [r7, #32]
 800e8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d124      	bne.n	800e932 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x2b4>
              if (balance_parent)
 800e8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d012      	beq.n	800e914 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x296>
                found_parent = balance_parent->children[balance_parent->dir];
 800e8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f0:	7a5b      	ldrb	r3, [r3, #9]
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8fa:	637b      	str	r3, [r7, #52]	; 0x34
                found_parent->dir = found_parent->children[kLeft] == found ? kLeft : kRight;
 800e8fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e902:	429a      	cmp	r2, r3
 800e904:	bf14      	ite	ne
 800e906:	2301      	movne	r3, #1
 800e908:	2300      	moveq	r3, #0
 800e90a:	b2db      	uxtb	r3, r3
 800e90c:	461a      	mov	r2, r3
 800e90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e910:	725a      	strb	r2, [r3, #9]
 800e912:	e00e      	b.n	800e932 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x2b4>
                found_parent = root_node;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	689b      	ldr	r3, [r3, #8]
 800e918:	637b      	str	r3, [r7, #52]	; 0x34
                root_node->dir = root_node->children[kLeft] == found ? kLeft : kRight;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	689b      	ldr	r3, [r3, #8]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e922:	429a      	cmp	r2, r3
 800e924:	bf14      	ite	ne
 800e926:	2301      	movne	r3, #1
 800e928:	2300      	moveq	r3, #0
 800e92a:	b2da      	uxtb	r2, r3
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	689b      	ldr	r3, [r3, #8]
 800e930:	725a      	strb	r2, [r3, #9]
          balance_parent = balance;
 800e932:	6a3b      	ldr	r3, [r7, #32]
 800e934:	627b      	str	r3, [r7, #36]	; 0x24
          balance = balance->children[balance->dir];
 800e936:	6a3b      	ldr	r3, [r7, #32]
 800e938:	7a5b      	ldrb	r3, [r3, #9]
 800e93a:	461a      	mov	r2, r3
 800e93c:	6a3b      	ldr	r3, [r7, #32]
 800e93e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e942:	623b      	str	r3, [r7, #32]
        while (balance)
 800e944:	e70e      	b.n	800e764 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0xe6>
            break;
 800e946:	bf00      	nop
        if (found_parent)
 800e948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d00e      	beq.n	800e96c <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x2ee>
          detach_node(found_parent->children[found_parent->dir],
 800e94e:	68f8      	ldr	r0, [r7, #12]
 800e950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e952:	7a5b      	ldrb	r3, [r3, #9]
 800e954:	009b      	lsls	r3, r3, #2
 800e956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e958:	18d1      	adds	r1, r2, r3
            replace_parent->children[replace_parent->dir]);
 800e95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95c:	7a5b      	ldrb	r3, [r3, #9]
 800e95e:	009b      	lsls	r3, r3, #2
 800e960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e962:	4413      	add	r3, r2
          detach_node(found_parent->children[found_parent->dir],
 800e964:	461a      	mov	r2, r3
 800e966:	f7fd f990 	bl	800bc8a <_ZN3etl8map_base11detach_nodeERPNS0_4NodeES3_>
 800e96a:	e018      	b.n	800e99e <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x320>
          if (replace_parent)
 800e96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d00c      	beq.n	800e98c <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x30e>
            detach_node(root_node, replace_parent->children[replace_parent->dir]);
 800e972:	68f8      	ldr	r0, [r7, #12]
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f103 0108 	add.w	r1, r3, #8
 800e97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97c:	7a5b      	ldrb	r3, [r3, #9]
 800e97e:	009b      	lsls	r3, r3, #2
 800e980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e982:	4413      	add	r3, r2
 800e984:	461a      	mov	r2, r3
 800e986:	f7fd f980 	bl	800bc8a <_ZN3etl8map_base11detach_nodeERPNS0_4NodeES3_>
 800e98a:	e008      	b.n	800e99e <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE11remove_nodeERPNS_8map_base4NodeERKm+0x320>
            detach_node(root_node, root_node);
 800e98c:	68f8      	ldr	r0, [r7, #12]
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	f103 0108 	add.w	r1, r3, #8
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	3308      	adds	r3, #8
 800e998:	461a      	mov	r2, r3
 800e99a:	f7fd f976 	bl	800bc8a <_ZN3etl8map_base11detach_nodeERPNS0_4NodeES3_>
        Data_Node& found_data_node = imap::data_cast(*found);
 800e99e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9a0:	f7ff fd88 	bl	800e4b4 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9data_castERNS_8map_base4NodeE>
 800e9a4:	6178      	str	r0, [r7, #20]
        --current_size;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	1e5a      	subs	r2, r3, #1
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	601a      	str	r2, [r3, #0]
        destroy_data_node(found_data_node);
 800e9b0:	6979      	ldr	r1, [r7, #20]
 800e9b2:	68f8      	ldr	r0, [r7, #12]
 800e9b4:	f7ff fd9f 	bl	800e4f6 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE17destroy_data_nodeERNS7_9Data_NodeE>
      return found;
 800e9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	373c      	adds	r7, #60	; 0x3c
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd90      	pop	{r4, r7, pc}
	...

0800e9c4 <_ZN3etl5ipool8allocateINS_4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9Data_NodeEEEPT_v>:
    T* allocate()
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
      if (sizeof(T) > Item_Size)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	691b      	ldr	r3, [r3, #16]
 800e9d0:	2b13      	cmp	r3, #19
 800e9d2:	d805      	bhi.n	800e9e0 <_ZN3etl5ipool8allocateINS_4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9Data_NodeEEEPT_v+0x1c>
        ETL_ASSERT(false, ETL_ERROR(etl::pool_element_size));
 800e9d4:	4b06      	ldr	r3, [pc, #24]	; (800e9f0 <_ZN3etl5ipool8allocateINS_4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9Data_NodeEEEPT_v+0x2c>)
 800e9d6:	4a07      	ldr	r2, [pc, #28]	; (800e9f4 <_ZN3etl5ipool8allocateINS_4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9Data_NodeEEEPT_v+0x30>)
 800e9d8:	2175      	movs	r1, #117	; 0x75
 800e9da:	4807      	ldr	r0, [pc, #28]	; (800e9f8 <_ZN3etl5ipool8allocateINS_4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9Data_NodeEEEPT_v+0x34>)
 800e9dc:	f009 fb46 	bl	801806c <__assert_func>
      return reinterpret_cast<T*>(allocate_item());
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f7fc fef3 	bl	800b7cc <_ZN3etl5ipool13allocate_itemEv>
 800e9e6:	4603      	mov	r3, r0
    }
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	3708      	adds	r7, #8
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}
 800e9f0:	080197d0 	.word	0x080197d0
 800e9f4:	08019b7c 	.word	0x08019b7c
 800e9f8:	080197fc 	.word	0x080197fc

0800e9fc <_ZNK3etl4lessImEclERKmS3_>:
    ETL_CONSTEXPR bool operator()(const T &lhs, const T &rhs) const
 800e9fc:	b480      	push	{r7}
 800e9fe:	b085      	sub	sp, #20
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	60f8      	str	r0, [r7, #12]
 800ea04:	60b9      	str	r1, [r7, #8]
 800ea06:	607a      	str	r2, [r7, #4]
      return (lhs < rhs);
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	681a      	ldr	r2, [r3, #0]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	bf34      	ite	cc
 800ea14:	2301      	movcc	r3, #1
 800ea16:	2300      	movcs	r3, #0
 800ea18:	b2db      	uxtb	r3, r3
    }
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	3714      	adds	r7, #20
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea24:	4770      	bx	lr

0800ea26 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9data_castERKNS_8map_base4NodeE>:
    static const Data_Node& data_cast(const Node& node)
 800ea26:	b480      	push	{r7}
 800ea28:	b083      	sub	sp, #12
 800ea2a:	af00      	add	r7, sp, #0
 800ea2c:	6078      	str	r0, [r7, #4]
      return static_cast<const Data_Node&>(node);
 800ea2e:	687b      	ldr	r3, [r7, #4]
    }
 800ea30:	4618      	mov	r0, r3
 800ea32:	370c      	adds	r7, #12
 800ea34:	46bd      	mov	sp, r7
 800ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3a:	4770      	bx	lr

0800ea3c <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9next_nodeERPNS_8map_base4NodeE>:
    void next_node(Node*&position)
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b084      	sub	sp, #16
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
 800ea44:	6039      	str	r1, [r7, #0]
      if (position)
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d02c      	beq.n	800eaa8 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9next_nodeERPNS_8map_base4NodeE+0x6c>
        if (position->children[kRight])
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d00b      	beq.n	800ea70 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9next_nodeERPNS_8map_base4NodeE+0x34>
          position = find_limit_node(position->children[kRight], kLeft);
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	685b      	ldr	r3, [r3, #4]
 800ea60:	2200      	movs	r2, #0
 800ea62:	4619      	mov	r1, r3
 800ea64:	f7fd f8db 	bl	800bc1e <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa>
 800ea68:	4602      	mov	r2, r0
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	601a      	str	r2, [r3, #0]
    }
 800ea6e:	e01b      	b.n	800eaa8 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9next_nodeERPNS_8map_base4NodeE+0x6c>
          Node* parent = position;
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	60fb      	str	r3, [r7, #12]
            position = parent;
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	68fa      	ldr	r2, [r7, #12]
 800ea7a:	601a      	str	r2, [r3, #0]
            parent = find_parent_node(root_node, position);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6899      	ldr	r1, [r3, #8]
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	461a      	mov	r2, r3
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f000 f845 	bl	800eb16 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_>
 800ea8c:	60f8      	str	r0, [r7, #12]
          } while (parent && parent->children[kRight] == position);
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d006      	beq.n	800eaa2 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9next_nodeERPNS_8map_base4NodeE+0x66>
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	685a      	ldr	r2, [r3, #4]
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d100      	bne.n	800eaa2 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9next_nodeERPNS_8map_base4NodeE+0x66>
          do {
 800eaa0:	e7e9      	b.n	800ea76 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9next_nodeERPNS_8map_base4NodeE+0x3a>
          position = parent;
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	68fa      	ldr	r2, [r7, #12]
 800eaa6:	601a      	str	r2, [r3, #0]
    }
 800eaa8:	bf00      	nop
 800eaaa:	3710      	adds	r7, #16
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}

0800eab0 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9data_castEPKNS_8map_base4NodeE>:
    static const Data_Node* data_cast(const Node* p_node)
 800eab0:	b480      	push	{r7}
 800eab2:	b083      	sub	sp, #12
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
      return static_cast<const Data_Node*>(p_node);
 800eab8:	687b      	ldr	r3, [r7, #4]
    }
 800eaba:	4618      	mov	r0, r3
 800eabc:	370c      	adds	r7, #12
 800eabe:	46bd      	mov	sp, r7
 800eac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac4:	4770      	bx	lr

0800eac6 <_ZNK3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9node_compERKmRKNS7_9Data_NodeE>:
    bool node_comp(key_parameter_t key, const Data_Node& node) const
 800eac6:	b580      	push	{r7, lr}
 800eac8:	b084      	sub	sp, #16
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	60f8      	str	r0, [r7, #12]
 800eace:	60b9      	str	r1, [r7, #8]
 800ead0:	607a      	str	r2, [r7, #4]
      return kcompare(key, node.value.first);
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	f103 0010 	add.w	r0, r3, #16
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	330c      	adds	r3, #12
 800eadc:	461a      	mov	r2, r3
 800eade:	68b9      	ldr	r1, [r7, #8]
 800eae0:	f7ff ff8c 	bl	800e9fc <_ZNK3etl4lessImEclERKmS3_>
 800eae4:	4603      	mov	r3, r0
    }
 800eae6:	4618      	mov	r0, r3
 800eae8:	3710      	adds	r7, #16
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}

0800eaee <_ZNK3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9node_compERKNS7_9Data_NodeERKm>:
    bool node_comp(const Data_Node& node, key_parameter_t key) const
 800eaee:	b580      	push	{r7, lr}
 800eaf0:	b084      	sub	sp, #16
 800eaf2:	af00      	add	r7, sp, #0
 800eaf4:	60f8      	str	r0, [r7, #12]
 800eaf6:	60b9      	str	r1, [r7, #8]
 800eaf8:	607a      	str	r2, [r7, #4]
      return kcompare(node.value.first, key);
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	f103 0010 	add.w	r0, r3, #16
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	330c      	adds	r3, #12
 800eb04:	687a      	ldr	r2, [r7, #4]
 800eb06:	4619      	mov	r1, r3
 800eb08:	f7ff ff78 	bl	800e9fc <_ZNK3etl4lessImEclERKmS3_>
 800eb0c:	4603      	mov	r3, r0
    }
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3710      	adds	r7, #16
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}

0800eb16 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_>:
    Node* find_parent_node(Node* position, const Node* node)
 800eb16:	b580      	push	{r7, lr}
 800eb18:	b088      	sub	sp, #32
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	60f8      	str	r0, [r7, #12]
 800eb1e:	60b9      	str	r1, [r7, #8]
 800eb20:	607a      	str	r2, [r7, #4]
      Node* found = ETL_NULLPTR;
 800eb22:	2300      	movs	r3, #0
 800eb24:	61fb      	str	r3, [r7, #28]
      if (position && node && position != node)
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d038      	beq.n	800eb9e <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x88>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d035      	beq.n	800eb9e <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x88>
 800eb32:	68ba      	ldr	r2, [r7, #8]
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d031      	beq.n	800eb9e <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x88>
        while (position)
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d02e      	beq.n	800eb9e <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x88>
          if (position->children[kLeft] != node &&
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	687a      	ldr	r2, [r7, #4]
 800eb46:	429a      	cmp	r2, r3
 800eb48:	d024      	beq.n	800eb94 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x7e>
            position->children[kRight] != node)
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	685b      	ldr	r3, [r3, #4]
          if (position->children[kLeft] != node &&
 800eb4e:	687a      	ldr	r2, [r7, #4]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d01f      	beq.n	800eb94 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x7e>
            const Data_Node& node_data_node = imap::data_cast(*node);
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f7ff ff66 	bl	800ea26 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9data_castERKNS_8map_base4NodeE>
 800eb5a:	61b8      	str	r0, [r7, #24]
            Data_Node& position_data_node = imap::data_cast(*position);
 800eb5c:	68b8      	ldr	r0, [r7, #8]
 800eb5e:	f7ff fca9 	bl	800e4b4 <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9data_castERNS_8map_base4NodeE>
 800eb62:	6178      	str	r0, [r7, #20]
            if (node_comp(node_data_node, position_data_node))
 800eb64:	697a      	ldr	r2, [r7, #20]
 800eb66:	69b9      	ldr	r1, [r7, #24]
 800eb68:	68f8      	ldr	r0, [r7, #12]
 800eb6a:	f7ff fcae 	bl	800e4ca <_ZNK3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9node_compERKNS7_9Data_NodeESA_>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d003      	beq.n	800eb7c <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x66>
              position = position->children[kLeft];
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	60bb      	str	r3, [r7, #8]
            }
 800eb7a:	e00e      	b.n	800eb9a <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x84>
            else if (node_comp(position_data_node, node_data_node))
 800eb7c:	69ba      	ldr	r2, [r7, #24]
 800eb7e:	6979      	ldr	r1, [r7, #20]
 800eb80:	68f8      	ldr	r0, [r7, #12]
 800eb82:	f7ff fca2 	bl	800e4ca <_ZNK3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE9node_compERKNS7_9Data_NodeESA_>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d006      	beq.n	800eb9a <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x84>
              position = position->children[kRight];
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	685b      	ldr	r3, [r3, #4]
 800eb90:	60bb      	str	r3, [r7, #8]
            }
 800eb92:	e002      	b.n	800eb9a <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x84>
            found = position;
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	61fb      	str	r3, [r7, #28]
            break;
 800eb98:	e001      	b.n	800eb9e <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x88>
            }
 800eb9a:	bf00      	nop
        while (position)
 800eb9c:	e7cd      	b.n	800eb3a <_ZN3etl4imapImPN11SolarGators11DataModules10DataModuleENS_4lessImEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x24>
      return found;
 800eb9e:	69fb      	ldr	r3, [r7, #28]
    }
 800eba0:	4618      	mov	r0, r3
 800eba2:	3720      	adds	r7, #32
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <_ZN11SolarGators7Drivers7ILI9341C1Ess>:
  ILI9341_SLPOUT  , 0x80,                // Exit Sleep
  ILI9341_DISPON  , 0x80,                // Display on
  0x00                                   // End of list
};

ILI9341::ILI9341(int16_t w, int16_t h):WIDTH(w),HEIGHT(h)
 800eba8:	b480      	push	{r7}
 800ebaa:	b083      	sub	sp, #12
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	807b      	strh	r3, [r7, #2]
 800ebb4:	4613      	mov	r3, r2
 800ebb6:	803b      	strh	r3, [r7, #0]
 800ebb8:	4a3d      	ldr	r2, [pc, #244]	; (800ecb0 <_ZN11SolarGators7Drivers7ILI9341C1Ess+0x108>)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	601a      	str	r2, [r3, #0]
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	887a      	ldrh	r2, [r7, #2]
 800ebc2:	809a      	strh	r2, [r3, #4]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	883a      	ldrh	r2, [r7, #0]
 800ebc8:	80da      	strh	r2, [r3, #6]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	81da      	strh	r2, [r3, #14]
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	821a      	strh	r2, [r3, #16]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	4a36      	ldr	r2, [pc, #216]	; (800ecb4 <_ZN11SolarGators7Drivers7ILI9341C1Ess+0x10c>)
 800ebda:	621a      	str	r2, [r3, #32]
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	4a35      	ldr	r2, [pc, #212]	; (800ecb4 <_ZN11SolarGators7Drivers7ILI9341C1Ess+0x10c>)
 800ebe0:	625a      	str	r2, [r3, #36]	; 0x24
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	4a33      	ldr	r2, [pc, #204]	; (800ecb4 <_ZN11SolarGators7Drivers7ILI9341C1Ess+0x10c>)
 800ebe6:	629a      	str	r2, [r3, #40]	; 0x28
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	4a33      	ldr	r2, [pc, #204]	; (800ecb8 <_ZN11SolarGators7Drivers7ILI9341C1Ess+0x110>)
 800ebec:	62da      	str	r2, [r3, #44]	; 0x2c
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	4a31      	ldr	r2, [pc, #196]	; (800ecb8 <_ZN11SolarGators7Drivers7ILI9341C1Ess+0x110>)
 800ebf2:	631a      	str	r2, [r3, #48]	; 0x30
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	4a2f      	ldr	r2, [pc, #188]	; (800ecb4 <_ZN11SolarGators7Drivers7ILI9341C1Ess+0x10c>)
 800ebf8:	635a      	str	r2, [r3, #52]	; 0x34
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	4a2d      	ldr	r2, [pc, #180]	; (800ecb4 <_ZN11SolarGators7Drivers7ILI9341C1Ess+0x10c>)
 800ebfe:	639a      	str	r2, [r3, #56]	; 0x38
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	4a2c      	ldr	r2, [pc, #176]	; (800ecb4 <_ZN11SolarGators7Drivers7ILI9341C1Ess+0x10c>)
 800ec04:	63da      	str	r2, [r3, #60]	; 0x3c
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2202      	movs	r2, #2
 800ec0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	4a2a      	ldr	r2, [pc, #168]	; (800ecbc <_ZN11SolarGators7Drivers7ILI9341C1Ess+0x114>)
 800ec12:	645a      	str	r2, [r3, #68]	; 0x44
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2204      	movs	r2, #4
 800ec18:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	4a27      	ldr	r2, [pc, #156]	; (800ecbc <_ZN11SolarGators7Drivers7ILI9341C1Ess+0x114>)
 800ec20:	64da      	str	r2, [r3, #76]	; 0x4c
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2208      	movs	r2, #8
 800ec26:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	4a23      	ldr	r2, [pc, #140]	; (800ecbc <_ZN11SolarGators7Drivers7ILI9341C1Ess+0x114>)
 800ec2e:	655a      	str	r2, [r3, #84]	; 0x54
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2210      	movs	r2, #16
 800ec34:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	4a1e      	ldr	r2, [pc, #120]	; (800ecb4 <_ZN11SolarGators7Drivers7ILI9341C1Ess+0x10c>)
 800ec3c:	65da      	str	r2, [r3, #92]	; 0x5c
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2201      	movs	r2, #1
 800ec42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	4a1c      	ldr	r2, [pc, #112]	; (800ecbc <_ZN11SolarGators7Drivers7ILI9341C1Ess+0x114>)
 800ec4a:	665a      	str	r2, [r3, #100]	; 0x64
{
  text_size_ = 1;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2201      	movs	r2, #1
 800ec50:	819a      	strh	r2, [r3, #12]
  width_ = WIDTH;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	811a      	strh	r2, [r3, #8]
  height_ = HEIGHT;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	815a      	strh	r2, [r3, #10]
  rotation = 0;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	771a      	strb	r2, [r3, #28]
  cursor_y = cursor_x = 0;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2200      	movs	r2, #0
 800ec70:	825a      	strh	r2, [r3, #18]
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	829a      	strh	r2, [r3, #20]
  textsize_x = textsize_y = 1;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2201      	movs	r2, #1
 800ec80:	76da      	strb	r2, [r3, #27]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	7eda      	ldrb	r2, [r3, #27]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	769a      	strb	r2, [r3, #26]
  textcolor = textbgcolor = 0xFFFF;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec90:	831a      	strh	r2, [r3, #24]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	8b1a      	ldrh	r2, [r3, #24]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	82da      	strh	r2, [r3, #22]
  wrap = true;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2201      	movs	r2, #1
 800ec9e:	775a      	strb	r2, [r3, #29]
}
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	4618      	mov	r0, r3
 800eca4:	370c      	adds	r7, #12
 800eca6:	46bd      	mov	sp, r7
 800eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecac:	4770      	bx	lr
 800ecae:	bf00      	nop
 800ecb0:	0801a934 	.word	0x0801a934
 800ecb4:	40020800 	.word	0x40020800
 800ecb8:	40021c00 	.word	0x40021c00
 800ecbc:	40020000 	.word	0x40020000

0800ecc0 <_ZN11SolarGators7Drivers7ILI9341D1Ev>:

ILI9341::~ILI9341()
 800ecc0:	b480      	push	{r7}
 800ecc2:	b083      	sub	sp, #12
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
 800ecc8:	4a04      	ldr	r2, [pc, #16]	; (800ecdc <_ZN11SolarGators7Drivers7ILI9341D1Ev+0x1c>)
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	601a      	str	r2, [r3, #0]
{
  // TODO Auto-generated destructor stub
}
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	370c      	adds	r7, #12
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr
 800ecdc:	0801a934 	.word	0x0801a934

0800ece0 <_ZN11SolarGators7Drivers7ILI9341D0Ev>:
ILI9341::~ILI9341()
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b082      	sub	sp, #8
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
}
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f7ff ffe9 	bl	800ecc0 <_ZN11SolarGators7Drivers7ILI9341D1Ev>
 800ecee:	2168      	movs	r1, #104	; 0x68
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	f009 f933 	bl	8017f5c <_ZdlPvj>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3708      	adds	r7, #8
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <_ZN11SolarGators7Drivers7ILI93415ResetEv>:

void ILI9341::Reset() {
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b082      	sub	sp, #8
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_RESET);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ed12:	2200      	movs	r2, #0
 800ed14:	4619      	mov	r1, r3
 800ed16:	f7f8 fddb 	bl	80078d0 <HAL_GPIO_WritePin>
}
 800ed1a:	bf00      	nop
 800ed1c:	3708      	adds	r7, #8
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}

0800ed22 <_ZN11SolarGators7Drivers7ILI93416ResumeEv>:

void ILI9341::Resume() {
 800ed22:	b580      	push	{r7, lr}
 800ed24:	b082      	sub	sp, #8
 800ed26:	af00      	add	r7, sp, #0
 800ed28:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ed34:	2201      	movs	r2, #1
 800ed36:	4619      	mov	r1, r3
 800ed38:	f7f8 fdca 	bl	80078d0 <HAL_GPIO_WritePin>
}
 800ed3c:	bf00      	nop
 800ed3e:	3708      	adds	r7, #8
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}

0800ed44 <_ZN11SolarGators7Drivers7ILI93414InitEv>:

void ILI9341::Init()
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b088      	sub	sp, #32
 800ed48:	af02      	add	r7, sp, #8
 800ed4a:	6078      	str	r0, [r7, #4]
  // Write all control signals high
  HAL_GPIO_WritePin(Backlight_PWM_GPIO_Port, Backlight_PWM_Pin, GPIO_PIN_SET);
 800ed4c:	2201      	movs	r2, #1
 800ed4e:	2108      	movs	r1, #8
 800ed50:	4853      	ldr	r0, [pc, #332]	; (800eea0 <_ZN11SolarGators7Drivers7ILI93414InitEv+0x15c>)
 800ed52:	f7f8 fdbd 	bl	80078d0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ed60:	2201      	movs	r2, #1
 800ed62:	4619      	mov	r1, r3
 800ed64:	f7f8 fdb4 	bl	80078d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ed72:	2201      	movs	r2, #1
 800ed74:	4619      	mov	r1, r3
 800ed76:	f7f8 fdab 	bl	80078d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ed84:	2201      	movs	r2, #1
 800ed86:	4619      	mov	r1, r3
 800ed88:	f7f8 fda2 	bl	80078d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_READ_GPIO_Port_, LCD_READ_Pin_, GPIO_PIN_SET);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ed96:	2201      	movs	r2, #1
 800ed98:	4619      	mov	r1, r3
 800ed9a:	f7f8 fd99 	bl	80078d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_SET);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eda8:	2201      	movs	r2, #1
 800edaa:	4619      	mov	r1, r3
 800edac:	f7f8 fd90 	bl	80078d0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_RESET);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800edba:	2200      	movs	r2, #0
 800edbc:	4619      	mov	r1, r3
 800edbe:	f7f8 fd87 	bl	80078d0 <HAL_GPIO_WritePin>
  osDelay(10);
 800edc2:	200a      	movs	r0, #10
 800edc4:	f004 fe03 	bl	80139ce <osDelay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_SET);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800edd2:	2201      	movs	r2, #1
 800edd4:	4619      	mov	r1, r3
 800edd6:	f7f8 fd7b 	bl	80078d0 <HAL_GPIO_WritePin>

  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ede4:	2200      	movs	r2, #0
 800ede6:	4619      	mov	r1, r3
 800ede8:	f7f8 fd72 	bl	80078d0 <HAL_GPIO_WritePin>

  TransmitCmd(ILI9341_SWRESET);
 800edec:	2101      	movs	r1, #1
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	f000 f8c9 	bl	800ef86 <_ZN11SolarGators7Drivers7ILI934111TransmitCmdEh>
  Transmit8bitData(0x00);
 800edf4:	2100      	movs	r1, #0
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f000 f8e6 	bl	800efc8 <_ZN11SolarGators7Drivers7ILI934116Transmit8bitDataEh>
  osDelay(50);
 800edfc:	2032      	movs	r0, #50	; 0x32
 800edfe:	f004 fde6 	bl	80139ce <osDelay>


  uint8_t cmd, x, numArgs;
  const uint8_t *addr = initcmd;
 800ee02:	4b28      	ldr	r3, [pc, #160]	; (800eea4 <_ZN11SolarGators7Drivers7ILI93414InitEv+0x160>)
 800ee04:	613b      	str	r3, [r7, #16]
  while((cmd = *(addr++)) > 0)
 800ee06:	693b      	ldr	r3, [r7, #16]
 800ee08:	1c5a      	adds	r2, r3, #1
 800ee0a:	613a      	str	r2, [r7, #16]
 800ee0c:	781b      	ldrb	r3, [r3, #0]
 800ee0e:	73fb      	strb	r3, [r7, #15]
 800ee10:	7bfb      	ldrb	r3, [r7, #15]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	bf14      	ite	ne
 800ee16:	2301      	movne	r3, #1
 800ee18:	2300      	moveq	r3, #0
 800ee1a:	b2db      	uxtb	r3, r3
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d028      	beq.n	800ee72 <_ZN11SolarGators7Drivers7ILI93414InitEv+0x12e>
  {
    x = *(addr++);
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	1c5a      	adds	r2, r3, #1
 800ee24:	613a      	str	r2, [r7, #16]
 800ee26:	781b      	ldrb	r3, [r3, #0]
 800ee28:	73bb      	strb	r3, [r7, #14]
    numArgs = x & 0x7F;
 800ee2a:	7bbb      	ldrb	r3, [r7, #14]
 800ee2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee30:	75fb      	strb	r3, [r7, #23]
    TransmitCmd(cmd);
 800ee32:	7bfb      	ldrb	r3, [r7, #15]
 800ee34:	4619      	mov	r1, r3
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f000 f8a5 	bl	800ef86 <_ZN11SolarGators7Drivers7ILI934111TransmitCmdEh>
    while(numArgs--)
 800ee3c:	7dfb      	ldrb	r3, [r7, #23]
 800ee3e:	1e5a      	subs	r2, r3, #1
 800ee40:	75fa      	strb	r2, [r7, #23]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	bf14      	ite	ne
 800ee46:	2301      	movne	r3, #1
 800ee48:	2300      	moveq	r3, #0
 800ee4a:	b2db      	uxtb	r3, r3
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d008      	beq.n	800ee62 <_ZN11SolarGators7Drivers7ILI93414InitEv+0x11e>
    {
      Transmit8bitData(*(addr++));
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	1c5a      	adds	r2, r3, #1
 800ee54:	613a      	str	r2, [r7, #16]
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	4619      	mov	r1, r3
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f000 f8b4 	bl	800efc8 <_ZN11SolarGators7Drivers7ILI934116Transmit8bitDataEh>
    while(numArgs--)
 800ee60:	e7ec      	b.n	800ee3c <_ZN11SolarGators7Drivers7ILI93414InitEv+0xf8>
    }
    if(x & 0x80)
 800ee62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	dacd      	bge.n	800ee06 <_ZN11SolarGators7Drivers7ILI93414InitEv+0xc2>
    {
      osDelay(150);
 800ee6a:	2096      	movs	r0, #150	; 0x96
 800ee6c:	f004 fdaf 	bl	80139ce <osDelay>
  while((cmd = *(addr++)) > 0)
 800ee70:	e7c9      	b.n	800ee06 <_ZN11SolarGators7Drivers7ILI93414InitEv+0xc2>
    }
  }

  SetWindow(0, 0, width_-1, height_-1);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ee78:	b29b      	uxth	r3, r3
 800ee7a:	3b01      	subs	r3, #1
 800ee7c:	b29a      	uxth	r2, r3
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	3b01      	subs	r3, #1
 800ee88:	b29b      	uxth	r3, r3
 800ee8a:	9300      	str	r3, [sp, #0]
 800ee8c:	4613      	mov	r3, r2
 800ee8e:	2200      	movs	r2, #0
 800ee90:	2100      	movs	r1, #0
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f000 f8fe 	bl	800f094 <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt>
}
 800ee98:	bf00      	nop
 800ee9a:	3718      	adds	r7, #24
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}
 800eea0:	40020800 	.word	0x40020800
 800eea4:	0801a908 	.word	0x0801a908

0800eea8 <_ZN11SolarGators7Drivers7ILI93415WriteEh>:

inline void ILI9341::Write(uint8_t data)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	460b      	mov	r3, r1
 800eeb2:	70fb      	strb	r3, [r7, #3]
  // Put data on Bus
#if UI_USE_HAL
  HAL_GPIO_WritePin(LCD_DATA0_GPIO_Port_, LCD_DATA0_Pin_, static_cast<GPIO_PinState>(data & 0x01U) );
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800eeb8:	78fb      	ldrb	r3, [r7, #3]
 800eeba:	f003 0301 	and.w	r3, r3, #1
 800eebe:	b2db      	uxtb	r3, r3
 800eec0:	461a      	mov	r2, r3
 800eec2:	2104      	movs	r1, #4
 800eec4:	f7f8 fd04 	bl	80078d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA1_GPIO_Port_, LCD_DATA1_Pin_, static_cast<GPIO_PinState>(data & 0x02U) );
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800eecc:	78fb      	ldrb	r3, [r7, #3]
 800eece:	f003 0302 	and.w	r3, r3, #2
 800eed2:	b2db      	uxtb	r3, r3
 800eed4:	461a      	mov	r2, r3
 800eed6:	2102      	movs	r1, #2
 800eed8:	f7f8 fcfa 	bl	80078d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA2_GPIO_Port_, LCD_DATA2_Pin_, static_cast<GPIO_PinState>(data & 0x04U) );
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800eee0:	78fb      	ldrb	r3, [r7, #3]
 800eee2:	f003 0304 	and.w	r3, r3, #4
 800eee6:	b2db      	uxtb	r3, r3
 800eee8:	461a      	mov	r2, r3
 800eeea:	2101      	movs	r1, #1
 800eeec:	f7f8 fcf0 	bl	80078d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA3_GPIO_Port_, LCD_DATA3_Pin_, static_cast<GPIO_PinState>(data & 0x08U) );
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800eef4:	78fb      	ldrb	r3, [r7, #3]
 800eef6:	f003 0308 	and.w	r3, r3, #8
 800eefa:	b2db      	uxtb	r3, r3
 800eefc:	461a      	mov	r2, r3
 800eefe:	2102      	movs	r1, #2
 800ef00:	f7f8 fce6 	bl	80078d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA4_GPIO_Port_, LCD_DATA4_Pin_, static_cast<GPIO_PinState>(data & 0x10U) );
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ef08:	78fb      	ldrb	r3, [r7, #3]
 800ef0a:	f003 0310 	and.w	r3, r3, #16
 800ef0e:	b2db      	uxtb	r3, r3
 800ef10:	461a      	mov	r2, r3
 800ef12:	2101      	movs	r1, #1
 800ef14:	f7f8 fcdc 	bl	80078d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA5_GPIO_Port_, LCD_DATA5_Pin_, static_cast<GPIO_PinState>(data & 0x20U) );
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800ef1c:	78fb      	ldrb	r3, [r7, #3]
 800ef1e:	f003 0320 	and.w	r3, r3, #32
 800ef22:	b2db      	uxtb	r3, r3
 800ef24:	461a      	mov	r2, r3
 800ef26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ef2a:	f7f8 fcd1 	bl	80078d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA6_GPIO_Port_, LCD_DATA6_Pin_, static_cast<GPIO_PinState>(data & 0x40U) );
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ef32:	78fb      	ldrb	r3, [r7, #3]
 800ef34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef38:	b2db      	uxtb	r3, r3
 800ef3a:	461a      	mov	r2, r3
 800ef3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ef40:	f7f8 fcc6 	bl	80078d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA7_GPIO_Port_, LCD_DATA7_Pin_, static_cast<GPIO_PinState>(data & 0x80U) );
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	6a18      	ldr	r0, [r3, #32]
 800ef48:	78fb      	ldrb	r3, [r7, #3]
 800ef4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ef4e:	b2db      	uxtb	r3, r3
 800ef50:	461a      	mov	r2, r3
 800ef52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ef56:	f7f8 fcbb 	bl	80078d0 <HAL_GPIO_WritePin>
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ef64:	2200      	movs	r2, #0
 800ef66:	4619      	mov	r1, r3
 800ef68:	f7f8 fcb2 	bl	80078d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ef76:	2201      	movs	r2, #1
 800ef78:	4619      	mov	r1, r3
 800ef7a:	f7f8 fca9 	bl	80078d0 <HAL_GPIO_WritePin>
  // Pulse Write
  LCD_WRITE_GPIO_Port_->BSRR = LCD_WRITE_Pin_; // changed from brr to bsrr... ok?
  LCD_WRITE_GPIO_Port_->BSRR = (uint32_t)LCD_WRITE_Pin_ << 16U;
#endif

}
 800ef7e:	bf00      	nop
 800ef80:	3708      	adds	r7, #8
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}

0800ef86 <_ZN11SolarGators7Drivers7ILI934111TransmitCmdEh>:

void ILI9341::TransmitCmd(uint8_t cmd)
{
 800ef86:	b580      	push	{r7, lr}
 800ef88:	b082      	sub	sp, #8
 800ef8a:	af00      	add	r7, sp, #0
 800ef8c:	6078      	str	r0, [r7, #4]
 800ef8e:	460b      	mov	r3, r1
 800ef90:	70fb      	strb	r3, [r7, #3]
  // D/C -> LOW
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_RESET);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	4619      	mov	r1, r3
 800efa0:	f7f8 fc96 	bl	80078d0 <HAL_GPIO_WritePin>

  Write(cmd);
 800efa4:	78fb      	ldrb	r3, [r7, #3]
 800efa6:	4619      	mov	r1, r3
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	f7ff ff7d 	bl	800eea8 <_ZN11SolarGators7Drivers7ILI93415WriteEh>

  // D/C -> HIGH
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800efb8:	2201      	movs	r2, #1
 800efba:	4619      	mov	r1, r3
 800efbc:	f7f8 fc88 	bl	80078d0 <HAL_GPIO_WritePin>
}
 800efc0:	bf00      	nop
 800efc2:	3708      	adds	r7, #8
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}

0800efc8 <_ZN11SolarGators7Drivers7ILI934116Transmit8bitDataEh>:

void ILI9341::Transmit8bitData(uint8_t data)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	460b      	mov	r3, r1
 800efd2:	70fb      	strb	r3, [r7, #3]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800efde:	2201      	movs	r2, #1
 800efe0:	4619      	mov	r1, r3
 800efe2:	f7f8 fc75 	bl	80078d0 <HAL_GPIO_WritePin>

  Write(data);
 800efe6:	78fb      	ldrb	r3, [r7, #3]
 800efe8:	4619      	mov	r1, r3
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f7ff ff5c 	bl	800eea8 <_ZN11SolarGators7Drivers7ILI93415WriteEh>
}
 800eff0:	bf00      	nop
 800eff2:	3708      	adds	r7, #8
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}

0800eff8 <_ZN11SolarGators7Drivers7ILI934117Transmit16bitDataEt>:

void ILI9341::Transmit16bitData(uint16_t data)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	460b      	mov	r3, r1
 800f002:	807b      	strh	r3, [r7, #2]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f00e:	2201      	movs	r2, #1
 800f010:	4619      	mov	r1, r3
 800f012:	f7f8 fc5d 	bl	80078d0 <HAL_GPIO_WritePin>

  Write(static_cast<uint8_t>(data >> 8));
 800f016:	887b      	ldrh	r3, [r7, #2]
 800f018:	0a1b      	lsrs	r3, r3, #8
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	b2db      	uxtb	r3, r3
 800f01e:	4619      	mov	r1, r3
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	f7ff ff41 	bl	800eea8 <_ZN11SolarGators7Drivers7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 0));
 800f026:	887b      	ldrh	r3, [r7, #2]
 800f028:	b2db      	uxtb	r3, r3
 800f02a:	4619      	mov	r1, r3
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f7ff ff3b 	bl	800eea8 <_ZN11SolarGators7Drivers7ILI93415WriteEh>

}
 800f032:	bf00      	nop
 800f034:	3708      	adds	r7, #8
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}

0800f03a <_ZN11SolarGators7Drivers7ILI934117Transmit32bitDataEm>:

void ILI9341::Transmit32bitData(uint32_t data)
{
 800f03a:	b580      	push	{r7, lr}
 800f03c:	b082      	sub	sp, #8
 800f03e:	af00      	add	r7, sp, #0
 800f040:	6078      	str	r0, [r7, #4]
 800f042:	6039      	str	r1, [r7, #0]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f04e:	2201      	movs	r2, #1
 800f050:	4619      	mov	r1, r3
 800f052:	f7f8 fc3d 	bl	80078d0 <HAL_GPIO_WritePin>

  Write(static_cast<uint8_t>(data >> 24));
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	0e1b      	lsrs	r3, r3, #24
 800f05a:	b2db      	uxtb	r3, r3
 800f05c:	4619      	mov	r1, r3
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f7ff ff22 	bl	800eea8 <_ZN11SolarGators7Drivers7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 16));
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	0c1b      	lsrs	r3, r3, #16
 800f068:	b2db      	uxtb	r3, r3
 800f06a:	4619      	mov	r1, r3
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f7ff ff1b 	bl	800eea8 <_ZN11SolarGators7Drivers7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 8 ));
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	0a1b      	lsrs	r3, r3, #8
 800f076:	b2db      	uxtb	r3, r3
 800f078:	4619      	mov	r1, r3
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f7ff ff14 	bl	800eea8 <_ZN11SolarGators7Drivers7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 0 ));
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	b2db      	uxtb	r3, r3
 800f084:	4619      	mov	r1, r3
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f7ff ff0e 	bl	800eea8 <_ZN11SolarGators7Drivers7ILI93415WriteEh>

}
 800f08c:	bf00      	nop
 800f08e:	3708      	adds	r7, #8
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}

0800f094 <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt>:

char ILI9341::SetWindow (uint16_t xs, uint16_t ys, uint16_t xe, uint16_t ye)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	60f8      	str	r0, [r7, #12]
 800f09c:	4608      	mov	r0, r1
 800f09e:	4611      	mov	r1, r2
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	817b      	strh	r3, [r7, #10]
 800f0a6:	460b      	mov	r3, r1
 800f0a8:	813b      	strh	r3, [r7, #8]
 800f0aa:	4613      	mov	r3, r2
 800f0ac:	80fb      	strh	r3, [r7, #6]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	f7f8 fc08 	bl	80078d0 <HAL_GPIO_WritePin>

  // check if coordinates is out of range
  if ((xs > xe) || (xe > width_) ||
 800f0c0:	897a      	ldrh	r2, [r7, #10]
 800f0c2:	88fb      	ldrh	r3, [r7, #6]
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d80f      	bhi.n	800f0e8 <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt+0x54>
 800f0c8:	88fb      	ldrh	r3, [r7, #6]
 800f0ca:	68fa      	ldr	r2, [r7, #12]
 800f0cc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800f0d0:	4293      	cmp	r3, r2
 800f0d2:	dc09      	bgt.n	800f0e8 <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt+0x54>
 800f0d4:	893a      	ldrh	r2, [r7, #8]
 800f0d6:	8b3b      	ldrh	r3, [r7, #24]
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d805      	bhi.n	800f0e8 <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt+0x54>
      (ys > ye) || (ye > height_))
 800f0dc:	8b3b      	ldrh	r3, [r7, #24]
 800f0de:	68fa      	ldr	r2, [r7, #12]
 800f0e0:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	dd01      	ble.n	800f0ec <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt+0x58>
  {
    // out of range
    return ILI9341_ERROR;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	e021      	b.n	800f130 <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt+0x9c>
  }

  // set column
  TransmitCmd(ILI9341_CASET);
 800f0ec:	212a      	movs	r1, #42	; 0x2a
 800f0ee:	68f8      	ldr	r0, [r7, #12]
 800f0f0:	f7ff ff49 	bl	800ef86 <_ZN11SolarGators7Drivers7ILI934111TransmitCmdEh>
  // set column -> set column
  Transmit32bitData(((uint32_t) xs << 16) | xe);
 800f0f4:	897b      	ldrh	r3, [r7, #10]
 800f0f6:	041a      	lsls	r2, r3, #16
 800f0f8:	88fb      	ldrh	r3, [r7, #6]
 800f0fa:	4313      	orrs	r3, r2
 800f0fc:	4619      	mov	r1, r3
 800f0fe:	68f8      	ldr	r0, [r7, #12]
 800f100:	f7ff ff9b 	bl	800f03a <_ZN11SolarGators7Drivers7ILI934117Transmit32bitDataEm>
  // set page
  TransmitCmd(ILI9341_PASET);
 800f104:	212b      	movs	r1, #43	; 0x2b
 800f106:	68f8      	ldr	r0, [r7, #12]
 800f108:	f7ff ff3d 	bl	800ef86 <_ZN11SolarGators7Drivers7ILI934111TransmitCmdEh>
  // set page -> high byte first
  Transmit32bitData(((uint32_t) ys << 16) | ye);
 800f10c:	893b      	ldrh	r3, [r7, #8]
 800f10e:	041a      	lsls	r2, r3, #16
 800f110:	8b3b      	ldrh	r3, [r7, #24]
 800f112:	4313      	orrs	r3, r2
 800f114:	4619      	mov	r1, r3
 800f116:	68f8      	ldr	r0, [r7, #12]
 800f118:	f7ff ff8f 	bl	800f03a <_ZN11SolarGators7Drivers7ILI934117Transmit32bitDataEm>

  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f126:	2201      	movs	r2, #1
 800f128:	4619      	mov	r1, r3
 800f12a:	f7f8 fbd1 	bl	80078d0 <HAL_GPIO_WritePin>
  // success
  return ILI9341_SUCCESS;
 800f12e:	2301      	movs	r3, #1
}
 800f130:	4618      	mov	r0, r3
 800f132:	3710      	adds	r7, #16
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}

0800f138 <_ZN11SolarGators7Drivers7ILI93419DrawPixelEttt>:

char ILI9341::DrawPixel (uint16_t x, uint16_t y, uint16_t color)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b086      	sub	sp, #24
 800f13c:	af02      	add	r7, sp, #8
 800f13e:	60f8      	str	r0, [r7, #12]
 800f140:	4608      	mov	r0, r1
 800f142:	4611      	mov	r1, r2
 800f144:	461a      	mov	r2, r3
 800f146:	4603      	mov	r3, r0
 800f148:	817b      	strh	r3, [r7, #10]
 800f14a:	460b      	mov	r3, r1
 800f14c:	813b      	strh	r3, [r7, #8]
 800f14e:	4613      	mov	r3, r2
 800f150:	80fb      	strh	r3, [r7, #6]
  // check dimension
  if ((x > width_) || (y > height_)) {
 800f152:	897b      	ldrh	r3, [r7, #10]
 800f154:	68fa      	ldr	r2, [r7, #12]
 800f156:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800f15a:	4293      	cmp	r3, r2
 800f15c:	dc05      	bgt.n	800f16a <_ZN11SolarGators7Drivers7ILI93419DrawPixelEttt+0x32>
 800f15e:	893b      	ldrh	r3, [r7, #8]
 800f160:	68fa      	ldr	r2, [r7, #12]
 800f162:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800f166:	4293      	cmp	r3, r2
 800f168:	dd01      	ble.n	800f16e <_ZN11SolarGators7Drivers7ILI93419DrawPixelEttt+0x36>
    // error
    return ILI9341_ERROR;
 800f16a:	2300      	movs	r3, #0
 800f16c:	e00f      	b.n	800f18e <_ZN11SolarGators7Drivers7ILI93419DrawPixelEttt+0x56>
  }
  // set window
  SetWindow(x, y, x, y);
 800f16e:	8978      	ldrh	r0, [r7, #10]
 800f170:	893a      	ldrh	r2, [r7, #8]
 800f172:	8979      	ldrh	r1, [r7, #10]
 800f174:	893b      	ldrh	r3, [r7, #8]
 800f176:	9300      	str	r3, [sp, #0]
 800f178:	4603      	mov	r3, r0
 800f17a:	68f8      	ldr	r0, [r7, #12]
 800f17c:	f7ff ff8a 	bl	800f094 <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt>
  // draw pixel by 565 mode
  SendColor565(color, 1);
 800f180:	88fb      	ldrh	r3, [r7, #6]
 800f182:	2201      	movs	r2, #1
 800f184:	4619      	mov	r1, r3
 800f186:	68f8      	ldr	r0, [r7, #12]
 800f188:	f000 f805 	bl	800f196 <_ZN11SolarGators7Drivers7ILI934112SendColor565Etm>
  // success
  return ILI9341_SUCCESS;
 800f18c:	2301      	movs	r3, #1
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3710      	adds	r7, #16
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}

0800f196 <_ZN11SolarGators7Drivers7ILI934112SendColor565Etm>:

void ILI9341::SendColor565(uint16_t color, uint32_t count)
{
 800f196:	b580      	push	{r7, lr}
 800f198:	b084      	sub	sp, #16
 800f19a:	af00      	add	r7, sp, #0
 800f19c:	60f8      	str	r0, [r7, #12]
 800f19e:	460b      	mov	r3, r1
 800f1a0:	607a      	str	r2, [r7, #4]
 800f1a2:	817b      	strh	r3, [r7, #10]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	f7f8 fb8d 	bl	80078d0 <HAL_GPIO_WritePin>
  // access to RAM
  TransmitCmd(ILI9341_RAMWR);
 800f1b6:	212c      	movs	r1, #44	; 0x2c
 800f1b8:	68f8      	ldr	r0, [r7, #12]
 800f1ba:	f7ff fee4 	bl	800ef86 <_ZN11SolarGators7Drivers7ILI934111TransmitCmdEh>
  // counter
  while (count--) {
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	1e5a      	subs	r2, r3, #1
 800f1c2:	607a      	str	r2, [r7, #4]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	bf14      	ite	ne
 800f1c8:	2301      	movne	r3, #1
 800f1ca:	2300      	moveq	r3, #0
 800f1cc:	b2db      	uxtb	r3, r3
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d005      	beq.n	800f1de <_ZN11SolarGators7Drivers7ILI934112SendColor565Etm+0x48>
    // write color - first colors byte
    Transmit16bitData(color);
 800f1d2:	897b      	ldrh	r3, [r7, #10]
 800f1d4:	4619      	mov	r1, r3
 800f1d6:	68f8      	ldr	r0, [r7, #12]
 800f1d8:	f7ff ff0e 	bl	800eff8 <_ZN11SolarGators7Drivers7ILI934117Transmit16bitDataEt>
  while (count--) {
 800f1dc:	e7ef      	b.n	800f1be <_ZN11SolarGators7Drivers7ILI934112SendColor565Etm+0x28>
  }
  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f1e8:	2201      	movs	r2, #1
 800f1ea:	4619      	mov	r1, r3
 800f1ec:	f7f8 fb70 	bl	80078d0 <HAL_GPIO_WritePin>
}
 800f1f0:	bf00      	nop
 800f1f2:	3710      	adds	r7, #16
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <_ZN11SolarGators7Drivers7ILI93415FloodEtm>:

void ILI9341::Flood(uint16_t color, uint32_t count)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b084      	sub	sp, #16
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	60f8      	str	r0, [r7, #12]
 800f200:	460b      	mov	r3, r1
 800f202:	607a      	str	r2, [r7, #4]
 800f204:	817b      	strh	r3, [r7, #10]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f210:	2200      	movs	r2, #0
 800f212:	4619      	mov	r1, r3
 800f214:	f7f8 fb5c 	bl	80078d0 <HAL_GPIO_WritePin>
  // access to RAM
  TransmitCmd(ILI9341_RAMWR);
 800f218:	212c      	movs	r1, #44	; 0x2c
 800f21a:	68f8      	ldr	r0, [r7, #12]
 800f21c:	f7ff feb3 	bl	800ef86 <_ZN11SolarGators7Drivers7ILI934111TransmitCmdEh>
  // counter
  // Upper and lower are the same
  if( (color & 0xFF) == (color >> 8))
 800f220:	897b      	ldrh	r3, [r7, #10]
 800f222:	b2db      	uxtb	r3, r3
 800f224:	897a      	ldrh	r2, [r7, #10]
 800f226:	0a12      	lsrs	r2, r2, #8
 800f228:	b292      	uxth	r2, r2
 800f22a:	4293      	cmp	r3, r2
 800f22c:	d136      	bne.n	800f29c <_ZN11SolarGators7Drivers7ILI93415FloodEtm+0xa4>
  {
    count--;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	3b01      	subs	r3, #1
 800f232:	607b      	str	r3, [r7, #4]
    Transmit16bitData(color);
 800f234:	897b      	ldrh	r3, [r7, #10]
 800f236:	4619      	mov	r1, r3
 800f238:	68f8      	ldr	r0, [r7, #12]
 800f23a:	f7ff fedd 	bl	800eff8 <_ZN11SolarGators7Drivers7ILI934117Transmit16bitDataEt>
    while(count--)
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	1e5a      	subs	r2, r3, #1
 800f242:	607a      	str	r2, [r7, #4]
 800f244:	2b00      	cmp	r3, #0
 800f246:	bf14      	ite	ne
 800f248:	2301      	movne	r3, #1
 800f24a:	2300      	moveq	r3, #0
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d034      	beq.n	800f2bc <_ZN11SolarGators7Drivers7ILI93415FloodEtm+0xc4>
    {
#if UI_USE_HAL
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f25c:	2200      	movs	r2, #0
 800f25e:	4619      	mov	r1, r3
 800f260:	f7f8 fb36 	bl	80078d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f26e:	2201      	movs	r2, #1
 800f270:	4619      	mov	r1, r3
 800f272:	f7f8 fb2d 	bl	80078d0 <HAL_GPIO_WritePin>
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f280:	2200      	movs	r2, #0
 800f282:	4619      	mov	r1, r3
 800f284:	f7f8 fb24 	bl	80078d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f292:	2201      	movs	r2, #1
 800f294:	4619      	mov	r1, r3
 800f296:	f7f8 fb1b 	bl	80078d0 <HAL_GPIO_WritePin>
    while(count--)
 800f29a:	e7d0      	b.n	800f23e <_ZN11SolarGators7Drivers7ILI93415FloodEtm+0x46>
#endif
    }
  }
  else
  {
    while (count--)
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	1e5a      	subs	r2, r3, #1
 800f2a0:	607a      	str	r2, [r7, #4]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	bf14      	ite	ne
 800f2a6:	2301      	movne	r3, #1
 800f2a8:	2300      	moveq	r3, #0
 800f2aa:	b2db      	uxtb	r3, r3
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d005      	beq.n	800f2bc <_ZN11SolarGators7Drivers7ILI93415FloodEtm+0xc4>
    {
      Transmit16bitData(color);
 800f2b0:	897b      	ldrh	r3, [r7, #10]
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	68f8      	ldr	r0, [r7, #12]
 800f2b6:	f7ff fe9f 	bl	800eff8 <_ZN11SolarGators7Drivers7ILI934117Transmit16bitDataEt>
    while (count--)
 800f2ba:	e7ef      	b.n	800f29c <_ZN11SolarGators7Drivers7ILI93415FloodEtm+0xa4>
    }
  }
  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f2c6:	2201      	movs	r2, #1
 800f2c8:	4619      	mov	r1, r3
 800f2ca:	f7f8 fb01 	bl	80078d0 <HAL_GPIO_WritePin>
}
 800f2ce:	bf00      	nop
 800f2d0:	3710      	adds	r7, #16
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}

0800f2d6 <_ZN11SolarGators7Drivers7ILI934111ClearScreenEt>:

void ILI9341::ClearScreen(uint16_t color)
{
 800f2d6:	b580      	push	{r7, lr}
 800f2d8:	b084      	sub	sp, #16
 800f2da:	af02      	add	r7, sp, #8
 800f2dc:	6078      	str	r0, [r7, #4]
 800f2de:	460b      	mov	r3, r1
 800f2e0:	807b      	strh	r3, [r7, #2]
  // set whole window
  SetWindow(0, 0, width_, height_);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f2e8:	b29a      	uxth	r2, r3
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f2f0:	b29b      	uxth	r3, r3
 800f2f2:	9300      	str	r3, [sp, #0]
 800f2f4:	4613      	mov	r3, r2
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	2100      	movs	r1, #0
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f7ff feca 	bl	800f094 <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt>
  // draw individual pixels
  Flood(color, ILI9341_CACHE_MEM);
 800f300:	887b      	ldrh	r3, [r7, #2]
 800f302:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 800f306:	4619      	mov	r1, r3
 800f308:	6878      	ldr	r0, [r7, #4]
 800f30a:	f7ff ff75 	bl	800f1f8 <_ZN11SolarGators7Drivers7ILI93415FloodEtm>
  // Update background color
  textbgcolor = color;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	887a      	ldrh	r2, [r7, #2]
 800f312:	831a      	strh	r2, [r3, #24]
}
 800f314:	bf00      	nop
 800f316:	3708      	adds	r7, #8
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <_ZN11SolarGators7Drivers7ILI934113DrawFastHLineEtttt>:

void ILI9341::DrawFastHLine(uint16_t x, uint16_t y, uint16_t length,
                                    uint16_t color) {
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b088      	sub	sp, #32
 800f320:	af02      	add	r7, sp, #8
 800f322:	60f8      	str	r0, [r7, #12]
 800f324:	4608      	mov	r0, r1
 800f326:	4611      	mov	r1, r2
 800f328:	461a      	mov	r2, r3
 800f32a:	4603      	mov	r3, r0
 800f32c:	817b      	strh	r3, [r7, #10]
 800f32e:	460b      	mov	r3, r1
 800f330:	813b      	strh	r3, [r7, #8]
 800f332:	4613      	mov	r3, r2
 800f334:	80fb      	strh	r3, [r7, #6]
  int16_t x2;

  // Initial off-screen clipping
  if ((length <= 0) || (y < 0) || (y >= height_) || (x >= width_) ||
 800f336:	88fb      	ldrh	r3, [r7, #6]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d016      	beq.n	800f36a <_ZN11SolarGators7Drivers7ILI934113DrawFastHLineEtttt+0x4e>
 800f33c:	893b      	ldrh	r3, [r7, #8]
 800f33e:	68fa      	ldr	r2, [r7, #12]
 800f340:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800f344:	4293      	cmp	r3, r2
 800f346:	da10      	bge.n	800f36a <_ZN11SolarGators7Drivers7ILI934113DrawFastHLineEtttt+0x4e>
 800f348:	897b      	ldrh	r3, [r7, #10]
 800f34a:	68fa      	ldr	r2, [r7, #12]
 800f34c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800f350:	4293      	cmp	r3, r2
 800f352:	da0a      	bge.n	800f36a <_ZN11SolarGators7Drivers7ILI934113DrawFastHLineEtttt+0x4e>
      ((x2 = (x + length - 1)) < 0))
 800f354:	897a      	ldrh	r2, [r7, #10]
 800f356:	88fb      	ldrh	r3, [r7, #6]
 800f358:	4413      	add	r3, r2
 800f35a:	b29b      	uxth	r3, r3
 800f35c:	3b01      	subs	r3, #1
 800f35e:	b29b      	uxth	r3, r3
 800f360:	82fb      	strh	r3, [r7, #22]
  if ((length <= 0) || (y < 0) || (y >= height_) || (x >= width_) ||
 800f362:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f366:	2b00      	cmp	r3, #0
 800f368:	da01      	bge.n	800f36e <_ZN11SolarGators7Drivers7ILI934113DrawFastHLineEtttt+0x52>
 800f36a:	2301      	movs	r3, #1
 800f36c:	e000      	b.n	800f370 <_ZN11SolarGators7Drivers7ILI934113DrawFastHLineEtttt+0x54>
 800f36e:	2300      	movs	r3, #0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d123      	bne.n	800f3bc <_ZN11SolarGators7Drivers7ILI934113DrawFastHLineEtttt+0xa0>

  if (x < 0) { // Clip left
    length += x;
    x = 0;
  }
  if (x2 >= width_) { // Clip right
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f37a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f37e:	429a      	cmp	r2, r3
 800f380:	db0c      	blt.n	800f39c <_ZN11SolarGators7Drivers7ILI934113DrawFastHLineEtttt+0x80>
    x2 = width_ - 1;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f388:	b29b      	uxth	r3, r3
 800f38a:	3b01      	subs	r3, #1
 800f38c:	b29b      	uxth	r3, r3
 800f38e:	82fb      	strh	r3, [r7, #22]
    length = x2 - x + 1;
 800f390:	8afa      	ldrh	r2, [r7, #22]
 800f392:	897b      	ldrh	r3, [r7, #10]
 800f394:	1ad3      	subs	r3, r2, r3
 800f396:	b29b      	uxth	r3, r3
 800f398:	3301      	adds	r3, #1
 800f39a:	80fb      	strh	r3, [r7, #6]
  }

  SetWindow(x, y, x2, y);
 800f39c:	8af8      	ldrh	r0, [r7, #22]
 800f39e:	893a      	ldrh	r2, [r7, #8]
 800f3a0:	8979      	ldrh	r1, [r7, #10]
 800f3a2:	893b      	ldrh	r3, [r7, #8]
 800f3a4:	9300      	str	r3, [sp, #0]
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	68f8      	ldr	r0, [r7, #12]
 800f3aa:	f7ff fe73 	bl	800f094 <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt>
  Flood(color, length);
 800f3ae:	88fa      	ldrh	r2, [r7, #6]
 800f3b0:	8c3b      	ldrh	r3, [r7, #32]
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	68f8      	ldr	r0, [r7, #12]
 800f3b6:	f7ff ff1f 	bl	800f1f8 <_ZN11SolarGators7Drivers7ILI93415FloodEtm>
 800f3ba:	e000      	b.n	800f3be <_ZN11SolarGators7Drivers7ILI934113DrawFastHLineEtttt+0xa2>
    return;
 800f3bc:	bf00      	nop
}
 800f3be:	3718      	adds	r7, #24
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}

0800f3c4 <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt>:

void ILI9341::DrawFastVLine(uint16_t x, uint16_t y, uint16_t length,
                                    uint16_t color) {
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b088      	sub	sp, #32
 800f3c8:	af02      	add	r7, sp, #8
 800f3ca:	60f8      	str	r0, [r7, #12]
 800f3cc:	4608      	mov	r0, r1
 800f3ce:	4611      	mov	r1, r2
 800f3d0:	461a      	mov	r2, r3
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	817b      	strh	r3, [r7, #10]
 800f3d6:	460b      	mov	r3, r1
 800f3d8:	813b      	strh	r3, [r7, #8]
 800f3da:	4613      	mov	r3, r2
 800f3dc:	80fb      	strh	r3, [r7, #6]
  int16_t y2;

  // Initial off-screen clipping
  if ((length <= 0) || (x < 0) || (x >= width_) || (y >= height_) ||
 800f3de:	88fb      	ldrh	r3, [r7, #6]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d016      	beq.n	800f412 <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt+0x4e>
 800f3e4:	897b      	ldrh	r3, [r7, #10]
 800f3e6:	68fa      	ldr	r2, [r7, #12]
 800f3e8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	da10      	bge.n	800f412 <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt+0x4e>
 800f3f0:	893b      	ldrh	r3, [r7, #8]
 800f3f2:	68fa      	ldr	r2, [r7, #12]
 800f3f4:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	da0a      	bge.n	800f412 <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt+0x4e>
      ((y2 = (y + length - 1)) < 0))
 800f3fc:	893a      	ldrh	r2, [r7, #8]
 800f3fe:	88fb      	ldrh	r3, [r7, #6]
 800f400:	4413      	add	r3, r2
 800f402:	b29b      	uxth	r3, r3
 800f404:	3b01      	subs	r3, #1
 800f406:	b29b      	uxth	r3, r3
 800f408:	82fb      	strh	r3, [r7, #22]
  if ((length <= 0) || (x < 0) || (x >= width_) || (y >= height_) ||
 800f40a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	da01      	bge.n	800f416 <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt+0x52>
 800f412:	2301      	movs	r3, #1
 800f414:	e000      	b.n	800f418 <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt+0x54>
 800f416:	2300      	movs	r3, #0
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d123      	bne.n	800f464 <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt+0xa0>
    return;
  if (y < 0) { // Clip top
    length += y;
    y = 0;
  }
  if (y2 >= height_) { // Clip bottom
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f422:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f426:	429a      	cmp	r2, r3
 800f428:	db0c      	blt.n	800f444 <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt+0x80>
    y2 = height_ - 1;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f430:	b29b      	uxth	r3, r3
 800f432:	3b01      	subs	r3, #1
 800f434:	b29b      	uxth	r3, r3
 800f436:	82fb      	strh	r3, [r7, #22]
    length = y2 - y + 1;
 800f438:	8afa      	ldrh	r2, [r7, #22]
 800f43a:	893b      	ldrh	r3, [r7, #8]
 800f43c:	1ad3      	subs	r3, r2, r3
 800f43e:	b29b      	uxth	r3, r3
 800f440:	3301      	adds	r3, #1
 800f442:	80fb      	strh	r3, [r7, #6]
  }

  SetWindow(x, y, x, y2);
 800f444:	8afb      	ldrh	r3, [r7, #22]
 800f446:	8978      	ldrh	r0, [r7, #10]
 800f448:	893a      	ldrh	r2, [r7, #8]
 800f44a:	8979      	ldrh	r1, [r7, #10]
 800f44c:	9300      	str	r3, [sp, #0]
 800f44e:	4603      	mov	r3, r0
 800f450:	68f8      	ldr	r0, [r7, #12]
 800f452:	f7ff fe1f 	bl	800f094 <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt>
  Flood(color, length);
 800f456:	88fa      	ldrh	r2, [r7, #6]
 800f458:	8c3b      	ldrh	r3, [r7, #32]
 800f45a:	4619      	mov	r1, r3
 800f45c:	68f8      	ldr	r0, [r7, #12]
 800f45e:	f7ff fecb 	bl	800f1f8 <_ZN11SolarGators7Drivers7ILI93415FloodEtm>
 800f462:	e000      	b.n	800f466 <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt+0xa2>
    return;
 800f464:	bf00      	nop
}
 800f466:	3718      	adds	r7, #24
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}

0800f46c <_ZN11SolarGators7Drivers7ILI934111SetRotationEh>:

void ILI9341::SetRotation(uint8_t x) {
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b084      	sub	sp, #16
 800f470:	af02      	add	r7, sp, #8
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	460b      	mov	r3, r1
 800f476:	70fb      	strb	r3, [r7, #3]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f482:	2200      	movs	r2, #0
 800f484:	4619      	mov	r1, r3
 800f486:	f7f8 fa23 	bl	80078d0 <HAL_GPIO_WritePin>
  rotation = x % 4; // can't be higher than 3
 800f48a:	78fb      	ldrb	r3, [r7, #3]
 800f48c:	f003 0303 	and.w	r3, r3, #3
 800f490:	b2da      	uxtb	r2, r3
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	771a      	strb	r2, [r3, #28]
  switch (rotation) {
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	7f1b      	ldrb	r3, [r3, #28]
 800f49a:	2b03      	cmp	r3, #3
 800f49c:	d832      	bhi.n	800f504 <_ZN11SolarGators7Drivers7ILI934111SetRotationEh+0x98>
 800f49e:	a201      	add	r2, pc, #4	; (adr r2, 800f4a4 <_ZN11SolarGators7Drivers7ILI934111SetRotationEh+0x38>)
 800f4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4a4:	0800f4b5 	.word	0x0800f4b5
 800f4a8:	0800f4c9 	.word	0x0800f4c9
 800f4ac:	0800f4dd 	.word	0x0800f4dd
 800f4b0:	0800f4f1 	.word	0x0800f4f1
  case 0:
    x = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 800f4b4:	2348      	movs	r3, #72	; 0x48
 800f4b6:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTWIDTH;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	22f0      	movs	r2, #240	; 0xf0
 800f4bc:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTHEIGHT;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800f4c4:	815a      	strh	r2, [r3, #10]
    break;
 800f4c6:	e01d      	b.n	800f504 <_ZN11SolarGators7Drivers7ILI934111SetRotationEh+0x98>
  case 1:
    x = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 800f4c8:	2328      	movs	r3, #40	; 0x28
 800f4ca:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTHEIGHT;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800f4d2:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTWIDTH;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	22f0      	movs	r2, #240	; 0xf0
 800f4d8:	815a      	strh	r2, [r3, #10]
    break;
 800f4da:	e013      	b.n	800f504 <_ZN11SolarGators7Drivers7ILI934111SetRotationEh+0x98>
  case 2:
    x = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 800f4dc:	2388      	movs	r3, #136	; 0x88
 800f4de:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTWIDTH;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	22f0      	movs	r2, #240	; 0xf0
 800f4e4:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTHEIGHT;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800f4ec:	815a      	strh	r2, [r3, #10]
    break;
 800f4ee:	e009      	b.n	800f504 <_ZN11SolarGators7Drivers7ILI934111SetRotationEh+0x98>
  case 3:
    x = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 800f4f0:	23e8      	movs	r3, #232	; 0xe8
 800f4f2:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTHEIGHT;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800f4fa:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTWIDTH;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	22f0      	movs	r2, #240	; 0xf0
 800f500:	815a      	strh	r2, [r3, #10]
    break;
 800f502:	bf00      	nop
  }
  TransmitCmd(ILI9341_MADCTL); // MADCTL
 800f504:	2136      	movs	r1, #54	; 0x36
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f7ff fd3d 	bl	800ef86 <_ZN11SolarGators7Drivers7ILI934111TransmitCmdEh>
  Transmit8bitData(x);
 800f50c:	78fb      	ldrb	r3, [r7, #3]
 800f50e:	4619      	mov	r1, r3
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f7ff fd59 	bl	800efc8 <_ZN11SolarGators7Drivers7ILI934116Transmit8bitDataEh>
  // For 9341, init default full-screen address window:
  SetWindow(0, 0, width_ - 1, height_ - 1); // CS_IDLE happens here
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	3b01      	subs	r3, #1
 800f520:	b29a      	uxth	r2, r3
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f528:	b29b      	uxth	r3, r3
 800f52a:	3b01      	subs	r3, #1
 800f52c:	b29b      	uxth	r3, r3
 800f52e:	9300      	str	r3, [sp, #0]
 800f530:	4613      	mov	r3, r2
 800f532:	2200      	movs	r2, #0
 800f534:	2100      	movs	r1, #0
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f7ff fdac 	bl	800f094 <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt>
}
 800f53c:	bf00      	nop
 800f53e:	3708      	adds	r7, #8
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <_ZN11SolarGators7Drivers7ILI934111SetTextSizeEh>:

void ILI9341::SetTextSize(uint8_t size)
{
 800f544:	b480      	push	{r7}
 800f546:	b083      	sub	sp, #12
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	460b      	mov	r3, r1
 800f54e:	70fb      	strb	r3, [r7, #3]
  text_size_ = size;
 800f550:	78fb      	ldrb	r3, [r7, #3]
 800f552:	b21a      	sxth	r2, r3
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	819a      	strh	r2, [r3, #12]
}
 800f558:	bf00      	nop
 800f55a:	370c      	adds	r7, #12
 800f55c:	46bd      	mov	sp, r7
 800f55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f562:	4770      	bx	lr

0800f564 <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshth>:

void ILI9341::DrawChar(int16_t x, int16_t y, unsigned char c,
    uint16_t color, uint8_t size)
{
 800f564:	b590      	push	{r4, r7, lr}
 800f566:	b089      	sub	sp, #36	; 0x24
 800f568:	af04      	add	r7, sp, #16
 800f56a:	60f8      	str	r0, [r7, #12]
 800f56c:	4608      	mov	r0, r1
 800f56e:	4611      	mov	r1, r2
 800f570:	461a      	mov	r2, r3
 800f572:	4603      	mov	r3, r0
 800f574:	817b      	strh	r3, [r7, #10]
 800f576:	460b      	mov	r3, r1
 800f578:	813b      	strh	r3, [r7, #8]
 800f57a:	4613      	mov	r3, r2
 800f57c:	71fb      	strb	r3, [r7, #7]
  DrawChar(x, y, c, color, textbgcolor, size, size);
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	8b1b      	ldrh	r3, [r3, #24]
 800f582:	79fc      	ldrb	r4, [r7, #7]
 800f584:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 800f588:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800f58c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800f590:	9203      	str	r2, [sp, #12]
 800f592:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800f596:	9202      	str	r2, [sp, #8]
 800f598:	9301      	str	r3, [sp, #4]
 800f59a:	8c3b      	ldrh	r3, [r7, #32]
 800f59c:	9300      	str	r3, [sp, #0]
 800f59e:	4623      	mov	r3, r4
 800f5a0:	4602      	mov	r2, r0
 800f5a2:	68f8      	ldr	r0, [r7, #12]
 800f5a4:	f000 f804 	bl	800f5b0 <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh>
}
 800f5a8:	bf00      	nop
 800f5aa:	3714      	adds	r7, #20
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd90      	pop	{r4, r7, pc}

0800f5b0 <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh>:

void ILI9341::DrawChar(int16_t x, int16_t y, unsigned char c,
    uint16_t color, uint16_t bg, uint8_t size_x,
    uint8_t size_y)
{
 800f5b0:	b590      	push	{r4, r7, lr}
 800f5b2:	b089      	sub	sp, #36	; 0x24
 800f5b4:	af02      	add	r7, sp, #8
 800f5b6:	60f8      	str	r0, [r7, #12]
 800f5b8:	4608      	mov	r0, r1
 800f5ba:	4611      	mov	r1, r2
 800f5bc:	461a      	mov	r2, r3
 800f5be:	4603      	mov	r3, r0
 800f5c0:	817b      	strh	r3, [r7, #10]
 800f5c2:	460b      	mov	r3, r1
 800f5c4:	813b      	strh	r3, [r7, #8]
 800f5c6:	4613      	mov	r3, r2
 800f5c8:	71fb      	strb	r3, [r7, #7]
  for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	75fb      	strb	r3, [r7, #23]
 800f5ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f5d2:	2b04      	cmp	r3, #4
 800f5d4:	f300 80aa 	bgt.w	800f72c <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x17c>
      uint8_t line = font[c * 5 + i];
 800f5d8:	79fa      	ldrb	r2, [r7, #7]
 800f5da:	4613      	mov	r3, r2
 800f5dc:	009b      	lsls	r3, r3, #2
 800f5de:	441a      	add	r2, r3
 800f5e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f5e4:	4413      	add	r3, r2
 800f5e6:	4a6c      	ldr	r2, [pc, #432]	; (800f798 <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x1e8>)
 800f5e8:	5cd3      	ldrb	r3, [r2, r3]
 800f5ea:	75bb      	strb	r3, [r7, #22]
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	757b      	strb	r3, [r7, #21]
 800f5f0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800f5f4:	2b07      	cmp	r3, #7
 800f5f6:	f300 8092 	bgt.w	800f71e <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x16e>
        if (line & 1) {
 800f5fa:	7dbb      	ldrb	r3, [r7, #22]
 800f5fc:	f003 0301 	and.w	r3, r3, #1
 800f600:	2b00      	cmp	r3, #0
 800f602:	d03f      	beq.n	800f684 <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0xd4>
          if (size_x == 1 && size_y == 1)
 800f604:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f608:	2b01      	cmp	r3, #1
 800f60a:	d114      	bne.n	800f636 <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x86>
 800f60c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800f610:	2b01      	cmp	r3, #1
 800f612:	d110      	bne.n	800f636 <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x86>
            DrawPixel(x + i, y + j, color);
 800f614:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f618:	b29a      	uxth	r2, r3
 800f61a:	897b      	ldrh	r3, [r7, #10]
 800f61c:	4413      	add	r3, r2
 800f61e:	b299      	uxth	r1, r3
 800f620:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800f624:	b29a      	uxth	r2, r3
 800f626:	893b      	ldrh	r3, [r7, #8]
 800f628:	4413      	add	r3, r2
 800f62a:	b29a      	uxth	r2, r3
 800f62c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f62e:	68f8      	ldr	r0, [r7, #12]
 800f630:	f7ff fd82 	bl	800f138 <_ZN11SolarGators7Drivers7ILI93419DrawPixelEttt>
 800f634:	e069      	b.n	800f70a <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x15a>
          else
            FillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 800f636:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f63a:	b29a      	uxth	r2, r3
 800f63c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f640:	b29b      	uxth	r3, r3
 800f642:	fb12 f303 	smulbb	r3, r2, r3
 800f646:	b29a      	uxth	r2, r3
 800f648:	897b      	ldrh	r3, [r7, #10]
 800f64a:	4413      	add	r3, r2
 800f64c:	b299      	uxth	r1, r3
 800f64e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800f652:	b29a      	uxth	r2, r3
 800f654:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800f658:	b29b      	uxth	r3, r3
 800f65a:	fb12 f303 	smulbb	r3, r2, r3
 800f65e:	b29a      	uxth	r2, r3
 800f660:	893b      	ldrh	r3, [r7, #8]
 800f662:	4413      	add	r3, r2
 800f664:	b298      	uxth	r0, r3
 800f666:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f66a:	b29c      	uxth	r4, r3
 800f66c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800f670:	b29b      	uxth	r3, r3
 800f672:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f674:	9201      	str	r2, [sp, #4]
 800f676:	9300      	str	r3, [sp, #0]
 800f678:	4623      	mov	r3, r4
 800f67a:	4602      	mov	r2, r0
 800f67c:	68f8      	ldr	r0, [r7, #12]
 800f67e:	f000 f931 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
 800f682:	e042      	b.n	800f70a <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x15a>
                          color);
        } else if (bg != color) {
 800f684:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800f686:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f688:	429a      	cmp	r2, r3
 800f68a:	d03e      	beq.n	800f70a <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x15a>
          if (size_x == 1 && size_y == 1)
 800f68c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f690:	2b01      	cmp	r3, #1
 800f692:	d114      	bne.n	800f6be <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x10e>
 800f694:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800f698:	2b01      	cmp	r3, #1
 800f69a:	d110      	bne.n	800f6be <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x10e>
            DrawPixel(x + i, y + j, bg);
 800f69c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f6a0:	b29a      	uxth	r2, r3
 800f6a2:	897b      	ldrh	r3, [r7, #10]
 800f6a4:	4413      	add	r3, r2
 800f6a6:	b299      	uxth	r1, r3
 800f6a8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800f6ac:	b29a      	uxth	r2, r3
 800f6ae:	893b      	ldrh	r3, [r7, #8]
 800f6b0:	4413      	add	r3, r2
 800f6b2:	b29a      	uxth	r2, r3
 800f6b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f6b6:	68f8      	ldr	r0, [r7, #12]
 800f6b8:	f7ff fd3e 	bl	800f138 <_ZN11SolarGators7Drivers7ILI93419DrawPixelEttt>
 800f6bc:	e025      	b.n	800f70a <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x15a>
          else
            FillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 800f6be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f6c2:	b29a      	uxth	r2, r3
 800f6c4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f6c8:	b29b      	uxth	r3, r3
 800f6ca:	fb12 f303 	smulbb	r3, r2, r3
 800f6ce:	b29a      	uxth	r2, r3
 800f6d0:	897b      	ldrh	r3, [r7, #10]
 800f6d2:	4413      	add	r3, r2
 800f6d4:	b299      	uxth	r1, r3
 800f6d6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800f6da:	b29a      	uxth	r2, r3
 800f6dc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	fb12 f303 	smulbb	r3, r2, r3
 800f6e6:	b29a      	uxth	r2, r3
 800f6e8:	893b      	ldrh	r3, [r7, #8]
 800f6ea:	4413      	add	r3, r2
 800f6ec:	b298      	uxth	r0, r3
 800f6ee:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f6f2:	b29c      	uxth	r4, r3
 800f6f4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800f6f8:	b29b      	uxth	r3, r3
 800f6fa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800f6fc:	9201      	str	r2, [sp, #4]
 800f6fe:	9300      	str	r3, [sp, #0]
 800f700:	4623      	mov	r3, r4
 800f702:	4602      	mov	r2, r0
 800f704:	68f8      	ldr	r0, [r7, #12]
 800f706:	f000 f8ed 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 800f70a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800f70e:	b2db      	uxtb	r3, r3
 800f710:	3301      	adds	r3, #1
 800f712:	b2db      	uxtb	r3, r3
 800f714:	757b      	strb	r3, [r7, #21]
 800f716:	7dbb      	ldrb	r3, [r7, #22]
 800f718:	085b      	lsrs	r3, r3, #1
 800f71a:	75bb      	strb	r3, [r7, #22]
 800f71c:	e768      	b.n	800f5f0 <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x40>
  for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 800f71e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f722:	b2db      	uxtb	r3, r3
 800f724:	3301      	adds	r3, #1
 800f726:	b2db      	uxtb	r3, r3
 800f728:	75fb      	strb	r3, [r7, #23]
 800f72a:	e750      	b.n	800f5ce <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x1e>
        }
      }
    }
    if (bg != color) { // If opaque, draw vertical line for last column
 800f72c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800f72e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f730:	429a      	cmp	r2, r3
 800f732:	d02d      	beq.n	800f790 <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x1e0>
      if (size_x == 1 && size_y == 1)
 800f734:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f738:	2b01      	cmp	r3, #1
 800f73a:	d10e      	bne.n	800f75a <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x1aa>
 800f73c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800f740:	2b01      	cmp	r3, #1
 800f742:	d10a      	bne.n	800f75a <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x1aa>
        DrawFastVLine(x + 5, y, 8, bg);
 800f744:	897b      	ldrh	r3, [r7, #10]
 800f746:	3305      	adds	r3, #5
 800f748:	b299      	uxth	r1, r3
 800f74a:	893a      	ldrh	r2, [r7, #8]
 800f74c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f74e:	9300      	str	r3, [sp, #0]
 800f750:	2308      	movs	r3, #8
 800f752:	68f8      	ldr	r0, [r7, #12]
 800f754:	f7ff fe36 	bl	800f3c4 <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt>
      else
        FillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    }
}
 800f758:	e01a      	b.n	800f790 <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x1e0>
        FillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 800f75a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f75e:	b29b      	uxth	r3, r3
 800f760:	461a      	mov	r2, r3
 800f762:	0092      	lsls	r2, r2, #2
 800f764:	4413      	add	r3, r2
 800f766:	b29a      	uxth	r2, r3
 800f768:	897b      	ldrh	r3, [r7, #10]
 800f76a:	4413      	add	r3, r2
 800f76c:	b299      	uxth	r1, r3
 800f76e:	8938      	ldrh	r0, [r7, #8]
 800f770:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f774:	b29c      	uxth	r4, r3
 800f776:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800f77a:	b29b      	uxth	r3, r3
 800f77c:	00db      	lsls	r3, r3, #3
 800f77e:	b29b      	uxth	r3, r3
 800f780:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800f782:	9201      	str	r2, [sp, #4]
 800f784:	9300      	str	r3, [sp, #0]
 800f786:	4623      	mov	r3, r4
 800f788:	4602      	mov	r2, r0
 800f78a:	68f8      	ldr	r0, [r7, #12]
 800f78c:	f000 f8aa 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
}
 800f790:	bf00      	nop
 800f792:	371c      	adds	r7, #28
 800f794:	46bd      	mov	sp, r7
 800f796:	bd90      	pop	{r4, r7, pc}
 800f798:	0801a408 	.word	0x0801a408

0800f79c <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>:

void ILI9341::DrawText(uint16_t x, uint16_t y, const char *str, uint16_t color)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b088      	sub	sp, #32
 800f7a0:	af02      	add	r7, sp, #8
 800f7a2:	60f8      	str	r0, [r7, #12]
 800f7a4:	607b      	str	r3, [r7, #4]
 800f7a6:	460b      	mov	r3, r1
 800f7a8:	817b      	strh	r3, [r7, #10]
 800f7aa:	4613      	mov	r3, r2
 800f7ac:	813b      	strh	r3, [r7, #8]
  // NOTE: Characters are 6x8 (wxh)
    uint8_t TempChar;

    /* Set area back to span the entire LCD */
    SetWindow(0, 0, width_ - 1, height_ - 1);
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	3b01      	subs	r3, #1
 800f7b8:	b29a      	uxth	r2, r3
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f7c0:	b29b      	uxth	r3, r3
 800f7c2:	3b01      	subs	r3, #1
 800f7c4:	b29b      	uxth	r3, r3
 800f7c6:	9300      	str	r3, [sp, #0]
 800f7c8:	4613      	mov	r3, r2
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	2100      	movs	r1, #0
 800f7ce:	68f8      	ldr	r0, [r7, #12]
 800f7d0:	f7ff fc60 	bl	800f094 <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt>
    do
    {
        TempChar = *str++;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	1c5a      	adds	r2, r3, #1
 800f7d8:	607a      	str	r2, [r7, #4]
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	75fb      	strb	r3, [r7, #23]
        DrawChar( x, y, TempChar, color, text_size_);
 800f7de:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800f7e2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	7df8      	ldrb	r0, [r7, #23]
 800f7f0:	9301      	str	r3, [sp, #4]
 800f7f2:	8c3b      	ldrh	r3, [r7, #32]
 800f7f4:	9300      	str	r3, [sp, #0]
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	68f8      	ldr	r0, [r7, #12]
 800f7fa:	f7ff feb3 	bl	800f564 <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshth>
        if( x < width_ - 1 - 8)
 800f7fe:	897a      	ldrh	r2, [r7, #10]
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f806:	3b09      	subs	r3, #9
 800f808:	429a      	cmp	r2, r3
 800f80a:	da0c      	bge.n	800f826 <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct+0x8a>
        {
            x += (6 * text_size_);
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800f812:	b29b      	uxth	r3, r3
 800f814:	461a      	mov	r2, r3
 800f816:	0052      	lsls	r2, r2, #1
 800f818:	4413      	add	r3, r2
 800f81a:	005b      	lsls	r3, r3, #1
 800f81c:	b29a      	uxth	r2, r3
 800f81e:	897b      	ldrh	r3, [r7, #10]
 800f820:	4413      	add	r3, r2
 800f822:	817b      	strh	r3, [r7, #10]
 800f824:	e016      	b.n	800f854 <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct+0xb8>
        }
        else if ( y < height_ - 1 - 16)
 800f826:	893a      	ldrh	r2, [r7, #8]
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f82e:	3b11      	subs	r3, #17
 800f830:	429a      	cmp	r2, r3
 800f832:	da0b      	bge.n	800f84c <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct+0xb0>
        {
            x = 0;
 800f834:	2300      	movs	r3, #0
 800f836:	817b      	strh	r3, [r7, #10]
            y += (8 * text_size_);
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800f83e:	b29b      	uxth	r3, r3
 800f840:	00db      	lsls	r3, r3, #3
 800f842:	b29a      	uxth	r2, r3
 800f844:	893b      	ldrh	r3, [r7, #8]
 800f846:	4413      	add	r3, r2
 800f848:	813b      	strh	r3, [r7, #8]
 800f84a:	e003      	b.n	800f854 <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct+0xb8>
        }
        else
        {
            x = 0;
 800f84c:	2300      	movs	r3, #0
 800f84e:	817b      	strh	r3, [r7, #10]
            y = 0;
 800f850:	2300      	movs	r3, #0
 800f852:	813b      	strh	r3, [r7, #8]
        }
    }
    while ( *str != 0 );
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	781b      	ldrb	r3, [r3, #0]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d000      	beq.n	800f85e <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct+0xc2>
    do
 800f85c:	e7ba      	b.n	800f7d4 <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct+0x38>
}
 800f85e:	bf00      	nop
 800f860:	3718      	adds	r7, #24
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}

0800f866 <_ZN11SolarGators7Drivers7ILI93418DrawRectEttttt>:

void ILI9341::DrawRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 800f866:	b580      	push	{r7, lr}
 800f868:	b086      	sub	sp, #24
 800f86a:	af02      	add	r7, sp, #8
 800f86c:	60f8      	str	r0, [r7, #12]
 800f86e:	4608      	mov	r0, r1
 800f870:	4611      	mov	r1, r2
 800f872:	461a      	mov	r2, r3
 800f874:	4603      	mov	r3, r0
 800f876:	817b      	strh	r3, [r7, #10]
 800f878:	460b      	mov	r3, r1
 800f87a:	813b      	strh	r3, [r7, #8]
 800f87c:	4613      	mov	r3, r2
 800f87e:	80fb      	strh	r3, [r7, #6]
  DrawFastHLine(x, y, w, color);
 800f880:	88f8      	ldrh	r0, [r7, #6]
 800f882:	893a      	ldrh	r2, [r7, #8]
 800f884:	8979      	ldrh	r1, [r7, #10]
 800f886:	8bbb      	ldrh	r3, [r7, #28]
 800f888:	9300      	str	r3, [sp, #0]
 800f88a:	4603      	mov	r3, r0
 800f88c:	68f8      	ldr	r0, [r7, #12]
 800f88e:	f7ff fd45 	bl	800f31c <_ZN11SolarGators7Drivers7ILI934113DrawFastHLineEtttt>
  DrawFastHLine(x, y + h - 1, w, color);
 800f892:	893a      	ldrh	r2, [r7, #8]
 800f894:	8b3b      	ldrh	r3, [r7, #24]
 800f896:	4413      	add	r3, r2
 800f898:	b29b      	uxth	r3, r3
 800f89a:	3b01      	subs	r3, #1
 800f89c:	b29a      	uxth	r2, r3
 800f89e:	88f8      	ldrh	r0, [r7, #6]
 800f8a0:	8979      	ldrh	r1, [r7, #10]
 800f8a2:	8bbb      	ldrh	r3, [r7, #28]
 800f8a4:	9300      	str	r3, [sp, #0]
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	68f8      	ldr	r0, [r7, #12]
 800f8aa:	f7ff fd37 	bl	800f31c <_ZN11SolarGators7Drivers7ILI934113DrawFastHLineEtttt>
  DrawFastVLine(x, y, h, color);
 800f8ae:	8b38      	ldrh	r0, [r7, #24]
 800f8b0:	893a      	ldrh	r2, [r7, #8]
 800f8b2:	8979      	ldrh	r1, [r7, #10]
 800f8b4:	8bbb      	ldrh	r3, [r7, #28]
 800f8b6:	9300      	str	r3, [sp, #0]
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	68f8      	ldr	r0, [r7, #12]
 800f8bc:	f7ff fd82 	bl	800f3c4 <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt>
  DrawFastVLine(x + w - 1, y, h, color);
 800f8c0:	897a      	ldrh	r2, [r7, #10]
 800f8c2:	88fb      	ldrh	r3, [r7, #6]
 800f8c4:	4413      	add	r3, r2
 800f8c6:	b29b      	uxth	r3, r3
 800f8c8:	3b01      	subs	r3, #1
 800f8ca:	b299      	uxth	r1, r3
 800f8cc:	8b38      	ldrh	r0, [r7, #24]
 800f8ce:	893a      	ldrh	r2, [r7, #8]
 800f8d0:	8bbb      	ldrh	r3, [r7, #28]
 800f8d2:	9300      	str	r3, [sp, #0]
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	68f8      	ldr	r0, [r7, #12]
 800f8d8:	f7ff fd74 	bl	800f3c4 <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt>
}
 800f8dc:	bf00      	nop
 800f8de:	3710      	adds	r7, #16
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>:

void ILI9341::FillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b088      	sub	sp, #32
 800f8e8:	af02      	add	r7, sp, #8
 800f8ea:	60f8      	str	r0, [r7, #12]
 800f8ec:	4608      	mov	r0, r1
 800f8ee:	4611      	mov	r1, r2
 800f8f0:	461a      	mov	r2, r3
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	817b      	strh	r3, [r7, #10]
 800f8f6:	460b      	mov	r3, r1
 800f8f8:	813b      	strh	r3, [r7, #8]
 800f8fa:	4613      	mov	r3, r2
 800f8fc:	80fb      	strh	r3, [r7, #6]
  int16_t x2, y2;

  // Initial off-screen clipping
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 800f8fe:	88fb      	ldrh	r3, [r7, #6]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d024      	beq.n	800f94e <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt+0x6a>
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 800f904:	8c3b      	ldrh	r3, [r7, #32]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d021      	beq.n	800f94e <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt+0x6a>
 800f90a:	897b      	ldrh	r3, [r7, #10]
 800f90c:	68fa      	ldr	r2, [r7, #12]
 800f90e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800f912:	4293      	cmp	r3, r2
 800f914:	da1b      	bge.n	800f94e <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt+0x6a>
 800f916:	893b      	ldrh	r3, [r7, #8]
 800f918:	68fa      	ldr	r2, [r7, #12]
 800f91a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800f91e:	4293      	cmp	r3, r2
 800f920:	da15      	bge.n	800f94e <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt+0x6a>
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 800f922:	897a      	ldrh	r2, [r7, #10]
 800f924:	88fb      	ldrh	r3, [r7, #6]
 800f926:	4413      	add	r3, r2
 800f928:	b29b      	uxth	r3, r3
 800f92a:	3b01      	subs	r3, #1
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	82fb      	strh	r3, [r7, #22]
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 800f930:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f934:	2b00      	cmp	r3, #0
 800f936:	db0a      	blt.n	800f94e <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt+0x6a>
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 800f938:	893a      	ldrh	r2, [r7, #8]
 800f93a:	8c3b      	ldrh	r3, [r7, #32]
 800f93c:	4413      	add	r3, r2
 800f93e:	b29b      	uxth	r3, r3
 800f940:	3b01      	subs	r3, #1
 800f942:	b29b      	uxth	r3, r3
 800f944:	82bb      	strh	r3, [r7, #20]
 800f946:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	da01      	bge.n	800f952 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt+0x6e>
 800f94e:	2301      	movs	r3, #1
 800f950:	e000      	b.n	800f954 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt+0x70>
 800f952:	2300      	movs	r3, #0
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 800f954:	2b00      	cmp	r3, #0
 800f956:	d13a      	bne.n	800f9ce <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt+0xea>
  }
  if (y1 < 0) { // Clip top
    h += y1;
    y1 = 0;
  }
  if (x2 >= width_) { // Clip right
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f95e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f962:	429a      	cmp	r2, r3
 800f964:	db0c      	blt.n	800f980 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt+0x9c>
    x2 = width_ - 1;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f96c:	b29b      	uxth	r3, r3
 800f96e:	3b01      	subs	r3, #1
 800f970:	b29b      	uxth	r3, r3
 800f972:	82fb      	strh	r3, [r7, #22]
    w = x2 - x1 + 1;
 800f974:	8afa      	ldrh	r2, [r7, #22]
 800f976:	897b      	ldrh	r3, [r7, #10]
 800f978:	1ad3      	subs	r3, r2, r3
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	3301      	adds	r3, #1
 800f97e:	80fb      	strh	r3, [r7, #6]
  }
  if (y2 >= height_) { // Clip bottom
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f986:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f98a:	429a      	cmp	r2, r3
 800f98c:	db0c      	blt.n	800f9a8 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt+0xc4>
    y2 = height_ - 1;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f994:	b29b      	uxth	r3, r3
 800f996:	3b01      	subs	r3, #1
 800f998:	b29b      	uxth	r3, r3
 800f99a:	82bb      	strh	r3, [r7, #20]
    h = y2 - y1 + 1;
 800f99c:	8aba      	ldrh	r2, [r7, #20]
 800f99e:	893b      	ldrh	r3, [r7, #8]
 800f9a0:	1ad3      	subs	r3, r2, r3
 800f9a2:	b29b      	uxth	r3, r3
 800f9a4:	3301      	adds	r3, #1
 800f9a6:	843b      	strh	r3, [r7, #32]
  }

  SetWindow(x1, y1, x2, y2);
 800f9a8:	8af8      	ldrh	r0, [r7, #22]
 800f9aa:	8abb      	ldrh	r3, [r7, #20]
 800f9ac:	893a      	ldrh	r2, [r7, #8]
 800f9ae:	8979      	ldrh	r1, [r7, #10]
 800f9b0:	9300      	str	r3, [sp, #0]
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	68f8      	ldr	r0, [r7, #12]
 800f9b6:	f7ff fb6d 	bl	800f094 <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt>
  Flood(color, (uint32_t)w * (uint32_t)h);
 800f9ba:	88fb      	ldrh	r3, [r7, #6]
 800f9bc:	8c3a      	ldrh	r2, [r7, #32]
 800f9be:	fb03 f202 	mul.w	r2, r3, r2
 800f9c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9c4:	4619      	mov	r1, r3
 800f9c6:	68f8      	ldr	r0, [r7, #12]
 800f9c8:	f7ff fc16 	bl	800f1f8 <_ZN11SolarGators7Drivers7ILI93415FloodEtm>
 800f9cc:	e000      	b.n	800f9d0 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt+0xec>
    return;
 800f9ce:	bf00      	nop
}
 800f9d0:	3718      	adds	r7, #24
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}

0800f9d6 <_ZNK3etl11string_base4sizeEv>:
    size_type size() const
 800f9d6:	b480      	push	{r7}
 800f9d8:	b083      	sub	sp, #12
 800f9da:	af00      	add	r7, sp, #0
 800f9dc:	6078      	str	r0, [r7, #4]
      return current_size;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
    }
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	370c      	adds	r7, #12
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ec:	4770      	bx	lr

0800f9ee <_ZNK3etl11string_base12is_truncatedEv>:
    bool is_truncated() const
 800f9ee:	b580      	push	{r7, lr}
 800f9f0:	b082      	sub	sp, #8
 800f9f2:	af00      	add	r7, sp, #0
 800f9f4:	6078      	str	r0, [r7, #4]
      return flags.test<IS_TRUNCATED>();
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	3308      	adds	r3, #8
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f000 fef4 	bl	80107e8 <_ZNK3etl5flagsIhLh255EE4testILh1EEEbv>
 800fa00:	4603      	mov	r3, r0
    }
 800fa02:	4618      	mov	r0, r3
 800fa04:	3708      	adds	r7, #8
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}

0800fa0a <_ZN3etl5flagsIhLh255EE3setILh2EEERS1_v>:

    //*******************************************
    template <value_type pattern>
    ETL_CONSTEXPR14 flags<T, MASK>& set() ETL_NOEXCEPT
 800fa0a:	b480      	push	{r7}
 800fa0c:	b083      	sub	sp, #12
 800fa0e:	af00      	add	r7, sp, #0
 800fa10:	6078      	str	r0, [r7, #4]
    {
      data |= (pattern & MASK);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	781b      	ldrb	r3, [r3, #0]
 800fa16:	f043 0302 	orr.w	r3, r3, #2
 800fa1a:	b2da      	uxtb	r2, r3
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	701a      	strb	r2, [r3, #0]

      return *this;
 800fa20:	687b      	ldr	r3, [r7, #4]
    }
 800fa22:	4618      	mov	r0, r3
 800fa24:	370c      	adds	r7, #12
 800fa26:	46bd      	mov	sp, r7
 800fa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2c:	4770      	bx	lr

0800fa2e <_ZN3etl11string_base10set_secureEv>:
    void set_secure()
 800fa2e:	b580      	push	{r7, lr}
 800fa30:	b082      	sub	sp, #8
 800fa32:	af00      	add	r7, sp, #0
 800fa34:	6078      	str	r0, [r7, #4]
      flags.set<CLEAR_AFTER_USE>();
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	3308      	adds	r3, #8
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7ff ffe5 	bl	800fa0a <_ZN3etl5flagsIhLh255EE3setILh2EEERS1_v>
    }
 800fa40:	bf00      	nop
 800fa42:	3708      	adds	r7, #8
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}

0800fa48 <_ZN11SolarGators7Drivers10InfoSquare4DrawERNS0_7ILI9341E>:

namespace SolarGators {
namespace Drivers {

void InfoSquare::Draw(ILI9341& disp)
{
 800fa48:	b5b0      	push	{r4, r5, r7, lr}
 800fa4a:	b08a      	sub	sp, #40	; 0x28
 800fa4c:	af02      	add	r7, sp, #8
 800fa4e:	6078      	str	r0, [r7, #4]
 800fa50:	6039      	str	r1, [r7, #0]
  disp.SetTextSize(TextSize);
 800fa52:	2102      	movs	r1, #2
 800fa54:	6838      	ldr	r0, [r7, #0]
 800fa56:	f7ff fd75 	bl	800f544 <_ZN11SolarGators7Drivers7ILI934111SetTextSizeEh>
  // Draw the Border
  disp.DrawRect(x, y, DataSqW, DataSqH, UI::color_neutral_);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	8b19      	ldrh	r1, [r3, #24]
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	8b5a      	ldrh	r2, [r3, #26]
 800fa62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa66:	9301      	str	r3, [sp, #4]
 800fa68:	2332      	movs	r3, #50	; 0x32
 800fa6a:	9300      	str	r3, [sp, #0]
 800fa6c:	2350      	movs	r3, #80	; 0x50
 800fa6e:	6838      	ldr	r0, [r7, #0]
 800fa70:	f7ff fef9 	bl	800f866 <_ZN11SolarGators7Drivers7ILI93418DrawRectEttttt>
  // Draw the Title
  disp.DrawText(x+TextPaddX, y+TitlePaddY, title.c_str(), UI::color_neutral_);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	8b1b      	ldrh	r3, [r3, #24]
 800fa78:	330a      	adds	r3, #10
 800fa7a:	b29c      	uxth	r4, r3
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	8b5b      	ldrh	r3, [r3, #26]
 800fa80:	3307      	adds	r3, #7
 800fa82:	b29d      	uxth	r5, r3
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	4618      	mov	r0, r3
 800fa88:	f7f4 fda1 	bl	80045ce <_ZNK3etl13ibasic_stringIcE5c_strEv>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa92:	9200      	str	r2, [sp, #0]
 800fa94:	462a      	mov	r2, r5
 800fa96:	4621      	mov	r1, r4
 800fa98:	6838      	ldr	r0, [r7, #0]
 800fa9a:	f7ff fe7f 	bl	800f79c <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>
  etl::string<5> tmp(" N/A ");
 800fa9e:	f107 0308 	add.w	r3, r7, #8
 800faa2:	490a      	ldr	r1, [pc, #40]	; (800facc <_ZN11SolarGators7Drivers10InfoSquare4DrawERNS0_7ILI9341E+0x84>)
 800faa4:	4618      	mov	r0, r3
 800faa6:	f000 ff66 	bl	8010976 <_ZN3etl6stringILj5EEC1EPKc>
  UpdateValue(disp, tmp);
 800faaa:	f107 0308 	add.w	r3, r7, #8
 800faae:	461a      	mov	r2, r3
 800fab0:	6839      	ldr	r1, [r7, #0]
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f000 f80c 	bl	800fad0 <_ZN11SolarGators7Drivers10InfoSquare11UpdateValueERNS0_7ILI9341ERN3etl6stringILj5EEE>
  etl::string<5> tmp(" N/A ");
 800fab8:	f107 0308 	add.w	r3, r7, #8
 800fabc:	4618      	mov	r0, r3
 800fabe:	f7f3 fbf1 	bl	80032a4 <_ZN3etl6stringILj5EED1Ev>
}
 800fac2:	bf00      	nop
 800fac4:	3720      	adds	r7, #32
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bdb0      	pop	{r4, r5, r7, pc}
 800faca:	bf00      	nop
 800facc:	08019f6c 	.word	0x08019f6c

0800fad0 <_ZN11SolarGators7Drivers10InfoSquare11UpdateValueERNS0_7ILI9341ERN3etl6stringILj5EEE>:

void InfoSquare::UpdateValue(ILI9341& disp, etl::string<5>& val)
{
 800fad0:	b5b0      	push	{r4, r5, r7, lr}
 800fad2:	b086      	sub	sp, #24
 800fad4:	af02      	add	r7, sp, #8
 800fad6:	60f8      	str	r0, [r7, #12]
 800fad8:	60b9      	str	r1, [r7, #8]
 800fada:	607a      	str	r2, [r7, #4]
  disp.SetTextSize(TextSize);
 800fadc:	2102      	movs	r1, #2
 800fade:	68b8      	ldr	r0, [r7, #8]
 800fae0:	f7ff fd30 	bl	800f544 <_ZN11SolarGators7Drivers7ILI934111SetTextSizeEh>
  disp.DrawText(x+TextPaddX, TextHeight*TextSize+TitlePaddY+DataPaddY+y, val.c_str(), UI::color_neutral_);
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	8b1b      	ldrh	r3, [r3, #24]
 800fae8:	330a      	adds	r3, #10
 800faea:	b29c      	uxth	r4, r3
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	8b5b      	ldrh	r3, [r3, #26]
 800faf0:	331b      	adds	r3, #27
 800faf2:	b29d      	uxth	r5, r3
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7f4 fd69 	bl	80045ce <_ZNK3etl13ibasic_stringIcE5c_strEv>
 800fafc:	4603      	mov	r3, r0
 800fafe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb02:	9200      	str	r2, [sp, #0]
 800fb04:	462a      	mov	r2, r5
 800fb06:	4621      	mov	r1, r4
 800fb08:	68b8      	ldr	r0, [r7, #8]
 800fb0a:	f7ff fe47 	bl	800f79c <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>
}
 800fb0e:	bf00      	nop
 800fb10:	3710      	adds	r7, #16
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bdb0      	pop	{r4, r5, r7, pc}

0800fb16 <_ZN11SolarGators7Drivers10InfoSquareC1Ev>:

namespace SolarGators {
namespace Drivers {

// Minor UI Element Struct
class InfoSquare {
 800fb16:	b580      	push	{r7, lr}
 800fb18:	b082      	sub	sp, #8
 800fb1a:	af00      	add	r7, sp, #0
 800fb1c:	6078      	str	r0, [r7, #4]
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7f4 fcef 	bl	8004504 <_ZN3etl6stringILj5EEC1Ev>
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	3708      	adds	r7, #8
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj4EEC1Ev>:
  //***************************************************************************
  ///\ingroup array
  /// A replacement for std::array if you haven't got C++0x11.
  //***************************************************************************
  template <typename T, const size_t SIZE_>
  class array
 800fb30:	b5b0      	push	{r4, r5, r7, lr}
 800fb32:	b082      	sub	sp, #8
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2403      	movs	r4, #3
 800fb3c:	461d      	mov	r5, r3
 800fb3e:	2c00      	cmp	r4, #0
 800fb40:	db05      	blt.n	800fb4e <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj4EEC1Ev+0x1e>
 800fb42:	4628      	mov	r0, r5
 800fb44:	f7ff ffe7 	bl	800fb16 <_ZN11SolarGators7Drivers10InfoSquareC1Ev>
 800fb48:	351c      	adds	r5, #28
 800fb4a:	3c01      	subs	r4, #1
 800fb4c:	e7f7      	b.n	800fb3e <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj4EEC1Ev+0xe>
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	4618      	mov	r0, r3
 800fb52:	3708      	adds	r7, #8
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bdb0      	pop	{r4, r5, r7, pc}

0800fb58 <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj2EEC1Ev>:
 800fb58:	b5b0      	push	{r4, r5, r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2401      	movs	r4, #1
 800fb64:	461d      	mov	r5, r3
 800fb66:	2c00      	cmp	r4, #0
 800fb68:	db05      	blt.n	800fb76 <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj2EEC1Ev+0x1e>
 800fb6a:	4628      	mov	r0, r5
 800fb6c:	f7ff ffd3 	bl	800fb16 <_ZN11SolarGators7Drivers10InfoSquareC1Ev>
 800fb70:	351c      	adds	r5, #28
 800fb72:	3c01      	subs	r4, #1
 800fb74:	e7f7      	b.n	800fb66 <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj2EEC1Ev+0xe>
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3708      	adds	r7, #8
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bdb0      	pop	{r4, r5, r7, pc}

0800fb80 <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E>:

UI::UI(ILI9341& display):disp(display)
 800fb80:	b590      	push	{r4, r7, lr}
 800fb82:	b09d      	sub	sp, #116	; 0x74
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	683a      	ldr	r2, [r7, #0]
 800fb8e:	601a      	str	r2, [r3, #0]
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	3304      	adds	r3, #4
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7ff ffcb 	bl	800fb30 <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj4EEC1Ev>
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	3374      	adds	r3, #116	; 0x74
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f7ff ffda 	bl	800fb58 <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj2EEC1Ev>
{
  // Set Screen Orientation
  disp.SetRotation(1);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	2101      	movs	r1, #1
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7ff fc5e 	bl	800f46c <_ZN11SolarGators7Drivers7ILI934111SetRotationEh>
  // Set Background Color
  disp.ClearScreen(0x0000);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	2100      	movs	r1, #0
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f7ff fb8d 	bl	800f2d6 <_ZN11SolarGators7Drivers7ILI934111ClearScreenEt>
  // Setup info squares
  etl::string<5> titles[] = {"Temp"," SOC ","Power","Curnt"};
 800fbbc:	f107 0408 	add.w	r4, r7, #8
 800fbc0:	4968      	ldr	r1, [pc, #416]	; (800fd64 <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E+0x1e4>)
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	f000 fed7 	bl	8010976 <_ZN3etl6stringILj5EEC1EPKc>
 800fbc8:	3418      	adds	r4, #24
 800fbca:	4967      	ldr	r1, [pc, #412]	; (800fd68 <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E+0x1e8>)
 800fbcc:	4620      	mov	r0, r4
 800fbce:	f000 fed2 	bl	8010976 <_ZN3etl6stringILj5EEC1EPKc>
 800fbd2:	3418      	adds	r4, #24
 800fbd4:	4965      	ldr	r1, [pc, #404]	; (800fd6c <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E+0x1ec>)
 800fbd6:	4620      	mov	r0, r4
 800fbd8:	f000 fecd 	bl	8010976 <_ZN3etl6stringILj5EEC1EPKc>
 800fbdc:	f104 0318 	add.w	r3, r4, #24
 800fbe0:	4963      	ldr	r1, [pc, #396]	; (800fd70 <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E+0x1f0>)
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	f000 fec7 	bl	8010976 <_ZN3etl6stringILj5EEC1EPKc>
  for (size_t i = 0; i < first_row_.size(); ++i)
 800fbe8:	2300      	movs	r3, #0
 800fbea:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	3304      	adds	r3, #4
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f000 fedd 	bl	80109b0 <_ZNK3etl5arrayIN11SolarGators7Drivers10InfoSquareELj4EE4sizeEv>
 800fbf6:	4602      	mov	r2, r0
 800fbf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fbfa:	4293      	cmp	r3, r2
 800fbfc:	bf34      	ite	cc
 800fbfe:	2301      	movcc	r3, #1
 800fc00:	2300      	movcs	r3, #0
 800fc02:	b2db      	uxtb	r3, r3
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d03c      	beq.n	800fc82 <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E+0x102>
  {
    first_row_[i].title = titles[i];
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	3304      	adds	r3, #4
 800fc0c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f000 fed9 	bl	80109c6 <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj4EEixEj>
 800fc14:	4603      	mov	r3, r0
 800fc16:	4618      	mov	r0, r3
 800fc18:	f107 0108 	add.w	r1, r7, #8
 800fc1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fc1e:	4613      	mov	r3, r2
 800fc20:	005b      	lsls	r3, r3, #1
 800fc22:	4413      	add	r3, r2
 800fc24:	00db      	lsls	r3, r3, #3
 800fc26:	440b      	add	r3, r1
 800fc28:	4619      	mov	r1, r3
 800fc2a:	f000 fede 	bl	80109ea <_ZN3etl6stringILj5EEaSERKS1_>
    first_row_[i].x = i*InfoSquare::DataSqW;
 800fc2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc30:	b29c      	uxth	r4, r3
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	3304      	adds	r3, #4
 800fc36:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fc38:	4618      	mov	r0, r3
 800fc3a:	f000 fec4 	bl	80109c6 <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj4EEixEj>
 800fc3e:	4602      	mov	r2, r0
 800fc40:	4623      	mov	r3, r4
 800fc42:	4619      	mov	r1, r3
 800fc44:	0089      	lsls	r1, r1, #2
 800fc46:	440b      	add	r3, r1
 800fc48:	011b      	lsls	r3, r3, #4
 800fc4a:	b29b      	uxth	r3, r3
 800fc4c:	8313      	strh	r3, [r2, #24]
    first_row_[i].y = 190;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	3304      	adds	r3, #4
 800fc52:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fc54:	4618      	mov	r0, r3
 800fc56:	f000 feb6 	bl	80109c6 <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj4EEixEj>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	22be      	movs	r2, #190	; 0xbe
 800fc5e:	835a      	strh	r2, [r3, #26]
    first_row_[i].Draw(disp);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	3304      	adds	r3, #4
 800fc64:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fc66:	4618      	mov	r0, r3
 800fc68:	f000 fead 	bl	80109c6 <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj4EEixEj>
 800fc6c:	4602      	mov	r2, r0
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	4619      	mov	r1, r3
 800fc74:	4610      	mov	r0, r2
 800fc76:	f7ff fee7 	bl	800fa48 <_ZN11SolarGators7Drivers10InfoSquare4DrawERNS0_7ILI9341E>
  for (size_t i = 0; i < first_row_.size(); ++i)
 800fc7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc7c:	3301      	adds	r3, #1
 800fc7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fc80:	e7b4      	b.n	800fbec <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E+0x6c>
  }

  titles[0] = "Wh/mi";
 800fc82:	f107 0308 	add.w	r3, r7, #8
 800fc86:	493b      	ldr	r1, [pc, #236]	; (800fd74 <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E+0x1f4>)
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f000 fec2 	bl	8010a12 <_ZN3etl6stringILj5EEaSEPKc>
  titles[1] = "Solar";
 800fc8e:	f107 0308 	add.w	r3, r7, #8
 800fc92:	3318      	adds	r3, #24
 800fc94:	4938      	ldr	r1, [pc, #224]	; (800fd78 <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E+0x1f8>)
 800fc96:	4618      	mov	r0, r3
 800fc98:	f000 febb 	bl	8010a12 <_ZN3etl6stringILj5EEaSEPKc>
	for (size_t i = 0; i < second_row_.size(); ++i)
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	66bb      	str	r3, [r7, #104]	; 0x68
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	3374      	adds	r3, #116	; 0x74
 800fca4:	4618      	mov	r0, r3
 800fca6:	f000 fec3 	bl	8010a30 <_ZNK3etl5arrayIN11SolarGators7Drivers10InfoSquareELj2EE4sizeEv>
 800fcaa:	4602      	mov	r2, r0
 800fcac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	bf34      	ite	cc
 800fcb2:	2301      	movcc	r3, #1
 800fcb4:	2300      	movcs	r3, #0
 800fcb6:	b2db      	uxtb	r3, r3
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d03e      	beq.n	800fd3a <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E+0x1ba>
	{
		second_row_[i].title = titles[i];
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	3374      	adds	r3, #116	; 0x74
 800fcc0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f000 febf 	bl	8010a46 <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj2EEixEj>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	4618      	mov	r0, r3
 800fccc:	f107 0108 	add.w	r1, r7, #8
 800fcd0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fcd2:	4613      	mov	r3, r2
 800fcd4:	005b      	lsls	r3, r3, #1
 800fcd6:	4413      	add	r3, r2
 800fcd8:	00db      	lsls	r3, r3, #3
 800fcda:	440b      	add	r3, r1
 800fcdc:	4619      	mov	r1, r3
 800fcde:	f000 fe84 	bl	80109ea <_ZN3etl6stringILj5EEaSERKS1_>
		second_row_[i].x = (i*InfoSquare::DataSqW) + 82;
 800fce2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fce4:	b29b      	uxth	r3, r3
 800fce6:	461a      	mov	r2, r3
 800fce8:	0092      	lsls	r2, r2, #2
 800fcea:	4413      	add	r3, r2
 800fcec:	011b      	lsls	r3, r3, #4
 800fcee:	b29c      	uxth	r4, r3
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	3374      	adds	r3, #116	; 0x74
 800fcf4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f000 fea5 	bl	8010a46 <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj2EEixEj>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	f104 0252 	add.w	r2, r4, #82	; 0x52
 800fd02:	b292      	uxth	r2, r2
 800fd04:	831a      	strh	r2, [r3, #24]
		second_row_[i].y = 0;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	3374      	adds	r3, #116	; 0x74
 800fd0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	f000 fe9a 	bl	8010a46 <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj2EEixEj>
 800fd12:	4603      	mov	r3, r0
 800fd14:	2200      	movs	r2, #0
 800fd16:	835a      	strh	r2, [r3, #26]
		second_row_[i].Draw(disp);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	3374      	adds	r3, #116	; 0x74
 800fd1c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f000 fe91 	bl	8010a46 <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj2EEixEj>
 800fd24:	4602      	mov	r2, r0
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	4619      	mov	r1, r3
 800fd2c:	4610      	mov	r0, r2
 800fd2e:	f7ff fe8b 	bl	800fa48 <_ZN11SolarGators7Drivers10InfoSquare4DrawERNS0_7ILI9341E>
	for (size_t i = 0; i < second_row_.size(); ++i)
 800fd32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd34:	3301      	adds	r3, #1
 800fd36:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd38:	e7b2      	b.n	800fca0 <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E+0x120>
	}
  DrawSpeed();
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	f000 f84c 	bl	800fdd8 <_ZN11SolarGators7Drivers2UI9DrawSpeedEv>
  etl::string<5> titles[] = {"Temp"," SOC ","Power","Curnt"};
 800fd40:	f107 0408 	add.w	r4, r7, #8
 800fd44:	3460      	adds	r4, #96	; 0x60
 800fd46:	f107 0308 	add.w	r3, r7, #8
 800fd4a:	429c      	cmp	r4, r3
 800fd4c:	d004      	beq.n	800fd58 <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E+0x1d8>
 800fd4e:	3c18      	subs	r4, #24
 800fd50:	4620      	mov	r0, r4
 800fd52:	f7f3 faa7 	bl	80032a4 <_ZN3etl6stringILj5EED1Ev>
 800fd56:	e7f6      	b.n	800fd46 <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E+0x1c6>

}
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3774      	adds	r7, #116	; 0x74
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd90      	pop	{r4, r7, pc}
 800fd62:	bf00      	nop
 800fd64:	08019f74 	.word	0x08019f74
 800fd68:	08019f7c 	.word	0x08019f7c
 800fd6c:	08019f84 	.word	0x08019f84
 800fd70:	08019f8c 	.word	0x08019f8c
 800fd74:	08019f94 	.word	0x08019f94
 800fd78:	08019f9c 	.word	0x08019f9c

0800fd7c <_ZN11SolarGators7Drivers2UI12UpdateSquareEhRN3etl6stringILj5EEE>:
{

}

void UI::UpdateSquare(uint8_t num, etl::string<5>& val)
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b084      	sub	sp, #16
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	60f8      	str	r0, [r7, #12]
 800fd84:	460b      	mov	r3, r1
 800fd86:	607a      	str	r2, [r7, #4]
 800fd88:	72fb      	strb	r3, [r7, #11]
  if(num < 4)
 800fd8a:	7afb      	ldrb	r3, [r7, #11]
 800fd8c:	2b03      	cmp	r3, #3
 800fd8e:	d80d      	bhi.n	800fdac <_ZN11SolarGators7Drivers2UI12UpdateSquareEhRN3etl6stringILj5EEE+0x30>
  {
    first_row_[num].UpdateValue(disp, val);
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	3304      	adds	r3, #4
 800fd94:	7afa      	ldrb	r2, [r7, #11]
 800fd96:	4611      	mov	r1, r2
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f000 fe14 	bl	80109c6 <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj4EEixEj>
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	687a      	ldr	r2, [r7, #4]
 800fda4:	4619      	mov	r1, r3
 800fda6:	f7ff fe93 	bl	800fad0 <_ZN11SolarGators7Drivers10InfoSquare11UpdateValueERNS0_7ILI9341ERN3etl6stringILj5EEE>
  } else if (num < 6) {
	second_row_[num-4].UpdateValue(disp, val);
  }
}
 800fdaa:	e011      	b.n	800fdd0 <_ZN11SolarGators7Drivers2UI12UpdateSquareEhRN3etl6stringILj5EEE+0x54>
  } else if (num < 6) {
 800fdac:	7afb      	ldrb	r3, [r7, #11]
 800fdae:	2b05      	cmp	r3, #5
 800fdb0:	d80e      	bhi.n	800fdd0 <_ZN11SolarGators7Drivers2UI12UpdateSquareEhRN3etl6stringILj5EEE+0x54>
	second_row_[num-4].UpdateValue(disp, val);
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800fdb8:	7afb      	ldrb	r3, [r7, #11]
 800fdba:	3b04      	subs	r3, #4
 800fdbc:	4619      	mov	r1, r3
 800fdbe:	4610      	mov	r0, r2
 800fdc0:	f000 fe41 	bl	8010a46 <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj2EEixEj>
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	687a      	ldr	r2, [r7, #4]
 800fdca:	4619      	mov	r1, r3
 800fdcc:	f7ff fe80 	bl	800fad0 <_ZN11SolarGators7Drivers10InfoSquare11UpdateValueERNS0_7ILI9341ERN3etl6stringILj5EEE>
}
 800fdd0:	bf00      	nop
 800fdd2:	3710      	adds	r7, #16
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <_ZN11SolarGators7Drivers2UI9DrawSpeedEv>:

void UI::DrawSpeed()
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b086      	sub	sp, #24
 800fddc:	af02      	add	r7, sp, #8
 800fdde:	6078      	str	r0, [r7, #4]
  // Draw Speed
  disp.SetTextSize(3);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	2103      	movs	r1, #3
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7ff fbac 	bl	800f544 <_ZN11SolarGators7Drivers7ILI934111SetTextSizeEh>
  const char* str2 = "MPH";
 800fdec:	4b0d      	ldr	r3, [pc, #52]	; (800fe24 <_ZN11SolarGators7Drivers2UI9DrawSpeedEv+0x4c>)
 800fdee:	60fb      	str	r3, [r7, #12]
  disp.DrawText(136, 105, str2, color_neutral_);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	6818      	ldr	r0, [r3, #0]
 800fdf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fdf8:	9300      	str	r3, [sp, #0]
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	2269      	movs	r2, #105	; 0x69
 800fdfe:	2188      	movs	r1, #136	; 0x88
 800fe00:	f7ff fccc 	bl	800f79c <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>
  disp.SetTextSize(4);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	2104      	movs	r1, #4
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f7ff fb9a 	bl	800f544 <_ZN11SolarGators7Drivers7ILI934111SetTextSizeEh>
  UpdateSpeed(99.9, 0);
 800fe10:	2100      	movs	r1, #0
 800fe12:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800fe28 <_ZN11SolarGators7Drivers2UI9DrawSpeedEv+0x50>
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f000 f815 	bl	800fe46 <_ZN11SolarGators7Drivers2UI11UpdateSpeedEfh>
}
 800fe1c:	bf00      	nop
 800fe1e:	3710      	adds	r7, #16
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}
 800fe24:	08019fa4 	.word	0x08019fa4
 800fe28:	42c7cccd 	.word	0x42c7cccd

0800fe2c <_ZN3etl6stringILj4EED1Ev>:
  class string : public istring
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7f4 fac0 	bl	80043bc <_ZN3etl13ibasic_stringIcED1Ev>
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	4618      	mov	r0, r3
 800fe40:	3708      	adds	r7, #8
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd80      	pop	{r7, pc}

0800fe46 <_ZN11SolarGators7Drivers2UI11UpdateSpeedEfh>:

void UI::UpdateSpeed(float speed, uint8_t regen)
{
 800fe46:	b590      	push	{r4, r7, lr}
 800fe48:	b091      	sub	sp, #68	; 0x44
 800fe4a:	af02      	add	r7, sp, #8
 800fe4c:	60f8      	str	r0, [r7, #12]
 800fe4e:	ed87 0a02 	vstr	s0, [r7, #8]
 800fe52:	460b      	mov	r3, r1
 800fe54:	71fb      	strb	r3, [r7, #7]
	uint16_t speed_color = color_neutral_;
 800fe56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fe5a:	86fb      	strh	r3, [r7, #54]	; 0x36
	switch (regen) {
 800fe5c:	79fb      	ldrb	r3, [r7, #7]
 800fe5e:	2b03      	cmp	r3, #3
 800fe60:	d00e      	beq.n	800fe80 <_ZN11SolarGators7Drivers2UI11UpdateSpeedEfh+0x3a>
 800fe62:	2b03      	cmp	r3, #3
 800fe64:	dc10      	bgt.n	800fe88 <_ZN11SolarGators7Drivers2UI11UpdateSpeedEfh+0x42>
 800fe66:	2b01      	cmp	r3, #1
 800fe68:	d002      	beq.n	800fe70 <_ZN11SolarGators7Drivers2UI11UpdateSpeedEfh+0x2a>
 800fe6a:	2b02      	cmp	r3, #2
 800fe6c:	d004      	beq.n	800fe78 <_ZN11SolarGators7Drivers2UI11UpdateSpeedEfh+0x32>
		break;
	case 3:
		speed_color = RED;
		break;
	default:
		break;
 800fe6e:	e00b      	b.n	800fe88 <_ZN11SolarGators7Drivers2UI11UpdateSpeedEfh+0x42>
		speed_color = PINK;
 800fe70:	f64f 53ba 	movw	r3, #64954	; 0xfdba
 800fe74:	86fb      	strh	r3, [r7, #54]	; 0x36
		break;
 800fe76:	e008      	b.n	800fe8a <_ZN11SolarGators7Drivers2UI11UpdateSpeedEfh+0x44>
		speed_color = MAGENTA;
 800fe78:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800fe7c:	86fb      	strh	r3, [r7, #54]	; 0x36
		break;
 800fe7e:	e004      	b.n	800fe8a <_ZN11SolarGators7Drivers2UI11UpdateSpeedEfh+0x44>
		speed_color = RED;
 800fe80:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800fe84:	86fb      	strh	r3, [r7, #54]	; 0x36
		break;
 800fe86:	e000      	b.n	800fe8a <_ZN11SolarGators7Drivers2UI11UpdateSpeedEfh+0x44>
		break;
 800fe88:	bf00      	nop
	}
  // Draw Speed
  disp.SetTextSize(5);
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	2105      	movs	r1, #5
 800fe90:	4618      	mov	r0, r3
 800fe92:	f7ff fb57 	bl	800f544 <_ZN11SolarGators7Drivers7ILI934111SetTextSizeEh>
  etl::string<4> s_speed;
 800fe96:	f107 0314 	add.w	r3, r7, #20
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f000 fde5 	bl	8010a6a <_ZN3etl6stringILj4EEC1Ev>
  etl::to_string(speed, s_speed, etl::format_spec().precision(1).width(4).fill(0), false);
 800fea0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fea4:	4618      	mov	r0, r3
 800fea6:	f000 fdf4 	bl	8010a92 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEEC1Ev>
 800feaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800feae:	2101      	movs	r1, #1
 800feb0:	4618      	mov	r0, r3
 800feb2:	f7f4 fe4b 	bl	8004b4c <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE9precisionEm>
 800feb6:	4603      	mov	r3, r0
 800feb8:	2104      	movs	r1, #4
 800feba:	4618      	mov	r0, r3
 800febc:	f7f5 f909 	bl	80050d2 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE5widthEm>
 800fec0:	4603      	mov	r3, r0
 800fec2:	2100      	movs	r1, #0
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7f5 f914 	bl	80050f2 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE4fillEc>
 800feca:	4601      	mov	r1, r0
 800fecc:	f107 0314 	add.w	r3, r7, #20
 800fed0:	2200      	movs	r2, #0
 800fed2:	4618      	mov	r0, r3
 800fed4:	ed97 0a02 	vldr	s0, [r7, #8]
 800fed8:	f7f4 fb3d 	bl	8004556 <_ZN3etl9to_stringIfEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>
  disp.DrawText(105, 60, s_speed.c_str(), speed_color);
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	681c      	ldr	r4, [r3, #0]
 800fee0:	f107 0314 	add.w	r3, r7, #20
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7f4 fb72 	bl	80045ce <_ZNK3etl13ibasic_stringIcE5c_strEv>
 800feea:	4602      	mov	r2, r0
 800feec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800feee:	9300      	str	r3, [sp, #0]
 800fef0:	4613      	mov	r3, r2
 800fef2:	223c      	movs	r2, #60	; 0x3c
 800fef4:	2169      	movs	r1, #105	; 0x69
 800fef6:	4620      	mov	r0, r4
 800fef8:	f7ff fc50 	bl	800f79c <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>
  etl::string<4> s_speed;
 800fefc:	f107 0314 	add.w	r3, r7, #20
 800ff00:	4618      	mov	r0, r3
 800ff02:	f7ff ff93 	bl	800fe2c <_ZN3etl6stringILj4EED1Ev>
}
 800ff06:	bf00      	nop
 800ff08:	373c      	adds	r7, #60	; 0x3c
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd90      	pop	{r4, r7, pc}

0800ff0e <_ZN3etl6stringILj40EED1Ev>:
 800ff0e:	b580      	push	{r7, lr}
 800ff10:	b082      	sub	sp, #8
 800ff12:	af00      	add	r7, sp, #0
 800ff14:	6078      	str	r0, [r7, #4]
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f7f4 fa4f 	bl	80043bc <_ZN3etl13ibasic_stringIcED1Ev>
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	4618      	mov	r0, r3
 800ff22:	3708      	adds	r7, #8
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}

0800ff28 <_ZN11SolarGators7Drivers2UI13UpdateBMSTripEPNS_11DataModules11OrionBMSRx4E>:

void UI::UpdateBMSTrip(SolarGators::DataModules::OrionBMSRx4* bmsCodes) {
 800ff28:	b590      	push	{r4, r7, lr}
 800ff2a:	b0b3      	sub	sp, #204	; 0xcc
 800ff2c:	af02      	add	r7, sp, #8
 800ff2e:	6078      	str	r0, [r7, #4]
 800ff30:	6039      	str	r1, [r7, #0]
	// BMS Trip Codes
	const char* bms_faults_messages[] = {
 800ff32:	4a78      	ldr	r2, [pc, #480]	; (8010114 <_ZN11SolarGators7Drivers2UI13UpdateBMSTripEPNS_11DataModules11OrionBMSRx4E+0x1ec>)
 800ff34:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ff38:	4611      	mov	r1, r2
 800ff3a:	225c      	movs	r2, #92	; 0x5c
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f008 f8f7 	bl	8018130 <memcpy>
		"Highest Cell Voltage Too High",
		"Lowest Cell Voltage Too Low",
		"Pack Too Hot"
	};

	bool bms_faults_values[24] = {
 800ff42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ff46:	2200      	movs	r2, #0
 800ff48:	601a      	str	r2, [r3, #0]
 800ff4a:	605a      	str	r2, [r3, #4]
 800ff4c:	609a      	str	r2, [r3, #8]
 800ff4e:	60da      	str	r2, [r3, #12]
 800ff50:	611a      	str	r2, [r3, #16]
 800ff52:	615a      	str	r2, [r3, #20]
		bmsCodes->isInternalCellCommunicationFault(),
 800ff54:	6838      	ldr	r0, [r7, #0]
 800ff56:	f7fa ffd8 	bl	800af0a <_ZNK11SolarGators11DataModules11OrionBMSRx432isInternalCellCommunicationFaultEv>
 800ff5a:	4603      	mov	r3, r0
		bmsCodes->isInternalHeatsinkThermistorFault(),
		bmsCodes->isInternalLogicFault(),
		bmsCodes->isHighestCellVoltageTooHighFault(),
		bmsCodes->isLowestCellVoltageTooLowFault(),
		bmsCodes->isPackTooHotFault()
	};
 800ff5c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		bmsCodes->isCellBalancingStuckOffFault(),
 800ff60:	6838      	ldr	r0, [r7, #0]
 800ff62:	f7fa ff43 	bl	800adec <_ZNK11SolarGators11DataModules11OrionBMSRx428isCellBalancingStuckOffFaultEv>
 800ff66:	4603      	mov	r3, r0
	};
 800ff68:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
		bmsCodes->isWeakCellFault(),
 800ff6c:	6838      	ldr	r0, [r7, #0]
 800ff6e:	f7fb f841 	bl	800aff4 <_ZNK11SolarGators11DataModules11OrionBMSRx415isWeakCellFaultEv>
 800ff72:	4603      	mov	r3, r0
	};
 800ff74:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
		bmsCodes->isLowCellVoltageFault(),
 800ff78:	6838      	ldr	r0, [r7, #0]
 800ff7a:	f7fb f807 	bl	800af8c <_ZNK11SolarGators11DataModules11OrionBMSRx421isLowCellVoltageFaultEv>
 800ff7e:	4603      	mov	r3, r0
	};
 800ff80:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		bmsCodes->isCellOpenWiringFault(),
 800ff84:	6838      	ldr	r0, [r7, #0]
 800ff86:	f7fa ff4b 	bl	800ae20 <_ZNK11SolarGators11DataModules11OrionBMSRx421isCellOpenWiringFaultEv>
 800ff8a:	4603      	mov	r3, r0
	};
 800ff8c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		bmsCodes->isCurrentSensorFault(),
 800ff90:	6838      	ldr	r0, [r7, #0]
 800ff92:	f7fa ff79 	bl	800ae88 <_ZNK11SolarGators11DataModules11OrionBMSRx420isCurrentSensorFaultEv>
 800ff96:	4603      	mov	r3, r0
	};
 800ff98:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		bmsCodes->isCellVoltageOver5vFault(),
 800ff9c:	6838      	ldr	r0, [r7, #0]
 800ff9e:	f7fa ff4c 	bl	800ae3a <_ZNK11SolarGators11DataModules11OrionBMSRx424isCellVoltageOver5vFaultEv>
 800ffa2:	4603      	mov	r3, r0
	};
 800ffa4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		bmsCodes->isCellBankFault(),
 800ffa8:	6838      	ldr	r0, [r7, #0]
 800ffaa:	f7fa ff2c 	bl	800ae06 <_ZNK11SolarGators11DataModules11OrionBMSRx415isCellBankFaultEv>
 800ffae:	4603      	mov	r3, r0
	};
 800ffb0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		bmsCodes->isWeakPackFault(),
 800ffb4:	6838      	ldr	r0, [r7, #0]
 800ffb6:	f7fb f82a 	bl	800b00e <_ZNK11SolarGators11DataModules11OrionBMSRx415isWeakPackFaultEv>
 800ffba:	4603      	mov	r3, r0
	};
 800ffbc:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
		bmsCodes->isFanMonitorFault(),
 800ffc0:	6838      	ldr	r0, [r7, #0]
 800ffc2:	f7fa ff7b 	bl	800aebc <_ZNK11SolarGators11DataModules11OrionBMSRx417isFanMonitorFaultEv>
 800ffc6:	4603      	mov	r3, r0
	};
 800ffc8:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
		bmsCodes->isCanCommunicationFault(),
 800ffcc:	6838      	ldr	r0, [r7, #0]
 800ffce:	f7fa ff00 	bl	800add2 <_ZNK11SolarGators11DataModules11OrionBMSRx423isCanCommunicationFaultEv>
 800ffd2:	4603      	mov	r3, r0
	};
 800ffd4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
		bmsCodes->isRedundantPowerSupplyFault(),
 800ffd8:	6838      	ldr	r0, [r7, #0]
 800ffda:	f7fa fffe 	bl	800afda <_ZNK11SolarGators11DataModules11OrionBMSRx427isRedundantPowerSupplyFaultEv>
 800ffde:	4603      	mov	r3, r0
	};
 800ffe0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		bmsCodes->isHighVoltageIsolationFault(),
 800ffe4:	6838      	ldr	r0, [r7, #0]
 800ffe6:	f7fa ff76 	bl	800aed6 <_ZNK11SolarGators11DataModules11OrionBMSRx427isHighVoltageIsolationFaultEv>
 800ffea:	4603      	mov	r3, r0
	};
 800ffec:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
		bmsCodes->isInvalidInputSupplyVoltageFault(),
 800fff0:	6838      	ldr	r0, [r7, #0]
 800fff2:	f7fa ffbe 	bl	800af72 <_ZNK11SolarGators11DataModules11OrionBMSRx432isInvalidInputSupplyVoltageFaultEv>
 800fff6:	4603      	mov	r3, r0
	};
 800fff8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
		bmsCodes->isChargeenableRelayFault(),
 800fffc:	6838      	ldr	r0, [r7, #0]
 800fffe:	f7fa ff29 	bl	800ae54 <_ZNK11SolarGators11DataModules11OrionBMSRx424isChargeenableRelayFaultEv>
 8010002:	4603      	mov	r3, r0
	};
 8010004:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		bmsCodes->isDischargeenableRelayFault(),
 8010008:	6838      	ldr	r0, [r7, #0]
 801000a:	f7fa ff4a 	bl	800aea2 <_ZNK11SolarGators11DataModules11OrionBMSRx427isDischargeenableRelayFaultEv>
 801000e:	4603      	mov	r3, r0
	};
 8010010:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		bmsCodes->isChargerSafetyRelayFault(),
 8010014:	6838      	ldr	r0, [r7, #0]
 8010016:	f7fa ff2a 	bl	800ae6e <_ZNK11SolarGators11DataModules11OrionBMSRx425isChargerSafetyRelayFaultEv>
 801001a:	4603      	mov	r3, r0
	};
 801001c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		bmsCodes->isInternalHardwareFault(),
 8010020:	6838      	ldr	r0, [r7, #0]
 8010022:	f7fa ff7f 	bl	800af24 <_ZNK11SolarGators11DataModules11OrionBMSRx423isInternalHardwareFaultEv>
 8010026:	4603      	mov	r3, r0
	};
 8010028:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		bmsCodes->isInternalHeatsinkThermistorFault(),
 801002c:	6838      	ldr	r0, [r7, #0]
 801002e:	f7fa ff86 	bl	800af3e <_ZNK11SolarGators11DataModules11OrionBMSRx433isInternalHeatsinkThermistorFaultEv>
 8010032:	4603      	mov	r3, r0
	};
 8010034:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		bmsCodes->isInternalLogicFault(),
 8010038:	6838      	ldr	r0, [r7, #0]
 801003a:	f7fa ff8d 	bl	800af58 <_ZNK11SolarGators11DataModules11OrionBMSRx420isInternalLogicFaultEv>
 801003e:	4603      	mov	r3, r0
	};
 8010040:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		bmsCodes->isHighestCellVoltageTooHighFault(),
 8010044:	6838      	ldr	r0, [r7, #0]
 8010046:	f7fa ff53 	bl	800aef0 <_ZNK11SolarGators11DataModules11OrionBMSRx432isHighestCellVoltageTooHighFaultEv>
 801004a:	4603      	mov	r3, r0
	};
 801004c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
		bmsCodes->isLowestCellVoltageTooLowFault(),
 8010050:	6838      	ldr	r0, [r7, #0]
 8010052:	f7fa ffa8 	bl	800afa6 <_ZNK11SolarGators11DataModules11OrionBMSRx430isLowestCellVoltageTooLowFaultEv>
 8010056:	4603      	mov	r3, r0
	};
 8010058:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		bmsCodes->isPackTooHotFault()
 801005c:	6838      	ldr	r0, [r7, #0]
 801005e:	f7fa ffaf 	bl	800afc0 <_ZNK11SolarGators11DataModules11OrionBMSRx417isPackTooHotFaultEv>
 8010062:	4603      	mov	r3, r0
	};
 8010064:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	disp.SetTextSize(2);
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	2102      	movs	r1, #2
 801006e:	4618      	mov	r0, r3
 8010070:	f7ff fa68 	bl	800f544 <_ZN11SolarGators7Drivers7ILI934111SetTextSizeEh>

	//Get the first trip in the list
	etl::string<40> bms_fault = nullptr;
 8010074:	f107 030c 	add.w	r3, r7, #12
 8010078:	2100      	movs	r1, #0
 801007a:	4618      	mov	r0, r3
 801007c:	f000 fd2c 	bl	8010ad8 <_ZN3etl6stringILj40EEC1EPKc>
	for (int i = 0; i < 24; i++) {
 8010080:	2300      	movs	r3, #0
 8010082:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010086:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801008a:	2b17      	cmp	r3, #23
 801008c:	dc1b      	bgt.n	80100c6 <_ZN11SolarGators7Drivers2UI13UpdateBMSTripEPNS_11DataModules11OrionBMSRx4E+0x19e>
		if (bms_faults_values[i]) {
 801008e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010092:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010096:	4413      	add	r3, r2
 8010098:	781b      	ldrb	r3, [r3, #0]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d00d      	beq.n	80100ba <_ZN11SolarGators7Drivers2UI13UpdateBMSTripEPNS_11DataModules11OrionBMSRx4E+0x192>
			bms_fault = bms_faults_messages[i];
 801009e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80100a2:	009b      	lsls	r3, r3, #2
 80100a4:	33c0      	adds	r3, #192	; 0xc0
 80100a6:	443b      	add	r3, r7
 80100a8:	f853 2c60 	ldr.w	r2, [r3, #-96]
 80100ac:	f107 030c 	add.w	r3, r7, #12
 80100b0:	4611      	mov	r1, r2
 80100b2:	4618      	mov	r0, r3
 80100b4:	f000 fd2d 	bl	8010b12 <_ZN3etl6stringILj40EEaSEPKc>
			break;
 80100b8:	e005      	b.n	80100c6 <_ZN11SolarGators7Drivers2UI13UpdateBMSTripEPNS_11DataModules11OrionBMSRx4E+0x19e>
	for (int i = 0; i < 24; i++) {
 80100ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80100be:	3301      	adds	r3, #1
 80100c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80100c4:	e7df      	b.n	8010086 <_ZN11SolarGators7Drivers2UI13UpdateBMSTripEPNS_11DataModules11OrionBMSRx4E+0x15e>
		}
	}


    if(bms_fault.size() != 0)
 80100c6:	f107 030c 	add.w	r3, r7, #12
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7ff fc83 	bl	800f9d6 <_ZNK3etl11string_base4sizeEv>
 80100d0:	4603      	mov	r3, r0
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	bf14      	ite	ne
 80100d6:	2301      	movne	r3, #1
 80100d8:	2300      	moveq	r3, #0
 80100da:	b2db      	uxtb	r3, r3
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d00f      	beq.n	8010100 <_ZN11SolarGators7Drivers2UI13UpdateBMSTripEPNS_11DataModules11OrionBMSRx4E+0x1d8>
    {
        disp.DrawText(0, 133, bms_fault.c_str(), color_fail_);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681c      	ldr	r4, [r3, #0]
 80100e4:	f107 030c 	add.w	r3, r7, #12
 80100e8:	4618      	mov	r0, r3
 80100ea:	f7f4 fa70 	bl	80045ce <_ZNK3etl13ibasic_stringIcE5c_strEv>
 80100ee:	4603      	mov	r3, r0
 80100f0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80100f4:	9200      	str	r2, [sp, #0]
 80100f6:	2285      	movs	r2, #133	; 0x85
 80100f8:	2100      	movs	r1, #0
 80100fa:	4620      	mov	r0, r4
 80100fc:	f7ff fb4e 	bl	800f79c <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>
	etl::string<40> bms_fault = nullptr;
 8010100:	f107 030c 	add.w	r3, r7, #12
 8010104:	4618      	mov	r0, r3
 8010106:	f7ff ff02 	bl	800ff0e <_ZN3etl6stringILj40EED1Ev>
    }

}
 801010a:	bf00      	nop
 801010c:	37c4      	adds	r7, #196	; 0xc4
 801010e:	46bd      	mov	sp, r7
 8010110:	bd90      	pop	{r4, r7, pc}
 8010112:	bf00      	nop
 8010114:	08019fa8 	.word	0x08019fa8

08010118 <_ZN11SolarGators7Drivers2UI17UpdateMitsubaTripEPNS_11DataModules10MitsubaRx2E>:

void UI::UpdateMitsubaTrip(SolarGators::DataModules::MitsubaRx2* mitsubaCodes) {
 8010118:	b580      	push	{r7, lr}
 801011a:	b09e      	sub	sp, #120	; 0x78
 801011c:	af02      	add	r7, sp, #8
 801011e:	6078      	str	r0, [r7, #4]
 8010120:	6039      	str	r1, [r7, #0]
	// Mitsuba Trip Codes
	const char* mitsuba_faults_messages[] = {
 8010122:	4a4b      	ldr	r2, [pc, #300]	; (8010250 <_ZN11SolarGators7Drivers2UI17UpdateMitsubaTripEPNS_11DataModules10MitsubaRx2E+0x138>)
 8010124:	f107 0320 	add.w	r3, r7, #32
 8010128:	4611      	mov	r1, r2
 801012a:	2248      	movs	r2, #72	; 0x48
 801012c:	4618      	mov	r0, r3
 801012e:	f007 ffff 	bl	8018130 <memcpy>
	  "Motor System Error",
	  "Motor Lock",
	  "Hall Sensor Short",
	  "Hall Sensor Open"
	};
	bool mitsuba_faults_values[18] = {
 8010132:	f107 030c 	add.w	r3, r7, #12
 8010136:	2200      	movs	r2, #0
 8010138:	601a      	str	r2, [r3, #0]
 801013a:	605a      	str	r2, [r3, #4]
 801013c:	609a      	str	r2, [r3, #8]
 801013e:	60da      	str	r2, [r3, #12]
 8010140:	821a      	strh	r2, [r3, #16]
			mitsubaCodes->GetAdSensorError(),
 8010142:	6838      	ldr	r0, [r7, #0]
 8010144:	f7f9 fdb2 	bl	8009cac <_ZNK11SolarGators11DataModules10MitsubaRx216GetAdSensorErrorEv>
 8010148:	4603      	mov	r3, r0
			mitsubaCodes->GetOverVoltError(),
			mitsubaCodes->GetOverCurrLimit(),
			mitsubaCodes->GetMotorSystemError(),
			mitsubaCodes->GetMotorLock(),
			mitsubaCodes->GetHallSensorShort()
	};
 801014a:	733b      	strb	r3, [r7, #12]
			mitsubaCodes->GetMotorSensorUError(),
 801014c:	6838      	ldr	r0, [r7, #0]
 801014e:	f7f9 fdba 	bl	8009cc6 <_ZNK11SolarGators11DataModules10MitsubaRx220GetMotorSensorUErrorEv>
 8010152:	4603      	mov	r3, r0
	};
 8010154:	737b      	strb	r3, [r7, #13]
			mitsubaCodes->GetMotorCurrSensorWError(),
 8010156:	6838      	ldr	r0, [r7, #0]
 8010158:	f7f9 fdc2 	bl	8009ce0 <_ZNK11SolarGators11DataModules10MitsubaRx224GetMotorCurrSensorWErrorEv>
 801015c:	4603      	mov	r3, r0
	};
 801015e:	73bb      	strb	r3, [r7, #14]
			mitsubaCodes->GetFetThermError(),
 8010160:	6838      	ldr	r0, [r7, #0]
 8010162:	f7f9 fdca 	bl	8009cfa <_ZNK11SolarGators11DataModules10MitsubaRx216GetFetThermErrorEv>
 8010166:	4603      	mov	r3, r0
	};
 8010168:	73fb      	strb	r3, [r7, #15]
			mitsubaCodes->GetBattVoltSensorError(),
 801016a:	6838      	ldr	r0, [r7, #0]
 801016c:	f7f9 fdd2 	bl	8009d14 <_ZNK11SolarGators11DataModules10MitsubaRx222GetBattVoltSensorErrorEv>
 8010170:	4603      	mov	r3, r0
	};
 8010172:	743b      	strb	r3, [r7, #16]
			mitsubaCodes->GetBattCurrSensorError(),
 8010174:	6838      	ldr	r0, [r7, #0]
 8010176:	f7f9 fdda 	bl	8009d2e <_ZNK11SolarGators11DataModules10MitsubaRx222GetBattCurrSensorErrorEv>
 801017a:	4603      	mov	r3, r0
	};
 801017c:	747b      	strb	r3, [r7, #17]
			mitsubaCodes->GetBattCurrSensorAdjError(),
 801017e:	6838      	ldr	r0, [r7, #0]
 8010180:	f7f9 fde2 	bl	8009d48 <_ZNK11SolarGators11DataModules10MitsubaRx225GetBattCurrSensorAdjErrorEv>
 8010184:	4603      	mov	r3, r0
	};
 8010186:	74bb      	strb	r3, [r7, #18]
			mitsubaCodes->GetMotorCurrSensorAdjError(),
 8010188:	6838      	ldr	r0, [r7, #0]
 801018a:	f7f9 fdea 	bl	8009d62 <_ZNK11SolarGators11DataModules10MitsubaRx226GetMotorCurrSensorAdjErrorEv>
 801018e:	4603      	mov	r3, r0
	};
 8010190:	74fb      	strb	r3, [r7, #19]
			mitsubaCodes->GetAccelPosError(),
 8010192:	6838      	ldr	r0, [r7, #0]
 8010194:	f7f9 fdf2 	bl	8009d7c <_ZNK11SolarGators11DataModules10MitsubaRx216GetAccelPosErrorEv>
 8010198:	4603      	mov	r3, r0
	};
 801019a:	753b      	strb	r3, [r7, #20]
			mitsubaCodes->GetContVoltSensorError(),
 801019c:	6838      	ldr	r0, [r7, #0]
 801019e:	f7f9 fdfa 	bl	8009d96 <_ZNK11SolarGators11DataModules10MitsubaRx222GetContVoltSensorErrorEv>
 80101a2:	4603      	mov	r3, r0
	};
 80101a4:	757b      	strb	r3, [r7, #21]
			mitsubaCodes->GetPowerSystemError(),
 80101a6:	6838      	ldr	r0, [r7, #0]
 80101a8:	f7f9 fe02 	bl	8009db0 <_ZNK11SolarGators11DataModules10MitsubaRx219GetPowerSystemErrorEv>
 80101ac:	4603      	mov	r3, r0
	};
 80101ae:	75bb      	strb	r3, [r7, #22]
			mitsubaCodes->GetOverCurrError(),
 80101b0:	6838      	ldr	r0, [r7, #0]
 80101b2:	f7f9 fe0a 	bl	8009dca <_ZNK11SolarGators11DataModules10MitsubaRx216GetOverCurrErrorEv>
 80101b6:	4603      	mov	r3, r0
	};
 80101b8:	75fb      	strb	r3, [r7, #23]
			mitsubaCodes->GetOverVoltError(),
 80101ba:	6838      	ldr	r0, [r7, #0]
 80101bc:	f7f9 fe12 	bl	8009de4 <_ZNK11SolarGators11DataModules10MitsubaRx216GetOverVoltErrorEv>
 80101c0:	4603      	mov	r3, r0
	};
 80101c2:	763b      	strb	r3, [r7, #24]
			mitsubaCodes->GetOverCurrLimit(),
 80101c4:	6838      	ldr	r0, [r7, #0]
 80101c6:	f7f9 fe1a 	bl	8009dfe <_ZNK11SolarGators11DataModules10MitsubaRx216GetOverCurrLimitEv>
 80101ca:	4603      	mov	r3, r0
	};
 80101cc:	767b      	strb	r3, [r7, #25]
			mitsubaCodes->GetMotorSystemError(),
 80101ce:	6838      	ldr	r0, [r7, #0]
 80101d0:	f7f9 fe22 	bl	8009e18 <_ZNK11SolarGators11DataModules10MitsubaRx219GetMotorSystemErrorEv>
 80101d4:	4603      	mov	r3, r0
	};
 80101d6:	76bb      	strb	r3, [r7, #26]
			mitsubaCodes->GetMotorLock(),
 80101d8:	6838      	ldr	r0, [r7, #0]
 80101da:	f7f9 fe2a 	bl	8009e32 <_ZNK11SolarGators11DataModules10MitsubaRx212GetMotorLockEv>
 80101de:	4603      	mov	r3, r0
	};
 80101e0:	76fb      	strb	r3, [r7, #27]
			mitsubaCodes->GetHallSensorShort()
 80101e2:	6838      	ldr	r0, [r7, #0]
 80101e4:	f7f9 fe32 	bl	8009e4c <_ZNK11SolarGators11DataModules10MitsubaRx218GetHallSensorShortEv>
 80101e8:	4603      	mov	r3, r0
	};
 80101ea:	773b      	strb	r3, [r7, #28]
	disp.SetTextSize(2);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	2102      	movs	r1, #2
 80101f2:	4618      	mov	r0, r3
 80101f4:	f7ff f9a6 	bl	800f544 <_ZN11SolarGators7Drivers7ILI934111SetTextSizeEh>
	//Get the first trip in the list
	const char* mitsuba_fault = nullptr;
 80101f8:	2300      	movs	r3, #0
 80101fa:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; i < 18; i++) {
 80101fc:	2300      	movs	r3, #0
 80101fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8010200:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010202:	2b11      	cmp	r3, #17
 8010204:	dc12      	bgt.n	801022c <_ZN11SolarGators7Drivers2UI17UpdateMitsubaTripEPNS_11DataModules10MitsubaRx2E+0x114>
		if (mitsuba_faults_values[i]) {
 8010206:	f107 020c 	add.w	r2, r7, #12
 801020a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801020c:	4413      	add	r3, r2
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d007      	beq.n	8010224 <_ZN11SolarGators7Drivers2UI17UpdateMitsubaTripEPNS_11DataModules10MitsubaRx2E+0x10c>
			mitsuba_fault = mitsuba_faults_messages[i];
 8010214:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010216:	009b      	lsls	r3, r3, #2
 8010218:	3370      	adds	r3, #112	; 0x70
 801021a:	443b      	add	r3, r7
 801021c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8010220:	66fb      	str	r3, [r7, #108]	; 0x6c
			break;
 8010222:	e003      	b.n	801022c <_ZN11SolarGators7Drivers2UI17UpdateMitsubaTripEPNS_11DataModules10MitsubaRx2E+0x114>
	for (int i = 0; i < 18; i++) {
 8010224:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010226:	3301      	adds	r3, #1
 8010228:	66bb      	str	r3, [r7, #104]	; 0x68
 801022a:	e7e9      	b.n	8010200 <_ZN11SolarGators7Drivers2UI17UpdateMitsubaTripEPNS_11DataModules10MitsubaRx2E+0xe8>
		}
	}

	if(mitsuba_fault != nullptr) {
 801022c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801022e:	2b00      	cmp	r3, #0
 8010230:	d009      	beq.n	8010246 <_ZN11SolarGators7Drivers2UI17UpdateMitsubaTripEPNS_11DataModules10MitsubaRx2E+0x12e>
		// mitsuba_fault
		disp.DrawText(0, 166, mitsuba_fault, color_fail_);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6818      	ldr	r0, [r3, #0]
 8010236:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801023a:	9300      	str	r3, [sp, #0]
 801023c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801023e:	22a6      	movs	r2, #166	; 0xa6
 8010240:	2100      	movs	r1, #0
 8010242:	f7ff faab 	bl	800f79c <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>
	}
}
 8010246:	bf00      	nop
 8010248:	3770      	adds	r7, #112	; 0x70
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}
 801024e:	bf00      	nop
 8010250:	0801a004 	.word	0x0801a004

08010254 <_ZN11SolarGators7Drivers2UI15ClearIndicatorsEv>:
    disp.SetTextSize(2);
    disp.DrawText(0, 120, "BMS Status: ", color_neutral_);
    disp.DrawText(0, 180, "MC Status: ", color_neutral_);
}

void UI::ClearIndicators() {
 8010254:	b580      	push	{r7, lr}
 8010256:	b084      	sub	sp, #16
 8010258:	af02      	add	r7, sp, #8
 801025a:	6078      	str	r0, [r7, #4]
	disp.SetTextSize(6);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	2106      	movs	r1, #6
 8010262:	4618      	mov	r0, r3
 8010264:	f7ff f96e 	bl	800f544 <_ZN11SolarGators7Drivers7ILI934111SetTextSizeEh>
	disp.DrawText(20, 5, " ", GREEN);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6818      	ldr	r0, [r3, #0]
 801026c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8010270:	9300      	str	r3, [sp, #0]
 8010272:	4b0a      	ldr	r3, [pc, #40]	; (801029c <_ZN11SolarGators7Drivers2UI15ClearIndicatorsEv+0x48>)
 8010274:	2205      	movs	r2, #5
 8010276:	2114      	movs	r1, #20
 8010278:	f7ff fa90 	bl	800f79c <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>
	disp.DrawText(267, 5, " ", GREEN);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6818      	ldr	r0, [r3, #0]
 8010280:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8010284:	9300      	str	r3, [sp, #0]
 8010286:	4b05      	ldr	r3, [pc, #20]	; (801029c <_ZN11SolarGators7Drivers2UI15ClearIndicatorsEv+0x48>)
 8010288:	2205      	movs	r2, #5
 801028a:	f240 110b 	movw	r1, #267	; 0x10b
 801028e:	f7ff fa85 	bl	800f79c <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>
}
 8010292:	bf00      	nop
 8010294:	3708      	adds	r7, #8
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
 801029a:	bf00      	nop
 801029c:	0801a068 	.word	0x0801a068

080102a0 <_ZN11SolarGators7Drivers2UI11SetLeftTurnEv>:

void UI::SetLeftTurn() {
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b084      	sub	sp, #16
 80102a4:	af02      	add	r7, sp, #8
 80102a6:	6078      	str	r0, [r7, #4]
	disp.SetTextSize(6);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	2106      	movs	r1, #6
 80102ae:	4618      	mov	r0, r3
 80102b0:	f7ff f948 	bl	800f544 <_ZN11SolarGators7Drivers7ILI934111SetTextSizeEh>
	disp.DrawText(20, 5, "<", GREEN);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	6818      	ldr	r0, [r3, #0]
 80102b8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80102bc:	9300      	str	r3, [sp, #0]
 80102be:	4b04      	ldr	r3, [pc, #16]	; (80102d0 <_ZN11SolarGators7Drivers2UI11SetLeftTurnEv+0x30>)
 80102c0:	2205      	movs	r2, #5
 80102c2:	2114      	movs	r1, #20
 80102c4:	f7ff fa6a 	bl	800f79c <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>
}
 80102c8:	bf00      	nop
 80102ca:	3708      	adds	r7, #8
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}
 80102d0:	0801a06c 	.word	0x0801a06c

080102d4 <_ZN11SolarGators7Drivers2UI12SetRightTurnEv>:

void UI::SetRightTurn() {
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b084      	sub	sp, #16
 80102d8:	af02      	add	r7, sp, #8
 80102da:	6078      	str	r0, [r7, #4]
	disp.SetTextSize(6);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	2106      	movs	r1, #6
 80102e2:	4618      	mov	r0, r3
 80102e4:	f7ff f92e 	bl	800f544 <_ZN11SolarGators7Drivers7ILI934111SetTextSizeEh>
	disp.DrawText(267, 5, ">", GREEN);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6818      	ldr	r0, [r3, #0]
 80102ec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80102f0:	9300      	str	r3, [sp, #0]
 80102f2:	4b05      	ldr	r3, [pc, #20]	; (8010308 <_ZN11SolarGators7Drivers2UI12SetRightTurnEv+0x34>)
 80102f4:	2205      	movs	r2, #5
 80102f6:	f240 110b 	movw	r1, #267	; 0x10b
 80102fa:	f7ff fa4f 	bl	800f79c <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>
}
 80102fe:	bf00      	nop
 8010300:	3708      	adds	r7, #8
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}
 8010306:	bf00      	nop
 8010308:	0801a070 	.word	0x0801a070

0801030c <_ZN11SolarGators7Drivers2UI10SetHazardsEv>:

void UI::SetHazards() {
 801030c:	b580      	push	{r7, lr}
 801030e:	b084      	sub	sp, #16
 8010310:	af02      	add	r7, sp, #8
 8010312:	6078      	str	r0, [r7, #4]
	disp.SetTextSize(6);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	2106      	movs	r1, #6
 801031a:	4618      	mov	r0, r3
 801031c:	f7ff f912 	bl	800f544 <_ZN11SolarGators7Drivers7ILI934111SetTextSizeEh>
	disp.DrawText(20, 5, "<", GREEN);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6818      	ldr	r0, [r3, #0]
 8010324:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8010328:	9300      	str	r3, [sp, #0]
 801032a:	4b0a      	ldr	r3, [pc, #40]	; (8010354 <_ZN11SolarGators7Drivers2UI10SetHazardsEv+0x48>)
 801032c:	2205      	movs	r2, #5
 801032e:	2114      	movs	r1, #20
 8010330:	f7ff fa34 	bl	800f79c <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>
	disp.DrawText(267, 5, ">", GREEN);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6818      	ldr	r0, [r3, #0]
 8010338:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 801033c:	9300      	str	r3, [sp, #0]
 801033e:	4b06      	ldr	r3, [pc, #24]	; (8010358 <_ZN11SolarGators7Drivers2UI10SetHazardsEv+0x4c>)
 8010340:	2205      	movs	r2, #5
 8010342:	f240 110b 	movw	r1, #267	; 0x10b
 8010346:	f7ff fa29 	bl	800f79c <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>
}
 801034a:	bf00      	nop
 801034c:	3708      	adds	r7, #8
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}
 8010352:	bf00      	nop
 8010354:	0801a06c 	.word	0x0801a06c
 8010358:	0801a070 	.word	0x0801a070

0801035c <_ZN11SolarGators7Drivers2UI13SetHeadlightsEv>:

void UI::SetHeadlights() {
 801035c:	b580      	push	{r7, lr}
 801035e:	b084      	sub	sp, #16
 8010360:	af02      	add	r7, sp, #8
 8010362:	6078      	str	r0, [r7, #4]
	disp.FillRect(30, 65, 12, 12, GREEN);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6818      	ldr	r0, [r3, #0]
 8010368:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 801036c:	9301      	str	r3, [sp, #4]
 801036e:	230c      	movs	r3, #12
 8010370:	9300      	str	r3, [sp, #0]
 8010372:	230c      	movs	r3, #12
 8010374:	2241      	movs	r2, #65	; 0x41
 8010376:	211e      	movs	r1, #30
 8010378:	f7ff fab4 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.FillRect(50, 65, 12, 12, GREEN);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6818      	ldr	r0, [r3, #0]
 8010380:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8010384:	9301      	str	r3, [sp, #4]
 8010386:	230c      	movs	r3, #12
 8010388:	9300      	str	r3, [sp, #0]
 801038a:	230c      	movs	r3, #12
 801038c:	2241      	movs	r2, #65	; 0x41
 801038e:	2132      	movs	r1, #50	; 0x32
 8010390:	f7ff faa8 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.FillRect(70, 62, 15, 3, GREEN);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	6818      	ldr	r0, [r3, #0]
 8010398:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 801039c:	9301      	str	r3, [sp, #4]
 801039e:	2303      	movs	r3, #3
 80103a0:	9300      	str	r3, [sp, #0]
 80103a2:	230f      	movs	r3, #15
 80103a4:	223e      	movs	r2, #62	; 0x3e
 80103a6:	2146      	movs	r1, #70	; 0x46
 80103a8:	f7ff fa9c 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.FillRect(70, 70, 15, 3, GREEN);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6818      	ldr	r0, [r3, #0]
 80103b0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80103b4:	9301      	str	r3, [sp, #4]
 80103b6:	2303      	movs	r3, #3
 80103b8:	9300      	str	r3, [sp, #0]
 80103ba:	230f      	movs	r3, #15
 80103bc:	2246      	movs	r2, #70	; 0x46
 80103be:	2146      	movs	r1, #70	; 0x46
 80103c0:	f7ff fa90 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.FillRect(70, 77, 15, 3, GREEN);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6818      	ldr	r0, [r3, #0]
 80103c8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80103cc:	9301      	str	r3, [sp, #4]
 80103ce:	2303      	movs	r3, #3
 80103d0:	9300      	str	r3, [sp, #0]
 80103d2:	230f      	movs	r3, #15
 80103d4:	224d      	movs	r2, #77	; 0x4d
 80103d6:	2146      	movs	r1, #70	; 0x46
 80103d8:	f7ff fa84 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.FillRect(7, 62, 15, 3, GREEN);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6818      	ldr	r0, [r3, #0]
 80103e0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80103e4:	9301      	str	r3, [sp, #4]
 80103e6:	2303      	movs	r3, #3
 80103e8:	9300      	str	r3, [sp, #0]
 80103ea:	230f      	movs	r3, #15
 80103ec:	223e      	movs	r2, #62	; 0x3e
 80103ee:	2107      	movs	r1, #7
 80103f0:	f7ff fa78 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.FillRect(7, 70, 15, 3, GREEN);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6818      	ldr	r0, [r3, #0]
 80103f8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80103fc:	9301      	str	r3, [sp, #4]
 80103fe:	2303      	movs	r3, #3
 8010400:	9300      	str	r3, [sp, #0]
 8010402:	230f      	movs	r3, #15
 8010404:	2246      	movs	r2, #70	; 0x46
 8010406:	2107      	movs	r1, #7
 8010408:	f7ff fa6c 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.FillRect(7, 77, 15, 3, GREEN);
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	6818      	ldr	r0, [r3, #0]
 8010410:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8010414:	9301      	str	r3, [sp, #4]
 8010416:	2303      	movs	r3, #3
 8010418:	9300      	str	r3, [sp, #0]
 801041a:	230f      	movs	r3, #15
 801041c:	224d      	movs	r2, #77	; 0x4d
 801041e:	2107      	movs	r1, #7
 8010420:	f7ff fa60 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
}
 8010424:	bf00      	nop
 8010426:	3708      	adds	r7, #8
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}

0801042c <_ZN11SolarGators7Drivers2UI15ClearHeadlightsEv>:

void UI::ClearHeadlights() {
 801042c:	b580      	push	{r7, lr}
 801042e:	b084      	sub	sp, #16
 8010430:	af02      	add	r7, sp, #8
 8010432:	6078      	str	r0, [r7, #4]
	disp.FillRect(30, 65, 12, 12, BLACK);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6818      	ldr	r0, [r3, #0]
 8010438:	2300      	movs	r3, #0
 801043a:	9301      	str	r3, [sp, #4]
 801043c:	230c      	movs	r3, #12
 801043e:	9300      	str	r3, [sp, #0]
 8010440:	230c      	movs	r3, #12
 8010442:	2241      	movs	r2, #65	; 0x41
 8010444:	211e      	movs	r1, #30
 8010446:	f7ff fa4d 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.FillRect(50, 65, 12, 12, BLACK);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	6818      	ldr	r0, [r3, #0]
 801044e:	2300      	movs	r3, #0
 8010450:	9301      	str	r3, [sp, #4]
 8010452:	230c      	movs	r3, #12
 8010454:	9300      	str	r3, [sp, #0]
 8010456:	230c      	movs	r3, #12
 8010458:	2241      	movs	r2, #65	; 0x41
 801045a:	2132      	movs	r1, #50	; 0x32
 801045c:	f7ff fa42 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.FillRect(70, 62, 15, 3, BLACK);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6818      	ldr	r0, [r3, #0]
 8010464:	2300      	movs	r3, #0
 8010466:	9301      	str	r3, [sp, #4]
 8010468:	2303      	movs	r3, #3
 801046a:	9300      	str	r3, [sp, #0]
 801046c:	230f      	movs	r3, #15
 801046e:	223e      	movs	r2, #62	; 0x3e
 8010470:	2146      	movs	r1, #70	; 0x46
 8010472:	f7ff fa37 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.FillRect(70, 70, 15, 3, BLACK);
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6818      	ldr	r0, [r3, #0]
 801047a:	2300      	movs	r3, #0
 801047c:	9301      	str	r3, [sp, #4]
 801047e:	2303      	movs	r3, #3
 8010480:	9300      	str	r3, [sp, #0]
 8010482:	230f      	movs	r3, #15
 8010484:	2246      	movs	r2, #70	; 0x46
 8010486:	2146      	movs	r1, #70	; 0x46
 8010488:	f7ff fa2c 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.FillRect(70, 77, 15, 3, BLACK);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6818      	ldr	r0, [r3, #0]
 8010490:	2300      	movs	r3, #0
 8010492:	9301      	str	r3, [sp, #4]
 8010494:	2303      	movs	r3, #3
 8010496:	9300      	str	r3, [sp, #0]
 8010498:	230f      	movs	r3, #15
 801049a:	224d      	movs	r2, #77	; 0x4d
 801049c:	2146      	movs	r1, #70	; 0x46
 801049e:	f7ff fa21 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.FillRect(7, 62, 15, 3, BLACK);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6818      	ldr	r0, [r3, #0]
 80104a6:	2300      	movs	r3, #0
 80104a8:	9301      	str	r3, [sp, #4]
 80104aa:	2303      	movs	r3, #3
 80104ac:	9300      	str	r3, [sp, #0]
 80104ae:	230f      	movs	r3, #15
 80104b0:	223e      	movs	r2, #62	; 0x3e
 80104b2:	2107      	movs	r1, #7
 80104b4:	f7ff fa16 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.FillRect(7, 70, 15, 3, BLACK);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6818      	ldr	r0, [r3, #0]
 80104bc:	2300      	movs	r3, #0
 80104be:	9301      	str	r3, [sp, #4]
 80104c0:	2303      	movs	r3, #3
 80104c2:	9300      	str	r3, [sp, #0]
 80104c4:	230f      	movs	r3, #15
 80104c6:	2246      	movs	r2, #70	; 0x46
 80104c8:	2107      	movs	r1, #7
 80104ca:	f7ff fa0b 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.FillRect(7, 77, 15, 3, BLACK);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6818      	ldr	r0, [r3, #0]
 80104d2:	2300      	movs	r3, #0
 80104d4:	9301      	str	r3, [sp, #4]
 80104d6:	2303      	movs	r3, #3
 80104d8:	9300      	str	r3, [sp, #0]
 80104da:	230f      	movs	r3, #15
 80104dc:	224d      	movs	r2, #77	; 0x4d
 80104de:	2107      	movs	r1, #7
 80104e0:	f7ff fa00 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
}
 80104e4:	bf00      	nop
 80104e6:	3708      	adds	r7, #8
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}
 80104ec:	0000      	movs	r0, r0
	...

080104f0 <_ZN11SolarGators7Drivers2UI12UpdateSupBatEf>:

void UI::UpdateSupBat(float voltage) {
 80104f0:	b590      	push	{r4, r7, lr}
 80104f2:	b08f      	sub	sp, #60	; 0x3c
 80104f4:	af02      	add	r7, sp, #8
 80104f6:	6078      	str	r0, [r7, #4]
 80104f8:	ed87 0a00 	vstr	s0, [r7]

	uint32_t batt_color = CYAN;
 80104fc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8010500:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (voltage < 12.1) {
 8010502:	6838      	ldr	r0, [r7, #0]
 8010504:	f7f0 f962 	bl	80007cc <__aeabi_f2d>
 8010508:	a33f      	add	r3, pc, #252	; (adr r3, 8010608 <_ZN11SolarGators7Drivers2UI12UpdateSupBatEf+0x118>)
 801050a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801050e:	f7f0 fa15 	bl	800093c <__aeabi_dcmplt>
 8010512:	4603      	mov	r3, r0
 8010514:	2b00      	cmp	r3, #0
 8010516:	d002      	beq.n	801051e <_ZN11SolarGators7Drivers2UI12UpdateSupBatEf+0x2e>
		batt_color = RED;
 8010518:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801051c:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	disp.FillRect(10, 100, 45, 29, batt_color);
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6818      	ldr	r0, [r3, #0]
 8010522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010524:	b29b      	uxth	r3, r3
 8010526:	9301      	str	r3, [sp, #4]
 8010528:	231d      	movs	r3, #29
 801052a:	9300      	str	r3, [sp, #0]
 801052c:	232d      	movs	r3, #45	; 0x2d
 801052e:	2264      	movs	r2, #100	; 0x64
 8010530:	210a      	movs	r1, #10
 8010532:	f7ff f9d7 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.FillRect(10, 100, 45, 29, batt_color);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	6818      	ldr	r0, [r3, #0]
 801053a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801053c:	b29b      	uxth	r3, r3
 801053e:	9301      	str	r3, [sp, #4]
 8010540:	231d      	movs	r3, #29
 8010542:	9300      	str	r3, [sp, #0]
 8010544:	232d      	movs	r3, #45	; 0x2d
 8010546:	2264      	movs	r2, #100	; 0x64
 8010548:	210a      	movs	r1, #10
 801054a:	f7ff f9cb 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.FillRect(18, 95, 10, 5, batt_color);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6818      	ldr	r0, [r3, #0]
 8010552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010554:	b29b      	uxth	r3, r3
 8010556:	9301      	str	r3, [sp, #4]
 8010558:	2305      	movs	r3, #5
 801055a:	9300      	str	r3, [sp, #0]
 801055c:	230a      	movs	r3, #10
 801055e:	225f      	movs	r2, #95	; 0x5f
 8010560:	2112      	movs	r1, #18
 8010562:	f7ff f9bf 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.FillRect(37, 95, 10, 5, batt_color);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6818      	ldr	r0, [r3, #0]
 801056a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801056c:	b29b      	uxth	r3, r3
 801056e:	9301      	str	r3, [sp, #4]
 8010570:	2305      	movs	r3, #5
 8010572:	9300      	str	r3, [sp, #0]
 8010574:	230a      	movs	r3, #10
 8010576:	225f      	movs	r2, #95	; 0x5f
 8010578:	2125      	movs	r1, #37	; 0x25
 801057a:	f7ff f9b3 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	etl::string<4> s_voltage;
 801057e:	f107 030c 	add.w	r3, r7, #12
 8010582:	4618      	mov	r0, r3
 8010584:	f000 fa71 	bl	8010a6a <_ZN3etl6stringILj4EEC1Ev>
    etl::to_string(voltage, s_voltage, etl::format_spec().precision(1).width(4).fill(0), false);
 8010588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801058c:	4618      	mov	r0, r3
 801058e:	f000 fa80 	bl	8010a92 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEEC1Ev>
 8010592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010596:	2101      	movs	r1, #1
 8010598:	4618      	mov	r0, r3
 801059a:	f7f4 fad7 	bl	8004b4c <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE9precisionEm>
 801059e:	4603      	mov	r3, r0
 80105a0:	2104      	movs	r1, #4
 80105a2:	4618      	mov	r0, r3
 80105a4:	f7f4 fd95 	bl	80050d2 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE5widthEm>
 80105a8:	4603      	mov	r3, r0
 80105aa:	2100      	movs	r1, #0
 80105ac:	4618      	mov	r0, r3
 80105ae:	f7f4 fda0 	bl	80050f2 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE4fillEc>
 80105b2:	4601      	mov	r1, r0
 80105b4:	f107 030c 	add.w	r3, r7, #12
 80105b8:	2200      	movs	r2, #0
 80105ba:	4618      	mov	r0, r3
 80105bc:	ed97 0a00 	vldr	s0, [r7]
 80105c0:	f7f3 ffc9 	bl	8004556 <_ZN3etl9to_stringIfEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>
    disp.SetTextSize(2);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	2102      	movs	r1, #2
 80105ca:	4618      	mov	r0, r3
 80105cc:	f7fe ffba 	bl	800f544 <_ZN11SolarGators7Drivers7ILI934111SetTextSizeEh>
    disp.DrawText(60, 112, s_voltage.c_str(), batt_color);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681c      	ldr	r4, [r3, #0]
 80105d4:	f107 030c 	add.w	r3, r7, #12
 80105d8:	4618      	mov	r0, r3
 80105da:	f7f3 fff8 	bl	80045ce <_ZNK3etl13ibasic_stringIcE5c_strEv>
 80105de:	4602      	mov	r2, r0
 80105e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e2:	b29b      	uxth	r3, r3
 80105e4:	9300      	str	r3, [sp, #0]
 80105e6:	4613      	mov	r3, r2
 80105e8:	2270      	movs	r2, #112	; 0x70
 80105ea:	213c      	movs	r1, #60	; 0x3c
 80105ec:	4620      	mov	r0, r4
 80105ee:	f7ff f8d5 	bl	800f79c <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>
	etl::string<4> s_voltage;
 80105f2:	f107 030c 	add.w	r3, r7, #12
 80105f6:	4618      	mov	r0, r3
 80105f8:	f7ff fc18 	bl	800fe2c <_ZN3etl6stringILj4EED1Ev>
}
 80105fc:	bf00      	nop
 80105fe:	3734      	adds	r7, #52	; 0x34
 8010600:	46bd      	mov	sp, r7
 8010602:	bd90      	pop	{r4, r7, pc}
 8010604:	f3af 8000 	nop.w
 8010608:	33333333 	.word	0x33333333
 801060c:	40283333 	.word	0x40283333

08010610 <_ZN11SolarGators7Drivers2UI6SetEcoEv>:

void UI::SetEco() {
 8010610:	b580      	push	{r7, lr}
 8010612:	b084      	sub	sp, #16
 8010614:	af02      	add	r7, sp, #8
 8010616:	6078      	str	r0, [r7, #4]
	disp.SetTextSize(3);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	2103      	movs	r1, #3
 801061e:	4618      	mov	r0, r3
 8010620:	f7fe ff90 	bl	800f544 <_ZN11SolarGators7Drivers7ILI934111SetTextSizeEh>
	disp.DrawText(250, 102, "ECO", OLIVE);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	6818      	ldr	r0, [r3, #0]
 8010628:	f64d 73e4 	movw	r3, #57316	; 0xdfe4
 801062c:	9300      	str	r3, [sp, #0]
 801062e:	4b04      	ldr	r3, [pc, #16]	; (8010640 <_ZN11SolarGators7Drivers2UI6SetEcoEv+0x30>)
 8010630:	2266      	movs	r2, #102	; 0x66
 8010632:	21fa      	movs	r1, #250	; 0xfa
 8010634:	f7ff f8b2 	bl	800f79c <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>
}
 8010638:	bf00      	nop
 801063a:	3708      	adds	r7, #8
 801063c:	46bd      	mov	sp, r7
 801063e:	bd80      	pop	{r7, pc}
 8010640:	0801a074 	.word	0x0801a074

08010644 <_ZN11SolarGators7Drivers2UI10SetReverseEv>:
void UI::ClearEco() {
	disp.SetTextSize(3);
	disp.DrawText(250, 102, "ECO", BLACK);
}

void UI::SetReverse() {
 8010644:	b580      	push	{r7, lr}
 8010646:	b084      	sub	sp, #16
 8010648:	af02      	add	r7, sp, #8
 801064a:	6078      	str	r0, [r7, #4]
	disp.SetTextSize(3);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	2103      	movs	r1, #3
 8010652:	4618      	mov	r0, r3
 8010654:	f7fe ff76 	bl	800f544 <_ZN11SolarGators7Drivers7ILI934111SetTextSizeEh>
	disp.DrawText(250, 65, "REV", MAGENTA);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	6818      	ldr	r0, [r3, #0]
 801065c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8010660:	9300      	str	r3, [sp, #0]
 8010662:	4b04      	ldr	r3, [pc, #16]	; (8010674 <_ZN11SolarGators7Drivers2UI10SetReverseEv+0x30>)
 8010664:	2241      	movs	r2, #65	; 0x41
 8010666:	21fa      	movs	r1, #250	; 0xfa
 8010668:	f7ff f898 	bl	800f79c <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>
}
 801066c:	bf00      	nop
 801066e:	3708      	adds	r7, #8
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}
 8010674:	0801a078 	.word	0x0801a078

08010678 <_ZN11SolarGators7Drivers2UI12ClearReverseEv>:

void UI::ClearReverse() {
 8010678:	b580      	push	{r7, lr}
 801067a:	b084      	sub	sp, #16
 801067c:	af02      	add	r7, sp, #8
 801067e:	6078      	str	r0, [r7, #4]
	disp.SetTextSize(3);
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	2103      	movs	r1, #3
 8010686:	4618      	mov	r0, r3
 8010688:	f7fe ff5c 	bl	800f544 <_ZN11SolarGators7Drivers7ILI934111SetTextSizeEh>
	disp.DrawText(250, 65, "REV", BLACK);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	6818      	ldr	r0, [r3, #0]
 8010690:	2300      	movs	r3, #0
 8010692:	9300      	str	r3, [sp, #0]
 8010694:	4b04      	ldr	r3, [pc, #16]	; (80106a8 <_ZN11SolarGators7Drivers2UI12ClearReverseEv+0x30>)
 8010696:	2241      	movs	r2, #65	; 0x41
 8010698:	21fa      	movs	r1, #250	; 0xfa
 801069a:	f7ff f87f 	bl	800f79c <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>
}
 801069e:	bf00      	nop
 80106a0:	3708      	adds	r7, #8
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
 80106a6:	bf00      	nop
 80106a8:	0801a078 	.word	0x0801a078

080106ac <_ZN11SolarGators7Drivers2UI9SetCruiseEv>:

void UI::SetCruise() {
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b084      	sub	sp, #16
 80106b0:	af02      	add	r7, sp, #8
 80106b2:	6078      	str	r0, [r7, #4]
	disp.FillRect(210, 110, 20, 10, ORANGE);
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	6818      	ldr	r0, [r3, #0]
 80106b8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80106bc:	9301      	str	r3, [sp, #4]
 80106be:	230a      	movs	r3, #10
 80106c0:	9300      	str	r3, [sp, #0]
 80106c2:	2314      	movs	r3, #20
 80106c4:	226e      	movs	r2, #110	; 0x6e
 80106c6:	21d2      	movs	r1, #210	; 0xd2
 80106c8:	f7ff f90c 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.FillRect(215, 105, 10, 5, ORANGE);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6818      	ldr	r0, [r3, #0]
 80106d0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80106d4:	9301      	str	r3, [sp, #4]
 80106d6:	2305      	movs	r3, #5
 80106d8:	9300      	str	r3, [sp, #0]
 80106da:	230a      	movs	r3, #10
 80106dc:	2269      	movs	r2, #105	; 0x69
 80106de:	21d7      	movs	r1, #215	; 0xd7
 80106e0:	f7ff f900 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.FillRect(215, 120, 10, 5, ORANGE);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6818      	ldr	r0, [r3, #0]
 80106e8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80106ec:	9301      	str	r3, [sp, #4]
 80106ee:	2305      	movs	r3, #5
 80106f0:	9300      	str	r3, [sp, #0]
 80106f2:	230a      	movs	r3, #10
 80106f4:	2278      	movs	r2, #120	; 0x78
 80106f6:	21d7      	movs	r1, #215	; 0xd7
 80106f8:	f7ff f8f4 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.FillRect(220, 114, 10, 2, BLACK);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6818      	ldr	r0, [r3, #0]
 8010700:	2300      	movs	r3, #0
 8010702:	9301      	str	r3, [sp, #4]
 8010704:	2302      	movs	r3, #2
 8010706:	9300      	str	r3, [sp, #0]
 8010708:	230a      	movs	r3, #10
 801070a:	2272      	movs	r2, #114	; 0x72
 801070c:	21dc      	movs	r1, #220	; 0xdc
 801070e:	f7ff f8e9 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.SetTextSize(2);
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	2102      	movs	r1, #2
 8010718:	4618      	mov	r0, r3
 801071a:	f7fe ff13 	bl	800f544 <_ZN11SolarGators7Drivers7ILI934111SetTextSizeEh>
	disp.DrawText(230, 108, "<", ORANGE);
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6818      	ldr	r0, [r3, #0]
 8010722:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8010726:	9300      	str	r3, [sp, #0]
 8010728:	4b04      	ldr	r3, [pc, #16]	; (801073c <_ZN11SolarGators7Drivers2UI9SetCruiseEv+0x90>)
 801072a:	226c      	movs	r2, #108	; 0x6c
 801072c:	21e6      	movs	r1, #230	; 0xe6
 801072e:	f7ff f835 	bl	800f79c <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>
}
 8010732:	bf00      	nop
 8010734:	3708      	adds	r7, #8
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}
 801073a:	bf00      	nop
 801073c:	0801a06c 	.word	0x0801a06c

08010740 <_ZN11SolarGators7Drivers2UI11ClearCruiseEv>:

void UI::ClearCruise() {
 8010740:	b580      	push	{r7, lr}
 8010742:	b084      	sub	sp, #16
 8010744:	af02      	add	r7, sp, #8
 8010746:	6078      	str	r0, [r7, #4]
	disp.FillRect(210, 110, 20, 10, BLACK);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	6818      	ldr	r0, [r3, #0]
 801074c:	2300      	movs	r3, #0
 801074e:	9301      	str	r3, [sp, #4]
 8010750:	230a      	movs	r3, #10
 8010752:	9300      	str	r3, [sp, #0]
 8010754:	2314      	movs	r3, #20
 8010756:	226e      	movs	r2, #110	; 0x6e
 8010758:	21d2      	movs	r1, #210	; 0xd2
 801075a:	f7ff f8c3 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.FillRect(215, 105, 10, 5, BLACK);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6818      	ldr	r0, [r3, #0]
 8010762:	2300      	movs	r3, #0
 8010764:	9301      	str	r3, [sp, #4]
 8010766:	2305      	movs	r3, #5
 8010768:	9300      	str	r3, [sp, #0]
 801076a:	230a      	movs	r3, #10
 801076c:	2269      	movs	r2, #105	; 0x69
 801076e:	21d7      	movs	r1, #215	; 0xd7
 8010770:	f7ff f8b8 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.FillRect(215, 120, 10, 5, BLACK);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	6818      	ldr	r0, [r3, #0]
 8010778:	2300      	movs	r3, #0
 801077a:	9301      	str	r3, [sp, #4]
 801077c:	2305      	movs	r3, #5
 801077e:	9300      	str	r3, [sp, #0]
 8010780:	230a      	movs	r3, #10
 8010782:	2278      	movs	r2, #120	; 0x78
 8010784:	21d7      	movs	r1, #215	; 0xd7
 8010786:	f7ff f8ad 	bl	800f8e4 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
	disp.SetTextSize(2);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	2102      	movs	r1, #2
 8010790:	4618      	mov	r0, r3
 8010792:	f7fe fed7 	bl	800f544 <_ZN11SolarGators7Drivers7ILI934111SetTextSizeEh>
	disp.DrawText(230, 108, "<", BLACK);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	6818      	ldr	r0, [r3, #0]
 801079a:	2300      	movs	r3, #0
 801079c:	9300      	str	r3, [sp, #0]
 801079e:	4b04      	ldr	r3, [pc, #16]	; (80107b0 <_ZN11SolarGators7Drivers2UI11ClearCruiseEv+0x70>)
 80107a0:	226c      	movs	r2, #108	; 0x6c
 80107a2:	21e6      	movs	r1, #230	; 0xe6
 80107a4:	f7fe fffa 	bl	800f79c <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>
}
 80107a8:	bf00      	nop
 80107aa:	3708      	adds	r7, #8
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd80      	pop	{r7, pc}
 80107b0:	0801a06c 	.word	0x0801a06c

080107b4 <_ZN11SolarGators7Drivers2UI15SetExternalTripEv>:

void UI::SetExternalTrip() {
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b084      	sub	sp, #16
 80107b8:	af02      	add	r7, sp, #8
 80107ba:	6078      	str	r0, [r7, #4]
	disp.SetTextSize(2);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	2102      	movs	r1, #2
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7fe febe 	bl	800f544 <_ZN11SolarGators7Drivers7ILI934111SetTextSizeEh>
	disp.DrawText(0, 166, "External Kill Switch", color_fail_);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	6818      	ldr	r0, [r3, #0]
 80107cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80107d0:	9300      	str	r3, [sp, #0]
 80107d2:	4b04      	ldr	r3, [pc, #16]	; (80107e4 <_ZN11SolarGators7Drivers2UI15SetExternalTripEv+0x30>)
 80107d4:	22a6      	movs	r2, #166	; 0xa6
 80107d6:	2100      	movs	r1, #0
 80107d8:	f7fe ffe0 	bl	800f79c <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>
}
 80107dc:	bf00      	nop
 80107de:	3708      	adds	r7, #8
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}
 80107e4:	0801a07c 	.word	0x0801a07c

080107e8 <_ZNK3etl5flagsIhLh255EE4testILh1EEEbv>:
    ETL_CONSTEXPR bool test() const ETL_NOEXCEPT
 80107e8:	b480      	push	{r7}
 80107ea:	b083      	sub	sp, #12
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
      return (data & pattern) != value_type(0);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	781b      	ldrb	r3, [r3, #0]
 80107f4:	f003 0301 	and.w	r3, r3, #1
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	bf14      	ite	ne
 80107fc:	2301      	movne	r3, #1
 80107fe:	2300      	moveq	r3, #0
 8010800:	b2db      	uxtb	r3, r3
    }
 8010802:	4618      	mov	r0, r3
 8010804:	370c      	adds	r7, #12
 8010806:	46bd      	mov	sp, r7
 8010808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080c:	4770      	bx	lr

0801080e <_ZN3etl13ibasic_stringIcE6assignERKS1_>:
    void assign(const etl::ibasic_string<T>& other)
 801080e:	b590      	push	{r4, r7, lr}
 8010810:	b083      	sub	sp, #12
 8010812:	af00      	add	r7, sp, #0
 8010814:	6078      	str	r0, [r7, #4]
 8010816:	6039      	str	r1, [r7, #0]
      assign(other.begin(), other.end());
 8010818:	6838      	ldr	r0, [r7, #0]
 801081a:	f000 f989 	bl	8010b30 <_ZNK3etl13ibasic_stringIcE5beginEv>
 801081e:	4604      	mov	r4, r0
 8010820:	6838      	ldr	r0, [r7, #0]
 8010822:	f000 f991 	bl	8010b48 <_ZNK3etl13ibasic_stringIcE3endEv>
 8010826:	4603      	mov	r3, r0
 8010828:	461a      	mov	r2, r3
 801082a:	4621      	mov	r1, r4
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	f000 f81f 	bl	8010870 <_ZN3etl13ibasic_stringIcE6assignIPKcEEvT_S5_>
      if (other.is_truncated())
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	4618      	mov	r0, r3
 8010836:	f7ff f8da 	bl	800f9ee <_ZNK3etl11string_base12is_truncatedEv>
 801083a:	4603      	mov	r3, r0
 801083c:	2b00      	cmp	r3, #0
 801083e:	d004      	beq.n	801084a <_ZN3etl13ibasic_stringIcE6assignERKS1_+0x3c>
        set_truncated(true);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2101      	movs	r1, #1
 8010844:	4618      	mov	r0, r3
 8010846:	f7f2 f92b 	bl	8002aa0 <_ZN3etl11string_base13set_truncatedEb>
      if (other.is_secure())
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	4618      	mov	r0, r3
 801084e:	f7f2 f8e5 	bl	8002a1c <_ZNK3etl11string_base9is_secureEv>
 8010852:	4603      	mov	r3, r0
 8010854:	2b00      	cmp	r3, #0
 8010856:	d003      	beq.n	8010860 <_ZN3etl13ibasic_stringIcE6assignERKS1_+0x52>
        set_secure();
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	4618      	mov	r0, r3
 801085c:	f7ff f8e7 	bl	800fa2e <_ZN3etl11string_base10set_secureEv>
      cleanup();
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f7f3 fed5 	bl	8004610 <_ZN3etl13ibasic_stringIcE7cleanupEv>
    }
 8010866:	bf00      	nop
 8010868:	370c      	adds	r7, #12
 801086a:	46bd      	mov	sp, r7
 801086c:	bd90      	pop	{r4, r7, pc}
	...

08010870 <_ZN3etl13ibasic_stringIcE6assignIPKcEEvT_S5_>:
    void assign(TIterator first, TIterator last)
 8010870:	b590      	push	{r4, r7, lr}
 8010872:	b087      	sub	sp, #28
 8010874:	af00      	add	r7, sp, #0
 8010876:	60f8      	str	r0, [r7, #12]
 8010878:	60b9      	str	r1, [r7, #8]
 801087a:	607a      	str	r2, [r7, #4]
      difference_type d = etl::distance(first, last);
 801087c:	6879      	ldr	r1, [r7, #4]
 801087e:	68b8      	ldr	r0, [r7, #8]
 8010880:	f7f3 fee2 	bl	8004648 <_ZN3etl8distanceIPKcEENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 8010884:	6178      	str	r0, [r7, #20]
      ETL_ASSERT(d >= 0, ETL_ERROR(string_iterator));
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	2b00      	cmp	r3, #0
 801088a:	da06      	bge.n	801089a <_ZN3etl13ibasic_stringIcE6assignIPKcEEvT_S5_+0x2a>
 801088c:	4b1b      	ldr	r3, [pc, #108]	; (80108fc <_ZN3etl13ibasic_stringIcE6assignIPKcEEvT_S5_+0x8c>)
 801088e:	4a1c      	ldr	r2, [pc, #112]	; (8010900 <_ZN3etl13ibasic_stringIcE6assignIPKcEEvT_S5_+0x90>)
 8010890:	f240 21e6 	movw	r1, #742	; 0x2e6
 8010894:	481b      	ldr	r0, [pc, #108]	; (8010904 <_ZN3etl13ibasic_stringIcE6assignIPKcEEvT_S5_+0x94>)
 8010896:	f007 fbe9 	bl	801806c <__assert_func>
      initialise();
 801089a:	68f8      	ldr	r0, [r7, #12]
 801089c:	f7f3 fda5 	bl	80043ea <_ZN3etl13ibasic_stringIcE10initialiseEv>
      while ((first != last) && (current_size != CAPACITY))
 80108a0:	68ba      	ldr	r2, [r7, #8]
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d013      	beq.n	80108d0 <_ZN3etl13ibasic_stringIcE6assignIPKcEEvT_S5_+0x60>
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	681a      	ldr	r2, [r3, #0]
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	685b      	ldr	r3, [r3, #4]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d00d      	beq.n	80108d0 <_ZN3etl13ibasic_stringIcE6assignIPKcEEvT_S5_+0x60>
        p_buffer[current_size++] = *first++;
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	1c5a      	adds	r2, r3, #1
 80108b8:	60ba      	str	r2, [r7, #8]
 80108ba:	68fa      	ldr	r2, [r7, #12]
 80108bc:	68d1      	ldr	r1, [r2, #12]
 80108be:	68fa      	ldr	r2, [r7, #12]
 80108c0:	6812      	ldr	r2, [r2, #0]
 80108c2:	1c54      	adds	r4, r2, #1
 80108c4:	68f8      	ldr	r0, [r7, #12]
 80108c6:	6004      	str	r4, [r0, #0]
 80108c8:	440a      	add	r2, r1
 80108ca:	781b      	ldrb	r3, [r3, #0]
 80108cc:	7013      	strb	r3, [r2, #0]
      while ((first != last) && (current_size != CAPACITY))
 80108ce:	e7e7      	b.n	80108a0 <_ZN3etl13ibasic_stringIcE6assignIPKcEEvT_S5_+0x30>
      p_buffer[current_size] = 0;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	68da      	ldr	r2, [r3, #12]
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	4413      	add	r3, r2
 80108da:	2200      	movs	r2, #0
 80108dc:	701a      	strb	r2, [r3, #0]
      set_truncated(first != last);
 80108de:	68f8      	ldr	r0, [r7, #12]
 80108e0:	68ba      	ldr	r2, [r7, #8]
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	429a      	cmp	r2, r3
 80108e6:	bf14      	ite	ne
 80108e8:	2301      	movne	r3, #1
 80108ea:	2300      	moveq	r3, #0
 80108ec:	b2db      	uxtb	r3, r3
 80108ee:	4619      	mov	r1, r3
 80108f0:	f7f2 f8d6 	bl	8002aa0 <_ZN3etl11string_base13set_truncatedEb>
    }
 80108f4:	bf00      	nop
 80108f6:	371c      	adds	r7, #28
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd90      	pop	{r4, r7, pc}
 80108fc:	0801a094 	.word	0x0801a094
 8010900:	0801a0a0 	.word	0x0801a0a0
 8010904:	0801a104 	.word	0x0801a104

08010908 <_ZN3etl13ibasic_stringIcE6assignEPKc>:
    void assign(const_pointer other)
 8010908:	b590      	push	{r4, r7, lr}
 801090a:	b083      	sub	sp, #12
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
 8010910:	6039      	str	r1, [r7, #0]
      initialise();
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f7f3 fd69 	bl	80043ea <_ZN3etl13ibasic_stringIcE10initialiseEv>
      while ((*other != 0) && (current_size < CAPACITY))
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	781b      	ldrb	r3, [r3, #0]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d013      	beq.n	8010948 <_ZN3etl13ibasic_stringIcE6assignEPKc+0x40>
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681a      	ldr	r2, [r3, #0]
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	685b      	ldr	r3, [r3, #4]
 8010928:	429a      	cmp	r2, r3
 801092a:	d20d      	bcs.n	8010948 <_ZN3etl13ibasic_stringIcE6assignEPKc+0x40>
        p_buffer[current_size++] = *other++;
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	1c5a      	adds	r2, r3, #1
 8010930:	603a      	str	r2, [r7, #0]
 8010932:	687a      	ldr	r2, [r7, #4]
 8010934:	68d1      	ldr	r1, [r2, #12]
 8010936:	687a      	ldr	r2, [r7, #4]
 8010938:	6812      	ldr	r2, [r2, #0]
 801093a:	1c54      	adds	r4, r2, #1
 801093c:	6878      	ldr	r0, [r7, #4]
 801093e:	6004      	str	r4, [r0, #0]
 8010940:	440a      	add	r2, r1
 8010942:	781b      	ldrb	r3, [r3, #0]
 8010944:	7013      	strb	r3, [r2, #0]
      while ((*other != 0) && (current_size < CAPACITY))
 8010946:	e7e7      	b.n	8010918 <_ZN3etl13ibasic_stringIcE6assignEPKc+0x10>
      set_truncated(*other != 0);
 8010948:	687a      	ldr	r2, [r7, #4]
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	781b      	ldrb	r3, [r3, #0]
 801094e:	2b00      	cmp	r3, #0
 8010950:	bf14      	ite	ne
 8010952:	2301      	movne	r3, #1
 8010954:	2300      	moveq	r3, #0
 8010956:	b2db      	uxtb	r3, r3
 8010958:	4619      	mov	r1, r3
 801095a:	4610      	mov	r0, r2
 801095c:	f7f2 f8a0 	bl	8002aa0 <_ZN3etl11string_base13set_truncatedEb>
      p_buffer[current_size] = 0;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	68da      	ldr	r2, [r3, #12]
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	4413      	add	r3, r2
 801096a:	2200      	movs	r2, #0
 801096c:	701a      	strb	r2, [r3, #0]
    }
 801096e:	bf00      	nop
 8010970:	370c      	adds	r7, #12
 8010972:	46bd      	mov	sp, r7
 8010974:	bd90      	pop	{r4, r7, pc}

08010976 <_ZN3etl6stringILj5EEC1EPKc>:

    //*************************************************************************
    /// Constructor, from null terminated text.
    ///\param text The initial text of the string.
    //*************************************************************************
    ETL_EXPLICIT_STRING_FROM_CHAR string(const value_type* text)
 8010976:	b590      	push	{r4, r7, lr}
 8010978:	b083      	sub	sp, #12
 801097a:	af00      	add	r7, sp, #0
 801097c:	6078      	str	r0, [r7, #4]
 801097e:	6039      	str	r1, [r7, #0]
      : istring(reinterpret_cast<value_type*>(&buffer), MAX_SIZE)
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	3310      	adds	r3, #16
 8010986:	2205      	movs	r2, #5
 8010988:	4619      	mov	r1, r3
 801098a:	f7f3 fd04 	bl	8004396 <_ZN3etl13ibasic_stringIcEC1EPcj>
    {
      this->assign(text, text + etl::char_traits<value_type>::length(text));
 801098e:	687c      	ldr	r4, [r7, #4]
 8010990:	6838      	ldr	r0, [r7, #0]
 8010992:	f000 f8e8 	bl	8010b66 <_ZN3etl11char_traitsIcE6lengthEPKc>
 8010996:	4602      	mov	r2, r0
 8010998:	683b      	ldr	r3, [r7, #0]
 801099a:	4413      	add	r3, r2
 801099c:	461a      	mov	r2, r3
 801099e:	6839      	ldr	r1, [r7, #0]
 80109a0:	4620      	mov	r0, r4
 80109a2:	f7ff ff65 	bl	8010870 <_ZN3etl13ibasic_stringIcE6assignIPKcEEvT_S5_>
    }
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	4618      	mov	r0, r3
 80109aa:	370c      	adds	r7, #12
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd90      	pop	{r4, r7, pc}

080109b0 <_ZNK3etl5arrayIN11SolarGators7Drivers10InfoSquareELj4EE4sizeEv>:
    }

    //*************************************************************************
    /// Returns the size of the array.
    //*************************************************************************
    ETL_CONSTEXPR size_t size() const ETL_NOEXCEPT
 80109b0:	b480      	push	{r7}
 80109b2:	b083      	sub	sp, #12
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
    {
      return SIZE;
 80109b8:	2304      	movs	r3, #4
    }
 80109ba:	4618      	mov	r0, r3
 80109bc:	370c      	adds	r7, #12
 80109be:	46bd      	mov	sp, r7
 80109c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c4:	4770      	bx	lr

080109c6 <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj4EEixEj>:
    reference operator[](size_t i)
 80109c6:	b480      	push	{r7}
 80109c8:	b083      	sub	sp, #12
 80109ca:	af00      	add	r7, sp, #0
 80109cc:	6078      	str	r0, [r7, #4]
 80109ce:	6039      	str	r1, [r7, #0]
      return _buffer[i];
 80109d0:	683a      	ldr	r2, [r7, #0]
 80109d2:	4613      	mov	r3, r2
 80109d4:	00db      	lsls	r3, r3, #3
 80109d6:	1a9b      	subs	r3, r3, r2
 80109d8:	009b      	lsls	r3, r3, #2
 80109da:	687a      	ldr	r2, [r7, #4]
 80109dc:	4413      	add	r3, r2
    }
 80109de:	4618      	mov	r0, r3
 80109e0:	370c      	adds	r7, #12
 80109e2:	46bd      	mov	sp, r7
 80109e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e8:	4770      	bx	lr

080109ea <_ZN3etl6stringILj5EEaSERKS1_>:
    }

    //*************************************************************************
    /// Assignment operator.
    //*************************************************************************
    string& operator = (const string& rhs)
 80109ea:	b580      	push	{r7, lr}
 80109ec:	b082      	sub	sp, #8
 80109ee:	af00      	add	r7, sp, #0
 80109f0:	6078      	str	r0, [r7, #4]
 80109f2:	6039      	str	r1, [r7, #0]
    {
      if (&rhs != this)
 80109f4:	683a      	ldr	r2, [r7, #0]
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	429a      	cmp	r2, r3
 80109fa:	d005      	beq.n	8010a08 <_ZN3etl6stringILj5EEaSERKS1_+0x1e>
      {
        this->assign(rhs);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	683a      	ldr	r2, [r7, #0]
 8010a00:	4611      	mov	r1, r2
 8010a02:	4618      	mov	r0, r3
 8010a04:	f7ff ff03 	bl	801080e <_ZN3etl13ibasic_stringIcE6assignERKS1_>
      }

      return *this;
 8010a08:	687b      	ldr	r3, [r7, #4]
    }
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	3708      	adds	r7, #8
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}

08010a12 <_ZN3etl6stringILj5EEaSEPKc>:
    }

    //*************************************************************************
    /// Assignment operator.
    //*************************************************************************
    string& operator = (const value_type* text)
 8010a12:	b580      	push	{r7, lr}
 8010a14:	b082      	sub	sp, #8
 8010a16:	af00      	add	r7, sp, #0
 8010a18:	6078      	str	r0, [r7, #4]
 8010a1a:	6039      	str	r1, [r7, #0]
    {
      this->assign(text);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	6839      	ldr	r1, [r7, #0]
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7ff ff71 	bl	8010908 <_ZN3etl13ibasic_stringIcE6assignEPKc>

      return *this;
 8010a26:	687b      	ldr	r3, [r7, #4]
    }
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3708      	adds	r7, #8
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}

08010a30 <_ZNK3etl5arrayIN11SolarGators7Drivers10InfoSquareELj2EE4sizeEv>:
    ETL_CONSTEXPR size_t size() const ETL_NOEXCEPT
 8010a30:	b480      	push	{r7}
 8010a32:	b083      	sub	sp, #12
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
      return SIZE;
 8010a38:	2302      	movs	r3, #2
    }
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	370c      	adds	r7, #12
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a44:	4770      	bx	lr

08010a46 <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj2EEixEj>:
    reference operator[](size_t i)
 8010a46:	b480      	push	{r7}
 8010a48:	b083      	sub	sp, #12
 8010a4a:	af00      	add	r7, sp, #0
 8010a4c:	6078      	str	r0, [r7, #4]
 8010a4e:	6039      	str	r1, [r7, #0]
      return _buffer[i];
 8010a50:	683a      	ldr	r2, [r7, #0]
 8010a52:	4613      	mov	r3, r2
 8010a54:	00db      	lsls	r3, r3, #3
 8010a56:	1a9b      	subs	r3, r3, r2
 8010a58:	009b      	lsls	r3, r3, #2
 8010a5a:	687a      	ldr	r2, [r7, #4]
 8010a5c:	4413      	add	r3, r2
    }
 8010a5e:	4618      	mov	r0, r3
 8010a60:	370c      	adds	r7, #12
 8010a62:	46bd      	mov	sp, r7
 8010a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a68:	4770      	bx	lr

08010a6a <_ZN3etl6stringILj4EEC1Ev>:
    string()
 8010a6a:	b580      	push	{r7, lr}
 8010a6c:	b082      	sub	sp, #8
 8010a6e:	af00      	add	r7, sp, #0
 8010a70:	6078      	str	r0, [r7, #4]
      : istring(reinterpret_cast<value_type*>(&buffer), MAX_SIZE)
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	3310      	adds	r3, #16
 8010a78:	2204      	movs	r2, #4
 8010a7a:	4619      	mov	r1, r3
 8010a7c:	f7f3 fc8b 	bl	8004396 <_ZN3etl13ibasic_stringIcEC1EPcj>
      this->initialise();
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	4618      	mov	r0, r3
 8010a84:	f7f3 fcb1 	bl	80043ea <_ZN3etl13ibasic_stringIcE10initialiseEv>
    }
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3708      	adds	r7, #8
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}

08010a92 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEEC1Ev>:
    ETL_CONSTEXPR basic_format_spec()
 8010a92:	b480      	push	{r7}
 8010a94:	b083      	sub	sp, #12
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	6078      	str	r0, [r7, #4]
      , fill_(typename TString::value_type(' '))
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	220a      	movs	r2, #10
 8010a9e:	701a      	strb	r2, [r3, #0]
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	705a      	strb	r2, [r3, #1]
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	709a      	strb	r2, [r3, #2]
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2200      	movs	r2, #0
 8010ab0:	70da      	strb	r2, [r3, #3]
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	711a      	strb	r2, [r3, #4]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	2200      	movs	r2, #0
 8010abc:	715a      	strb	r2, [r3, #5]
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	719a      	strb	r2, [r3, #6]
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2220      	movs	r2, #32
 8010ac8:	71da      	strb	r2, [r3, #7]
    }
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	4618      	mov	r0, r3
 8010ace:	370c      	adds	r7, #12
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad6:	4770      	bx	lr

08010ad8 <_ZN3etl6stringILj40EEC1EPKc>:
    ETL_EXPLICIT_STRING_FROM_CHAR string(const value_type* text)
 8010ad8:	b590      	push	{r4, r7, lr}
 8010ada:	b083      	sub	sp, #12
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
 8010ae0:	6039      	str	r1, [r7, #0]
      : istring(reinterpret_cast<value_type*>(&buffer), MAX_SIZE)
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	3310      	adds	r3, #16
 8010ae8:	2228      	movs	r2, #40	; 0x28
 8010aea:	4619      	mov	r1, r3
 8010aec:	f7f3 fc53 	bl	8004396 <_ZN3etl13ibasic_stringIcEC1EPcj>
      this->assign(text, text + etl::char_traits<value_type>::length(text));
 8010af0:	687c      	ldr	r4, [r7, #4]
 8010af2:	6838      	ldr	r0, [r7, #0]
 8010af4:	f000 f837 	bl	8010b66 <_ZN3etl11char_traitsIcE6lengthEPKc>
 8010af8:	4602      	mov	r2, r0
 8010afa:	683b      	ldr	r3, [r7, #0]
 8010afc:	4413      	add	r3, r2
 8010afe:	461a      	mov	r2, r3
 8010b00:	6839      	ldr	r1, [r7, #0]
 8010b02:	4620      	mov	r0, r4
 8010b04:	f7ff feb4 	bl	8010870 <_ZN3etl13ibasic_stringIcE6assignIPKcEEvT_S5_>
    }
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	370c      	adds	r7, #12
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bd90      	pop	{r4, r7, pc}

08010b12 <_ZN3etl6stringILj40EEaSEPKc>:
    string& operator = (const value_type* text)
 8010b12:	b580      	push	{r7, lr}
 8010b14:	b082      	sub	sp, #8
 8010b16:	af00      	add	r7, sp, #0
 8010b18:	6078      	str	r0, [r7, #4]
 8010b1a:	6039      	str	r1, [r7, #0]
      this->assign(text);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6839      	ldr	r1, [r7, #0]
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7ff fef1 	bl	8010908 <_ZN3etl13ibasic_stringIcE6assignEPKc>
      return *this;
 8010b26:	687b      	ldr	r3, [r7, #4]
    }
 8010b28:	4618      	mov	r0, r3
 8010b2a:	3708      	adds	r7, #8
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}

08010b30 <_ZNK3etl13ibasic_stringIcE5beginEv>:
    const_iterator begin() const
 8010b30:	b480      	push	{r7}
 8010b32:	b083      	sub	sp, #12
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
      return &p_buffer[0];
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	68db      	ldr	r3, [r3, #12]
    }
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	370c      	adds	r7, #12
 8010b40:	46bd      	mov	sp, r7
 8010b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b46:	4770      	bx	lr

08010b48 <_ZNK3etl13ibasic_stringIcE3endEv>:
    const_iterator end() const
 8010b48:	b480      	push	{r7}
 8010b4a:	b083      	sub	sp, #12
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
      return &p_buffer[current_size];
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	68da      	ldr	r2, [r3, #12]
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	4413      	add	r3, r2
    }
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	370c      	adds	r7, #12
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b64:	4770      	bx	lr

08010b66 <_ZN3etl11char_traitsIcE6lengthEPKc>:
    {
      return a < b;
    }

    //*************************************************************************
    static ETL_CONSTEXPR14 size_t length(const char_type* str)
 8010b66:	b480      	push	{r7}
 8010b68:	b085      	sub	sp, #20
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	6078      	str	r0, [r7, #4]
    {
      size_t count = 0UL;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	60fb      	str	r3, [r7, #12]

      if (str != 0)
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d00e      	beq.n	8010b96 <_ZN3etl11char_traitsIcE6lengthEPKc+0x30>
      {
        while (*str++ != 0)
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	1c5a      	adds	r2, r3, #1
 8010b7c:	607a      	str	r2, [r7, #4]
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	bf14      	ite	ne
 8010b84:	2301      	movne	r3, #1
 8010b86:	2300      	moveq	r3, #0
 8010b88:	b2db      	uxtb	r3, r3
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d003      	beq.n	8010b96 <_ZN3etl11char_traitsIcE6lengthEPKc+0x30>
        {
          ++count;
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	3301      	adds	r3, #1
 8010b92:	60fb      	str	r3, [r7, #12]
        while (*str++ != 0)
 8010b94:	e7f0      	b.n	8010b78 <_ZN3etl11char_traitsIcE6lengthEPKc+0x12>
        }
      }

      return count;
 8010b96:	68fb      	ldr	r3, [r7, #12]
    }
 8010b98:	4618      	mov	r0, r3
 8010b9a:	3714      	adds	r7, #20
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba2:	4770      	bx	lr

08010ba4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8010ba8:	4904      	ldr	r1, [pc, #16]	; (8010bbc <MX_FATFS_Init+0x18>)
 8010baa:	4805      	ldr	r0, [pc, #20]	; (8010bc0 <MX_FATFS_Init+0x1c>)
 8010bac:	f002 fdda 	bl	8013764 <FATFS_LinkDriver>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	461a      	mov	r2, r3
 8010bb4:	4b03      	ldr	r3, [pc, #12]	; (8010bc4 <MX_FATFS_Init+0x20>)
 8010bb6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010bb8:	bf00      	nop
 8010bba:	bd80      	pop	{r7, pc}
 8010bbc:	20004b00 	.word	0x20004b00
 8010bc0:	20000048 	.word	0x20000048
 8010bc4:	20004afc 	.word	0x20004afc

08010bc8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010bc8:	b480      	push	{r7}
 8010bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010bcc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd6:	4770      	bx	lr

08010bd8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b082      	sub	sp, #8
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	4603      	mov	r3, r0
 8010be0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8010be2:	79fb      	ldrb	r3, [r7, #7]
 8010be4:	4618      	mov	r0, r3
 8010be6:	f7f0 fc9b 	bl	8001520 <SD_disk_initialize>
 8010bea:	4603      	mov	r3, r0
 8010bec:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	3708      	adds	r7, #8
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}

08010bf6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8010bf6:	b580      	push	{r7, lr}
 8010bf8:	b082      	sub	sp, #8
 8010bfa:	af00      	add	r7, sp, #0
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8010c00:	79fb      	ldrb	r3, [r7, #7]
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7f0 fd72 	bl	80016ec <SD_disk_status>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	3708      	adds	r7, #8
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}

08010c14 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b084      	sub	sp, #16
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	60b9      	str	r1, [r7, #8]
 8010c1c:	607a      	str	r2, [r7, #4]
 8010c1e:	603b      	str	r3, [r7, #0]
 8010c20:	4603      	mov	r3, r0
 8010c22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8010c24:	7bf8      	ldrb	r0, [r7, #15]
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	687a      	ldr	r2, [r7, #4]
 8010c2a:	68b9      	ldr	r1, [r7, #8]
 8010c2c:	f7f0 fd74 	bl	8001718 <SD_disk_read>
 8010c30:	4603      	mov	r3, r0
 8010c32:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8010c34:	4618      	mov	r0, r3
 8010c36:	3710      	adds	r7, #16
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}

08010c3c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b084      	sub	sp, #16
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	60b9      	str	r1, [r7, #8]
 8010c44:	607a      	str	r2, [r7, #4]
 8010c46:	603b      	str	r3, [r7, #0]
 8010c48:	4603      	mov	r3, r0
 8010c4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8010c4c:	7bf8      	ldrb	r0, [r7, #15]
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	687a      	ldr	r2, [r7, #4]
 8010c52:	68b9      	ldr	r1, [r7, #8]
 8010c54:	f7f0 fdca 	bl	80017ec <SD_disk_write>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3710      	adds	r7, #16
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}

08010c64 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b082      	sub	sp, #8
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	603a      	str	r2, [r7, #0]
 8010c6e:	71fb      	strb	r3, [r7, #7]
 8010c70:	460b      	mov	r3, r1
 8010c72:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8010c74:	79fb      	ldrb	r3, [r7, #7]
 8010c76:	79b9      	ldrb	r1, [r7, #6]
 8010c78:	683a      	ldr	r2, [r7, #0]
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f7f0 fe3a 	bl	80018f4 <SD_disk_ioctl>
 8010c80:	4603      	mov	r3, r0
 8010c82:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	3708      	adds	r7, #8
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}

08010c8c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b084      	sub	sp, #16
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	4603      	mov	r3, r0
 8010c94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010c96:	79fb      	ldrb	r3, [r7, #7]
 8010c98:	4a08      	ldr	r2, [pc, #32]	; (8010cbc <disk_status+0x30>)
 8010c9a:	009b      	lsls	r3, r3, #2
 8010c9c:	4413      	add	r3, r2
 8010c9e:	685b      	ldr	r3, [r3, #4]
 8010ca0:	685b      	ldr	r3, [r3, #4]
 8010ca2:	79fa      	ldrb	r2, [r7, #7]
 8010ca4:	4905      	ldr	r1, [pc, #20]	; (8010cbc <disk_status+0x30>)
 8010ca6:	440a      	add	r2, r1
 8010ca8:	7a12      	ldrb	r2, [r2, #8]
 8010caa:	4610      	mov	r0, r2
 8010cac:	4798      	blx	r3
 8010cae:	4603      	mov	r3, r0
 8010cb0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3710      	adds	r7, #16
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}
 8010cbc:	20004b2c 	.word	0x20004b2c

08010cc0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b084      	sub	sp, #16
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010cca:	2300      	movs	r3, #0
 8010ccc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010cce:	79fb      	ldrb	r3, [r7, #7]
 8010cd0:	4a0d      	ldr	r2, [pc, #52]	; (8010d08 <disk_initialize+0x48>)
 8010cd2:	5cd3      	ldrb	r3, [r2, r3]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d111      	bne.n	8010cfc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010cd8:	79fb      	ldrb	r3, [r7, #7]
 8010cda:	4a0b      	ldr	r2, [pc, #44]	; (8010d08 <disk_initialize+0x48>)
 8010cdc:	2101      	movs	r1, #1
 8010cde:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010ce0:	79fb      	ldrb	r3, [r7, #7]
 8010ce2:	4a09      	ldr	r2, [pc, #36]	; (8010d08 <disk_initialize+0x48>)
 8010ce4:	009b      	lsls	r3, r3, #2
 8010ce6:	4413      	add	r3, r2
 8010ce8:	685b      	ldr	r3, [r3, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	79fa      	ldrb	r2, [r7, #7]
 8010cee:	4906      	ldr	r1, [pc, #24]	; (8010d08 <disk_initialize+0x48>)
 8010cf0:	440a      	add	r2, r1
 8010cf2:	7a12      	ldrb	r2, [r2, #8]
 8010cf4:	4610      	mov	r0, r2
 8010cf6:	4798      	blx	r3
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cfe:	4618      	mov	r0, r3
 8010d00:	3710      	adds	r7, #16
 8010d02:	46bd      	mov	sp, r7
 8010d04:	bd80      	pop	{r7, pc}
 8010d06:	bf00      	nop
 8010d08:	20004b2c 	.word	0x20004b2c

08010d0c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010d0c:	b590      	push	{r4, r7, lr}
 8010d0e:	b087      	sub	sp, #28
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	60b9      	str	r1, [r7, #8]
 8010d14:	607a      	str	r2, [r7, #4]
 8010d16:	603b      	str	r3, [r7, #0]
 8010d18:	4603      	mov	r3, r0
 8010d1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010d1c:	7bfb      	ldrb	r3, [r7, #15]
 8010d1e:	4a0a      	ldr	r2, [pc, #40]	; (8010d48 <disk_read+0x3c>)
 8010d20:	009b      	lsls	r3, r3, #2
 8010d22:	4413      	add	r3, r2
 8010d24:	685b      	ldr	r3, [r3, #4]
 8010d26:	689c      	ldr	r4, [r3, #8]
 8010d28:	7bfb      	ldrb	r3, [r7, #15]
 8010d2a:	4a07      	ldr	r2, [pc, #28]	; (8010d48 <disk_read+0x3c>)
 8010d2c:	4413      	add	r3, r2
 8010d2e:	7a18      	ldrb	r0, [r3, #8]
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	687a      	ldr	r2, [r7, #4]
 8010d34:	68b9      	ldr	r1, [r7, #8]
 8010d36:	47a0      	blx	r4
 8010d38:	4603      	mov	r3, r0
 8010d3a:	75fb      	strb	r3, [r7, #23]
  return res;
 8010d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d3e:	4618      	mov	r0, r3
 8010d40:	371c      	adds	r7, #28
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bd90      	pop	{r4, r7, pc}
 8010d46:	bf00      	nop
 8010d48:	20004b2c 	.word	0x20004b2c

08010d4c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010d4c:	b590      	push	{r4, r7, lr}
 8010d4e:	b087      	sub	sp, #28
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	60b9      	str	r1, [r7, #8]
 8010d54:	607a      	str	r2, [r7, #4]
 8010d56:	603b      	str	r3, [r7, #0]
 8010d58:	4603      	mov	r3, r0
 8010d5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010d5c:	7bfb      	ldrb	r3, [r7, #15]
 8010d5e:	4a0a      	ldr	r2, [pc, #40]	; (8010d88 <disk_write+0x3c>)
 8010d60:	009b      	lsls	r3, r3, #2
 8010d62:	4413      	add	r3, r2
 8010d64:	685b      	ldr	r3, [r3, #4]
 8010d66:	68dc      	ldr	r4, [r3, #12]
 8010d68:	7bfb      	ldrb	r3, [r7, #15]
 8010d6a:	4a07      	ldr	r2, [pc, #28]	; (8010d88 <disk_write+0x3c>)
 8010d6c:	4413      	add	r3, r2
 8010d6e:	7a18      	ldrb	r0, [r3, #8]
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	687a      	ldr	r2, [r7, #4]
 8010d74:	68b9      	ldr	r1, [r7, #8]
 8010d76:	47a0      	blx	r4
 8010d78:	4603      	mov	r3, r0
 8010d7a:	75fb      	strb	r3, [r7, #23]
  return res;
 8010d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d7e:	4618      	mov	r0, r3
 8010d80:	371c      	adds	r7, #28
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd90      	pop	{r4, r7, pc}
 8010d86:	bf00      	nop
 8010d88:	20004b2c 	.word	0x20004b2c

08010d8c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b084      	sub	sp, #16
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	4603      	mov	r3, r0
 8010d94:	603a      	str	r2, [r7, #0]
 8010d96:	71fb      	strb	r3, [r7, #7]
 8010d98:	460b      	mov	r3, r1
 8010d9a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010d9c:	79fb      	ldrb	r3, [r7, #7]
 8010d9e:	4a09      	ldr	r2, [pc, #36]	; (8010dc4 <disk_ioctl+0x38>)
 8010da0:	009b      	lsls	r3, r3, #2
 8010da2:	4413      	add	r3, r2
 8010da4:	685b      	ldr	r3, [r3, #4]
 8010da6:	691b      	ldr	r3, [r3, #16]
 8010da8:	79fa      	ldrb	r2, [r7, #7]
 8010daa:	4906      	ldr	r1, [pc, #24]	; (8010dc4 <disk_ioctl+0x38>)
 8010dac:	440a      	add	r2, r1
 8010dae:	7a10      	ldrb	r0, [r2, #8]
 8010db0:	79b9      	ldrb	r1, [r7, #6]
 8010db2:	683a      	ldr	r2, [r7, #0]
 8010db4:	4798      	blx	r3
 8010db6:	4603      	mov	r3, r0
 8010db8:	73fb      	strb	r3, [r7, #15]
  return res;
 8010dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3710      	adds	r7, #16
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}
 8010dc4:	20004b2c 	.word	0x20004b2c

08010dc8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010dc8:	b480      	push	{r7}
 8010dca:	b085      	sub	sp, #20
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	3301      	adds	r3, #1
 8010dd4:	781b      	ldrb	r3, [r3, #0]
 8010dd6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010dd8:	89fb      	ldrh	r3, [r7, #14]
 8010dda:	021b      	lsls	r3, r3, #8
 8010ddc:	b21a      	sxth	r2, r3
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	781b      	ldrb	r3, [r3, #0]
 8010de2:	b21b      	sxth	r3, r3
 8010de4:	4313      	orrs	r3, r2
 8010de6:	b21b      	sxth	r3, r3
 8010de8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010dea:	89fb      	ldrh	r3, [r7, #14]
}
 8010dec:	4618      	mov	r0, r3
 8010dee:	3714      	adds	r7, #20
 8010df0:	46bd      	mov	sp, r7
 8010df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df6:	4770      	bx	lr

08010df8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010df8:	b480      	push	{r7}
 8010dfa:	b085      	sub	sp, #20
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	3303      	adds	r3, #3
 8010e04:	781b      	ldrb	r3, [r3, #0]
 8010e06:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	021b      	lsls	r3, r3, #8
 8010e0c:	687a      	ldr	r2, [r7, #4]
 8010e0e:	3202      	adds	r2, #2
 8010e10:	7812      	ldrb	r2, [r2, #0]
 8010e12:	4313      	orrs	r3, r2
 8010e14:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	021b      	lsls	r3, r3, #8
 8010e1a:	687a      	ldr	r2, [r7, #4]
 8010e1c:	3201      	adds	r2, #1
 8010e1e:	7812      	ldrb	r2, [r2, #0]
 8010e20:	4313      	orrs	r3, r2
 8010e22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	021b      	lsls	r3, r3, #8
 8010e28:	687a      	ldr	r2, [r7, #4]
 8010e2a:	7812      	ldrb	r2, [r2, #0]
 8010e2c:	4313      	orrs	r3, r2
 8010e2e:	60fb      	str	r3, [r7, #12]
	return rv;
 8010e30:	68fb      	ldr	r3, [r7, #12]
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3714      	adds	r7, #20
 8010e36:	46bd      	mov	sp, r7
 8010e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3c:	4770      	bx	lr

08010e3e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010e3e:	b480      	push	{r7}
 8010e40:	b083      	sub	sp, #12
 8010e42:	af00      	add	r7, sp, #0
 8010e44:	6078      	str	r0, [r7, #4]
 8010e46:	460b      	mov	r3, r1
 8010e48:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	1c5a      	adds	r2, r3, #1
 8010e4e:	607a      	str	r2, [r7, #4]
 8010e50:	887a      	ldrh	r2, [r7, #2]
 8010e52:	b2d2      	uxtb	r2, r2
 8010e54:	701a      	strb	r2, [r3, #0]
 8010e56:	887b      	ldrh	r3, [r7, #2]
 8010e58:	0a1b      	lsrs	r3, r3, #8
 8010e5a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	1c5a      	adds	r2, r3, #1
 8010e60:	607a      	str	r2, [r7, #4]
 8010e62:	887a      	ldrh	r2, [r7, #2]
 8010e64:	b2d2      	uxtb	r2, r2
 8010e66:	701a      	strb	r2, [r3, #0]
}
 8010e68:	bf00      	nop
 8010e6a:	370c      	adds	r7, #12
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e72:	4770      	bx	lr

08010e74 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010e74:	b480      	push	{r7}
 8010e76:	b083      	sub	sp, #12
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
 8010e7c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	1c5a      	adds	r2, r3, #1
 8010e82:	607a      	str	r2, [r7, #4]
 8010e84:	683a      	ldr	r2, [r7, #0]
 8010e86:	b2d2      	uxtb	r2, r2
 8010e88:	701a      	strb	r2, [r3, #0]
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	0a1b      	lsrs	r3, r3, #8
 8010e8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	1c5a      	adds	r2, r3, #1
 8010e94:	607a      	str	r2, [r7, #4]
 8010e96:	683a      	ldr	r2, [r7, #0]
 8010e98:	b2d2      	uxtb	r2, r2
 8010e9a:	701a      	strb	r2, [r3, #0]
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	0a1b      	lsrs	r3, r3, #8
 8010ea0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	1c5a      	adds	r2, r3, #1
 8010ea6:	607a      	str	r2, [r7, #4]
 8010ea8:	683a      	ldr	r2, [r7, #0]
 8010eaa:	b2d2      	uxtb	r2, r2
 8010eac:	701a      	strb	r2, [r3, #0]
 8010eae:	683b      	ldr	r3, [r7, #0]
 8010eb0:	0a1b      	lsrs	r3, r3, #8
 8010eb2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	1c5a      	adds	r2, r3, #1
 8010eb8:	607a      	str	r2, [r7, #4]
 8010eba:	683a      	ldr	r2, [r7, #0]
 8010ebc:	b2d2      	uxtb	r2, r2
 8010ebe:	701a      	strb	r2, [r3, #0]
}
 8010ec0:	bf00      	nop
 8010ec2:	370c      	adds	r7, #12
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eca:	4770      	bx	lr

08010ecc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010ecc:	b480      	push	{r7}
 8010ece:	b087      	sub	sp, #28
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	60f8      	str	r0, [r7, #12]
 8010ed4:	60b9      	str	r1, [r7, #8]
 8010ed6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d00d      	beq.n	8010f02 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010ee6:	693a      	ldr	r2, [r7, #16]
 8010ee8:	1c53      	adds	r3, r2, #1
 8010eea:	613b      	str	r3, [r7, #16]
 8010eec:	697b      	ldr	r3, [r7, #20]
 8010eee:	1c59      	adds	r1, r3, #1
 8010ef0:	6179      	str	r1, [r7, #20]
 8010ef2:	7812      	ldrb	r2, [r2, #0]
 8010ef4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	3b01      	subs	r3, #1
 8010efa:	607b      	str	r3, [r7, #4]
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d1f1      	bne.n	8010ee6 <mem_cpy+0x1a>
	}
}
 8010f02:	bf00      	nop
 8010f04:	371c      	adds	r7, #28
 8010f06:	46bd      	mov	sp, r7
 8010f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0c:	4770      	bx	lr

08010f0e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010f0e:	b480      	push	{r7}
 8010f10:	b087      	sub	sp, #28
 8010f12:	af00      	add	r7, sp, #0
 8010f14:	60f8      	str	r0, [r7, #12]
 8010f16:	60b9      	str	r1, [r7, #8]
 8010f18:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010f1e:	697b      	ldr	r3, [r7, #20]
 8010f20:	1c5a      	adds	r2, r3, #1
 8010f22:	617a      	str	r2, [r7, #20]
 8010f24:	68ba      	ldr	r2, [r7, #8]
 8010f26:	b2d2      	uxtb	r2, r2
 8010f28:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	3b01      	subs	r3, #1
 8010f2e:	607b      	str	r3, [r7, #4]
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d1f3      	bne.n	8010f1e <mem_set+0x10>
}
 8010f36:	bf00      	nop
 8010f38:	bf00      	nop
 8010f3a:	371c      	adds	r7, #28
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f42:	4770      	bx	lr

08010f44 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010f44:	b480      	push	{r7}
 8010f46:	b089      	sub	sp, #36	; 0x24
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	60f8      	str	r0, [r7, #12]
 8010f4c:	60b9      	str	r1, [r7, #8]
 8010f4e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	61fb      	str	r3, [r7, #28]
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010f5c:	69fb      	ldr	r3, [r7, #28]
 8010f5e:	1c5a      	adds	r2, r3, #1
 8010f60:	61fa      	str	r2, [r7, #28]
 8010f62:	781b      	ldrb	r3, [r3, #0]
 8010f64:	4619      	mov	r1, r3
 8010f66:	69bb      	ldr	r3, [r7, #24]
 8010f68:	1c5a      	adds	r2, r3, #1
 8010f6a:	61ba      	str	r2, [r7, #24]
 8010f6c:	781b      	ldrb	r3, [r3, #0]
 8010f6e:	1acb      	subs	r3, r1, r3
 8010f70:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	3b01      	subs	r3, #1
 8010f76:	607b      	str	r3, [r7, #4]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d002      	beq.n	8010f84 <mem_cmp+0x40>
 8010f7e:	697b      	ldr	r3, [r7, #20]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d0eb      	beq.n	8010f5c <mem_cmp+0x18>

	return r;
 8010f84:	697b      	ldr	r3, [r7, #20]
}
 8010f86:	4618      	mov	r0, r3
 8010f88:	3724      	adds	r7, #36	; 0x24
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f90:	4770      	bx	lr

08010f92 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010f92:	b480      	push	{r7}
 8010f94:	b083      	sub	sp, #12
 8010f96:	af00      	add	r7, sp, #0
 8010f98:	6078      	str	r0, [r7, #4]
 8010f9a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010f9c:	e002      	b.n	8010fa4 <chk_chr+0x12>
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	3301      	adds	r3, #1
 8010fa2:	607b      	str	r3, [r7, #4]
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	781b      	ldrb	r3, [r3, #0]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d005      	beq.n	8010fb8 <chk_chr+0x26>
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	781b      	ldrb	r3, [r3, #0]
 8010fb0:	461a      	mov	r2, r3
 8010fb2:	683b      	ldr	r3, [r7, #0]
 8010fb4:	4293      	cmp	r3, r2
 8010fb6:	d1f2      	bne.n	8010f9e <chk_chr+0xc>
	return *str;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	781b      	ldrb	r3, [r3, #0]
}
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	370c      	adds	r7, #12
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc6:	4770      	bx	lr

08010fc8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010fc8:	b480      	push	{r7}
 8010fca:	b085      	sub	sp, #20
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
 8010fd0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	60bb      	str	r3, [r7, #8]
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	60fb      	str	r3, [r7, #12]
 8010fda:	e029      	b.n	8011030 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010fdc:	4a27      	ldr	r2, [pc, #156]	; (801107c <chk_lock+0xb4>)
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	011b      	lsls	r3, r3, #4
 8010fe2:	4413      	add	r3, r2
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d01d      	beq.n	8011026 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010fea:	4a24      	ldr	r2, [pc, #144]	; (801107c <chk_lock+0xb4>)
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	011b      	lsls	r3, r3, #4
 8010ff0:	4413      	add	r3, r2
 8010ff2:	681a      	ldr	r2, [r3, #0]
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d116      	bne.n	801102a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010ffc:	4a1f      	ldr	r2, [pc, #124]	; (801107c <chk_lock+0xb4>)
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	011b      	lsls	r3, r3, #4
 8011002:	4413      	add	r3, r2
 8011004:	3304      	adds	r3, #4
 8011006:	681a      	ldr	r2, [r3, #0]
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801100c:	429a      	cmp	r2, r3
 801100e:	d10c      	bne.n	801102a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011010:	4a1a      	ldr	r2, [pc, #104]	; (801107c <chk_lock+0xb4>)
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	011b      	lsls	r3, r3, #4
 8011016:	4413      	add	r3, r2
 8011018:	3308      	adds	r3, #8
 801101a:	681a      	ldr	r2, [r3, #0]
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011020:	429a      	cmp	r2, r3
 8011022:	d102      	bne.n	801102a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011024:	e007      	b.n	8011036 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011026:	2301      	movs	r3, #1
 8011028:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	3301      	adds	r3, #1
 801102e:	60fb      	str	r3, [r7, #12]
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	2b01      	cmp	r3, #1
 8011034:	d9d2      	bls.n	8010fdc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	2b02      	cmp	r3, #2
 801103a:	d109      	bne.n	8011050 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801103c:	68bb      	ldr	r3, [r7, #8]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d102      	bne.n	8011048 <chk_lock+0x80>
 8011042:	683b      	ldr	r3, [r7, #0]
 8011044:	2b02      	cmp	r3, #2
 8011046:	d101      	bne.n	801104c <chk_lock+0x84>
 8011048:	2300      	movs	r3, #0
 801104a:	e010      	b.n	801106e <chk_lock+0xa6>
 801104c:	2312      	movs	r3, #18
 801104e:	e00e      	b.n	801106e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d108      	bne.n	8011068 <chk_lock+0xa0>
 8011056:	4a09      	ldr	r2, [pc, #36]	; (801107c <chk_lock+0xb4>)
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	011b      	lsls	r3, r3, #4
 801105c:	4413      	add	r3, r2
 801105e:	330c      	adds	r3, #12
 8011060:	881b      	ldrh	r3, [r3, #0]
 8011062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011066:	d101      	bne.n	801106c <chk_lock+0xa4>
 8011068:	2310      	movs	r3, #16
 801106a:	e000      	b.n	801106e <chk_lock+0xa6>
 801106c:	2300      	movs	r3, #0
}
 801106e:	4618      	mov	r0, r3
 8011070:	3714      	adds	r7, #20
 8011072:	46bd      	mov	sp, r7
 8011074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011078:	4770      	bx	lr
 801107a:	bf00      	nop
 801107c:	20004b0c 	.word	0x20004b0c

08011080 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011080:	b480      	push	{r7}
 8011082:	b083      	sub	sp, #12
 8011084:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011086:	2300      	movs	r3, #0
 8011088:	607b      	str	r3, [r7, #4]
 801108a:	e002      	b.n	8011092 <enq_lock+0x12>
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	3301      	adds	r3, #1
 8011090:	607b      	str	r3, [r7, #4]
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2b01      	cmp	r3, #1
 8011096:	d806      	bhi.n	80110a6 <enq_lock+0x26>
 8011098:	4a09      	ldr	r2, [pc, #36]	; (80110c0 <enq_lock+0x40>)
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	011b      	lsls	r3, r3, #4
 801109e:	4413      	add	r3, r2
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d1f2      	bne.n	801108c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	2b02      	cmp	r3, #2
 80110aa:	bf14      	ite	ne
 80110ac:	2301      	movne	r3, #1
 80110ae:	2300      	moveq	r3, #0
 80110b0:	b2db      	uxtb	r3, r3
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	370c      	adds	r7, #12
 80110b6:	46bd      	mov	sp, r7
 80110b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110bc:	4770      	bx	lr
 80110be:	bf00      	nop
 80110c0:	20004b0c 	.word	0x20004b0c

080110c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80110c4:	b480      	push	{r7}
 80110c6:	b085      	sub	sp, #20
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
 80110cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80110ce:	2300      	movs	r3, #0
 80110d0:	60fb      	str	r3, [r7, #12]
 80110d2:	e01f      	b.n	8011114 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80110d4:	4a41      	ldr	r2, [pc, #260]	; (80111dc <inc_lock+0x118>)
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	011b      	lsls	r3, r3, #4
 80110da:	4413      	add	r3, r2
 80110dc:	681a      	ldr	r2, [r3, #0]
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	429a      	cmp	r2, r3
 80110e4:	d113      	bne.n	801110e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80110e6:	4a3d      	ldr	r2, [pc, #244]	; (80111dc <inc_lock+0x118>)
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	011b      	lsls	r3, r3, #4
 80110ec:	4413      	add	r3, r2
 80110ee:	3304      	adds	r3, #4
 80110f0:	681a      	ldr	r2, [r3, #0]
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80110f6:	429a      	cmp	r2, r3
 80110f8:	d109      	bne.n	801110e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80110fa:	4a38      	ldr	r2, [pc, #224]	; (80111dc <inc_lock+0x118>)
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	011b      	lsls	r3, r3, #4
 8011100:	4413      	add	r3, r2
 8011102:	3308      	adds	r3, #8
 8011104:	681a      	ldr	r2, [r3, #0]
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801110a:	429a      	cmp	r2, r3
 801110c:	d006      	beq.n	801111c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	3301      	adds	r3, #1
 8011112:	60fb      	str	r3, [r7, #12]
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	2b01      	cmp	r3, #1
 8011118:	d9dc      	bls.n	80110d4 <inc_lock+0x10>
 801111a:	e000      	b.n	801111e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801111c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	2b02      	cmp	r3, #2
 8011122:	d132      	bne.n	801118a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011124:	2300      	movs	r3, #0
 8011126:	60fb      	str	r3, [r7, #12]
 8011128:	e002      	b.n	8011130 <inc_lock+0x6c>
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	3301      	adds	r3, #1
 801112e:	60fb      	str	r3, [r7, #12]
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	2b01      	cmp	r3, #1
 8011134:	d806      	bhi.n	8011144 <inc_lock+0x80>
 8011136:	4a29      	ldr	r2, [pc, #164]	; (80111dc <inc_lock+0x118>)
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	011b      	lsls	r3, r3, #4
 801113c:	4413      	add	r3, r2
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d1f2      	bne.n	801112a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	2b02      	cmp	r3, #2
 8011148:	d101      	bne.n	801114e <inc_lock+0x8a>
 801114a:	2300      	movs	r3, #0
 801114c:	e040      	b.n	80111d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681a      	ldr	r2, [r3, #0]
 8011152:	4922      	ldr	r1, [pc, #136]	; (80111dc <inc_lock+0x118>)
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	011b      	lsls	r3, r3, #4
 8011158:	440b      	add	r3, r1
 801115a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	689a      	ldr	r2, [r3, #8]
 8011160:	491e      	ldr	r1, [pc, #120]	; (80111dc <inc_lock+0x118>)
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	011b      	lsls	r3, r3, #4
 8011166:	440b      	add	r3, r1
 8011168:	3304      	adds	r3, #4
 801116a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	695a      	ldr	r2, [r3, #20]
 8011170:	491a      	ldr	r1, [pc, #104]	; (80111dc <inc_lock+0x118>)
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	011b      	lsls	r3, r3, #4
 8011176:	440b      	add	r3, r1
 8011178:	3308      	adds	r3, #8
 801117a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801117c:	4a17      	ldr	r2, [pc, #92]	; (80111dc <inc_lock+0x118>)
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	011b      	lsls	r3, r3, #4
 8011182:	4413      	add	r3, r2
 8011184:	330c      	adds	r3, #12
 8011186:	2200      	movs	r2, #0
 8011188:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d009      	beq.n	80111a4 <inc_lock+0xe0>
 8011190:	4a12      	ldr	r2, [pc, #72]	; (80111dc <inc_lock+0x118>)
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	011b      	lsls	r3, r3, #4
 8011196:	4413      	add	r3, r2
 8011198:	330c      	adds	r3, #12
 801119a:	881b      	ldrh	r3, [r3, #0]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d001      	beq.n	80111a4 <inc_lock+0xe0>
 80111a0:	2300      	movs	r3, #0
 80111a2:	e015      	b.n	80111d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d108      	bne.n	80111bc <inc_lock+0xf8>
 80111aa:	4a0c      	ldr	r2, [pc, #48]	; (80111dc <inc_lock+0x118>)
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	011b      	lsls	r3, r3, #4
 80111b0:	4413      	add	r3, r2
 80111b2:	330c      	adds	r3, #12
 80111b4:	881b      	ldrh	r3, [r3, #0]
 80111b6:	3301      	adds	r3, #1
 80111b8:	b29a      	uxth	r2, r3
 80111ba:	e001      	b.n	80111c0 <inc_lock+0xfc>
 80111bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80111c0:	4906      	ldr	r1, [pc, #24]	; (80111dc <inc_lock+0x118>)
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	011b      	lsls	r3, r3, #4
 80111c6:	440b      	add	r3, r1
 80111c8:	330c      	adds	r3, #12
 80111ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	3301      	adds	r3, #1
}
 80111d0:	4618      	mov	r0, r3
 80111d2:	3714      	adds	r7, #20
 80111d4:	46bd      	mov	sp, r7
 80111d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111da:	4770      	bx	lr
 80111dc:	20004b0c 	.word	0x20004b0c

080111e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80111e0:	b480      	push	{r7}
 80111e2:	b085      	sub	sp, #20
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	3b01      	subs	r3, #1
 80111ec:	607b      	str	r3, [r7, #4]
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2b01      	cmp	r3, #1
 80111f2:	d825      	bhi.n	8011240 <dec_lock+0x60>
		n = Files[i].ctr;
 80111f4:	4a17      	ldr	r2, [pc, #92]	; (8011254 <dec_lock+0x74>)
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	011b      	lsls	r3, r3, #4
 80111fa:	4413      	add	r3, r2
 80111fc:	330c      	adds	r3, #12
 80111fe:	881b      	ldrh	r3, [r3, #0]
 8011200:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011202:	89fb      	ldrh	r3, [r7, #14]
 8011204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011208:	d101      	bne.n	801120e <dec_lock+0x2e>
 801120a:	2300      	movs	r3, #0
 801120c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801120e:	89fb      	ldrh	r3, [r7, #14]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d002      	beq.n	801121a <dec_lock+0x3a>
 8011214:	89fb      	ldrh	r3, [r7, #14]
 8011216:	3b01      	subs	r3, #1
 8011218:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801121a:	4a0e      	ldr	r2, [pc, #56]	; (8011254 <dec_lock+0x74>)
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	011b      	lsls	r3, r3, #4
 8011220:	4413      	add	r3, r2
 8011222:	330c      	adds	r3, #12
 8011224:	89fa      	ldrh	r2, [r7, #14]
 8011226:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011228:	89fb      	ldrh	r3, [r7, #14]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d105      	bne.n	801123a <dec_lock+0x5a>
 801122e:	4a09      	ldr	r2, [pc, #36]	; (8011254 <dec_lock+0x74>)
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	011b      	lsls	r3, r3, #4
 8011234:	4413      	add	r3, r2
 8011236:	2200      	movs	r2, #0
 8011238:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801123a:	2300      	movs	r3, #0
 801123c:	737b      	strb	r3, [r7, #13]
 801123e:	e001      	b.n	8011244 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011240:	2302      	movs	r3, #2
 8011242:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011244:	7b7b      	ldrb	r3, [r7, #13]
}
 8011246:	4618      	mov	r0, r3
 8011248:	3714      	adds	r7, #20
 801124a:	46bd      	mov	sp, r7
 801124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011250:	4770      	bx	lr
 8011252:	bf00      	nop
 8011254:	20004b0c 	.word	0x20004b0c

08011258 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011258:	b480      	push	{r7}
 801125a:	b085      	sub	sp, #20
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011260:	2300      	movs	r3, #0
 8011262:	60fb      	str	r3, [r7, #12]
 8011264:	e010      	b.n	8011288 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011266:	4a0d      	ldr	r2, [pc, #52]	; (801129c <clear_lock+0x44>)
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	011b      	lsls	r3, r3, #4
 801126c:	4413      	add	r3, r2
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	687a      	ldr	r2, [r7, #4]
 8011272:	429a      	cmp	r2, r3
 8011274:	d105      	bne.n	8011282 <clear_lock+0x2a>
 8011276:	4a09      	ldr	r2, [pc, #36]	; (801129c <clear_lock+0x44>)
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	011b      	lsls	r3, r3, #4
 801127c:	4413      	add	r3, r2
 801127e:	2200      	movs	r2, #0
 8011280:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	3301      	adds	r3, #1
 8011286:	60fb      	str	r3, [r7, #12]
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	2b01      	cmp	r3, #1
 801128c:	d9eb      	bls.n	8011266 <clear_lock+0xe>
	}
}
 801128e:	bf00      	nop
 8011290:	bf00      	nop
 8011292:	3714      	adds	r7, #20
 8011294:	46bd      	mov	sp, r7
 8011296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129a:	4770      	bx	lr
 801129c:	20004b0c 	.word	0x20004b0c

080112a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b086      	sub	sp, #24
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80112a8:	2300      	movs	r3, #0
 80112aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	78db      	ldrb	r3, [r3, #3]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d034      	beq.n	801131e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	7858      	ldrb	r0, [r3, #1]
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80112c4:	2301      	movs	r3, #1
 80112c6:	697a      	ldr	r2, [r7, #20]
 80112c8:	f7ff fd40 	bl	8010d4c <disk_write>
 80112cc:	4603      	mov	r3, r0
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d002      	beq.n	80112d8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80112d2:	2301      	movs	r3, #1
 80112d4:	73fb      	strb	r3, [r7, #15]
 80112d6:	e022      	b.n	801131e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2200      	movs	r2, #0
 80112dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112e2:	697a      	ldr	r2, [r7, #20]
 80112e4:	1ad2      	subs	r2, r2, r3
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	69db      	ldr	r3, [r3, #28]
 80112ea:	429a      	cmp	r2, r3
 80112ec:	d217      	bcs.n	801131e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	789b      	ldrb	r3, [r3, #2]
 80112f2:	613b      	str	r3, [r7, #16]
 80112f4:	e010      	b.n	8011318 <sync_window+0x78>
					wsect += fs->fsize;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	69db      	ldr	r3, [r3, #28]
 80112fa:	697a      	ldr	r2, [r7, #20]
 80112fc:	4413      	add	r3, r2
 80112fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	7858      	ldrb	r0, [r3, #1]
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801130a:	2301      	movs	r3, #1
 801130c:	697a      	ldr	r2, [r7, #20]
 801130e:	f7ff fd1d 	bl	8010d4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011312:	693b      	ldr	r3, [r7, #16]
 8011314:	3b01      	subs	r3, #1
 8011316:	613b      	str	r3, [r7, #16]
 8011318:	693b      	ldr	r3, [r7, #16]
 801131a:	2b01      	cmp	r3, #1
 801131c:	d8eb      	bhi.n	80112f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801131e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011320:	4618      	mov	r0, r3
 8011322:	3718      	adds	r7, #24
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}

08011328 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b084      	sub	sp, #16
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
 8011330:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011332:	2300      	movs	r3, #0
 8011334:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801133a:	683a      	ldr	r2, [r7, #0]
 801133c:	429a      	cmp	r2, r3
 801133e:	d01b      	beq.n	8011378 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011340:	6878      	ldr	r0, [r7, #4]
 8011342:	f7ff ffad 	bl	80112a0 <sync_window>
 8011346:	4603      	mov	r3, r0
 8011348:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801134a:	7bfb      	ldrb	r3, [r7, #15]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d113      	bne.n	8011378 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	7858      	ldrb	r0, [r3, #1]
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801135a:	2301      	movs	r3, #1
 801135c:	683a      	ldr	r2, [r7, #0]
 801135e:	f7ff fcd5 	bl	8010d0c <disk_read>
 8011362:	4603      	mov	r3, r0
 8011364:	2b00      	cmp	r3, #0
 8011366:	d004      	beq.n	8011372 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011368:	f04f 33ff 	mov.w	r3, #4294967295
 801136c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801136e:	2301      	movs	r3, #1
 8011370:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	683a      	ldr	r2, [r7, #0]
 8011376:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8011378:	7bfb      	ldrb	r3, [r7, #15]
}
 801137a:	4618      	mov	r0, r3
 801137c:	3710      	adds	r7, #16
 801137e:	46bd      	mov	sp, r7
 8011380:	bd80      	pop	{r7, pc}
	...

08011384 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b084      	sub	sp, #16
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f7ff ff87 	bl	80112a0 <sync_window>
 8011392:	4603      	mov	r3, r0
 8011394:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011396:	7bfb      	ldrb	r3, [r7, #15]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d159      	bne.n	8011450 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	781b      	ldrb	r3, [r3, #0]
 80113a0:	2b03      	cmp	r3, #3
 80113a2:	d149      	bne.n	8011438 <sync_fs+0xb4>
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	791b      	ldrb	r3, [r3, #4]
 80113a8:	2b01      	cmp	r3, #1
 80113aa:	d145      	bne.n	8011438 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	899b      	ldrh	r3, [r3, #12]
 80113b6:	461a      	mov	r2, r3
 80113b8:	2100      	movs	r1, #0
 80113ba:	f7ff fda8 	bl	8010f0e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	3334      	adds	r3, #52	; 0x34
 80113c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80113c6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7ff fd37 	bl	8010e3e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	3334      	adds	r3, #52	; 0x34
 80113d4:	4921      	ldr	r1, [pc, #132]	; (801145c <sync_fs+0xd8>)
 80113d6:	4618      	mov	r0, r3
 80113d8:	f7ff fd4c 	bl	8010e74 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	3334      	adds	r3, #52	; 0x34
 80113e0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80113e4:	491e      	ldr	r1, [pc, #120]	; (8011460 <sync_fs+0xdc>)
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7ff fd44 	bl	8010e74 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	3334      	adds	r3, #52	; 0x34
 80113f0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	695b      	ldr	r3, [r3, #20]
 80113f8:	4619      	mov	r1, r3
 80113fa:	4610      	mov	r0, r2
 80113fc:	f7ff fd3a 	bl	8010e74 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	3334      	adds	r3, #52	; 0x34
 8011404:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	691b      	ldr	r3, [r3, #16]
 801140c:	4619      	mov	r1, r3
 801140e:	4610      	mov	r0, r2
 8011410:	f7ff fd30 	bl	8010e74 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6a1b      	ldr	r3, [r3, #32]
 8011418:	1c5a      	adds	r2, r3, #1
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	7858      	ldrb	r0, [r3, #1]
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801142c:	2301      	movs	r3, #1
 801142e:	f7ff fc8d 	bl	8010d4c <disk_write>
			fs->fsi_flag = 0;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	2200      	movs	r2, #0
 8011436:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	785b      	ldrb	r3, [r3, #1]
 801143c:	2200      	movs	r2, #0
 801143e:	2100      	movs	r1, #0
 8011440:	4618      	mov	r0, r3
 8011442:	f7ff fca3 	bl	8010d8c <disk_ioctl>
 8011446:	4603      	mov	r3, r0
 8011448:	2b00      	cmp	r3, #0
 801144a:	d001      	beq.n	8011450 <sync_fs+0xcc>
 801144c:	2301      	movs	r3, #1
 801144e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011450:	7bfb      	ldrb	r3, [r7, #15]
}
 8011452:	4618      	mov	r0, r3
 8011454:	3710      	adds	r7, #16
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
 801145a:	bf00      	nop
 801145c:	41615252 	.word	0x41615252
 8011460:	61417272 	.word	0x61417272

08011464 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011464:	b480      	push	{r7}
 8011466:	b083      	sub	sp, #12
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
 801146c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	3b02      	subs	r3, #2
 8011472:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	699b      	ldr	r3, [r3, #24]
 8011478:	3b02      	subs	r3, #2
 801147a:	683a      	ldr	r2, [r7, #0]
 801147c:	429a      	cmp	r2, r3
 801147e:	d301      	bcc.n	8011484 <clust2sect+0x20>
 8011480:	2300      	movs	r3, #0
 8011482:	e008      	b.n	8011496 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	895b      	ldrh	r3, [r3, #10]
 8011488:	461a      	mov	r2, r3
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	fb03 f202 	mul.w	r2, r3, r2
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011494:	4413      	add	r3, r2
}
 8011496:	4618      	mov	r0, r3
 8011498:	370c      	adds	r7, #12
 801149a:	46bd      	mov	sp, r7
 801149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a0:	4770      	bx	lr

080114a2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80114a2:	b580      	push	{r7, lr}
 80114a4:	b086      	sub	sp, #24
 80114a6:	af00      	add	r7, sp, #0
 80114a8:	6078      	str	r0, [r7, #4]
 80114aa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	2b01      	cmp	r3, #1
 80114b6:	d904      	bls.n	80114c2 <get_fat+0x20>
 80114b8:	693b      	ldr	r3, [r7, #16]
 80114ba:	699b      	ldr	r3, [r3, #24]
 80114bc:	683a      	ldr	r2, [r7, #0]
 80114be:	429a      	cmp	r2, r3
 80114c0:	d302      	bcc.n	80114c8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80114c2:	2301      	movs	r3, #1
 80114c4:	617b      	str	r3, [r7, #20]
 80114c6:	e0bb      	b.n	8011640 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80114c8:	f04f 33ff 	mov.w	r3, #4294967295
 80114cc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80114ce:	693b      	ldr	r3, [r7, #16]
 80114d0:	781b      	ldrb	r3, [r3, #0]
 80114d2:	2b03      	cmp	r3, #3
 80114d4:	f000 8083 	beq.w	80115de <get_fat+0x13c>
 80114d8:	2b03      	cmp	r3, #3
 80114da:	f300 80a7 	bgt.w	801162c <get_fat+0x18a>
 80114de:	2b01      	cmp	r3, #1
 80114e0:	d002      	beq.n	80114e8 <get_fat+0x46>
 80114e2:	2b02      	cmp	r3, #2
 80114e4:	d056      	beq.n	8011594 <get_fat+0xf2>
 80114e6:	e0a1      	b.n	801162c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	60fb      	str	r3, [r7, #12]
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	085b      	lsrs	r3, r3, #1
 80114f0:	68fa      	ldr	r2, [r7, #12]
 80114f2:	4413      	add	r3, r2
 80114f4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80114f6:	693b      	ldr	r3, [r7, #16]
 80114f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114fa:	693b      	ldr	r3, [r7, #16]
 80114fc:	899b      	ldrh	r3, [r3, #12]
 80114fe:	4619      	mov	r1, r3
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	fbb3 f3f1 	udiv	r3, r3, r1
 8011506:	4413      	add	r3, r2
 8011508:	4619      	mov	r1, r3
 801150a:	6938      	ldr	r0, [r7, #16]
 801150c:	f7ff ff0c 	bl	8011328 <move_window>
 8011510:	4603      	mov	r3, r0
 8011512:	2b00      	cmp	r3, #0
 8011514:	f040 808d 	bne.w	8011632 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	1c5a      	adds	r2, r3, #1
 801151c:	60fa      	str	r2, [r7, #12]
 801151e:	693a      	ldr	r2, [r7, #16]
 8011520:	8992      	ldrh	r2, [r2, #12]
 8011522:	fbb3 f1f2 	udiv	r1, r3, r2
 8011526:	fb01 f202 	mul.w	r2, r1, r2
 801152a:	1a9b      	subs	r3, r3, r2
 801152c:	693a      	ldr	r2, [r7, #16]
 801152e:	4413      	add	r3, r2
 8011530:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011534:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011536:	693b      	ldr	r3, [r7, #16]
 8011538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801153a:	693b      	ldr	r3, [r7, #16]
 801153c:	899b      	ldrh	r3, [r3, #12]
 801153e:	4619      	mov	r1, r3
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	fbb3 f3f1 	udiv	r3, r3, r1
 8011546:	4413      	add	r3, r2
 8011548:	4619      	mov	r1, r3
 801154a:	6938      	ldr	r0, [r7, #16]
 801154c:	f7ff feec 	bl	8011328 <move_window>
 8011550:	4603      	mov	r3, r0
 8011552:	2b00      	cmp	r3, #0
 8011554:	d16f      	bne.n	8011636 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011556:	693b      	ldr	r3, [r7, #16]
 8011558:	899b      	ldrh	r3, [r3, #12]
 801155a:	461a      	mov	r2, r3
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011562:	fb01 f202 	mul.w	r2, r1, r2
 8011566:	1a9b      	subs	r3, r3, r2
 8011568:	693a      	ldr	r2, [r7, #16]
 801156a:	4413      	add	r3, r2
 801156c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011570:	021b      	lsls	r3, r3, #8
 8011572:	461a      	mov	r2, r3
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	4313      	orrs	r3, r2
 8011578:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	f003 0301 	and.w	r3, r3, #1
 8011580:	2b00      	cmp	r3, #0
 8011582:	d002      	beq.n	801158a <get_fat+0xe8>
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	091b      	lsrs	r3, r3, #4
 8011588:	e002      	b.n	8011590 <get_fat+0xee>
 801158a:	68bb      	ldr	r3, [r7, #8]
 801158c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011590:	617b      	str	r3, [r7, #20]
			break;
 8011592:	e055      	b.n	8011640 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011594:	693b      	ldr	r3, [r7, #16]
 8011596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011598:	693b      	ldr	r3, [r7, #16]
 801159a:	899b      	ldrh	r3, [r3, #12]
 801159c:	085b      	lsrs	r3, r3, #1
 801159e:	b29b      	uxth	r3, r3
 80115a0:	4619      	mov	r1, r3
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80115a8:	4413      	add	r3, r2
 80115aa:	4619      	mov	r1, r3
 80115ac:	6938      	ldr	r0, [r7, #16]
 80115ae:	f7ff febb 	bl	8011328 <move_window>
 80115b2:	4603      	mov	r3, r0
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d140      	bne.n	801163a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	005b      	lsls	r3, r3, #1
 80115c2:	693a      	ldr	r2, [r7, #16]
 80115c4:	8992      	ldrh	r2, [r2, #12]
 80115c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80115ca:	fb00 f202 	mul.w	r2, r0, r2
 80115ce:	1a9b      	subs	r3, r3, r2
 80115d0:	440b      	add	r3, r1
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7ff fbf8 	bl	8010dc8 <ld_word>
 80115d8:	4603      	mov	r3, r0
 80115da:	617b      	str	r3, [r7, #20]
			break;
 80115dc:	e030      	b.n	8011640 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80115de:	693b      	ldr	r3, [r7, #16]
 80115e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80115e2:	693b      	ldr	r3, [r7, #16]
 80115e4:	899b      	ldrh	r3, [r3, #12]
 80115e6:	089b      	lsrs	r3, r3, #2
 80115e8:	b29b      	uxth	r3, r3
 80115ea:	4619      	mov	r1, r3
 80115ec:	683b      	ldr	r3, [r7, #0]
 80115ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80115f2:	4413      	add	r3, r2
 80115f4:	4619      	mov	r1, r3
 80115f6:	6938      	ldr	r0, [r7, #16]
 80115f8:	f7ff fe96 	bl	8011328 <move_window>
 80115fc:	4603      	mov	r3, r0
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d11d      	bne.n	801163e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011602:	693b      	ldr	r3, [r7, #16]
 8011604:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	009b      	lsls	r3, r3, #2
 801160c:	693a      	ldr	r2, [r7, #16]
 801160e:	8992      	ldrh	r2, [r2, #12]
 8011610:	fbb3 f0f2 	udiv	r0, r3, r2
 8011614:	fb00 f202 	mul.w	r2, r0, r2
 8011618:	1a9b      	subs	r3, r3, r2
 801161a:	440b      	add	r3, r1
 801161c:	4618      	mov	r0, r3
 801161e:	f7ff fbeb 	bl	8010df8 <ld_dword>
 8011622:	4603      	mov	r3, r0
 8011624:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011628:	617b      	str	r3, [r7, #20]
			break;
 801162a:	e009      	b.n	8011640 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801162c:	2301      	movs	r3, #1
 801162e:	617b      	str	r3, [r7, #20]
 8011630:	e006      	b.n	8011640 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011632:	bf00      	nop
 8011634:	e004      	b.n	8011640 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011636:	bf00      	nop
 8011638:	e002      	b.n	8011640 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801163a:	bf00      	nop
 801163c:	e000      	b.n	8011640 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801163e:	bf00      	nop
		}
	}

	return val;
 8011640:	697b      	ldr	r3, [r7, #20]
}
 8011642:	4618      	mov	r0, r3
 8011644:	3718      	adds	r7, #24
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}

0801164a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801164a:	b590      	push	{r4, r7, lr}
 801164c:	b089      	sub	sp, #36	; 0x24
 801164e:	af00      	add	r7, sp, #0
 8011650:	60f8      	str	r0, [r7, #12]
 8011652:	60b9      	str	r1, [r7, #8]
 8011654:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011656:	2302      	movs	r3, #2
 8011658:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	2b01      	cmp	r3, #1
 801165e:	f240 8102 	bls.w	8011866 <put_fat+0x21c>
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	699b      	ldr	r3, [r3, #24]
 8011666:	68ba      	ldr	r2, [r7, #8]
 8011668:	429a      	cmp	r2, r3
 801166a:	f080 80fc 	bcs.w	8011866 <put_fat+0x21c>
		switch (fs->fs_type) {
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	781b      	ldrb	r3, [r3, #0]
 8011672:	2b03      	cmp	r3, #3
 8011674:	f000 80b6 	beq.w	80117e4 <put_fat+0x19a>
 8011678:	2b03      	cmp	r3, #3
 801167a:	f300 80fd 	bgt.w	8011878 <put_fat+0x22e>
 801167e:	2b01      	cmp	r3, #1
 8011680:	d003      	beq.n	801168a <put_fat+0x40>
 8011682:	2b02      	cmp	r3, #2
 8011684:	f000 8083 	beq.w	801178e <put_fat+0x144>
 8011688:	e0f6      	b.n	8011878 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801168a:	68bb      	ldr	r3, [r7, #8]
 801168c:	61bb      	str	r3, [r7, #24]
 801168e:	69bb      	ldr	r3, [r7, #24]
 8011690:	085b      	lsrs	r3, r3, #1
 8011692:	69ba      	ldr	r2, [r7, #24]
 8011694:	4413      	add	r3, r2
 8011696:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	899b      	ldrh	r3, [r3, #12]
 80116a0:	4619      	mov	r1, r3
 80116a2:	69bb      	ldr	r3, [r7, #24]
 80116a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80116a8:	4413      	add	r3, r2
 80116aa:	4619      	mov	r1, r3
 80116ac:	68f8      	ldr	r0, [r7, #12]
 80116ae:	f7ff fe3b 	bl	8011328 <move_window>
 80116b2:	4603      	mov	r3, r0
 80116b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80116b6:	7ffb      	ldrb	r3, [r7, #31]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	f040 80d6 	bne.w	801186a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80116c4:	69bb      	ldr	r3, [r7, #24]
 80116c6:	1c5a      	adds	r2, r3, #1
 80116c8:	61ba      	str	r2, [r7, #24]
 80116ca:	68fa      	ldr	r2, [r7, #12]
 80116cc:	8992      	ldrh	r2, [r2, #12]
 80116ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80116d2:	fb00 f202 	mul.w	r2, r0, r2
 80116d6:	1a9b      	subs	r3, r3, r2
 80116d8:	440b      	add	r3, r1
 80116da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80116dc:	68bb      	ldr	r3, [r7, #8]
 80116de:	f003 0301 	and.w	r3, r3, #1
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d00d      	beq.n	8011702 <put_fat+0xb8>
 80116e6:	697b      	ldr	r3, [r7, #20]
 80116e8:	781b      	ldrb	r3, [r3, #0]
 80116ea:	b25b      	sxtb	r3, r3
 80116ec:	f003 030f 	and.w	r3, r3, #15
 80116f0:	b25a      	sxtb	r2, r3
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	b2db      	uxtb	r3, r3
 80116f6:	011b      	lsls	r3, r3, #4
 80116f8:	b25b      	sxtb	r3, r3
 80116fa:	4313      	orrs	r3, r2
 80116fc:	b25b      	sxtb	r3, r3
 80116fe:	b2db      	uxtb	r3, r3
 8011700:	e001      	b.n	8011706 <put_fat+0xbc>
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	b2db      	uxtb	r3, r3
 8011706:	697a      	ldr	r2, [r7, #20]
 8011708:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	2201      	movs	r2, #1
 801170e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	899b      	ldrh	r3, [r3, #12]
 8011718:	4619      	mov	r1, r3
 801171a:	69bb      	ldr	r3, [r7, #24]
 801171c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011720:	4413      	add	r3, r2
 8011722:	4619      	mov	r1, r3
 8011724:	68f8      	ldr	r0, [r7, #12]
 8011726:	f7ff fdff 	bl	8011328 <move_window>
 801172a:	4603      	mov	r3, r0
 801172c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801172e:	7ffb      	ldrb	r3, [r7, #31]
 8011730:	2b00      	cmp	r3, #0
 8011732:	f040 809c 	bne.w	801186e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	899b      	ldrh	r3, [r3, #12]
 8011740:	461a      	mov	r2, r3
 8011742:	69bb      	ldr	r3, [r7, #24]
 8011744:	fbb3 f0f2 	udiv	r0, r3, r2
 8011748:	fb00 f202 	mul.w	r2, r0, r2
 801174c:	1a9b      	subs	r3, r3, r2
 801174e:	440b      	add	r3, r1
 8011750:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011752:	68bb      	ldr	r3, [r7, #8]
 8011754:	f003 0301 	and.w	r3, r3, #1
 8011758:	2b00      	cmp	r3, #0
 801175a:	d003      	beq.n	8011764 <put_fat+0x11a>
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	091b      	lsrs	r3, r3, #4
 8011760:	b2db      	uxtb	r3, r3
 8011762:	e00e      	b.n	8011782 <put_fat+0x138>
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	781b      	ldrb	r3, [r3, #0]
 8011768:	b25b      	sxtb	r3, r3
 801176a:	f023 030f 	bic.w	r3, r3, #15
 801176e:	b25a      	sxtb	r2, r3
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	0a1b      	lsrs	r3, r3, #8
 8011774:	b25b      	sxtb	r3, r3
 8011776:	f003 030f 	and.w	r3, r3, #15
 801177a:	b25b      	sxtb	r3, r3
 801177c:	4313      	orrs	r3, r2
 801177e:	b25b      	sxtb	r3, r3
 8011780:	b2db      	uxtb	r3, r3
 8011782:	697a      	ldr	r2, [r7, #20]
 8011784:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	2201      	movs	r2, #1
 801178a:	70da      	strb	r2, [r3, #3]
			break;
 801178c:	e074      	b.n	8011878 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	899b      	ldrh	r3, [r3, #12]
 8011796:	085b      	lsrs	r3, r3, #1
 8011798:	b29b      	uxth	r3, r3
 801179a:	4619      	mov	r1, r3
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	fbb3 f3f1 	udiv	r3, r3, r1
 80117a2:	4413      	add	r3, r2
 80117a4:	4619      	mov	r1, r3
 80117a6:	68f8      	ldr	r0, [r7, #12]
 80117a8:	f7ff fdbe 	bl	8011328 <move_window>
 80117ac:	4603      	mov	r3, r0
 80117ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80117b0:	7ffb      	ldrb	r3, [r7, #31]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d15d      	bne.n	8011872 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80117bc:	68bb      	ldr	r3, [r7, #8]
 80117be:	005b      	lsls	r3, r3, #1
 80117c0:	68fa      	ldr	r2, [r7, #12]
 80117c2:	8992      	ldrh	r2, [r2, #12]
 80117c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80117c8:	fb00 f202 	mul.w	r2, r0, r2
 80117cc:	1a9b      	subs	r3, r3, r2
 80117ce:	440b      	add	r3, r1
 80117d0:	687a      	ldr	r2, [r7, #4]
 80117d2:	b292      	uxth	r2, r2
 80117d4:	4611      	mov	r1, r2
 80117d6:	4618      	mov	r0, r3
 80117d8:	f7ff fb31 	bl	8010e3e <st_word>
			fs->wflag = 1;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	2201      	movs	r2, #1
 80117e0:	70da      	strb	r2, [r3, #3]
			break;
 80117e2:	e049      	b.n	8011878 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	899b      	ldrh	r3, [r3, #12]
 80117ec:	089b      	lsrs	r3, r3, #2
 80117ee:	b29b      	uxth	r3, r3
 80117f0:	4619      	mov	r1, r3
 80117f2:	68bb      	ldr	r3, [r7, #8]
 80117f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80117f8:	4413      	add	r3, r2
 80117fa:	4619      	mov	r1, r3
 80117fc:	68f8      	ldr	r0, [r7, #12]
 80117fe:	f7ff fd93 	bl	8011328 <move_window>
 8011802:	4603      	mov	r3, r0
 8011804:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011806:	7ffb      	ldrb	r3, [r7, #31]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d134      	bne.n	8011876 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	009b      	lsls	r3, r3, #2
 801181c:	68fa      	ldr	r2, [r7, #12]
 801181e:	8992      	ldrh	r2, [r2, #12]
 8011820:	fbb3 f0f2 	udiv	r0, r3, r2
 8011824:	fb00 f202 	mul.w	r2, r0, r2
 8011828:	1a9b      	subs	r3, r3, r2
 801182a:	440b      	add	r3, r1
 801182c:	4618      	mov	r0, r3
 801182e:	f7ff fae3 	bl	8010df8 <ld_dword>
 8011832:	4603      	mov	r3, r0
 8011834:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011838:	4323      	orrs	r3, r4
 801183a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011842:	68bb      	ldr	r3, [r7, #8]
 8011844:	009b      	lsls	r3, r3, #2
 8011846:	68fa      	ldr	r2, [r7, #12]
 8011848:	8992      	ldrh	r2, [r2, #12]
 801184a:	fbb3 f0f2 	udiv	r0, r3, r2
 801184e:	fb00 f202 	mul.w	r2, r0, r2
 8011852:	1a9b      	subs	r3, r3, r2
 8011854:	440b      	add	r3, r1
 8011856:	6879      	ldr	r1, [r7, #4]
 8011858:	4618      	mov	r0, r3
 801185a:	f7ff fb0b 	bl	8010e74 <st_dword>
			fs->wflag = 1;
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	2201      	movs	r2, #1
 8011862:	70da      	strb	r2, [r3, #3]
			break;
 8011864:	e008      	b.n	8011878 <put_fat+0x22e>
		}
	}
 8011866:	bf00      	nop
 8011868:	e006      	b.n	8011878 <put_fat+0x22e>
			if (res != FR_OK) break;
 801186a:	bf00      	nop
 801186c:	e004      	b.n	8011878 <put_fat+0x22e>
			if (res != FR_OK) break;
 801186e:	bf00      	nop
 8011870:	e002      	b.n	8011878 <put_fat+0x22e>
			if (res != FR_OK) break;
 8011872:	bf00      	nop
 8011874:	e000      	b.n	8011878 <put_fat+0x22e>
			if (res != FR_OK) break;
 8011876:	bf00      	nop
	return res;
 8011878:	7ffb      	ldrb	r3, [r7, #31]
}
 801187a:	4618      	mov	r0, r3
 801187c:	3724      	adds	r7, #36	; 0x24
 801187e:	46bd      	mov	sp, r7
 8011880:	bd90      	pop	{r4, r7, pc}

08011882 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011882:	b580      	push	{r7, lr}
 8011884:	b088      	sub	sp, #32
 8011886:	af00      	add	r7, sp, #0
 8011888:	60f8      	str	r0, [r7, #12]
 801188a:	60b9      	str	r1, [r7, #8]
 801188c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801188e:	2300      	movs	r3, #0
 8011890:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011898:	68bb      	ldr	r3, [r7, #8]
 801189a:	2b01      	cmp	r3, #1
 801189c:	d904      	bls.n	80118a8 <remove_chain+0x26>
 801189e:	69bb      	ldr	r3, [r7, #24]
 80118a0:	699b      	ldr	r3, [r3, #24]
 80118a2:	68ba      	ldr	r2, [r7, #8]
 80118a4:	429a      	cmp	r2, r3
 80118a6:	d301      	bcc.n	80118ac <remove_chain+0x2a>
 80118a8:	2302      	movs	r3, #2
 80118aa:	e04b      	b.n	8011944 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d00c      	beq.n	80118cc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80118b2:	f04f 32ff 	mov.w	r2, #4294967295
 80118b6:	6879      	ldr	r1, [r7, #4]
 80118b8:	69b8      	ldr	r0, [r7, #24]
 80118ba:	f7ff fec6 	bl	801164a <put_fat>
 80118be:	4603      	mov	r3, r0
 80118c0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80118c2:	7ffb      	ldrb	r3, [r7, #31]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d001      	beq.n	80118cc <remove_chain+0x4a>
 80118c8:	7ffb      	ldrb	r3, [r7, #31]
 80118ca:	e03b      	b.n	8011944 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80118cc:	68b9      	ldr	r1, [r7, #8]
 80118ce:	68f8      	ldr	r0, [r7, #12]
 80118d0:	f7ff fde7 	bl	80114a2 <get_fat>
 80118d4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d031      	beq.n	8011940 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80118dc:	697b      	ldr	r3, [r7, #20]
 80118de:	2b01      	cmp	r3, #1
 80118e0:	d101      	bne.n	80118e6 <remove_chain+0x64>
 80118e2:	2302      	movs	r3, #2
 80118e4:	e02e      	b.n	8011944 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80118e6:	697b      	ldr	r3, [r7, #20]
 80118e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118ec:	d101      	bne.n	80118f2 <remove_chain+0x70>
 80118ee:	2301      	movs	r3, #1
 80118f0:	e028      	b.n	8011944 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80118f2:	2200      	movs	r2, #0
 80118f4:	68b9      	ldr	r1, [r7, #8]
 80118f6:	69b8      	ldr	r0, [r7, #24]
 80118f8:	f7ff fea7 	bl	801164a <put_fat>
 80118fc:	4603      	mov	r3, r0
 80118fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011900:	7ffb      	ldrb	r3, [r7, #31]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d001      	beq.n	801190a <remove_chain+0x88>
 8011906:	7ffb      	ldrb	r3, [r7, #31]
 8011908:	e01c      	b.n	8011944 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801190a:	69bb      	ldr	r3, [r7, #24]
 801190c:	695a      	ldr	r2, [r3, #20]
 801190e:	69bb      	ldr	r3, [r7, #24]
 8011910:	699b      	ldr	r3, [r3, #24]
 8011912:	3b02      	subs	r3, #2
 8011914:	429a      	cmp	r2, r3
 8011916:	d20b      	bcs.n	8011930 <remove_chain+0xae>
			fs->free_clst++;
 8011918:	69bb      	ldr	r3, [r7, #24]
 801191a:	695b      	ldr	r3, [r3, #20]
 801191c:	1c5a      	adds	r2, r3, #1
 801191e:	69bb      	ldr	r3, [r7, #24]
 8011920:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011922:	69bb      	ldr	r3, [r7, #24]
 8011924:	791b      	ldrb	r3, [r3, #4]
 8011926:	f043 0301 	orr.w	r3, r3, #1
 801192a:	b2da      	uxtb	r2, r3
 801192c:	69bb      	ldr	r3, [r7, #24]
 801192e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011934:	69bb      	ldr	r3, [r7, #24]
 8011936:	699b      	ldr	r3, [r3, #24]
 8011938:	68ba      	ldr	r2, [r7, #8]
 801193a:	429a      	cmp	r2, r3
 801193c:	d3c6      	bcc.n	80118cc <remove_chain+0x4a>
 801193e:	e000      	b.n	8011942 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011940:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011942:	2300      	movs	r3, #0
}
 8011944:	4618      	mov	r0, r3
 8011946:	3720      	adds	r7, #32
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}

0801194c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b088      	sub	sp, #32
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801195c:	683b      	ldr	r3, [r7, #0]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d10d      	bne.n	801197e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011962:	693b      	ldr	r3, [r7, #16]
 8011964:	691b      	ldr	r3, [r3, #16]
 8011966:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011968:	69bb      	ldr	r3, [r7, #24]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d004      	beq.n	8011978 <create_chain+0x2c>
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	699b      	ldr	r3, [r3, #24]
 8011972:	69ba      	ldr	r2, [r7, #24]
 8011974:	429a      	cmp	r2, r3
 8011976:	d31b      	bcc.n	80119b0 <create_chain+0x64>
 8011978:	2301      	movs	r3, #1
 801197a:	61bb      	str	r3, [r7, #24]
 801197c:	e018      	b.n	80119b0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801197e:	6839      	ldr	r1, [r7, #0]
 8011980:	6878      	ldr	r0, [r7, #4]
 8011982:	f7ff fd8e 	bl	80114a2 <get_fat>
 8011986:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	2b01      	cmp	r3, #1
 801198c:	d801      	bhi.n	8011992 <create_chain+0x46>
 801198e:	2301      	movs	r3, #1
 8011990:	e070      	b.n	8011a74 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011998:	d101      	bne.n	801199e <create_chain+0x52>
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	e06a      	b.n	8011a74 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801199e:	693b      	ldr	r3, [r7, #16]
 80119a0:	699b      	ldr	r3, [r3, #24]
 80119a2:	68fa      	ldr	r2, [r7, #12]
 80119a4:	429a      	cmp	r2, r3
 80119a6:	d201      	bcs.n	80119ac <create_chain+0x60>
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	e063      	b.n	8011a74 <create_chain+0x128>
		scl = clst;
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80119b0:	69bb      	ldr	r3, [r7, #24]
 80119b2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80119b4:	69fb      	ldr	r3, [r7, #28]
 80119b6:	3301      	adds	r3, #1
 80119b8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80119ba:	693b      	ldr	r3, [r7, #16]
 80119bc:	699b      	ldr	r3, [r3, #24]
 80119be:	69fa      	ldr	r2, [r7, #28]
 80119c0:	429a      	cmp	r2, r3
 80119c2:	d307      	bcc.n	80119d4 <create_chain+0x88>
				ncl = 2;
 80119c4:	2302      	movs	r3, #2
 80119c6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80119c8:	69fa      	ldr	r2, [r7, #28]
 80119ca:	69bb      	ldr	r3, [r7, #24]
 80119cc:	429a      	cmp	r2, r3
 80119ce:	d901      	bls.n	80119d4 <create_chain+0x88>
 80119d0:	2300      	movs	r3, #0
 80119d2:	e04f      	b.n	8011a74 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80119d4:	69f9      	ldr	r1, [r7, #28]
 80119d6:	6878      	ldr	r0, [r7, #4]
 80119d8:	f7ff fd63 	bl	80114a2 <get_fat>
 80119dc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d00e      	beq.n	8011a02 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	2b01      	cmp	r3, #1
 80119e8:	d003      	beq.n	80119f2 <create_chain+0xa6>
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119f0:	d101      	bne.n	80119f6 <create_chain+0xaa>
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	e03e      	b.n	8011a74 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80119f6:	69fa      	ldr	r2, [r7, #28]
 80119f8:	69bb      	ldr	r3, [r7, #24]
 80119fa:	429a      	cmp	r2, r3
 80119fc:	d1da      	bne.n	80119b4 <create_chain+0x68>
 80119fe:	2300      	movs	r3, #0
 8011a00:	e038      	b.n	8011a74 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011a02:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011a04:	f04f 32ff 	mov.w	r2, #4294967295
 8011a08:	69f9      	ldr	r1, [r7, #28]
 8011a0a:	6938      	ldr	r0, [r7, #16]
 8011a0c:	f7ff fe1d 	bl	801164a <put_fat>
 8011a10:	4603      	mov	r3, r0
 8011a12:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011a14:	7dfb      	ldrb	r3, [r7, #23]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d109      	bne.n	8011a2e <create_chain+0xe2>
 8011a1a:	683b      	ldr	r3, [r7, #0]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d006      	beq.n	8011a2e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011a20:	69fa      	ldr	r2, [r7, #28]
 8011a22:	6839      	ldr	r1, [r7, #0]
 8011a24:	6938      	ldr	r0, [r7, #16]
 8011a26:	f7ff fe10 	bl	801164a <put_fat>
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011a2e:	7dfb      	ldrb	r3, [r7, #23]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d116      	bne.n	8011a62 <create_chain+0x116>
		fs->last_clst = ncl;
 8011a34:	693b      	ldr	r3, [r7, #16]
 8011a36:	69fa      	ldr	r2, [r7, #28]
 8011a38:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011a3a:	693b      	ldr	r3, [r7, #16]
 8011a3c:	695a      	ldr	r2, [r3, #20]
 8011a3e:	693b      	ldr	r3, [r7, #16]
 8011a40:	699b      	ldr	r3, [r3, #24]
 8011a42:	3b02      	subs	r3, #2
 8011a44:	429a      	cmp	r2, r3
 8011a46:	d804      	bhi.n	8011a52 <create_chain+0x106>
 8011a48:	693b      	ldr	r3, [r7, #16]
 8011a4a:	695b      	ldr	r3, [r3, #20]
 8011a4c:	1e5a      	subs	r2, r3, #1
 8011a4e:	693b      	ldr	r3, [r7, #16]
 8011a50:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011a52:	693b      	ldr	r3, [r7, #16]
 8011a54:	791b      	ldrb	r3, [r3, #4]
 8011a56:	f043 0301 	orr.w	r3, r3, #1
 8011a5a:	b2da      	uxtb	r2, r3
 8011a5c:	693b      	ldr	r3, [r7, #16]
 8011a5e:	711a      	strb	r2, [r3, #4]
 8011a60:	e007      	b.n	8011a72 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011a62:	7dfb      	ldrb	r3, [r7, #23]
 8011a64:	2b01      	cmp	r3, #1
 8011a66:	d102      	bne.n	8011a6e <create_chain+0x122>
 8011a68:	f04f 33ff 	mov.w	r3, #4294967295
 8011a6c:	e000      	b.n	8011a70 <create_chain+0x124>
 8011a6e:	2301      	movs	r3, #1
 8011a70:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011a72:	69fb      	ldr	r3, [r7, #28]
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3720      	adds	r7, #32
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}

08011a7c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011a7c:	b480      	push	{r7}
 8011a7e:	b087      	sub	sp, #28
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a90:	3304      	adds	r3, #4
 8011a92:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	899b      	ldrh	r3, [r3, #12]
 8011a98:	461a      	mov	r2, r3
 8011a9a:	683b      	ldr	r3, [r7, #0]
 8011a9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011aa0:	68fa      	ldr	r2, [r7, #12]
 8011aa2:	8952      	ldrh	r2, [r2, #10]
 8011aa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8011aa8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011aaa:	693b      	ldr	r3, [r7, #16]
 8011aac:	1d1a      	adds	r2, r3, #4
 8011aae:	613a      	str	r2, [r7, #16]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d101      	bne.n	8011abe <clmt_clust+0x42>
 8011aba:	2300      	movs	r3, #0
 8011abc:	e010      	b.n	8011ae0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011abe:	697a      	ldr	r2, [r7, #20]
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d307      	bcc.n	8011ad6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011ac6:	697a      	ldr	r2, [r7, #20]
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	1ad3      	subs	r3, r2, r3
 8011acc:	617b      	str	r3, [r7, #20]
 8011ace:	693b      	ldr	r3, [r7, #16]
 8011ad0:	3304      	adds	r3, #4
 8011ad2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011ad4:	e7e9      	b.n	8011aaa <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011ad6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011ad8:	693b      	ldr	r3, [r7, #16]
 8011ada:	681a      	ldr	r2, [r3, #0]
 8011adc:	697b      	ldr	r3, [r7, #20]
 8011ade:	4413      	add	r3, r2
}
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	371c      	adds	r7, #28
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aea:	4770      	bx	lr

08011aec <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b086      	sub	sp, #24
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
 8011af4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011b02:	d204      	bcs.n	8011b0e <dir_sdi+0x22>
 8011b04:	683b      	ldr	r3, [r7, #0]
 8011b06:	f003 031f 	and.w	r3, r3, #31
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d001      	beq.n	8011b12 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011b0e:	2302      	movs	r3, #2
 8011b10:	e071      	b.n	8011bf6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	683a      	ldr	r2, [r7, #0]
 8011b16:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	689b      	ldr	r3, [r3, #8]
 8011b1c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011b1e:	697b      	ldr	r3, [r7, #20]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d106      	bne.n	8011b32 <dir_sdi+0x46>
 8011b24:	693b      	ldr	r3, [r7, #16]
 8011b26:	781b      	ldrb	r3, [r3, #0]
 8011b28:	2b02      	cmp	r3, #2
 8011b2a:	d902      	bls.n	8011b32 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011b2c:	693b      	ldr	r3, [r7, #16]
 8011b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b30:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011b32:	697b      	ldr	r3, [r7, #20]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d10c      	bne.n	8011b52 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	095b      	lsrs	r3, r3, #5
 8011b3c:	693a      	ldr	r2, [r7, #16]
 8011b3e:	8912      	ldrh	r2, [r2, #8]
 8011b40:	4293      	cmp	r3, r2
 8011b42:	d301      	bcc.n	8011b48 <dir_sdi+0x5c>
 8011b44:	2302      	movs	r3, #2
 8011b46:	e056      	b.n	8011bf6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8011b48:	693b      	ldr	r3, [r7, #16]
 8011b4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	61da      	str	r2, [r3, #28]
 8011b50:	e02d      	b.n	8011bae <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011b52:	693b      	ldr	r3, [r7, #16]
 8011b54:	895b      	ldrh	r3, [r3, #10]
 8011b56:	461a      	mov	r2, r3
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	899b      	ldrh	r3, [r3, #12]
 8011b5c:	fb02 f303 	mul.w	r3, r2, r3
 8011b60:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011b62:	e019      	b.n	8011b98 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	6979      	ldr	r1, [r7, #20]
 8011b68:	4618      	mov	r0, r3
 8011b6a:	f7ff fc9a 	bl	80114a2 <get_fat>
 8011b6e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b76:	d101      	bne.n	8011b7c <dir_sdi+0x90>
 8011b78:	2301      	movs	r3, #1
 8011b7a:	e03c      	b.n	8011bf6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	2b01      	cmp	r3, #1
 8011b80:	d904      	bls.n	8011b8c <dir_sdi+0xa0>
 8011b82:	693b      	ldr	r3, [r7, #16]
 8011b84:	699b      	ldr	r3, [r3, #24]
 8011b86:	697a      	ldr	r2, [r7, #20]
 8011b88:	429a      	cmp	r2, r3
 8011b8a:	d301      	bcc.n	8011b90 <dir_sdi+0xa4>
 8011b8c:	2302      	movs	r3, #2
 8011b8e:	e032      	b.n	8011bf6 <dir_sdi+0x10a>
			ofs -= csz;
 8011b90:	683a      	ldr	r2, [r7, #0]
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	1ad3      	subs	r3, r2, r3
 8011b96:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011b98:	683a      	ldr	r2, [r7, #0]
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d2e1      	bcs.n	8011b64 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011ba0:	6979      	ldr	r1, [r7, #20]
 8011ba2:	6938      	ldr	r0, [r7, #16]
 8011ba4:	f7ff fc5e 	bl	8011464 <clust2sect>
 8011ba8:	4602      	mov	r2, r0
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	697a      	ldr	r2, [r7, #20]
 8011bb2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	69db      	ldr	r3, [r3, #28]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d101      	bne.n	8011bc0 <dir_sdi+0xd4>
 8011bbc:	2302      	movs	r3, #2
 8011bbe:	e01a      	b.n	8011bf6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	69da      	ldr	r2, [r3, #28]
 8011bc4:	693b      	ldr	r3, [r7, #16]
 8011bc6:	899b      	ldrh	r3, [r3, #12]
 8011bc8:	4619      	mov	r1, r3
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	fbb3 f3f1 	udiv	r3, r3, r1
 8011bd0:	441a      	add	r2, r3
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	899b      	ldrh	r3, [r3, #12]
 8011be0:	461a      	mov	r2, r3
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	fbb3 f0f2 	udiv	r0, r3, r2
 8011be8:	fb00 f202 	mul.w	r2, r0, r2
 8011bec:	1a9b      	subs	r3, r3, r2
 8011bee:	18ca      	adds	r2, r1, r3
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011bf4:	2300      	movs	r3, #0
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3718      	adds	r7, #24
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}

08011bfe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011bfe:	b580      	push	{r7, lr}
 8011c00:	b086      	sub	sp, #24
 8011c02:	af00      	add	r7, sp, #0
 8011c04:	6078      	str	r0, [r7, #4]
 8011c06:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	695b      	ldr	r3, [r3, #20]
 8011c12:	3320      	adds	r3, #32
 8011c14:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	69db      	ldr	r3, [r3, #28]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d003      	beq.n	8011c26 <dir_next+0x28>
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011c24:	d301      	bcc.n	8011c2a <dir_next+0x2c>
 8011c26:	2304      	movs	r3, #4
 8011c28:	e0bb      	b.n	8011da2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	899b      	ldrh	r3, [r3, #12]
 8011c2e:	461a      	mov	r2, r3
 8011c30:	68bb      	ldr	r3, [r7, #8]
 8011c32:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c36:	fb01 f202 	mul.w	r2, r1, r2
 8011c3a:	1a9b      	subs	r3, r3, r2
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	f040 809d 	bne.w	8011d7c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	69db      	ldr	r3, [r3, #28]
 8011c46:	1c5a      	adds	r2, r3, #1
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	699b      	ldr	r3, [r3, #24]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d10b      	bne.n	8011c6c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011c54:	68bb      	ldr	r3, [r7, #8]
 8011c56:	095b      	lsrs	r3, r3, #5
 8011c58:	68fa      	ldr	r2, [r7, #12]
 8011c5a:	8912      	ldrh	r2, [r2, #8]
 8011c5c:	4293      	cmp	r3, r2
 8011c5e:	f0c0 808d 	bcc.w	8011d7c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2200      	movs	r2, #0
 8011c66:	61da      	str	r2, [r3, #28]
 8011c68:	2304      	movs	r3, #4
 8011c6a:	e09a      	b.n	8011da2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	899b      	ldrh	r3, [r3, #12]
 8011c70:	461a      	mov	r2, r3
 8011c72:	68bb      	ldr	r3, [r7, #8]
 8011c74:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c78:	68fa      	ldr	r2, [r7, #12]
 8011c7a:	8952      	ldrh	r2, [r2, #10]
 8011c7c:	3a01      	subs	r2, #1
 8011c7e:	4013      	ands	r3, r2
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d17b      	bne.n	8011d7c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011c84:	687a      	ldr	r2, [r7, #4]
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	699b      	ldr	r3, [r3, #24]
 8011c8a:	4619      	mov	r1, r3
 8011c8c:	4610      	mov	r0, r2
 8011c8e:	f7ff fc08 	bl	80114a2 <get_fat>
 8011c92:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011c94:	697b      	ldr	r3, [r7, #20]
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	d801      	bhi.n	8011c9e <dir_next+0xa0>
 8011c9a:	2302      	movs	r3, #2
 8011c9c:	e081      	b.n	8011da2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011c9e:	697b      	ldr	r3, [r7, #20]
 8011ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ca4:	d101      	bne.n	8011caa <dir_next+0xac>
 8011ca6:	2301      	movs	r3, #1
 8011ca8:	e07b      	b.n	8011da2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	699b      	ldr	r3, [r3, #24]
 8011cae:	697a      	ldr	r2, [r7, #20]
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	d359      	bcc.n	8011d68 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d104      	bne.n	8011cc4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	61da      	str	r2, [r3, #28]
 8011cc0:	2304      	movs	r3, #4
 8011cc2:	e06e      	b.n	8011da2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011cc4:	687a      	ldr	r2, [r7, #4]
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	699b      	ldr	r3, [r3, #24]
 8011cca:	4619      	mov	r1, r3
 8011ccc:	4610      	mov	r0, r2
 8011cce:	f7ff fe3d 	bl	801194c <create_chain>
 8011cd2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d101      	bne.n	8011cde <dir_next+0xe0>
 8011cda:	2307      	movs	r3, #7
 8011cdc:	e061      	b.n	8011da2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	2b01      	cmp	r3, #1
 8011ce2:	d101      	bne.n	8011ce8 <dir_next+0xea>
 8011ce4:	2302      	movs	r3, #2
 8011ce6:	e05c      	b.n	8011da2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011ce8:	697b      	ldr	r3, [r7, #20]
 8011cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cee:	d101      	bne.n	8011cf4 <dir_next+0xf6>
 8011cf0:	2301      	movs	r3, #1
 8011cf2:	e056      	b.n	8011da2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011cf4:	68f8      	ldr	r0, [r7, #12]
 8011cf6:	f7ff fad3 	bl	80112a0 <sync_window>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d001      	beq.n	8011d04 <dir_next+0x106>
 8011d00:	2301      	movs	r3, #1
 8011d02:	e04e      	b.n	8011da2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	899b      	ldrh	r3, [r3, #12]
 8011d0e:	461a      	mov	r2, r3
 8011d10:	2100      	movs	r1, #0
 8011d12:	f7ff f8fc 	bl	8010f0e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011d16:	2300      	movs	r3, #0
 8011d18:	613b      	str	r3, [r7, #16]
 8011d1a:	6979      	ldr	r1, [r7, #20]
 8011d1c:	68f8      	ldr	r0, [r7, #12]
 8011d1e:	f7ff fba1 	bl	8011464 <clust2sect>
 8011d22:	4602      	mov	r2, r0
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	631a      	str	r2, [r3, #48]	; 0x30
 8011d28:	e012      	b.n	8011d50 <dir_next+0x152>
						fs->wflag = 1;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	2201      	movs	r2, #1
 8011d2e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011d30:	68f8      	ldr	r0, [r7, #12]
 8011d32:	f7ff fab5 	bl	80112a0 <sync_window>
 8011d36:	4603      	mov	r3, r0
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d001      	beq.n	8011d40 <dir_next+0x142>
 8011d3c:	2301      	movs	r3, #1
 8011d3e:	e030      	b.n	8011da2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011d40:	693b      	ldr	r3, [r7, #16]
 8011d42:	3301      	adds	r3, #1
 8011d44:	613b      	str	r3, [r7, #16]
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d4a:	1c5a      	adds	r2, r3, #1
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	631a      	str	r2, [r3, #48]	; 0x30
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	895b      	ldrh	r3, [r3, #10]
 8011d54:	461a      	mov	r2, r3
 8011d56:	693b      	ldr	r3, [r7, #16]
 8011d58:	4293      	cmp	r3, r2
 8011d5a:	d3e6      	bcc.n	8011d2a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d60:	693b      	ldr	r3, [r7, #16]
 8011d62:	1ad2      	subs	r2, r2, r3
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	697a      	ldr	r2, [r7, #20]
 8011d6c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011d6e:	6979      	ldr	r1, [r7, #20]
 8011d70:	68f8      	ldr	r0, [r7, #12]
 8011d72:	f7ff fb77 	bl	8011464 <clust2sect>
 8011d76:	4602      	mov	r2, r0
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	68ba      	ldr	r2, [r7, #8]
 8011d80:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	899b      	ldrh	r3, [r3, #12]
 8011d8c:	461a      	mov	r2, r3
 8011d8e:	68bb      	ldr	r3, [r7, #8]
 8011d90:	fbb3 f0f2 	udiv	r0, r3, r2
 8011d94:	fb00 f202 	mul.w	r2, r0, r2
 8011d98:	1a9b      	subs	r3, r3, r2
 8011d9a:	18ca      	adds	r2, r1, r3
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011da0:	2300      	movs	r3, #0
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	3718      	adds	r7, #24
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd80      	pop	{r7, pc}

08011daa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011daa:	b580      	push	{r7, lr}
 8011dac:	b086      	sub	sp, #24
 8011dae:	af00      	add	r7, sp, #0
 8011db0:	6078      	str	r0, [r7, #4]
 8011db2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011dba:	2100      	movs	r1, #0
 8011dbc:	6878      	ldr	r0, [r7, #4]
 8011dbe:	f7ff fe95 	bl	8011aec <dir_sdi>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011dc6:	7dfb      	ldrb	r3, [r7, #23]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d12b      	bne.n	8011e24 <dir_alloc+0x7a>
		n = 0;
 8011dcc:	2300      	movs	r3, #0
 8011dce:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	69db      	ldr	r3, [r3, #28]
 8011dd4:	4619      	mov	r1, r3
 8011dd6:	68f8      	ldr	r0, [r7, #12]
 8011dd8:	f7ff faa6 	bl	8011328 <move_window>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011de0:	7dfb      	ldrb	r3, [r7, #23]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d11d      	bne.n	8011e22 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	6a1b      	ldr	r3, [r3, #32]
 8011dea:	781b      	ldrb	r3, [r3, #0]
 8011dec:	2be5      	cmp	r3, #229	; 0xe5
 8011dee:	d004      	beq.n	8011dfa <dir_alloc+0x50>
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	6a1b      	ldr	r3, [r3, #32]
 8011df4:	781b      	ldrb	r3, [r3, #0]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d107      	bne.n	8011e0a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011dfa:	693b      	ldr	r3, [r7, #16]
 8011dfc:	3301      	adds	r3, #1
 8011dfe:	613b      	str	r3, [r7, #16]
 8011e00:	693a      	ldr	r2, [r7, #16]
 8011e02:	683b      	ldr	r3, [r7, #0]
 8011e04:	429a      	cmp	r2, r3
 8011e06:	d102      	bne.n	8011e0e <dir_alloc+0x64>
 8011e08:	e00c      	b.n	8011e24 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011e0e:	2101      	movs	r1, #1
 8011e10:	6878      	ldr	r0, [r7, #4]
 8011e12:	f7ff fef4 	bl	8011bfe <dir_next>
 8011e16:	4603      	mov	r3, r0
 8011e18:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011e1a:	7dfb      	ldrb	r3, [r7, #23]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d0d7      	beq.n	8011dd0 <dir_alloc+0x26>
 8011e20:	e000      	b.n	8011e24 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011e22:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011e24:	7dfb      	ldrb	r3, [r7, #23]
 8011e26:	2b04      	cmp	r3, #4
 8011e28:	d101      	bne.n	8011e2e <dir_alloc+0x84>
 8011e2a:	2307      	movs	r3, #7
 8011e2c:	75fb      	strb	r3, [r7, #23]
	return res;
 8011e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e30:	4618      	mov	r0, r3
 8011e32:	3718      	adds	r7, #24
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}

08011e38 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b084      	sub	sp, #16
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
 8011e40:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	331a      	adds	r3, #26
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7fe ffbe 	bl	8010dc8 <ld_word>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	781b      	ldrb	r3, [r3, #0]
 8011e54:	2b03      	cmp	r3, #3
 8011e56:	d109      	bne.n	8011e6c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011e58:	683b      	ldr	r3, [r7, #0]
 8011e5a:	3314      	adds	r3, #20
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	f7fe ffb3 	bl	8010dc8 <ld_word>
 8011e62:	4603      	mov	r3, r0
 8011e64:	041b      	lsls	r3, r3, #16
 8011e66:	68fa      	ldr	r2, [r7, #12]
 8011e68:	4313      	orrs	r3, r2
 8011e6a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011e6c:	68fb      	ldr	r3, [r7, #12]
}
 8011e6e:	4618      	mov	r0, r3
 8011e70:	3710      	adds	r7, #16
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}

08011e76 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011e76:	b580      	push	{r7, lr}
 8011e78:	b084      	sub	sp, #16
 8011e7a:	af00      	add	r7, sp, #0
 8011e7c:	60f8      	str	r0, [r7, #12]
 8011e7e:	60b9      	str	r1, [r7, #8]
 8011e80:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	331a      	adds	r3, #26
 8011e86:	687a      	ldr	r2, [r7, #4]
 8011e88:	b292      	uxth	r2, r2
 8011e8a:	4611      	mov	r1, r2
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f7fe ffd6 	bl	8010e3e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	781b      	ldrb	r3, [r3, #0]
 8011e96:	2b03      	cmp	r3, #3
 8011e98:	d109      	bne.n	8011eae <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011e9a:	68bb      	ldr	r3, [r7, #8]
 8011e9c:	f103 0214 	add.w	r2, r3, #20
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	0c1b      	lsrs	r3, r3, #16
 8011ea4:	b29b      	uxth	r3, r3
 8011ea6:	4619      	mov	r1, r3
 8011ea8:	4610      	mov	r0, r2
 8011eaa:	f7fe ffc8 	bl	8010e3e <st_word>
	}
}
 8011eae:	bf00      	nop
 8011eb0:	3710      	adds	r7, #16
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	bd80      	pop	{r7, pc}

08011eb6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011eb6:	b580      	push	{r7, lr}
 8011eb8:	b086      	sub	sp, #24
 8011eba:	af00      	add	r7, sp, #0
 8011ebc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011ec4:	2100      	movs	r1, #0
 8011ec6:	6878      	ldr	r0, [r7, #4]
 8011ec8:	f7ff fe10 	bl	8011aec <dir_sdi>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011ed0:	7dfb      	ldrb	r3, [r7, #23]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d001      	beq.n	8011eda <dir_find+0x24>
 8011ed6:	7dfb      	ldrb	r3, [r7, #23]
 8011ed8:	e03e      	b.n	8011f58 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	69db      	ldr	r3, [r3, #28]
 8011ede:	4619      	mov	r1, r3
 8011ee0:	6938      	ldr	r0, [r7, #16]
 8011ee2:	f7ff fa21 	bl	8011328 <move_window>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011eea:	7dfb      	ldrb	r3, [r7, #23]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d12f      	bne.n	8011f50 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	6a1b      	ldr	r3, [r3, #32]
 8011ef4:	781b      	ldrb	r3, [r3, #0]
 8011ef6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011ef8:	7bfb      	ldrb	r3, [r7, #15]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d102      	bne.n	8011f04 <dir_find+0x4e>
 8011efe:	2304      	movs	r3, #4
 8011f00:	75fb      	strb	r3, [r7, #23]
 8011f02:	e028      	b.n	8011f56 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	6a1b      	ldr	r3, [r3, #32]
 8011f08:	330b      	adds	r3, #11
 8011f0a:	781b      	ldrb	r3, [r3, #0]
 8011f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011f10:	b2da      	uxtb	r2, r3
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6a1b      	ldr	r3, [r3, #32]
 8011f1a:	330b      	adds	r3, #11
 8011f1c:	781b      	ldrb	r3, [r3, #0]
 8011f1e:	f003 0308 	and.w	r3, r3, #8
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d10a      	bne.n	8011f3c <dir_find+0x86>
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	6a18      	ldr	r0, [r3, #32]
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	3324      	adds	r3, #36	; 0x24
 8011f2e:	220b      	movs	r2, #11
 8011f30:	4619      	mov	r1, r3
 8011f32:	f7ff f807 	bl	8010f44 <mem_cmp>
 8011f36:	4603      	mov	r3, r0
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d00b      	beq.n	8011f54 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011f3c:	2100      	movs	r1, #0
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	f7ff fe5d 	bl	8011bfe <dir_next>
 8011f44:	4603      	mov	r3, r0
 8011f46:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011f48:	7dfb      	ldrb	r3, [r7, #23]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d0c5      	beq.n	8011eda <dir_find+0x24>
 8011f4e:	e002      	b.n	8011f56 <dir_find+0xa0>
		if (res != FR_OK) break;
 8011f50:	bf00      	nop
 8011f52:	e000      	b.n	8011f56 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011f54:	bf00      	nop

	return res;
 8011f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f58:	4618      	mov	r0, r3
 8011f5a:	3718      	adds	r7, #24
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	bd80      	pop	{r7, pc}

08011f60 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b084      	sub	sp, #16
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011f6e:	2101      	movs	r1, #1
 8011f70:	6878      	ldr	r0, [r7, #4]
 8011f72:	f7ff ff1a 	bl	8011daa <dir_alloc>
 8011f76:	4603      	mov	r3, r0
 8011f78:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011f7a:	7bfb      	ldrb	r3, [r7, #15]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d11c      	bne.n	8011fba <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	69db      	ldr	r3, [r3, #28]
 8011f84:	4619      	mov	r1, r3
 8011f86:	68b8      	ldr	r0, [r7, #8]
 8011f88:	f7ff f9ce 	bl	8011328 <move_window>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011f90:	7bfb      	ldrb	r3, [r7, #15]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d111      	bne.n	8011fba <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6a1b      	ldr	r3, [r3, #32]
 8011f9a:	2220      	movs	r2, #32
 8011f9c:	2100      	movs	r1, #0
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	f7fe ffb5 	bl	8010f0e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	6a18      	ldr	r0, [r3, #32]
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	3324      	adds	r3, #36	; 0x24
 8011fac:	220b      	movs	r2, #11
 8011fae:	4619      	mov	r1, r3
 8011fb0:	f7fe ff8c 	bl	8010ecc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	2201      	movs	r2, #1
 8011fb8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3710      	adds	r7, #16
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}

08011fc4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b088      	sub	sp, #32
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
 8011fcc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8011fce:	683b      	ldr	r3, [r7, #0]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	60fb      	str	r3, [r7, #12]
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	3324      	adds	r3, #36	; 0x24
 8011fd8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011fda:	220b      	movs	r2, #11
 8011fdc:	2120      	movs	r1, #32
 8011fde:	68b8      	ldr	r0, [r7, #8]
 8011fe0:	f7fe ff95 	bl	8010f0e <mem_set>
	si = i = 0; ni = 8;
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	613b      	str	r3, [r7, #16]
 8011fe8:	693b      	ldr	r3, [r7, #16]
 8011fea:	61fb      	str	r3, [r7, #28]
 8011fec:	2308      	movs	r3, #8
 8011fee:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011ff0:	69fb      	ldr	r3, [r7, #28]
 8011ff2:	1c5a      	adds	r2, r3, #1
 8011ff4:	61fa      	str	r2, [r7, #28]
 8011ff6:	68fa      	ldr	r2, [r7, #12]
 8011ff8:	4413      	add	r3, r2
 8011ffa:	781b      	ldrb	r3, [r3, #0]
 8011ffc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011ffe:	7efb      	ldrb	r3, [r7, #27]
 8012000:	2b20      	cmp	r3, #32
 8012002:	d94e      	bls.n	80120a2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012004:	7efb      	ldrb	r3, [r7, #27]
 8012006:	2b2f      	cmp	r3, #47	; 0x2f
 8012008:	d006      	beq.n	8012018 <create_name+0x54>
 801200a:	7efb      	ldrb	r3, [r7, #27]
 801200c:	2b5c      	cmp	r3, #92	; 0x5c
 801200e:	d110      	bne.n	8012032 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012010:	e002      	b.n	8012018 <create_name+0x54>
 8012012:	69fb      	ldr	r3, [r7, #28]
 8012014:	3301      	adds	r3, #1
 8012016:	61fb      	str	r3, [r7, #28]
 8012018:	68fa      	ldr	r2, [r7, #12]
 801201a:	69fb      	ldr	r3, [r7, #28]
 801201c:	4413      	add	r3, r2
 801201e:	781b      	ldrb	r3, [r3, #0]
 8012020:	2b2f      	cmp	r3, #47	; 0x2f
 8012022:	d0f6      	beq.n	8012012 <create_name+0x4e>
 8012024:	68fa      	ldr	r2, [r7, #12]
 8012026:	69fb      	ldr	r3, [r7, #28]
 8012028:	4413      	add	r3, r2
 801202a:	781b      	ldrb	r3, [r3, #0]
 801202c:	2b5c      	cmp	r3, #92	; 0x5c
 801202e:	d0f0      	beq.n	8012012 <create_name+0x4e>
			break;
 8012030:	e038      	b.n	80120a4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012032:	7efb      	ldrb	r3, [r7, #27]
 8012034:	2b2e      	cmp	r3, #46	; 0x2e
 8012036:	d003      	beq.n	8012040 <create_name+0x7c>
 8012038:	693a      	ldr	r2, [r7, #16]
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	429a      	cmp	r2, r3
 801203e:	d30c      	bcc.n	801205a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012040:	697b      	ldr	r3, [r7, #20]
 8012042:	2b0b      	cmp	r3, #11
 8012044:	d002      	beq.n	801204c <create_name+0x88>
 8012046:	7efb      	ldrb	r3, [r7, #27]
 8012048:	2b2e      	cmp	r3, #46	; 0x2e
 801204a:	d001      	beq.n	8012050 <create_name+0x8c>
 801204c:	2306      	movs	r3, #6
 801204e:	e044      	b.n	80120da <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8012050:	2308      	movs	r3, #8
 8012052:	613b      	str	r3, [r7, #16]
 8012054:	230b      	movs	r3, #11
 8012056:	617b      	str	r3, [r7, #20]
			continue;
 8012058:	e022      	b.n	80120a0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801205a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801205e:	2b00      	cmp	r3, #0
 8012060:	da04      	bge.n	801206c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012062:	7efb      	ldrb	r3, [r7, #27]
 8012064:	3b80      	subs	r3, #128	; 0x80
 8012066:	4a1f      	ldr	r2, [pc, #124]	; (80120e4 <create_name+0x120>)
 8012068:	5cd3      	ldrb	r3, [r2, r3]
 801206a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801206c:	7efb      	ldrb	r3, [r7, #27]
 801206e:	4619      	mov	r1, r3
 8012070:	481d      	ldr	r0, [pc, #116]	; (80120e8 <create_name+0x124>)
 8012072:	f7fe ff8e 	bl	8010f92 <chk_chr>
 8012076:	4603      	mov	r3, r0
 8012078:	2b00      	cmp	r3, #0
 801207a:	d001      	beq.n	8012080 <create_name+0xbc>
 801207c:	2306      	movs	r3, #6
 801207e:	e02c      	b.n	80120da <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012080:	7efb      	ldrb	r3, [r7, #27]
 8012082:	2b60      	cmp	r3, #96	; 0x60
 8012084:	d905      	bls.n	8012092 <create_name+0xce>
 8012086:	7efb      	ldrb	r3, [r7, #27]
 8012088:	2b7a      	cmp	r3, #122	; 0x7a
 801208a:	d802      	bhi.n	8012092 <create_name+0xce>
 801208c:	7efb      	ldrb	r3, [r7, #27]
 801208e:	3b20      	subs	r3, #32
 8012090:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8012092:	693b      	ldr	r3, [r7, #16]
 8012094:	1c5a      	adds	r2, r3, #1
 8012096:	613a      	str	r2, [r7, #16]
 8012098:	68ba      	ldr	r2, [r7, #8]
 801209a:	4413      	add	r3, r2
 801209c:	7efa      	ldrb	r2, [r7, #27]
 801209e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80120a0:	e7a6      	b.n	8011ff0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80120a2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80120a4:	68fa      	ldr	r2, [r7, #12]
 80120a6:	69fb      	ldr	r3, [r7, #28]
 80120a8:	441a      	add	r2, r3
 80120aa:	683b      	ldr	r3, [r7, #0]
 80120ac:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80120ae:	693b      	ldr	r3, [r7, #16]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d101      	bne.n	80120b8 <create_name+0xf4>
 80120b4:	2306      	movs	r3, #6
 80120b6:	e010      	b.n	80120da <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80120b8:	68bb      	ldr	r3, [r7, #8]
 80120ba:	781b      	ldrb	r3, [r3, #0]
 80120bc:	2be5      	cmp	r3, #229	; 0xe5
 80120be:	d102      	bne.n	80120c6 <create_name+0x102>
 80120c0:	68bb      	ldr	r3, [r7, #8]
 80120c2:	2205      	movs	r2, #5
 80120c4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80120c6:	7efb      	ldrb	r3, [r7, #27]
 80120c8:	2b20      	cmp	r3, #32
 80120ca:	d801      	bhi.n	80120d0 <create_name+0x10c>
 80120cc:	2204      	movs	r2, #4
 80120ce:	e000      	b.n	80120d2 <create_name+0x10e>
 80120d0:	2200      	movs	r2, #0
 80120d2:	68bb      	ldr	r3, [r7, #8]
 80120d4:	330b      	adds	r3, #11
 80120d6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80120d8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80120da:	4618      	mov	r0, r3
 80120dc:	3720      	adds	r7, #32
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}
 80120e2:	bf00      	nop
 80120e4:	0801a93c 	.word	0x0801a93c
 80120e8:	0801a184 	.word	0x0801a184

080120ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b086      	sub	sp, #24
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
 80120f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80120fa:	693b      	ldr	r3, [r7, #16]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012100:	e002      	b.n	8012108 <follow_path+0x1c>
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	3301      	adds	r3, #1
 8012106:	603b      	str	r3, [r7, #0]
 8012108:	683b      	ldr	r3, [r7, #0]
 801210a:	781b      	ldrb	r3, [r3, #0]
 801210c:	2b2f      	cmp	r3, #47	; 0x2f
 801210e:	d0f8      	beq.n	8012102 <follow_path+0x16>
 8012110:	683b      	ldr	r3, [r7, #0]
 8012112:	781b      	ldrb	r3, [r3, #0]
 8012114:	2b5c      	cmp	r3, #92	; 0x5c
 8012116:	d0f4      	beq.n	8012102 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012118:	693b      	ldr	r3, [r7, #16]
 801211a:	2200      	movs	r2, #0
 801211c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	781b      	ldrb	r3, [r3, #0]
 8012122:	2b1f      	cmp	r3, #31
 8012124:	d80a      	bhi.n	801213c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	2280      	movs	r2, #128	; 0x80
 801212a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801212e:	2100      	movs	r1, #0
 8012130:	6878      	ldr	r0, [r7, #4]
 8012132:	f7ff fcdb 	bl	8011aec <dir_sdi>
 8012136:	4603      	mov	r3, r0
 8012138:	75fb      	strb	r3, [r7, #23]
 801213a:	e048      	b.n	80121ce <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801213c:	463b      	mov	r3, r7
 801213e:	4619      	mov	r1, r3
 8012140:	6878      	ldr	r0, [r7, #4]
 8012142:	f7ff ff3f 	bl	8011fc4 <create_name>
 8012146:	4603      	mov	r3, r0
 8012148:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801214a:	7dfb      	ldrb	r3, [r7, #23]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d139      	bne.n	80121c4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012150:	6878      	ldr	r0, [r7, #4]
 8012152:	f7ff feb0 	bl	8011eb6 <dir_find>
 8012156:	4603      	mov	r3, r0
 8012158:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012160:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012162:	7dfb      	ldrb	r3, [r7, #23]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d00a      	beq.n	801217e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012168:	7dfb      	ldrb	r3, [r7, #23]
 801216a:	2b04      	cmp	r3, #4
 801216c:	d12c      	bne.n	80121c8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801216e:	7afb      	ldrb	r3, [r7, #11]
 8012170:	f003 0304 	and.w	r3, r3, #4
 8012174:	2b00      	cmp	r3, #0
 8012176:	d127      	bne.n	80121c8 <follow_path+0xdc>
 8012178:	2305      	movs	r3, #5
 801217a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801217c:	e024      	b.n	80121c8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801217e:	7afb      	ldrb	r3, [r7, #11]
 8012180:	f003 0304 	and.w	r3, r3, #4
 8012184:	2b00      	cmp	r3, #0
 8012186:	d121      	bne.n	80121cc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012188:	693b      	ldr	r3, [r7, #16]
 801218a:	799b      	ldrb	r3, [r3, #6]
 801218c:	f003 0310 	and.w	r3, r3, #16
 8012190:	2b00      	cmp	r3, #0
 8012192:	d102      	bne.n	801219a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012194:	2305      	movs	r3, #5
 8012196:	75fb      	strb	r3, [r7, #23]
 8012198:	e019      	b.n	80121ce <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	695b      	ldr	r3, [r3, #20]
 80121a4:	68fa      	ldr	r2, [r7, #12]
 80121a6:	8992      	ldrh	r2, [r2, #12]
 80121a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80121ac:	fb00 f202 	mul.w	r2, r0, r2
 80121b0:	1a9b      	subs	r3, r3, r2
 80121b2:	440b      	add	r3, r1
 80121b4:	4619      	mov	r1, r3
 80121b6:	68f8      	ldr	r0, [r7, #12]
 80121b8:	f7ff fe3e 	bl	8011e38 <ld_clust>
 80121bc:	4602      	mov	r2, r0
 80121be:	693b      	ldr	r3, [r7, #16]
 80121c0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80121c2:	e7bb      	b.n	801213c <follow_path+0x50>
			if (res != FR_OK) break;
 80121c4:	bf00      	nop
 80121c6:	e002      	b.n	80121ce <follow_path+0xe2>
				break;
 80121c8:	bf00      	nop
 80121ca:	e000      	b.n	80121ce <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80121cc:	bf00      	nop
			}
		}
	}

	return res;
 80121ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80121d0:	4618      	mov	r0, r3
 80121d2:	3718      	adds	r7, #24
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}

080121d8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80121d8:	b480      	push	{r7}
 80121da:	b087      	sub	sp, #28
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80121e0:	f04f 33ff 	mov.w	r3, #4294967295
 80121e4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d031      	beq.n	8012252 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	617b      	str	r3, [r7, #20]
 80121f4:	e002      	b.n	80121fc <get_ldnumber+0x24>
 80121f6:	697b      	ldr	r3, [r7, #20]
 80121f8:	3301      	adds	r3, #1
 80121fa:	617b      	str	r3, [r7, #20]
 80121fc:	697b      	ldr	r3, [r7, #20]
 80121fe:	781b      	ldrb	r3, [r3, #0]
 8012200:	2b20      	cmp	r3, #32
 8012202:	d903      	bls.n	801220c <get_ldnumber+0x34>
 8012204:	697b      	ldr	r3, [r7, #20]
 8012206:	781b      	ldrb	r3, [r3, #0]
 8012208:	2b3a      	cmp	r3, #58	; 0x3a
 801220a:	d1f4      	bne.n	80121f6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801220c:	697b      	ldr	r3, [r7, #20]
 801220e:	781b      	ldrb	r3, [r3, #0]
 8012210:	2b3a      	cmp	r3, #58	; 0x3a
 8012212:	d11c      	bne.n	801224e <get_ldnumber+0x76>
			tp = *path;
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	1c5a      	adds	r2, r3, #1
 801221e:	60fa      	str	r2, [r7, #12]
 8012220:	781b      	ldrb	r3, [r3, #0]
 8012222:	3b30      	subs	r3, #48	; 0x30
 8012224:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	2b09      	cmp	r3, #9
 801222a:	d80e      	bhi.n	801224a <get_ldnumber+0x72>
 801222c:	68fa      	ldr	r2, [r7, #12]
 801222e:	697b      	ldr	r3, [r7, #20]
 8012230:	429a      	cmp	r2, r3
 8012232:	d10a      	bne.n	801224a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d107      	bne.n	801224a <get_ldnumber+0x72>
					vol = (int)i;
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801223e:	697b      	ldr	r3, [r7, #20]
 8012240:	3301      	adds	r3, #1
 8012242:	617b      	str	r3, [r7, #20]
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	697a      	ldr	r2, [r7, #20]
 8012248:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801224a:	693b      	ldr	r3, [r7, #16]
 801224c:	e002      	b.n	8012254 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801224e:	2300      	movs	r3, #0
 8012250:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012252:	693b      	ldr	r3, [r7, #16]
}
 8012254:	4618      	mov	r0, r3
 8012256:	371c      	adds	r7, #28
 8012258:	46bd      	mov	sp, r7
 801225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225e:	4770      	bx	lr

08012260 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b082      	sub	sp, #8
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
 8012268:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	2200      	movs	r2, #0
 801226e:	70da      	strb	r2, [r3, #3]
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	f04f 32ff 	mov.w	r2, #4294967295
 8012276:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012278:	6839      	ldr	r1, [r7, #0]
 801227a:	6878      	ldr	r0, [r7, #4]
 801227c:	f7ff f854 	bl	8011328 <move_window>
 8012280:	4603      	mov	r3, r0
 8012282:	2b00      	cmp	r3, #0
 8012284:	d001      	beq.n	801228a <check_fs+0x2a>
 8012286:	2304      	movs	r3, #4
 8012288:	e038      	b.n	80122fc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	3334      	adds	r3, #52	; 0x34
 801228e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012292:	4618      	mov	r0, r3
 8012294:	f7fe fd98 	bl	8010dc8 <ld_word>
 8012298:	4603      	mov	r3, r0
 801229a:	461a      	mov	r2, r3
 801229c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80122a0:	429a      	cmp	r2, r3
 80122a2:	d001      	beq.n	80122a8 <check_fs+0x48>
 80122a4:	2303      	movs	r3, #3
 80122a6:	e029      	b.n	80122fc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80122ae:	2be9      	cmp	r3, #233	; 0xe9
 80122b0:	d009      	beq.n	80122c6 <check_fs+0x66>
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80122b8:	2beb      	cmp	r3, #235	; 0xeb
 80122ba:	d11e      	bne.n	80122fa <check_fs+0x9a>
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80122c2:	2b90      	cmp	r3, #144	; 0x90
 80122c4:	d119      	bne.n	80122fa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	3334      	adds	r3, #52	; 0x34
 80122ca:	3336      	adds	r3, #54	; 0x36
 80122cc:	4618      	mov	r0, r3
 80122ce:	f7fe fd93 	bl	8010df8 <ld_dword>
 80122d2:	4603      	mov	r3, r0
 80122d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80122d8:	4a0a      	ldr	r2, [pc, #40]	; (8012304 <check_fs+0xa4>)
 80122da:	4293      	cmp	r3, r2
 80122dc:	d101      	bne.n	80122e2 <check_fs+0x82>
 80122de:	2300      	movs	r3, #0
 80122e0:	e00c      	b.n	80122fc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	3334      	adds	r3, #52	; 0x34
 80122e6:	3352      	adds	r3, #82	; 0x52
 80122e8:	4618      	mov	r0, r3
 80122ea:	f7fe fd85 	bl	8010df8 <ld_dword>
 80122ee:	4603      	mov	r3, r0
 80122f0:	4a05      	ldr	r2, [pc, #20]	; (8012308 <check_fs+0xa8>)
 80122f2:	4293      	cmp	r3, r2
 80122f4:	d101      	bne.n	80122fa <check_fs+0x9a>
 80122f6:	2300      	movs	r3, #0
 80122f8:	e000      	b.n	80122fc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80122fa:	2302      	movs	r3, #2
}
 80122fc:	4618      	mov	r0, r3
 80122fe:	3708      	adds	r7, #8
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}
 8012304:	00544146 	.word	0x00544146
 8012308:	33544146 	.word	0x33544146

0801230c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b096      	sub	sp, #88	; 0x58
 8012310:	af00      	add	r7, sp, #0
 8012312:	60f8      	str	r0, [r7, #12]
 8012314:	60b9      	str	r1, [r7, #8]
 8012316:	4613      	mov	r3, r2
 8012318:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801231a:	68bb      	ldr	r3, [r7, #8]
 801231c:	2200      	movs	r2, #0
 801231e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012320:	68f8      	ldr	r0, [r7, #12]
 8012322:	f7ff ff59 	bl	80121d8 <get_ldnumber>
 8012326:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801232a:	2b00      	cmp	r3, #0
 801232c:	da01      	bge.n	8012332 <find_volume+0x26>
 801232e:	230b      	movs	r3, #11
 8012330:	e262      	b.n	80127f8 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012332:	4a9f      	ldr	r2, [pc, #636]	; (80125b0 <find_volume+0x2a4>)
 8012334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801233a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801233c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801233e:	2b00      	cmp	r3, #0
 8012340:	d101      	bne.n	8012346 <find_volume+0x3a>
 8012342:	230c      	movs	r3, #12
 8012344:	e258      	b.n	80127f8 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012346:	68bb      	ldr	r3, [r7, #8]
 8012348:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801234a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801234c:	79fb      	ldrb	r3, [r7, #7]
 801234e:	f023 0301 	bic.w	r3, r3, #1
 8012352:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012356:	781b      	ldrb	r3, [r3, #0]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d01a      	beq.n	8012392 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801235c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801235e:	785b      	ldrb	r3, [r3, #1]
 8012360:	4618      	mov	r0, r3
 8012362:	f7fe fc93 	bl	8010c8c <disk_status>
 8012366:	4603      	mov	r3, r0
 8012368:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801236c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012370:	f003 0301 	and.w	r3, r3, #1
 8012374:	2b00      	cmp	r3, #0
 8012376:	d10c      	bne.n	8012392 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012378:	79fb      	ldrb	r3, [r7, #7]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d007      	beq.n	801238e <find_volume+0x82>
 801237e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012382:	f003 0304 	and.w	r3, r3, #4
 8012386:	2b00      	cmp	r3, #0
 8012388:	d001      	beq.n	801238e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801238a:	230a      	movs	r3, #10
 801238c:	e234      	b.n	80127f8 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 801238e:	2300      	movs	r3, #0
 8012390:	e232      	b.n	80127f8 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012394:	2200      	movs	r2, #0
 8012396:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801239a:	b2da      	uxtb	r2, r3
 801239c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801239e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80123a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123a2:	785b      	ldrb	r3, [r3, #1]
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7fe fc8b 	bl	8010cc0 <disk_initialize>
 80123aa:	4603      	mov	r3, r0
 80123ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80123b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80123b4:	f003 0301 	and.w	r3, r3, #1
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d001      	beq.n	80123c0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80123bc:	2303      	movs	r3, #3
 80123be:	e21b      	b.n	80127f8 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80123c0:	79fb      	ldrb	r3, [r7, #7]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d007      	beq.n	80123d6 <find_volume+0xca>
 80123c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80123ca:	f003 0304 	and.w	r3, r3, #4
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d001      	beq.n	80123d6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80123d2:	230a      	movs	r3, #10
 80123d4:	e210      	b.n	80127f8 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80123d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123d8:	7858      	ldrb	r0, [r3, #1]
 80123da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123dc:	330c      	adds	r3, #12
 80123de:	461a      	mov	r2, r3
 80123e0:	2102      	movs	r1, #2
 80123e2:	f7fe fcd3 	bl	8010d8c <disk_ioctl>
 80123e6:	4603      	mov	r3, r0
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d001      	beq.n	80123f0 <find_volume+0xe4>
 80123ec:	2301      	movs	r3, #1
 80123ee:	e203      	b.n	80127f8 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80123f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123f2:	899b      	ldrh	r3, [r3, #12]
 80123f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80123f8:	d80d      	bhi.n	8012416 <find_volume+0x10a>
 80123fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123fc:	899b      	ldrh	r3, [r3, #12]
 80123fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012402:	d308      	bcc.n	8012416 <find_volume+0x10a>
 8012404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012406:	899b      	ldrh	r3, [r3, #12]
 8012408:	461a      	mov	r2, r3
 801240a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801240c:	899b      	ldrh	r3, [r3, #12]
 801240e:	3b01      	subs	r3, #1
 8012410:	4013      	ands	r3, r2
 8012412:	2b00      	cmp	r3, #0
 8012414:	d001      	beq.n	801241a <find_volume+0x10e>
 8012416:	2301      	movs	r3, #1
 8012418:	e1ee      	b.n	80127f8 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801241a:	2300      	movs	r3, #0
 801241c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801241e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012420:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012422:	f7ff ff1d 	bl	8012260 <check_fs>
 8012426:	4603      	mov	r3, r0
 8012428:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801242c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012430:	2b02      	cmp	r3, #2
 8012432:	d149      	bne.n	80124c8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012434:	2300      	movs	r3, #0
 8012436:	643b      	str	r3, [r7, #64]	; 0x40
 8012438:	e01e      	b.n	8012478 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801243a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801243c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012442:	011b      	lsls	r3, r3, #4
 8012444:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012448:	4413      	add	r3, r2
 801244a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801244c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801244e:	3304      	adds	r3, #4
 8012450:	781b      	ldrb	r3, [r3, #0]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d006      	beq.n	8012464 <find_volume+0x158>
 8012456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012458:	3308      	adds	r3, #8
 801245a:	4618      	mov	r0, r3
 801245c:	f7fe fccc 	bl	8010df8 <ld_dword>
 8012460:	4602      	mov	r2, r0
 8012462:	e000      	b.n	8012466 <find_volume+0x15a>
 8012464:	2200      	movs	r2, #0
 8012466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012468:	009b      	lsls	r3, r3, #2
 801246a:	3358      	adds	r3, #88	; 0x58
 801246c:	443b      	add	r3, r7
 801246e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012474:	3301      	adds	r3, #1
 8012476:	643b      	str	r3, [r7, #64]	; 0x40
 8012478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801247a:	2b03      	cmp	r3, #3
 801247c:	d9dd      	bls.n	801243a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801247e:	2300      	movs	r3, #0
 8012480:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012484:	2b00      	cmp	r3, #0
 8012486:	d002      	beq.n	801248e <find_volume+0x182>
 8012488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801248a:	3b01      	subs	r3, #1
 801248c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801248e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012490:	009b      	lsls	r3, r3, #2
 8012492:	3358      	adds	r3, #88	; 0x58
 8012494:	443b      	add	r3, r7
 8012496:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801249a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801249c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d005      	beq.n	80124ae <find_volume+0x1a2>
 80124a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80124a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80124a6:	f7ff fedb 	bl	8012260 <check_fs>
 80124aa:	4603      	mov	r3, r0
 80124ac:	e000      	b.n	80124b0 <find_volume+0x1a4>
 80124ae:	2303      	movs	r3, #3
 80124b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80124b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80124b8:	2b01      	cmp	r3, #1
 80124ba:	d905      	bls.n	80124c8 <find_volume+0x1bc>
 80124bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124be:	3301      	adds	r3, #1
 80124c0:	643b      	str	r3, [r7, #64]	; 0x40
 80124c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124c4:	2b03      	cmp	r3, #3
 80124c6:	d9e2      	bls.n	801248e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80124c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80124cc:	2b04      	cmp	r3, #4
 80124ce:	d101      	bne.n	80124d4 <find_volume+0x1c8>
 80124d0:	2301      	movs	r3, #1
 80124d2:	e191      	b.n	80127f8 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80124d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80124d8:	2b01      	cmp	r3, #1
 80124da:	d901      	bls.n	80124e0 <find_volume+0x1d4>
 80124dc:	230d      	movs	r3, #13
 80124de:	e18b      	b.n	80127f8 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80124e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124e2:	3334      	adds	r3, #52	; 0x34
 80124e4:	330b      	adds	r3, #11
 80124e6:	4618      	mov	r0, r3
 80124e8:	f7fe fc6e 	bl	8010dc8 <ld_word>
 80124ec:	4603      	mov	r3, r0
 80124ee:	461a      	mov	r2, r3
 80124f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f2:	899b      	ldrh	r3, [r3, #12]
 80124f4:	429a      	cmp	r2, r3
 80124f6:	d001      	beq.n	80124fc <find_volume+0x1f0>
 80124f8:	230d      	movs	r3, #13
 80124fa:	e17d      	b.n	80127f8 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80124fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124fe:	3334      	adds	r3, #52	; 0x34
 8012500:	3316      	adds	r3, #22
 8012502:	4618      	mov	r0, r3
 8012504:	f7fe fc60 	bl	8010dc8 <ld_word>
 8012508:	4603      	mov	r3, r0
 801250a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801250c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801250e:	2b00      	cmp	r3, #0
 8012510:	d106      	bne.n	8012520 <find_volume+0x214>
 8012512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012514:	3334      	adds	r3, #52	; 0x34
 8012516:	3324      	adds	r3, #36	; 0x24
 8012518:	4618      	mov	r0, r3
 801251a:	f7fe fc6d 	bl	8010df8 <ld_dword>
 801251e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012522:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012524:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012528:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801252c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801252e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012532:	789b      	ldrb	r3, [r3, #2]
 8012534:	2b01      	cmp	r3, #1
 8012536:	d005      	beq.n	8012544 <find_volume+0x238>
 8012538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801253a:	789b      	ldrb	r3, [r3, #2]
 801253c:	2b02      	cmp	r3, #2
 801253e:	d001      	beq.n	8012544 <find_volume+0x238>
 8012540:	230d      	movs	r3, #13
 8012542:	e159      	b.n	80127f8 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012546:	789b      	ldrb	r3, [r3, #2]
 8012548:	461a      	mov	r2, r3
 801254a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801254c:	fb02 f303 	mul.w	r3, r2, r3
 8012550:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012558:	b29a      	uxth	r2, r3
 801255a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801255c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801255e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012560:	895b      	ldrh	r3, [r3, #10]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d008      	beq.n	8012578 <find_volume+0x26c>
 8012566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012568:	895b      	ldrh	r3, [r3, #10]
 801256a:	461a      	mov	r2, r3
 801256c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801256e:	895b      	ldrh	r3, [r3, #10]
 8012570:	3b01      	subs	r3, #1
 8012572:	4013      	ands	r3, r2
 8012574:	2b00      	cmp	r3, #0
 8012576:	d001      	beq.n	801257c <find_volume+0x270>
 8012578:	230d      	movs	r3, #13
 801257a:	e13d      	b.n	80127f8 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801257c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801257e:	3334      	adds	r3, #52	; 0x34
 8012580:	3311      	adds	r3, #17
 8012582:	4618      	mov	r0, r3
 8012584:	f7fe fc20 	bl	8010dc8 <ld_word>
 8012588:	4603      	mov	r3, r0
 801258a:	461a      	mov	r2, r3
 801258c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801258e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012592:	891b      	ldrh	r3, [r3, #8]
 8012594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012596:	8992      	ldrh	r2, [r2, #12]
 8012598:	0952      	lsrs	r2, r2, #5
 801259a:	b292      	uxth	r2, r2
 801259c:	fbb3 f1f2 	udiv	r1, r3, r2
 80125a0:	fb01 f202 	mul.w	r2, r1, r2
 80125a4:	1a9b      	subs	r3, r3, r2
 80125a6:	b29b      	uxth	r3, r3
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d003      	beq.n	80125b4 <find_volume+0x2a8>
 80125ac:	230d      	movs	r3, #13
 80125ae:	e123      	b.n	80127f8 <find_volume+0x4ec>
 80125b0:	20004b04 	.word	0x20004b04

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80125b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125b6:	3334      	adds	r3, #52	; 0x34
 80125b8:	3313      	adds	r3, #19
 80125ba:	4618      	mov	r0, r3
 80125bc:	f7fe fc04 	bl	8010dc8 <ld_word>
 80125c0:	4603      	mov	r3, r0
 80125c2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80125c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d106      	bne.n	80125d8 <find_volume+0x2cc>
 80125ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125cc:	3334      	adds	r3, #52	; 0x34
 80125ce:	3320      	adds	r3, #32
 80125d0:	4618      	mov	r0, r3
 80125d2:	f7fe fc11 	bl	8010df8 <ld_dword>
 80125d6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80125d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125da:	3334      	adds	r3, #52	; 0x34
 80125dc:	330e      	adds	r3, #14
 80125de:	4618      	mov	r0, r3
 80125e0:	f7fe fbf2 	bl	8010dc8 <ld_word>
 80125e4:	4603      	mov	r3, r0
 80125e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80125e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d101      	bne.n	80125f2 <find_volume+0x2e6>
 80125ee:	230d      	movs	r3, #13
 80125f0:	e102      	b.n	80127f8 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80125f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80125f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125f6:	4413      	add	r3, r2
 80125f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80125fa:	8911      	ldrh	r1, [r2, #8]
 80125fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80125fe:	8992      	ldrh	r2, [r2, #12]
 8012600:	0952      	lsrs	r2, r2, #5
 8012602:	b292      	uxth	r2, r2
 8012604:	fbb1 f2f2 	udiv	r2, r1, r2
 8012608:	b292      	uxth	r2, r2
 801260a:	4413      	add	r3, r2
 801260c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801260e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012612:	429a      	cmp	r2, r3
 8012614:	d201      	bcs.n	801261a <find_volume+0x30e>
 8012616:	230d      	movs	r3, #13
 8012618:	e0ee      	b.n	80127f8 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801261a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801261c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801261e:	1ad3      	subs	r3, r2, r3
 8012620:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012622:	8952      	ldrh	r2, [r2, #10]
 8012624:	fbb3 f3f2 	udiv	r3, r3, r2
 8012628:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801262c:	2b00      	cmp	r3, #0
 801262e:	d101      	bne.n	8012634 <find_volume+0x328>
 8012630:	230d      	movs	r3, #13
 8012632:	e0e1      	b.n	80127f8 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8012634:	2303      	movs	r3, #3
 8012636:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801263c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012640:	4293      	cmp	r3, r2
 8012642:	d802      	bhi.n	801264a <find_volume+0x33e>
 8012644:	2302      	movs	r3, #2
 8012646:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801264c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012650:	4293      	cmp	r3, r2
 8012652:	d802      	bhi.n	801265a <find_volume+0x34e>
 8012654:	2301      	movs	r3, #1
 8012656:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801265c:	1c9a      	adds	r2, r3, #2
 801265e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012660:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8012662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012664:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012666:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012668:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801266a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801266c:	441a      	add	r2, r3
 801266e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012670:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8012672:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012676:	441a      	add	r2, r3
 8012678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801267a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 801267c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012680:	2b03      	cmp	r3, #3
 8012682:	d11e      	bne.n	80126c2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012686:	3334      	adds	r3, #52	; 0x34
 8012688:	332a      	adds	r3, #42	; 0x2a
 801268a:	4618      	mov	r0, r3
 801268c:	f7fe fb9c 	bl	8010dc8 <ld_word>
 8012690:	4603      	mov	r3, r0
 8012692:	2b00      	cmp	r3, #0
 8012694:	d001      	beq.n	801269a <find_volume+0x38e>
 8012696:	230d      	movs	r3, #13
 8012698:	e0ae      	b.n	80127f8 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801269c:	891b      	ldrh	r3, [r3, #8]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d001      	beq.n	80126a6 <find_volume+0x39a>
 80126a2:	230d      	movs	r3, #13
 80126a4:	e0a8      	b.n	80127f8 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80126a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126a8:	3334      	adds	r3, #52	; 0x34
 80126aa:	332c      	adds	r3, #44	; 0x2c
 80126ac:	4618      	mov	r0, r3
 80126ae:	f7fe fba3 	bl	8010df8 <ld_dword>
 80126b2:	4602      	mov	r2, r0
 80126b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126b6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80126b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ba:	699b      	ldr	r3, [r3, #24]
 80126bc:	009b      	lsls	r3, r3, #2
 80126be:	647b      	str	r3, [r7, #68]	; 0x44
 80126c0:	e01f      	b.n	8012702 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80126c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c4:	891b      	ldrh	r3, [r3, #8]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d101      	bne.n	80126ce <find_volume+0x3c2>
 80126ca:	230d      	movs	r3, #13
 80126cc:	e094      	b.n	80127f8 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80126ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80126d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126d4:	441a      	add	r2, r3
 80126d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80126da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80126de:	2b02      	cmp	r3, #2
 80126e0:	d103      	bne.n	80126ea <find_volume+0x3de>
 80126e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126e4:	699b      	ldr	r3, [r3, #24]
 80126e6:	005b      	lsls	r3, r3, #1
 80126e8:	e00a      	b.n	8012700 <find_volume+0x3f4>
 80126ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ec:	699a      	ldr	r2, [r3, #24]
 80126ee:	4613      	mov	r3, r2
 80126f0:	005b      	lsls	r3, r3, #1
 80126f2:	4413      	add	r3, r2
 80126f4:	085a      	lsrs	r2, r3, #1
 80126f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126f8:	699b      	ldr	r3, [r3, #24]
 80126fa:	f003 0301 	and.w	r3, r3, #1
 80126fe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012700:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012704:	69da      	ldr	r2, [r3, #28]
 8012706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012708:	899b      	ldrh	r3, [r3, #12]
 801270a:	4619      	mov	r1, r3
 801270c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801270e:	440b      	add	r3, r1
 8012710:	3b01      	subs	r3, #1
 8012712:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012714:	8989      	ldrh	r1, [r1, #12]
 8012716:	fbb3 f3f1 	udiv	r3, r3, r1
 801271a:	429a      	cmp	r2, r3
 801271c:	d201      	bcs.n	8012722 <find_volume+0x416>
 801271e:	230d      	movs	r3, #13
 8012720:	e06a      	b.n	80127f8 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012724:	f04f 32ff 	mov.w	r2, #4294967295
 8012728:	615a      	str	r2, [r3, #20]
 801272a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801272c:	695a      	ldr	r2, [r3, #20]
 801272e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012730:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012734:	2280      	movs	r2, #128	; 0x80
 8012736:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012738:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801273c:	2b03      	cmp	r3, #3
 801273e:	d149      	bne.n	80127d4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012742:	3334      	adds	r3, #52	; 0x34
 8012744:	3330      	adds	r3, #48	; 0x30
 8012746:	4618      	mov	r0, r3
 8012748:	f7fe fb3e 	bl	8010dc8 <ld_word>
 801274c:	4603      	mov	r3, r0
 801274e:	2b01      	cmp	r3, #1
 8012750:	d140      	bne.n	80127d4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012754:	3301      	adds	r3, #1
 8012756:	4619      	mov	r1, r3
 8012758:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801275a:	f7fe fde5 	bl	8011328 <move_window>
 801275e:	4603      	mov	r3, r0
 8012760:	2b00      	cmp	r3, #0
 8012762:	d137      	bne.n	80127d4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8012764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012766:	2200      	movs	r2, #0
 8012768:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801276a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801276c:	3334      	adds	r3, #52	; 0x34
 801276e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012772:	4618      	mov	r0, r3
 8012774:	f7fe fb28 	bl	8010dc8 <ld_word>
 8012778:	4603      	mov	r3, r0
 801277a:	461a      	mov	r2, r3
 801277c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012780:	429a      	cmp	r2, r3
 8012782:	d127      	bne.n	80127d4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012786:	3334      	adds	r3, #52	; 0x34
 8012788:	4618      	mov	r0, r3
 801278a:	f7fe fb35 	bl	8010df8 <ld_dword>
 801278e:	4603      	mov	r3, r0
 8012790:	4a1b      	ldr	r2, [pc, #108]	; (8012800 <find_volume+0x4f4>)
 8012792:	4293      	cmp	r3, r2
 8012794:	d11e      	bne.n	80127d4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012798:	3334      	adds	r3, #52	; 0x34
 801279a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801279e:	4618      	mov	r0, r3
 80127a0:	f7fe fb2a 	bl	8010df8 <ld_dword>
 80127a4:	4603      	mov	r3, r0
 80127a6:	4a17      	ldr	r2, [pc, #92]	; (8012804 <find_volume+0x4f8>)
 80127a8:	4293      	cmp	r3, r2
 80127aa:	d113      	bne.n	80127d4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80127ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ae:	3334      	adds	r3, #52	; 0x34
 80127b0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80127b4:	4618      	mov	r0, r3
 80127b6:	f7fe fb1f 	bl	8010df8 <ld_dword>
 80127ba:	4602      	mov	r2, r0
 80127bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127be:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80127c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127c2:	3334      	adds	r3, #52	; 0x34
 80127c4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80127c8:	4618      	mov	r0, r3
 80127ca:	f7fe fb15 	bl	8010df8 <ld_dword>
 80127ce:	4602      	mov	r2, r0
 80127d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127d2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80127d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127d6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80127da:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80127dc:	4b0a      	ldr	r3, [pc, #40]	; (8012808 <find_volume+0x4fc>)
 80127de:	881b      	ldrh	r3, [r3, #0]
 80127e0:	3301      	adds	r3, #1
 80127e2:	b29a      	uxth	r2, r3
 80127e4:	4b08      	ldr	r3, [pc, #32]	; (8012808 <find_volume+0x4fc>)
 80127e6:	801a      	strh	r2, [r3, #0]
 80127e8:	4b07      	ldr	r3, [pc, #28]	; (8012808 <find_volume+0x4fc>)
 80127ea:	881a      	ldrh	r2, [r3, #0]
 80127ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ee:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80127f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80127f2:	f7fe fd31 	bl	8011258 <clear_lock>
#endif
	return FR_OK;
 80127f6:	2300      	movs	r3, #0
}
 80127f8:	4618      	mov	r0, r3
 80127fa:	3758      	adds	r7, #88	; 0x58
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}
 8012800:	41615252 	.word	0x41615252
 8012804:	61417272 	.word	0x61417272
 8012808:	20004b08 	.word	0x20004b08

0801280c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b084      	sub	sp, #16
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
 8012814:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012816:	2309      	movs	r3, #9
 8012818:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d01c      	beq.n	801285a <validate+0x4e>
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d018      	beq.n	801285a <validate+0x4e>
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	781b      	ldrb	r3, [r3, #0]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d013      	beq.n	801285a <validate+0x4e>
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	889a      	ldrh	r2, [r3, #4]
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	88db      	ldrh	r3, [r3, #6]
 801283c:	429a      	cmp	r2, r3
 801283e:	d10c      	bne.n	801285a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	785b      	ldrb	r3, [r3, #1]
 8012846:	4618      	mov	r0, r3
 8012848:	f7fe fa20 	bl	8010c8c <disk_status>
 801284c:	4603      	mov	r3, r0
 801284e:	f003 0301 	and.w	r3, r3, #1
 8012852:	2b00      	cmp	r3, #0
 8012854:	d101      	bne.n	801285a <validate+0x4e>
			res = FR_OK;
 8012856:	2300      	movs	r3, #0
 8012858:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801285a:	7bfb      	ldrb	r3, [r7, #15]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d102      	bne.n	8012866 <validate+0x5a>
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	e000      	b.n	8012868 <validate+0x5c>
 8012866:	2300      	movs	r3, #0
 8012868:	683a      	ldr	r2, [r7, #0]
 801286a:	6013      	str	r3, [r2, #0]
	return res;
 801286c:	7bfb      	ldrb	r3, [r7, #15]
}
 801286e:	4618      	mov	r0, r3
 8012870:	3710      	adds	r7, #16
 8012872:	46bd      	mov	sp, r7
 8012874:	bd80      	pop	{r7, pc}
	...

08012878 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b088      	sub	sp, #32
 801287c:	af00      	add	r7, sp, #0
 801287e:	60f8      	str	r0, [r7, #12]
 8012880:	60b9      	str	r1, [r7, #8]
 8012882:	4613      	mov	r3, r2
 8012884:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012886:	68bb      	ldr	r3, [r7, #8]
 8012888:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801288a:	f107 0310 	add.w	r3, r7, #16
 801288e:	4618      	mov	r0, r3
 8012890:	f7ff fca2 	bl	80121d8 <get_ldnumber>
 8012894:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012896:	69fb      	ldr	r3, [r7, #28]
 8012898:	2b00      	cmp	r3, #0
 801289a:	da01      	bge.n	80128a0 <f_mount+0x28>
 801289c:	230b      	movs	r3, #11
 801289e:	e02b      	b.n	80128f8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80128a0:	4a17      	ldr	r2, [pc, #92]	; (8012900 <f_mount+0x88>)
 80128a2:	69fb      	ldr	r3, [r7, #28]
 80128a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80128a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80128aa:	69bb      	ldr	r3, [r7, #24]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d005      	beq.n	80128bc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80128b0:	69b8      	ldr	r0, [r7, #24]
 80128b2:	f7fe fcd1 	bl	8011258 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80128b6:	69bb      	ldr	r3, [r7, #24]
 80128b8:	2200      	movs	r2, #0
 80128ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d002      	beq.n	80128c8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	2200      	movs	r2, #0
 80128c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80128c8:	68fa      	ldr	r2, [r7, #12]
 80128ca:	490d      	ldr	r1, [pc, #52]	; (8012900 <f_mount+0x88>)
 80128cc:	69fb      	ldr	r3, [r7, #28]
 80128ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d002      	beq.n	80128de <f_mount+0x66>
 80128d8:	79fb      	ldrb	r3, [r7, #7]
 80128da:	2b01      	cmp	r3, #1
 80128dc:	d001      	beq.n	80128e2 <f_mount+0x6a>
 80128de:	2300      	movs	r3, #0
 80128e0:	e00a      	b.n	80128f8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80128e2:	f107 010c 	add.w	r1, r7, #12
 80128e6:	f107 0308 	add.w	r3, r7, #8
 80128ea:	2200      	movs	r2, #0
 80128ec:	4618      	mov	r0, r3
 80128ee:	f7ff fd0d 	bl	801230c <find_volume>
 80128f2:	4603      	mov	r3, r0
 80128f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80128f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80128f8:	4618      	mov	r0, r3
 80128fa:	3720      	adds	r7, #32
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}
 8012900:	20004b04 	.word	0x20004b04

08012904 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b098      	sub	sp, #96	; 0x60
 8012908:	af00      	add	r7, sp, #0
 801290a:	60f8      	str	r0, [r7, #12]
 801290c:	60b9      	str	r1, [r7, #8]
 801290e:	4613      	mov	r3, r2
 8012910:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d101      	bne.n	801291c <f_open+0x18>
 8012918:	2309      	movs	r3, #9
 801291a:	e1bb      	b.n	8012c94 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801291c:	79fb      	ldrb	r3, [r7, #7]
 801291e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012922:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012924:	79fa      	ldrb	r2, [r7, #7]
 8012926:	f107 0110 	add.w	r1, r7, #16
 801292a:	f107 0308 	add.w	r3, r7, #8
 801292e:	4618      	mov	r0, r3
 8012930:	f7ff fcec 	bl	801230c <find_volume>
 8012934:	4603      	mov	r3, r0
 8012936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801293a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801293e:	2b00      	cmp	r3, #0
 8012940:	f040 819f 	bne.w	8012c82 <f_open+0x37e>
		dj.obj.fs = fs;
 8012944:	693b      	ldr	r3, [r7, #16]
 8012946:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012948:	68ba      	ldr	r2, [r7, #8]
 801294a:	f107 0314 	add.w	r3, r7, #20
 801294e:	4611      	mov	r1, r2
 8012950:	4618      	mov	r0, r3
 8012952:	f7ff fbcb 	bl	80120ec <follow_path>
 8012956:	4603      	mov	r3, r0
 8012958:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801295c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012960:	2b00      	cmp	r3, #0
 8012962:	d11a      	bne.n	801299a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012964:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012968:	b25b      	sxtb	r3, r3
 801296a:	2b00      	cmp	r3, #0
 801296c:	da03      	bge.n	8012976 <f_open+0x72>
				res = FR_INVALID_NAME;
 801296e:	2306      	movs	r3, #6
 8012970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012974:	e011      	b.n	801299a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012976:	79fb      	ldrb	r3, [r7, #7]
 8012978:	f023 0301 	bic.w	r3, r3, #1
 801297c:	2b00      	cmp	r3, #0
 801297e:	bf14      	ite	ne
 8012980:	2301      	movne	r3, #1
 8012982:	2300      	moveq	r3, #0
 8012984:	b2db      	uxtb	r3, r3
 8012986:	461a      	mov	r2, r3
 8012988:	f107 0314 	add.w	r3, r7, #20
 801298c:	4611      	mov	r1, r2
 801298e:	4618      	mov	r0, r3
 8012990:	f7fe fb1a 	bl	8010fc8 <chk_lock>
 8012994:	4603      	mov	r3, r0
 8012996:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801299a:	79fb      	ldrb	r3, [r7, #7]
 801299c:	f003 031c 	and.w	r3, r3, #28
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d07f      	beq.n	8012aa4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80129a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d017      	beq.n	80129dc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80129ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80129b0:	2b04      	cmp	r3, #4
 80129b2:	d10e      	bne.n	80129d2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80129b4:	f7fe fb64 	bl	8011080 <enq_lock>
 80129b8:	4603      	mov	r3, r0
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d006      	beq.n	80129cc <f_open+0xc8>
 80129be:	f107 0314 	add.w	r3, r7, #20
 80129c2:	4618      	mov	r0, r3
 80129c4:	f7ff facc 	bl	8011f60 <dir_register>
 80129c8:	4603      	mov	r3, r0
 80129ca:	e000      	b.n	80129ce <f_open+0xca>
 80129cc:	2312      	movs	r3, #18
 80129ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80129d2:	79fb      	ldrb	r3, [r7, #7]
 80129d4:	f043 0308 	orr.w	r3, r3, #8
 80129d8:	71fb      	strb	r3, [r7, #7]
 80129da:	e010      	b.n	80129fe <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80129dc:	7ebb      	ldrb	r3, [r7, #26]
 80129de:	f003 0311 	and.w	r3, r3, #17
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d003      	beq.n	80129ee <f_open+0xea>
					res = FR_DENIED;
 80129e6:	2307      	movs	r3, #7
 80129e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80129ec:	e007      	b.n	80129fe <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80129ee:	79fb      	ldrb	r3, [r7, #7]
 80129f0:	f003 0304 	and.w	r3, r3, #4
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d002      	beq.n	80129fe <f_open+0xfa>
 80129f8:	2308      	movs	r3, #8
 80129fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80129fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d168      	bne.n	8012ad8 <f_open+0x1d4>
 8012a06:	79fb      	ldrb	r3, [r7, #7]
 8012a08:	f003 0308 	and.w	r3, r3, #8
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d063      	beq.n	8012ad8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8012a10:	f7fe f8da 	bl	8010bc8 <get_fattime>
 8012a14:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a18:	330e      	adds	r3, #14
 8012a1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f7fe fa29 	bl	8010e74 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a24:	3316      	adds	r3, #22
 8012a26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f7fe fa23 	bl	8010e74 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a30:	330b      	adds	r3, #11
 8012a32:	2220      	movs	r2, #32
 8012a34:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012a36:	693b      	ldr	r3, [r7, #16]
 8012a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012a3a:	4611      	mov	r1, r2
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f7ff f9fb 	bl	8011e38 <ld_clust>
 8012a42:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012a44:	693b      	ldr	r3, [r7, #16]
 8012a46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012a48:	2200      	movs	r2, #0
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f7ff fa13 	bl	8011e76 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a52:	331c      	adds	r3, #28
 8012a54:	2100      	movs	r1, #0
 8012a56:	4618      	mov	r0, r3
 8012a58:	f7fe fa0c 	bl	8010e74 <st_dword>
					fs->wflag = 1;
 8012a5c:	693b      	ldr	r3, [r7, #16]
 8012a5e:	2201      	movs	r2, #1
 8012a60:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d037      	beq.n	8012ad8 <f_open+0x1d4>
						dw = fs->winsect;
 8012a68:	693b      	ldr	r3, [r7, #16]
 8012a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a6c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012a6e:	f107 0314 	add.w	r3, r7, #20
 8012a72:	2200      	movs	r2, #0
 8012a74:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012a76:	4618      	mov	r0, r3
 8012a78:	f7fe ff03 	bl	8011882 <remove_chain>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8012a82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d126      	bne.n	8012ad8 <f_open+0x1d4>
							res = move_window(fs, dw);
 8012a8a:	693b      	ldr	r3, [r7, #16]
 8012a8c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f7fe fc4a 	bl	8011328 <move_window>
 8012a94:	4603      	mov	r3, r0
 8012a96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012a9a:	693b      	ldr	r3, [r7, #16]
 8012a9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012a9e:	3a01      	subs	r2, #1
 8012aa0:	611a      	str	r2, [r3, #16]
 8012aa2:	e019      	b.n	8012ad8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012aa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d115      	bne.n	8012ad8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012aac:	7ebb      	ldrb	r3, [r7, #26]
 8012aae:	f003 0310 	and.w	r3, r3, #16
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d003      	beq.n	8012abe <f_open+0x1ba>
					res = FR_NO_FILE;
 8012ab6:	2304      	movs	r3, #4
 8012ab8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012abc:	e00c      	b.n	8012ad8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012abe:	79fb      	ldrb	r3, [r7, #7]
 8012ac0:	f003 0302 	and.w	r3, r3, #2
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d007      	beq.n	8012ad8 <f_open+0x1d4>
 8012ac8:	7ebb      	ldrb	r3, [r7, #26]
 8012aca:	f003 0301 	and.w	r3, r3, #1
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d002      	beq.n	8012ad8 <f_open+0x1d4>
						res = FR_DENIED;
 8012ad2:	2307      	movs	r3, #7
 8012ad4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012ad8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d128      	bne.n	8012b32 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012ae0:	79fb      	ldrb	r3, [r7, #7]
 8012ae2:	f003 0308 	and.w	r3, r3, #8
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d003      	beq.n	8012af2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8012aea:	79fb      	ldrb	r3, [r7, #7]
 8012aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012af0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012af2:	693b      	ldr	r3, [r7, #16]
 8012af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012b00:	79fb      	ldrb	r3, [r7, #7]
 8012b02:	f023 0301 	bic.w	r3, r3, #1
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	bf14      	ite	ne
 8012b0a:	2301      	movne	r3, #1
 8012b0c:	2300      	moveq	r3, #0
 8012b0e:	b2db      	uxtb	r3, r3
 8012b10:	461a      	mov	r2, r3
 8012b12:	f107 0314 	add.w	r3, r7, #20
 8012b16:	4611      	mov	r1, r2
 8012b18:	4618      	mov	r0, r3
 8012b1a:	f7fe fad3 	bl	80110c4 <inc_lock>
 8012b1e:	4602      	mov	r2, r0
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	691b      	ldr	r3, [r3, #16]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d102      	bne.n	8012b32 <f_open+0x22e>
 8012b2c:	2302      	movs	r3, #2
 8012b2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012b32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	f040 80a3 	bne.w	8012c82 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012b3c:	693b      	ldr	r3, [r7, #16]
 8012b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b40:	4611      	mov	r1, r2
 8012b42:	4618      	mov	r0, r3
 8012b44:	f7ff f978 	bl	8011e38 <ld_clust>
 8012b48:	4602      	mov	r2, r0
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b50:	331c      	adds	r3, #28
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7fe f950 	bl	8010df8 <ld_dword>
 8012b58:	4602      	mov	r2, r0
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	2200      	movs	r2, #0
 8012b62:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012b64:	693a      	ldr	r2, [r7, #16]
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012b6a:	693b      	ldr	r3, [r7, #16]
 8012b6c:	88da      	ldrh	r2, [r3, #6]
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	79fa      	ldrb	r2, [r7, #7]
 8012b76:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	2200      	movs	r2, #0
 8012b82:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	2200      	movs	r2, #0
 8012b88:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	3330      	adds	r3, #48	; 0x30
 8012b8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012b92:	2100      	movs	r1, #0
 8012b94:	4618      	mov	r0, r3
 8012b96:	f7fe f9ba 	bl	8010f0e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012b9a:	79fb      	ldrb	r3, [r7, #7]
 8012b9c:	f003 0320 	and.w	r3, r3, #32
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d06e      	beq.n	8012c82 <f_open+0x37e>
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	68db      	ldr	r3, [r3, #12]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d06a      	beq.n	8012c82 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	68da      	ldr	r2, [r3, #12]
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012bb4:	693b      	ldr	r3, [r7, #16]
 8012bb6:	895b      	ldrh	r3, [r3, #10]
 8012bb8:	461a      	mov	r2, r3
 8012bba:	693b      	ldr	r3, [r7, #16]
 8012bbc:	899b      	ldrh	r3, [r3, #12]
 8012bbe:	fb02 f303 	mul.w	r3, r2, r3
 8012bc2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	689b      	ldr	r3, [r3, #8]
 8012bc8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	68db      	ldr	r3, [r3, #12]
 8012bce:	657b      	str	r3, [r7, #84]	; 0x54
 8012bd0:	e016      	b.n	8012c00 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f7fe fc63 	bl	80114a2 <get_fat>
 8012bdc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012bde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012be0:	2b01      	cmp	r3, #1
 8012be2:	d802      	bhi.n	8012bea <f_open+0x2e6>
 8012be4:	2302      	movs	r3, #2
 8012be6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012bea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bf0:	d102      	bne.n	8012bf8 <f_open+0x2f4>
 8012bf2:	2301      	movs	r3, #1
 8012bf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012bf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bfc:	1ad3      	subs	r3, r2, r3
 8012bfe:	657b      	str	r3, [r7, #84]	; 0x54
 8012c00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d103      	bne.n	8012c10 <f_open+0x30c>
 8012c08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c0c:	429a      	cmp	r2, r3
 8012c0e:	d8e0      	bhi.n	8012bd2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012c14:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012c16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d131      	bne.n	8012c82 <f_open+0x37e>
 8012c1e:	693b      	ldr	r3, [r7, #16]
 8012c20:	899b      	ldrh	r3, [r3, #12]
 8012c22:	461a      	mov	r2, r3
 8012c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c26:	fbb3 f1f2 	udiv	r1, r3, r2
 8012c2a:	fb01 f202 	mul.w	r2, r1, r2
 8012c2e:	1a9b      	subs	r3, r3, r2
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d026      	beq.n	8012c82 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012c34:	693b      	ldr	r3, [r7, #16]
 8012c36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7fe fc13 	bl	8011464 <clust2sect>
 8012c3e:	6478      	str	r0, [r7, #68]	; 0x44
 8012c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d103      	bne.n	8012c4e <f_open+0x34a>
						res = FR_INT_ERR;
 8012c46:	2302      	movs	r3, #2
 8012c48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012c4c:	e019      	b.n	8012c82 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012c4e:	693b      	ldr	r3, [r7, #16]
 8012c50:	899b      	ldrh	r3, [r3, #12]
 8012c52:	461a      	mov	r2, r3
 8012c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c56:	fbb3 f2f2 	udiv	r2, r3, r2
 8012c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c5c:	441a      	add	r2, r3
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012c62:	693b      	ldr	r3, [r7, #16]
 8012c64:	7858      	ldrb	r0, [r3, #1]
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	6a1a      	ldr	r2, [r3, #32]
 8012c70:	2301      	movs	r3, #1
 8012c72:	f7fe f84b 	bl	8010d0c <disk_read>
 8012c76:	4603      	mov	r3, r0
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d002      	beq.n	8012c82 <f_open+0x37e>
 8012c7c:	2301      	movs	r3, #1
 8012c7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012c82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d002      	beq.n	8012c90 <f_open+0x38c>
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012c90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8012c94:	4618      	mov	r0, r3
 8012c96:	3760      	adds	r7, #96	; 0x60
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	bd80      	pop	{r7, pc}

08012c9c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b08c      	sub	sp, #48	; 0x30
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	60f8      	str	r0, [r7, #12]
 8012ca4:	60b9      	str	r1, [r7, #8]
 8012ca6:	607a      	str	r2, [r7, #4]
 8012ca8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012caa:	68bb      	ldr	r3, [r7, #8]
 8012cac:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	f107 0210 	add.w	r2, r7, #16
 8012cba:	4611      	mov	r1, r2
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f7ff fda5 	bl	801280c <validate>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012cc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d107      	bne.n	8012ce0 <f_write+0x44>
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	7d5b      	ldrb	r3, [r3, #21]
 8012cd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012cd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d002      	beq.n	8012ce6 <f_write+0x4a>
 8012ce0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ce4:	e16a      	b.n	8012fbc <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	7d1b      	ldrb	r3, [r3, #20]
 8012cea:	f003 0302 	and.w	r3, r3, #2
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d101      	bne.n	8012cf6 <f_write+0x5a>
 8012cf2:	2307      	movs	r3, #7
 8012cf4:	e162      	b.n	8012fbc <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	699a      	ldr	r2, [r3, #24]
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	441a      	add	r2, r3
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	699b      	ldr	r3, [r3, #24]
 8012d02:	429a      	cmp	r2, r3
 8012d04:	f080 814c 	bcs.w	8012fa0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	699b      	ldr	r3, [r3, #24]
 8012d0c:	43db      	mvns	r3, r3
 8012d0e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012d10:	e146      	b.n	8012fa0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	699b      	ldr	r3, [r3, #24]
 8012d16:	693a      	ldr	r2, [r7, #16]
 8012d18:	8992      	ldrh	r2, [r2, #12]
 8012d1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8012d1e:	fb01 f202 	mul.w	r2, r1, r2
 8012d22:	1a9b      	subs	r3, r3, r2
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	f040 80f1 	bne.w	8012f0c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	699b      	ldr	r3, [r3, #24]
 8012d2e:	693a      	ldr	r2, [r7, #16]
 8012d30:	8992      	ldrh	r2, [r2, #12]
 8012d32:	fbb3 f3f2 	udiv	r3, r3, r2
 8012d36:	693a      	ldr	r2, [r7, #16]
 8012d38:	8952      	ldrh	r2, [r2, #10]
 8012d3a:	3a01      	subs	r2, #1
 8012d3c:	4013      	ands	r3, r2
 8012d3e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012d40:	69bb      	ldr	r3, [r7, #24]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d143      	bne.n	8012dce <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	699b      	ldr	r3, [r3, #24]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d10c      	bne.n	8012d68 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	689b      	ldr	r3, [r3, #8]
 8012d52:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8012d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d11a      	bne.n	8012d90 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	2100      	movs	r1, #0
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f7fe fdf4 	bl	801194c <create_chain>
 8012d64:	62b8      	str	r0, [r7, #40]	; 0x28
 8012d66:	e013      	b.n	8012d90 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d007      	beq.n	8012d80 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	699b      	ldr	r3, [r3, #24]
 8012d74:	4619      	mov	r1, r3
 8012d76:	68f8      	ldr	r0, [r7, #12]
 8012d78:	f7fe fe80 	bl	8011a7c <clmt_clust>
 8012d7c:	62b8      	str	r0, [r7, #40]	; 0x28
 8012d7e:	e007      	b.n	8012d90 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012d80:	68fa      	ldr	r2, [r7, #12]
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	69db      	ldr	r3, [r3, #28]
 8012d86:	4619      	mov	r1, r3
 8012d88:	4610      	mov	r0, r2
 8012d8a:	f7fe fddf 	bl	801194c <create_chain>
 8012d8e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	f000 8109 	beq.w	8012faa <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d9a:	2b01      	cmp	r3, #1
 8012d9c:	d104      	bne.n	8012da8 <f_write+0x10c>
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	2202      	movs	r2, #2
 8012da2:	755a      	strb	r2, [r3, #21]
 8012da4:	2302      	movs	r3, #2
 8012da6:	e109      	b.n	8012fbc <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dae:	d104      	bne.n	8012dba <f_write+0x11e>
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	2201      	movs	r2, #1
 8012db4:	755a      	strb	r2, [r3, #21]
 8012db6:	2301      	movs	r3, #1
 8012db8:	e100      	b.n	8012fbc <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012dbe:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	689b      	ldr	r3, [r3, #8]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d102      	bne.n	8012dce <f_write+0x132>
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012dcc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	7d1b      	ldrb	r3, [r3, #20]
 8012dd2:	b25b      	sxtb	r3, r3
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	da18      	bge.n	8012e0a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012dd8:	693b      	ldr	r3, [r7, #16]
 8012dda:	7858      	ldrb	r0, [r3, #1]
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	6a1a      	ldr	r2, [r3, #32]
 8012de6:	2301      	movs	r3, #1
 8012de8:	f7fd ffb0 	bl	8010d4c <disk_write>
 8012dec:	4603      	mov	r3, r0
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d004      	beq.n	8012dfc <f_write+0x160>
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	2201      	movs	r2, #1
 8012df6:	755a      	strb	r2, [r3, #21]
 8012df8:	2301      	movs	r3, #1
 8012dfa:	e0df      	b.n	8012fbc <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	7d1b      	ldrb	r3, [r3, #20]
 8012e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e04:	b2da      	uxtb	r2, r3
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012e0a:	693a      	ldr	r2, [r7, #16]
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	69db      	ldr	r3, [r3, #28]
 8012e10:	4619      	mov	r1, r3
 8012e12:	4610      	mov	r0, r2
 8012e14:	f7fe fb26 	bl	8011464 <clust2sect>
 8012e18:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012e1a:	697b      	ldr	r3, [r7, #20]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d104      	bne.n	8012e2a <f_write+0x18e>
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	2202      	movs	r2, #2
 8012e24:	755a      	strb	r2, [r3, #21]
 8012e26:	2302      	movs	r3, #2
 8012e28:	e0c8      	b.n	8012fbc <f_write+0x320>
			sect += csect;
 8012e2a:	697a      	ldr	r2, [r7, #20]
 8012e2c:	69bb      	ldr	r3, [r7, #24]
 8012e2e:	4413      	add	r3, r2
 8012e30:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012e32:	693b      	ldr	r3, [r7, #16]
 8012e34:	899b      	ldrh	r3, [r3, #12]
 8012e36:	461a      	mov	r2, r3
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8012e3e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012e40:	6a3b      	ldr	r3, [r7, #32]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d043      	beq.n	8012ece <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012e46:	69ba      	ldr	r2, [r7, #24]
 8012e48:	6a3b      	ldr	r3, [r7, #32]
 8012e4a:	4413      	add	r3, r2
 8012e4c:	693a      	ldr	r2, [r7, #16]
 8012e4e:	8952      	ldrh	r2, [r2, #10]
 8012e50:	4293      	cmp	r3, r2
 8012e52:	d905      	bls.n	8012e60 <f_write+0x1c4>
					cc = fs->csize - csect;
 8012e54:	693b      	ldr	r3, [r7, #16]
 8012e56:	895b      	ldrh	r3, [r3, #10]
 8012e58:	461a      	mov	r2, r3
 8012e5a:	69bb      	ldr	r3, [r7, #24]
 8012e5c:	1ad3      	subs	r3, r2, r3
 8012e5e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012e60:	693b      	ldr	r3, [r7, #16]
 8012e62:	7858      	ldrb	r0, [r3, #1]
 8012e64:	6a3b      	ldr	r3, [r7, #32]
 8012e66:	697a      	ldr	r2, [r7, #20]
 8012e68:	69f9      	ldr	r1, [r7, #28]
 8012e6a:	f7fd ff6f 	bl	8010d4c <disk_write>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d004      	beq.n	8012e7e <f_write+0x1e2>
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	2201      	movs	r2, #1
 8012e78:	755a      	strb	r2, [r3, #21]
 8012e7a:	2301      	movs	r3, #1
 8012e7c:	e09e      	b.n	8012fbc <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	6a1a      	ldr	r2, [r3, #32]
 8012e82:	697b      	ldr	r3, [r7, #20]
 8012e84:	1ad3      	subs	r3, r2, r3
 8012e86:	6a3a      	ldr	r2, [r7, #32]
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	d918      	bls.n	8012ebe <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	6a1a      	ldr	r2, [r3, #32]
 8012e96:	697b      	ldr	r3, [r7, #20]
 8012e98:	1ad3      	subs	r3, r2, r3
 8012e9a:	693a      	ldr	r2, [r7, #16]
 8012e9c:	8992      	ldrh	r2, [r2, #12]
 8012e9e:	fb02 f303 	mul.w	r3, r2, r3
 8012ea2:	69fa      	ldr	r2, [r7, #28]
 8012ea4:	18d1      	adds	r1, r2, r3
 8012ea6:	693b      	ldr	r3, [r7, #16]
 8012ea8:	899b      	ldrh	r3, [r3, #12]
 8012eaa:	461a      	mov	r2, r3
 8012eac:	f7fe f80e 	bl	8010ecc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	7d1b      	ldrb	r3, [r3, #20]
 8012eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012eb8:	b2da      	uxtb	r2, r3
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012ebe:	693b      	ldr	r3, [r7, #16]
 8012ec0:	899b      	ldrh	r3, [r3, #12]
 8012ec2:	461a      	mov	r2, r3
 8012ec4:	6a3b      	ldr	r3, [r7, #32]
 8012ec6:	fb02 f303 	mul.w	r3, r2, r3
 8012eca:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8012ecc:	e04b      	b.n	8012f66 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	6a1b      	ldr	r3, [r3, #32]
 8012ed2:	697a      	ldr	r2, [r7, #20]
 8012ed4:	429a      	cmp	r2, r3
 8012ed6:	d016      	beq.n	8012f06 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	699a      	ldr	r2, [r3, #24]
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012ee0:	429a      	cmp	r2, r3
 8012ee2:	d210      	bcs.n	8012f06 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012ee4:	693b      	ldr	r3, [r7, #16]
 8012ee6:	7858      	ldrb	r0, [r3, #1]
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012eee:	2301      	movs	r3, #1
 8012ef0:	697a      	ldr	r2, [r7, #20]
 8012ef2:	f7fd ff0b 	bl	8010d0c <disk_read>
 8012ef6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d004      	beq.n	8012f06 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	2201      	movs	r2, #1
 8012f00:	755a      	strb	r2, [r3, #21]
 8012f02:	2301      	movs	r3, #1
 8012f04:	e05a      	b.n	8012fbc <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	697a      	ldr	r2, [r7, #20]
 8012f0a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012f0c:	693b      	ldr	r3, [r7, #16]
 8012f0e:	899b      	ldrh	r3, [r3, #12]
 8012f10:	4618      	mov	r0, r3
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	699b      	ldr	r3, [r3, #24]
 8012f16:	693a      	ldr	r2, [r7, #16]
 8012f18:	8992      	ldrh	r2, [r2, #12]
 8012f1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8012f1e:	fb01 f202 	mul.w	r2, r1, r2
 8012f22:	1a9b      	subs	r3, r3, r2
 8012f24:	1ac3      	subs	r3, r0, r3
 8012f26:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8012f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	429a      	cmp	r2, r3
 8012f2e:	d901      	bls.n	8012f34 <f_write+0x298>
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	699b      	ldr	r3, [r3, #24]
 8012f3e:	693a      	ldr	r2, [r7, #16]
 8012f40:	8992      	ldrh	r2, [r2, #12]
 8012f42:	fbb3 f0f2 	udiv	r0, r3, r2
 8012f46:	fb00 f202 	mul.w	r2, r0, r2
 8012f4a:	1a9b      	subs	r3, r3, r2
 8012f4c:	440b      	add	r3, r1
 8012f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f50:	69f9      	ldr	r1, [r7, #28]
 8012f52:	4618      	mov	r0, r3
 8012f54:	f7fd ffba 	bl	8010ecc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	7d1b      	ldrb	r3, [r3, #20]
 8012f5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012f60:	b2da      	uxtb	r2, r3
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8012f66:	69fa      	ldr	r2, [r7, #28]
 8012f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f6a:	4413      	add	r3, r2
 8012f6c:	61fb      	str	r3, [r7, #28]
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	699a      	ldr	r2, [r3, #24]
 8012f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f74:	441a      	add	r2, r3
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	619a      	str	r2, [r3, #24]
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	68da      	ldr	r2, [r3, #12]
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	699b      	ldr	r3, [r3, #24]
 8012f82:	429a      	cmp	r2, r3
 8012f84:	bf38      	it	cc
 8012f86:	461a      	movcc	r2, r3
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	60da      	str	r2, [r3, #12]
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	681a      	ldr	r2, [r3, #0]
 8012f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f92:	441a      	add	r2, r3
 8012f94:	683b      	ldr	r3, [r7, #0]
 8012f96:	601a      	str	r2, [r3, #0]
 8012f98:	687a      	ldr	r2, [r7, #4]
 8012f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f9c:	1ad3      	subs	r3, r2, r3
 8012f9e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	f47f aeb5 	bne.w	8012d12 <f_write+0x76>
 8012fa8:	e000      	b.n	8012fac <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012faa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	7d1b      	ldrb	r3, [r3, #20]
 8012fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012fb4:	b2da      	uxtb	r2, r3
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012fba:	2300      	movs	r3, #0
}
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	3730      	adds	r7, #48	; 0x30
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}

08012fc4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b086      	sub	sp, #24
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	f107 0208 	add.w	r2, r7, #8
 8012fd2:	4611      	mov	r1, r2
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	f7ff fc19 	bl	801280c <validate>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012fde:	7dfb      	ldrb	r3, [r7, #23]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d168      	bne.n	80130b6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	7d1b      	ldrb	r3, [r3, #20]
 8012fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d062      	beq.n	80130b6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	7d1b      	ldrb	r3, [r3, #20]
 8012ff4:	b25b      	sxtb	r3, r3
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	da15      	bge.n	8013026 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012ffa:	68bb      	ldr	r3, [r7, #8]
 8012ffc:	7858      	ldrb	r0, [r3, #1]
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	6a1a      	ldr	r2, [r3, #32]
 8013008:	2301      	movs	r3, #1
 801300a:	f7fd fe9f 	bl	8010d4c <disk_write>
 801300e:	4603      	mov	r3, r0
 8013010:	2b00      	cmp	r3, #0
 8013012:	d001      	beq.n	8013018 <f_sync+0x54>
 8013014:	2301      	movs	r3, #1
 8013016:	e04f      	b.n	80130b8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	7d1b      	ldrb	r3, [r3, #20]
 801301c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013020:	b2da      	uxtb	r2, r3
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013026:	f7fd fdcf 	bl	8010bc8 <get_fattime>
 801302a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801302c:	68ba      	ldr	r2, [r7, #8]
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013032:	4619      	mov	r1, r3
 8013034:	4610      	mov	r0, r2
 8013036:	f7fe f977 	bl	8011328 <move_window>
 801303a:	4603      	mov	r3, r0
 801303c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801303e:	7dfb      	ldrb	r3, [r7, #23]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d138      	bne.n	80130b6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013048:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	330b      	adds	r3, #11
 801304e:	781a      	ldrb	r2, [r3, #0]
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	330b      	adds	r3, #11
 8013054:	f042 0220 	orr.w	r2, r2, #32
 8013058:	b2d2      	uxtb	r2, r2
 801305a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	6818      	ldr	r0, [r3, #0]
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	689b      	ldr	r3, [r3, #8]
 8013064:	461a      	mov	r2, r3
 8013066:	68f9      	ldr	r1, [r7, #12]
 8013068:	f7fe ff05 	bl	8011e76 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	f103 021c 	add.w	r2, r3, #28
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	68db      	ldr	r3, [r3, #12]
 8013076:	4619      	mov	r1, r3
 8013078:	4610      	mov	r0, r2
 801307a:	f7fd fefb 	bl	8010e74 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	3316      	adds	r3, #22
 8013082:	6939      	ldr	r1, [r7, #16]
 8013084:	4618      	mov	r0, r3
 8013086:	f7fd fef5 	bl	8010e74 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	3312      	adds	r3, #18
 801308e:	2100      	movs	r1, #0
 8013090:	4618      	mov	r0, r3
 8013092:	f7fd fed4 	bl	8010e3e <st_word>
					fs->wflag = 1;
 8013096:	68bb      	ldr	r3, [r7, #8]
 8013098:	2201      	movs	r2, #1
 801309a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801309c:	68bb      	ldr	r3, [r7, #8]
 801309e:	4618      	mov	r0, r3
 80130a0:	f7fe f970 	bl	8011384 <sync_fs>
 80130a4:	4603      	mov	r3, r0
 80130a6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	7d1b      	ldrb	r3, [r3, #20]
 80130ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80130b0:	b2da      	uxtb	r2, r3
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80130b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80130b8:	4618      	mov	r0, r3
 80130ba:	3718      	adds	r7, #24
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}

080130c0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b084      	sub	sp, #16
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80130c8:	6878      	ldr	r0, [r7, #4]
 80130ca:	f7ff ff7b 	bl	8012fc4 <f_sync>
 80130ce:	4603      	mov	r3, r0
 80130d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80130d2:	7bfb      	ldrb	r3, [r7, #15]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d118      	bne.n	801310a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f107 0208 	add.w	r2, r7, #8
 80130de:	4611      	mov	r1, r2
 80130e0:	4618      	mov	r0, r3
 80130e2:	f7ff fb93 	bl	801280c <validate>
 80130e6:	4603      	mov	r3, r0
 80130e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80130ea:	7bfb      	ldrb	r3, [r7, #15]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d10c      	bne.n	801310a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	691b      	ldr	r3, [r3, #16]
 80130f4:	4618      	mov	r0, r3
 80130f6:	f7fe f873 	bl	80111e0 <dec_lock>
 80130fa:	4603      	mov	r3, r0
 80130fc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80130fe:	7bfb      	ldrb	r3, [r7, #15]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d102      	bne.n	801310a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	2200      	movs	r2, #0
 8013108:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801310a:	7bfb      	ldrb	r3, [r7, #15]
}
 801310c:	4618      	mov	r0, r3
 801310e:	3710      	adds	r7, #16
 8013110:	46bd      	mov	sp, r7
 8013112:	bd80      	pop	{r7, pc}

08013114 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013114:	b580      	push	{r7, lr}
 8013116:	b090      	sub	sp, #64	; 0x40
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
 801311c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	f107 0208 	add.w	r2, r7, #8
 8013124:	4611      	mov	r1, r2
 8013126:	4618      	mov	r0, r3
 8013128:	f7ff fb70 	bl	801280c <validate>
 801312c:	4603      	mov	r3, r0
 801312e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013132:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013136:	2b00      	cmp	r3, #0
 8013138:	d103      	bne.n	8013142 <f_lseek+0x2e>
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	7d5b      	ldrb	r3, [r3, #21]
 801313e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013142:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013146:	2b00      	cmp	r3, #0
 8013148:	d002      	beq.n	8013150 <f_lseek+0x3c>
 801314a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801314e:	e201      	b.n	8013554 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013154:	2b00      	cmp	r3, #0
 8013156:	f000 80d9 	beq.w	801330c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801315a:	683b      	ldr	r3, [r7, #0]
 801315c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013160:	d15a      	bne.n	8013218 <f_lseek+0x104>
			tbl = fp->cltbl;
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013166:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801316a:	1d1a      	adds	r2, r3, #4
 801316c:	627a      	str	r2, [r7, #36]	; 0x24
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	617b      	str	r3, [r7, #20]
 8013172:	2302      	movs	r3, #2
 8013174:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	689b      	ldr	r3, [r3, #8]
 801317a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801317e:	2b00      	cmp	r3, #0
 8013180:	d03a      	beq.n	80131f8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013184:	613b      	str	r3, [r7, #16]
 8013186:	2300      	movs	r3, #0
 8013188:	62fb      	str	r3, [r7, #44]	; 0x2c
 801318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801318c:	3302      	adds	r3, #2
 801318e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013192:	60fb      	str	r3, [r7, #12]
 8013194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013196:	3301      	adds	r3, #1
 8013198:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801319e:	4618      	mov	r0, r3
 80131a0:	f7fe f97f 	bl	80114a2 <get_fat>
 80131a4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80131a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131a8:	2b01      	cmp	r3, #1
 80131aa:	d804      	bhi.n	80131b6 <f_lseek+0xa2>
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	2202      	movs	r2, #2
 80131b0:	755a      	strb	r2, [r3, #21]
 80131b2:	2302      	movs	r3, #2
 80131b4:	e1ce      	b.n	8013554 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80131b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131bc:	d104      	bne.n	80131c8 <f_lseek+0xb4>
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	2201      	movs	r2, #1
 80131c2:	755a      	strb	r2, [r3, #21]
 80131c4:	2301      	movs	r3, #1
 80131c6:	e1c5      	b.n	8013554 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	3301      	adds	r3, #1
 80131cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131ce:	429a      	cmp	r2, r3
 80131d0:	d0de      	beq.n	8013190 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80131d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	429a      	cmp	r2, r3
 80131d8:	d809      	bhi.n	80131ee <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80131da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131dc:	1d1a      	adds	r2, r3, #4
 80131de:	627a      	str	r2, [r7, #36]	; 0x24
 80131e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80131e2:	601a      	str	r2, [r3, #0]
 80131e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131e6:	1d1a      	adds	r2, r3, #4
 80131e8:	627a      	str	r2, [r7, #36]	; 0x24
 80131ea:	693a      	ldr	r2, [r7, #16]
 80131ec:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80131ee:	68bb      	ldr	r3, [r7, #8]
 80131f0:	699b      	ldr	r3, [r3, #24]
 80131f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131f4:	429a      	cmp	r2, r3
 80131f6:	d3c4      	bcc.n	8013182 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131fe:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013202:	697b      	ldr	r3, [r7, #20]
 8013204:	429a      	cmp	r2, r3
 8013206:	d803      	bhi.n	8013210 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801320a:	2200      	movs	r2, #0
 801320c:	601a      	str	r2, [r3, #0]
 801320e:	e19f      	b.n	8013550 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013210:	2311      	movs	r3, #17
 8013212:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013216:	e19b      	b.n	8013550 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	68db      	ldr	r3, [r3, #12]
 801321c:	683a      	ldr	r2, [r7, #0]
 801321e:	429a      	cmp	r2, r3
 8013220:	d902      	bls.n	8013228 <f_lseek+0x114>
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	68db      	ldr	r3, [r3, #12]
 8013226:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	683a      	ldr	r2, [r7, #0]
 801322c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	2b00      	cmp	r3, #0
 8013232:	f000 818d 	beq.w	8013550 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013236:	683b      	ldr	r3, [r7, #0]
 8013238:	3b01      	subs	r3, #1
 801323a:	4619      	mov	r1, r3
 801323c:	6878      	ldr	r0, [r7, #4]
 801323e:	f7fe fc1d 	bl	8011a7c <clmt_clust>
 8013242:	4602      	mov	r2, r0
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013248:	68ba      	ldr	r2, [r7, #8]
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	69db      	ldr	r3, [r3, #28]
 801324e:	4619      	mov	r1, r3
 8013250:	4610      	mov	r0, r2
 8013252:	f7fe f907 	bl	8011464 <clust2sect>
 8013256:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013258:	69bb      	ldr	r3, [r7, #24]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d104      	bne.n	8013268 <f_lseek+0x154>
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	2202      	movs	r2, #2
 8013262:	755a      	strb	r2, [r3, #21]
 8013264:	2302      	movs	r3, #2
 8013266:	e175      	b.n	8013554 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013268:	683b      	ldr	r3, [r7, #0]
 801326a:	3b01      	subs	r3, #1
 801326c:	68ba      	ldr	r2, [r7, #8]
 801326e:	8992      	ldrh	r2, [r2, #12]
 8013270:	fbb3 f3f2 	udiv	r3, r3, r2
 8013274:	68ba      	ldr	r2, [r7, #8]
 8013276:	8952      	ldrh	r2, [r2, #10]
 8013278:	3a01      	subs	r2, #1
 801327a:	4013      	ands	r3, r2
 801327c:	69ba      	ldr	r2, [r7, #24]
 801327e:	4413      	add	r3, r2
 8013280:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	699b      	ldr	r3, [r3, #24]
 8013286:	68ba      	ldr	r2, [r7, #8]
 8013288:	8992      	ldrh	r2, [r2, #12]
 801328a:	fbb3 f1f2 	udiv	r1, r3, r2
 801328e:	fb01 f202 	mul.w	r2, r1, r2
 8013292:	1a9b      	subs	r3, r3, r2
 8013294:	2b00      	cmp	r3, #0
 8013296:	f000 815b 	beq.w	8013550 <f_lseek+0x43c>
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	6a1b      	ldr	r3, [r3, #32]
 801329e:	69ba      	ldr	r2, [r7, #24]
 80132a0:	429a      	cmp	r2, r3
 80132a2:	f000 8155 	beq.w	8013550 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	7d1b      	ldrb	r3, [r3, #20]
 80132aa:	b25b      	sxtb	r3, r3
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	da18      	bge.n	80132e2 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	7858      	ldrb	r0, [r3, #1]
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	6a1a      	ldr	r2, [r3, #32]
 80132be:	2301      	movs	r3, #1
 80132c0:	f7fd fd44 	bl	8010d4c <disk_write>
 80132c4:	4603      	mov	r3, r0
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d004      	beq.n	80132d4 <f_lseek+0x1c0>
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	2201      	movs	r2, #1
 80132ce:	755a      	strb	r2, [r3, #21]
 80132d0:	2301      	movs	r3, #1
 80132d2:	e13f      	b.n	8013554 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	7d1b      	ldrb	r3, [r3, #20]
 80132d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80132dc:	b2da      	uxtb	r2, r3
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	7858      	ldrb	r0, [r3, #1]
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80132ec:	2301      	movs	r3, #1
 80132ee:	69ba      	ldr	r2, [r7, #24]
 80132f0:	f7fd fd0c 	bl	8010d0c <disk_read>
 80132f4:	4603      	mov	r3, r0
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d004      	beq.n	8013304 <f_lseek+0x1f0>
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	2201      	movs	r2, #1
 80132fe:	755a      	strb	r2, [r3, #21]
 8013300:	2301      	movs	r3, #1
 8013302:	e127      	b.n	8013554 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	69ba      	ldr	r2, [r7, #24]
 8013308:	621a      	str	r2, [r3, #32]
 801330a:	e121      	b.n	8013550 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	68db      	ldr	r3, [r3, #12]
 8013310:	683a      	ldr	r2, [r7, #0]
 8013312:	429a      	cmp	r2, r3
 8013314:	d908      	bls.n	8013328 <f_lseek+0x214>
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	7d1b      	ldrb	r3, [r3, #20]
 801331a:	f003 0302 	and.w	r3, r3, #2
 801331e:	2b00      	cmp	r3, #0
 8013320:	d102      	bne.n	8013328 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	68db      	ldr	r3, [r3, #12]
 8013326:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	699b      	ldr	r3, [r3, #24]
 801332c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801332e:	2300      	movs	r3, #0
 8013330:	637b      	str	r3, [r7, #52]	; 0x34
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013336:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	2b00      	cmp	r3, #0
 801333c:	f000 80b5 	beq.w	80134aa <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013340:	68bb      	ldr	r3, [r7, #8]
 8013342:	895b      	ldrh	r3, [r3, #10]
 8013344:	461a      	mov	r2, r3
 8013346:	68bb      	ldr	r3, [r7, #8]
 8013348:	899b      	ldrh	r3, [r3, #12]
 801334a:	fb02 f303 	mul.w	r3, r2, r3
 801334e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013350:	6a3b      	ldr	r3, [r7, #32]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d01b      	beq.n	801338e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013356:	683b      	ldr	r3, [r7, #0]
 8013358:	1e5a      	subs	r2, r3, #1
 801335a:	69fb      	ldr	r3, [r7, #28]
 801335c:	fbb2 f2f3 	udiv	r2, r2, r3
 8013360:	6a3b      	ldr	r3, [r7, #32]
 8013362:	1e59      	subs	r1, r3, #1
 8013364:	69fb      	ldr	r3, [r7, #28]
 8013366:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801336a:	429a      	cmp	r2, r3
 801336c:	d30f      	bcc.n	801338e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801336e:	6a3b      	ldr	r3, [r7, #32]
 8013370:	1e5a      	subs	r2, r3, #1
 8013372:	69fb      	ldr	r3, [r7, #28]
 8013374:	425b      	negs	r3, r3
 8013376:	401a      	ands	r2, r3
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	699b      	ldr	r3, [r3, #24]
 8013380:	683a      	ldr	r2, [r7, #0]
 8013382:	1ad3      	subs	r3, r2, r3
 8013384:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	69db      	ldr	r3, [r3, #28]
 801338a:	63bb      	str	r3, [r7, #56]	; 0x38
 801338c:	e022      	b.n	80133d4 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	689b      	ldr	r3, [r3, #8]
 8013392:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013396:	2b00      	cmp	r3, #0
 8013398:	d119      	bne.n	80133ce <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	2100      	movs	r1, #0
 801339e:	4618      	mov	r0, r3
 80133a0:	f7fe fad4 	bl	801194c <create_chain>
 80133a4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80133a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133a8:	2b01      	cmp	r3, #1
 80133aa:	d104      	bne.n	80133b6 <f_lseek+0x2a2>
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	2202      	movs	r2, #2
 80133b0:	755a      	strb	r2, [r3, #21]
 80133b2:	2302      	movs	r3, #2
 80133b4:	e0ce      	b.n	8013554 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80133b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133bc:	d104      	bne.n	80133c8 <f_lseek+0x2b4>
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	2201      	movs	r2, #1
 80133c2:	755a      	strb	r2, [r3, #21]
 80133c4:	2301      	movs	r3, #1
 80133c6:	e0c5      	b.n	8013554 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80133cc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80133d2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80133d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d067      	beq.n	80134aa <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80133da:	e03a      	b.n	8013452 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80133dc:	683a      	ldr	r2, [r7, #0]
 80133de:	69fb      	ldr	r3, [r7, #28]
 80133e0:	1ad3      	subs	r3, r2, r3
 80133e2:	603b      	str	r3, [r7, #0]
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	699a      	ldr	r2, [r3, #24]
 80133e8:	69fb      	ldr	r3, [r7, #28]
 80133ea:	441a      	add	r2, r3
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	7d1b      	ldrb	r3, [r3, #20]
 80133f4:	f003 0302 	and.w	r3, r3, #2
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d00b      	beq.n	8013414 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013400:	4618      	mov	r0, r3
 8013402:	f7fe faa3 	bl	801194c <create_chain>
 8013406:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801340a:	2b00      	cmp	r3, #0
 801340c:	d108      	bne.n	8013420 <f_lseek+0x30c>
							ofs = 0; break;
 801340e:	2300      	movs	r3, #0
 8013410:	603b      	str	r3, [r7, #0]
 8013412:	e022      	b.n	801345a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013418:	4618      	mov	r0, r3
 801341a:	f7fe f842 	bl	80114a2 <get_fat>
 801341e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013426:	d104      	bne.n	8013432 <f_lseek+0x31e>
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	2201      	movs	r2, #1
 801342c:	755a      	strb	r2, [r3, #21]
 801342e:	2301      	movs	r3, #1
 8013430:	e090      	b.n	8013554 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013434:	2b01      	cmp	r3, #1
 8013436:	d904      	bls.n	8013442 <f_lseek+0x32e>
 8013438:	68bb      	ldr	r3, [r7, #8]
 801343a:	699b      	ldr	r3, [r3, #24]
 801343c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801343e:	429a      	cmp	r2, r3
 8013440:	d304      	bcc.n	801344c <f_lseek+0x338>
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	2202      	movs	r2, #2
 8013446:	755a      	strb	r2, [r3, #21]
 8013448:	2302      	movs	r3, #2
 801344a:	e083      	b.n	8013554 <f_lseek+0x440>
					fp->clust = clst;
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013450:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013452:	683a      	ldr	r2, [r7, #0]
 8013454:	69fb      	ldr	r3, [r7, #28]
 8013456:	429a      	cmp	r2, r3
 8013458:	d8c0      	bhi.n	80133dc <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	699a      	ldr	r2, [r3, #24]
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	441a      	add	r2, r3
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013466:	68bb      	ldr	r3, [r7, #8]
 8013468:	899b      	ldrh	r3, [r3, #12]
 801346a:	461a      	mov	r2, r3
 801346c:	683b      	ldr	r3, [r7, #0]
 801346e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013472:	fb01 f202 	mul.w	r2, r1, r2
 8013476:	1a9b      	subs	r3, r3, r2
 8013478:	2b00      	cmp	r3, #0
 801347a:	d016      	beq.n	80134aa <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801347c:	68bb      	ldr	r3, [r7, #8]
 801347e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013480:	4618      	mov	r0, r3
 8013482:	f7fd ffef 	bl	8011464 <clust2sect>
 8013486:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801348a:	2b00      	cmp	r3, #0
 801348c:	d104      	bne.n	8013498 <f_lseek+0x384>
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	2202      	movs	r2, #2
 8013492:	755a      	strb	r2, [r3, #21]
 8013494:	2302      	movs	r3, #2
 8013496:	e05d      	b.n	8013554 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8013498:	68bb      	ldr	r3, [r7, #8]
 801349a:	899b      	ldrh	r3, [r3, #12]
 801349c:	461a      	mov	r2, r3
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80134a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134a6:	4413      	add	r3, r2
 80134a8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	699a      	ldr	r2, [r3, #24]
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	68db      	ldr	r3, [r3, #12]
 80134b2:	429a      	cmp	r2, r3
 80134b4:	d90a      	bls.n	80134cc <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	699a      	ldr	r2, [r3, #24]
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	7d1b      	ldrb	r3, [r3, #20]
 80134c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134c6:	b2da      	uxtb	r2, r3
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	699b      	ldr	r3, [r3, #24]
 80134d0:	68ba      	ldr	r2, [r7, #8]
 80134d2:	8992      	ldrh	r2, [r2, #12]
 80134d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80134d8:	fb01 f202 	mul.w	r2, r1, r2
 80134dc:	1a9b      	subs	r3, r3, r2
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d036      	beq.n	8013550 <f_lseek+0x43c>
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	6a1b      	ldr	r3, [r3, #32]
 80134e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134e8:	429a      	cmp	r2, r3
 80134ea:	d031      	beq.n	8013550 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	7d1b      	ldrb	r3, [r3, #20]
 80134f0:	b25b      	sxtb	r3, r3
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	da18      	bge.n	8013528 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80134f6:	68bb      	ldr	r3, [r7, #8]
 80134f8:	7858      	ldrb	r0, [r3, #1]
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	6a1a      	ldr	r2, [r3, #32]
 8013504:	2301      	movs	r3, #1
 8013506:	f7fd fc21 	bl	8010d4c <disk_write>
 801350a:	4603      	mov	r3, r0
 801350c:	2b00      	cmp	r3, #0
 801350e:	d004      	beq.n	801351a <f_lseek+0x406>
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	2201      	movs	r2, #1
 8013514:	755a      	strb	r2, [r3, #21]
 8013516:	2301      	movs	r3, #1
 8013518:	e01c      	b.n	8013554 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	7d1b      	ldrb	r3, [r3, #20]
 801351e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013522:	b2da      	uxtb	r2, r3
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013528:	68bb      	ldr	r3, [r7, #8]
 801352a:	7858      	ldrb	r0, [r3, #1]
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013532:	2301      	movs	r3, #1
 8013534:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013536:	f7fd fbe9 	bl	8010d0c <disk_read>
 801353a:	4603      	mov	r3, r0
 801353c:	2b00      	cmp	r3, #0
 801353e:	d004      	beq.n	801354a <f_lseek+0x436>
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	2201      	movs	r2, #1
 8013544:	755a      	strb	r2, [r3, #21]
 8013546:	2301      	movs	r3, #1
 8013548:	e004      	b.n	8013554 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801354e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013550:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013554:	4618      	mov	r0, r3
 8013556:	3740      	adds	r7, #64	; 0x40
 8013558:	46bd      	mov	sp, r7
 801355a:	bd80      	pop	{r7, pc}

0801355c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801355c:	b580      	push	{r7, lr}
 801355e:	b084      	sub	sp, #16
 8013560:	af00      	add	r7, sp, #0
 8013562:	6078      	str	r0, [r7, #4]
 8013564:	460b      	mov	r3, r1
 8013566:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8013568:	78fb      	ldrb	r3, [r7, #3]
 801356a:	2b0a      	cmp	r3, #10
 801356c:	d103      	bne.n	8013576 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801356e:	210d      	movs	r1, #13
 8013570:	6878      	ldr	r0, [r7, #4]
 8013572:	f7ff fff3 	bl	801355c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	685b      	ldr	r3, [r3, #4]
 801357a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	2b00      	cmp	r3, #0
 8013580:	db25      	blt.n	80135ce <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	1c5a      	adds	r2, r3, #1
 8013586:	60fa      	str	r2, [r7, #12]
 8013588:	687a      	ldr	r2, [r7, #4]
 801358a:	4413      	add	r3, r2
 801358c:	78fa      	ldrb	r2, [r7, #3]
 801358e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	2b3c      	cmp	r3, #60	; 0x3c
 8013594:	dd12      	ble.n	80135bc <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	6818      	ldr	r0, [r3, #0]
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	f103 010c 	add.w	r1, r3, #12
 80135a0:	68fa      	ldr	r2, [r7, #12]
 80135a2:	f107 0308 	add.w	r3, r7, #8
 80135a6:	f7ff fb79 	bl	8012c9c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80135aa:	68ba      	ldr	r2, [r7, #8]
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	429a      	cmp	r2, r3
 80135b0:	d101      	bne.n	80135b6 <putc_bfd+0x5a>
 80135b2:	2300      	movs	r3, #0
 80135b4:	e001      	b.n	80135ba <putc_bfd+0x5e>
 80135b6:	f04f 33ff 	mov.w	r3, #4294967295
 80135ba:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	68fa      	ldr	r2, [r7, #12]
 80135c0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	689b      	ldr	r3, [r3, #8]
 80135c6:	1c5a      	adds	r2, r3, #1
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	609a      	str	r2, [r3, #8]
 80135cc:	e000      	b.n	80135d0 <putc_bfd+0x74>
	if (i < 0) return;
 80135ce:	bf00      	nop
}
 80135d0:	3710      	adds	r7, #16
 80135d2:	46bd      	mov	sp, r7
 80135d4:	bd80      	pop	{r7, pc}

080135d6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80135d6:	b580      	push	{r7, lr}
 80135d8:	b084      	sub	sp, #16
 80135da:	af00      	add	r7, sp, #0
 80135dc:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	685b      	ldr	r3, [r3, #4]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	db16      	blt.n	8013614 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	6818      	ldr	r0, [r3, #0]
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	f103 010c 	add.w	r1, r3, #12
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	685b      	ldr	r3, [r3, #4]
 80135f4:	461a      	mov	r2, r3
 80135f6:	f107 030c 	add.w	r3, r7, #12
 80135fa:	f7ff fb4f 	bl	8012c9c <f_write>
 80135fe:	4603      	mov	r3, r0
 8013600:	2b00      	cmp	r3, #0
 8013602:	d107      	bne.n	8013614 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	685b      	ldr	r3, [r3, #4]
 8013608:	68fa      	ldr	r2, [r7, #12]
 801360a:	4293      	cmp	r3, r2
 801360c:	d102      	bne.n	8013614 <putc_flush+0x3e>
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	689b      	ldr	r3, [r3, #8]
 8013612:	e001      	b.n	8013618 <putc_flush+0x42>
	return EOF;
 8013614:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013618:	4618      	mov	r0, r3
 801361a:	3710      	adds	r7, #16
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}

08013620 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8013620:	b480      	push	{r7}
 8013622:	b083      	sub	sp, #12
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
 8013628:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	683a      	ldr	r2, [r7, #0]
 801362e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2200      	movs	r2, #0
 8013634:	605a      	str	r2, [r3, #4]
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	685a      	ldr	r2, [r3, #4]
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	609a      	str	r2, [r3, #8]
}
 801363e:	bf00      	nop
 8013640:	370c      	adds	r7, #12
 8013642:	46bd      	mov	sp, r7
 8013644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013648:	4770      	bx	lr

0801364a <f_putc>:

int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fp		/* Pointer to the file object */
)
{
 801364a:	b580      	push	{r7, lr}
 801364c:	b096      	sub	sp, #88	; 0x58
 801364e:	af00      	add	r7, sp, #0
 8013650:	4603      	mov	r3, r0
 8013652:	6039      	str	r1, [r7, #0]
 8013654:	71fb      	strb	r3, [r7, #7]
	putbuff pb;


	putc_init(&pb, fp);
 8013656:	f107 030c 	add.w	r3, r7, #12
 801365a:	6839      	ldr	r1, [r7, #0]
 801365c:	4618      	mov	r0, r3
 801365e:	f7ff ffdf 	bl	8013620 <putc_init>
	putc_bfd(&pb, c);	/* Put the character */
 8013662:	79fa      	ldrb	r2, [r7, #7]
 8013664:	f107 030c 	add.w	r3, r7, #12
 8013668:	4611      	mov	r1, r2
 801366a:	4618      	mov	r0, r3
 801366c:	f7ff ff76 	bl	801355c <putc_bfd>
	return putc_flush(&pb);
 8013670:	f107 030c 	add.w	r3, r7, #12
 8013674:	4618      	mov	r0, r3
 8013676:	f7ff ffae 	bl	80135d6 <putc_flush>
 801367a:	4603      	mov	r3, r0
}
 801367c:	4618      	mov	r0, r3
 801367e:	3758      	adds	r7, #88	; 0x58
 8013680:	46bd      	mov	sp, r7
 8013682:	bd80      	pop	{r7, pc}

08013684 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b096      	sub	sp, #88	; 0x58
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
 801368c:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 801368e:	f107 030c 	add.w	r3, r7, #12
 8013692:	6839      	ldr	r1, [r7, #0]
 8013694:	4618      	mov	r0, r3
 8013696:	f7ff ffc3 	bl	8013620 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 801369a:	e009      	b.n	80136b0 <f_puts+0x2c>
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	1c5a      	adds	r2, r3, #1
 80136a0:	607a      	str	r2, [r7, #4]
 80136a2:	781a      	ldrb	r2, [r3, #0]
 80136a4:	f107 030c 	add.w	r3, r7, #12
 80136a8:	4611      	mov	r1, r2
 80136aa:	4618      	mov	r0, r3
 80136ac:	f7ff ff56 	bl	801355c <putc_bfd>
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	781b      	ldrb	r3, [r3, #0]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d1f1      	bne.n	801369c <f_puts+0x18>
	return putc_flush(&pb);
 80136b8:	f107 030c 	add.w	r3, r7, #12
 80136bc:	4618      	mov	r0, r3
 80136be:	f7ff ff8a 	bl	80135d6 <putc_flush>
 80136c2:	4603      	mov	r3, r0
}
 80136c4:	4618      	mov	r0, r3
 80136c6:	3758      	adds	r7, #88	; 0x58
 80136c8:	46bd      	mov	sp, r7
 80136ca:	bd80      	pop	{r7, pc}

080136cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80136cc:	b480      	push	{r7}
 80136ce:	b087      	sub	sp, #28
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	60f8      	str	r0, [r7, #12]
 80136d4:	60b9      	str	r1, [r7, #8]
 80136d6:	4613      	mov	r3, r2
 80136d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80136da:	2301      	movs	r3, #1
 80136dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80136de:	2300      	movs	r3, #0
 80136e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80136e2:	4b1f      	ldr	r3, [pc, #124]	; (8013760 <FATFS_LinkDriverEx+0x94>)
 80136e4:	7a5b      	ldrb	r3, [r3, #9]
 80136e6:	b2db      	uxtb	r3, r3
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d131      	bne.n	8013750 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80136ec:	4b1c      	ldr	r3, [pc, #112]	; (8013760 <FATFS_LinkDriverEx+0x94>)
 80136ee:	7a5b      	ldrb	r3, [r3, #9]
 80136f0:	b2db      	uxtb	r3, r3
 80136f2:	461a      	mov	r2, r3
 80136f4:	4b1a      	ldr	r3, [pc, #104]	; (8013760 <FATFS_LinkDriverEx+0x94>)
 80136f6:	2100      	movs	r1, #0
 80136f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80136fa:	4b19      	ldr	r3, [pc, #100]	; (8013760 <FATFS_LinkDriverEx+0x94>)
 80136fc:	7a5b      	ldrb	r3, [r3, #9]
 80136fe:	b2db      	uxtb	r3, r3
 8013700:	4a17      	ldr	r2, [pc, #92]	; (8013760 <FATFS_LinkDriverEx+0x94>)
 8013702:	009b      	lsls	r3, r3, #2
 8013704:	4413      	add	r3, r2
 8013706:	68fa      	ldr	r2, [r7, #12]
 8013708:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801370a:	4b15      	ldr	r3, [pc, #84]	; (8013760 <FATFS_LinkDriverEx+0x94>)
 801370c:	7a5b      	ldrb	r3, [r3, #9]
 801370e:	b2db      	uxtb	r3, r3
 8013710:	461a      	mov	r2, r3
 8013712:	4b13      	ldr	r3, [pc, #76]	; (8013760 <FATFS_LinkDriverEx+0x94>)
 8013714:	4413      	add	r3, r2
 8013716:	79fa      	ldrb	r2, [r7, #7]
 8013718:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801371a:	4b11      	ldr	r3, [pc, #68]	; (8013760 <FATFS_LinkDriverEx+0x94>)
 801371c:	7a5b      	ldrb	r3, [r3, #9]
 801371e:	b2db      	uxtb	r3, r3
 8013720:	1c5a      	adds	r2, r3, #1
 8013722:	b2d1      	uxtb	r1, r2
 8013724:	4a0e      	ldr	r2, [pc, #56]	; (8013760 <FATFS_LinkDriverEx+0x94>)
 8013726:	7251      	strb	r1, [r2, #9]
 8013728:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801372a:	7dbb      	ldrb	r3, [r7, #22]
 801372c:	3330      	adds	r3, #48	; 0x30
 801372e:	b2da      	uxtb	r2, r3
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013734:	68bb      	ldr	r3, [r7, #8]
 8013736:	3301      	adds	r3, #1
 8013738:	223a      	movs	r2, #58	; 0x3a
 801373a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801373c:	68bb      	ldr	r3, [r7, #8]
 801373e:	3302      	adds	r3, #2
 8013740:	222f      	movs	r2, #47	; 0x2f
 8013742:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013744:	68bb      	ldr	r3, [r7, #8]
 8013746:	3303      	adds	r3, #3
 8013748:	2200      	movs	r2, #0
 801374a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801374c:	2300      	movs	r3, #0
 801374e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013750:	7dfb      	ldrb	r3, [r7, #23]
}
 8013752:	4618      	mov	r0, r3
 8013754:	371c      	adds	r7, #28
 8013756:	46bd      	mov	sp, r7
 8013758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375c:	4770      	bx	lr
 801375e:	bf00      	nop
 8013760:	20004b2c 	.word	0x20004b2c

08013764 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013764:	b580      	push	{r7, lr}
 8013766:	b082      	sub	sp, #8
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
 801376c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801376e:	2200      	movs	r2, #0
 8013770:	6839      	ldr	r1, [r7, #0]
 8013772:	6878      	ldr	r0, [r7, #4]
 8013774:	f7ff ffaa 	bl	80136cc <FATFS_LinkDriverEx>
 8013778:	4603      	mov	r3, r0
}
 801377a:	4618      	mov	r0, r3
 801377c:	3708      	adds	r7, #8
 801377e:	46bd      	mov	sp, r7
 8013780:	bd80      	pop	{r7, pc}
	...

08013784 <__NVIC_SetPriority>:
{
 8013784:	b480      	push	{r7}
 8013786:	b083      	sub	sp, #12
 8013788:	af00      	add	r7, sp, #0
 801378a:	4603      	mov	r3, r0
 801378c:	6039      	str	r1, [r7, #0]
 801378e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013794:	2b00      	cmp	r3, #0
 8013796:	db0a      	blt.n	80137ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013798:	683b      	ldr	r3, [r7, #0]
 801379a:	b2da      	uxtb	r2, r3
 801379c:	490c      	ldr	r1, [pc, #48]	; (80137d0 <__NVIC_SetPriority+0x4c>)
 801379e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80137a2:	0112      	lsls	r2, r2, #4
 80137a4:	b2d2      	uxtb	r2, r2
 80137a6:	440b      	add	r3, r1
 80137a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80137ac:	e00a      	b.n	80137c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80137ae:	683b      	ldr	r3, [r7, #0]
 80137b0:	b2da      	uxtb	r2, r3
 80137b2:	4908      	ldr	r1, [pc, #32]	; (80137d4 <__NVIC_SetPriority+0x50>)
 80137b4:	79fb      	ldrb	r3, [r7, #7]
 80137b6:	f003 030f 	and.w	r3, r3, #15
 80137ba:	3b04      	subs	r3, #4
 80137bc:	0112      	lsls	r2, r2, #4
 80137be:	b2d2      	uxtb	r2, r2
 80137c0:	440b      	add	r3, r1
 80137c2:	761a      	strb	r2, [r3, #24]
}
 80137c4:	bf00      	nop
 80137c6:	370c      	adds	r7, #12
 80137c8:	46bd      	mov	sp, r7
 80137ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ce:	4770      	bx	lr
 80137d0:	e000e100 	.word	0xe000e100
 80137d4:	e000ed00 	.word	0xe000ed00

080137d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80137d8:	b580      	push	{r7, lr}
 80137da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80137dc:	2100      	movs	r1, #0
 80137de:	f06f 0004 	mvn.w	r0, #4
 80137e2:	f7ff ffcf 	bl	8013784 <__NVIC_SetPriority>
#endif
}
 80137e6:	bf00      	nop
 80137e8:	bd80      	pop	{r7, pc}
	...

080137ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80137ec:	b480      	push	{r7}
 80137ee:	b083      	sub	sp, #12
 80137f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80137f2:	f3ef 8305 	mrs	r3, IPSR
 80137f6:	603b      	str	r3, [r7, #0]
  return(result);
 80137f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d003      	beq.n	8013806 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80137fe:	f06f 0305 	mvn.w	r3, #5
 8013802:	607b      	str	r3, [r7, #4]
 8013804:	e00c      	b.n	8013820 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8013806:	4b0a      	ldr	r3, [pc, #40]	; (8013830 <osKernelInitialize+0x44>)
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d105      	bne.n	801381a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801380e:	4b08      	ldr	r3, [pc, #32]	; (8013830 <osKernelInitialize+0x44>)
 8013810:	2201      	movs	r2, #1
 8013812:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8013814:	2300      	movs	r3, #0
 8013816:	607b      	str	r3, [r7, #4]
 8013818:	e002      	b.n	8013820 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801381a:	f04f 33ff 	mov.w	r3, #4294967295
 801381e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013820:	687b      	ldr	r3, [r7, #4]
}
 8013822:	4618      	mov	r0, r3
 8013824:	370c      	adds	r7, #12
 8013826:	46bd      	mov	sp, r7
 8013828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382c:	4770      	bx	lr
 801382e:	bf00      	nop
 8013830:	20004b38 	.word	0x20004b38

08013834 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8013834:	b580      	push	{r7, lr}
 8013836:	b082      	sub	sp, #8
 8013838:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801383a:	f3ef 8305 	mrs	r3, IPSR
 801383e:	603b      	str	r3, [r7, #0]
  return(result);
 8013840:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013842:	2b00      	cmp	r3, #0
 8013844:	d003      	beq.n	801384e <osKernelStart+0x1a>
    stat = osErrorISR;
 8013846:	f06f 0305 	mvn.w	r3, #5
 801384a:	607b      	str	r3, [r7, #4]
 801384c:	e010      	b.n	8013870 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801384e:	4b0b      	ldr	r3, [pc, #44]	; (801387c <osKernelStart+0x48>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	2b01      	cmp	r3, #1
 8013854:	d109      	bne.n	801386a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8013856:	f7ff ffbf 	bl	80137d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801385a:	4b08      	ldr	r3, [pc, #32]	; (801387c <osKernelStart+0x48>)
 801385c:	2202      	movs	r2, #2
 801385e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013860:	f002 fc20 	bl	80160a4 <vTaskStartScheduler>
      stat = osOK;
 8013864:	2300      	movs	r3, #0
 8013866:	607b      	str	r3, [r7, #4]
 8013868:	e002      	b.n	8013870 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801386a:	f04f 33ff 	mov.w	r3, #4294967295
 801386e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013870:	687b      	ldr	r3, [r7, #4]
}
 8013872:	4618      	mov	r0, r3
 8013874:	3708      	adds	r7, #8
 8013876:	46bd      	mov	sp, r7
 8013878:	bd80      	pop	{r7, pc}
 801387a:	bf00      	nop
 801387c:	20004b38 	.word	0x20004b38

08013880 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8013880:	b580      	push	{r7, lr}
 8013882:	b082      	sub	sp, #8
 8013884:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013886:	f3ef 8305 	mrs	r3, IPSR
 801388a:	603b      	str	r3, [r7, #0]
  return(result);
 801388c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 801388e:	2b00      	cmp	r3, #0
 8013890:	d003      	beq.n	801389a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8013892:	f002 fd29 	bl	80162e8 <xTaskGetTickCountFromISR>
 8013896:	6078      	str	r0, [r7, #4]
 8013898:	e002      	b.n	80138a0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 801389a:	f002 fd15 	bl	80162c8 <xTaskGetTickCount>
 801389e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80138a0:	687b      	ldr	r3, [r7, #4]
}
 80138a2:	4618      	mov	r0, r3
 80138a4:	3708      	adds	r7, #8
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bd80      	pop	{r7, pc}

080138aa <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80138aa:	b580      	push	{r7, lr}
 80138ac:	b08e      	sub	sp, #56	; 0x38
 80138ae:	af04      	add	r7, sp, #16
 80138b0:	60f8      	str	r0, [r7, #12]
 80138b2:	60b9      	str	r1, [r7, #8]
 80138b4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80138b6:	2300      	movs	r3, #0
 80138b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80138ba:	f3ef 8305 	mrs	r3, IPSR
 80138be:	617b      	str	r3, [r7, #20]
  return(result);
 80138c0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d17e      	bne.n	80139c4 <osThreadNew+0x11a>
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d07b      	beq.n	80139c4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80138cc:	2380      	movs	r3, #128	; 0x80
 80138ce:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80138d0:	2318      	movs	r3, #24
 80138d2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80138d4:	2300      	movs	r3, #0
 80138d6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80138d8:	f04f 33ff 	mov.w	r3, #4294967295
 80138dc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d045      	beq.n	8013970 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d002      	beq.n	80138f2 <osThreadNew+0x48>
        name = attr->name;
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	699b      	ldr	r3, [r3, #24]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d002      	beq.n	8013900 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	699b      	ldr	r3, [r3, #24]
 80138fe:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013900:	69fb      	ldr	r3, [r7, #28]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d008      	beq.n	8013918 <osThreadNew+0x6e>
 8013906:	69fb      	ldr	r3, [r7, #28]
 8013908:	2b38      	cmp	r3, #56	; 0x38
 801390a:	d805      	bhi.n	8013918 <osThreadNew+0x6e>
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	685b      	ldr	r3, [r3, #4]
 8013910:	f003 0301 	and.w	r3, r3, #1
 8013914:	2b00      	cmp	r3, #0
 8013916:	d001      	beq.n	801391c <osThreadNew+0x72>
        return (NULL);
 8013918:	2300      	movs	r3, #0
 801391a:	e054      	b.n	80139c6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	695b      	ldr	r3, [r3, #20]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d003      	beq.n	801392c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	695b      	ldr	r3, [r3, #20]
 8013928:	089b      	lsrs	r3, r3, #2
 801392a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	689b      	ldr	r3, [r3, #8]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d00e      	beq.n	8013952 <osThreadNew+0xa8>
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	68db      	ldr	r3, [r3, #12]
 8013938:	2b5b      	cmp	r3, #91	; 0x5b
 801393a:	d90a      	bls.n	8013952 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013940:	2b00      	cmp	r3, #0
 8013942:	d006      	beq.n	8013952 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	695b      	ldr	r3, [r3, #20]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d002      	beq.n	8013952 <osThreadNew+0xa8>
        mem = 1;
 801394c:	2301      	movs	r3, #1
 801394e:	61bb      	str	r3, [r7, #24]
 8013950:	e010      	b.n	8013974 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	689b      	ldr	r3, [r3, #8]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d10c      	bne.n	8013974 <osThreadNew+0xca>
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	68db      	ldr	r3, [r3, #12]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d108      	bne.n	8013974 <osThreadNew+0xca>
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	691b      	ldr	r3, [r3, #16]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d104      	bne.n	8013974 <osThreadNew+0xca>
          mem = 0;
 801396a:	2300      	movs	r3, #0
 801396c:	61bb      	str	r3, [r7, #24]
 801396e:	e001      	b.n	8013974 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8013970:	2300      	movs	r3, #0
 8013972:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013974:	69bb      	ldr	r3, [r7, #24]
 8013976:	2b01      	cmp	r3, #1
 8013978:	d110      	bne.n	801399c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801397e:	687a      	ldr	r2, [r7, #4]
 8013980:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013982:	9202      	str	r2, [sp, #8]
 8013984:	9301      	str	r3, [sp, #4]
 8013986:	69fb      	ldr	r3, [r7, #28]
 8013988:	9300      	str	r3, [sp, #0]
 801398a:	68bb      	ldr	r3, [r7, #8]
 801398c:	6a3a      	ldr	r2, [r7, #32]
 801398e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013990:	68f8      	ldr	r0, [r7, #12]
 8013992:	f002 f9b1 	bl	8015cf8 <xTaskCreateStatic>
 8013996:	4603      	mov	r3, r0
 8013998:	613b      	str	r3, [r7, #16]
 801399a:	e013      	b.n	80139c4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801399c:	69bb      	ldr	r3, [r7, #24]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d110      	bne.n	80139c4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80139a2:	6a3b      	ldr	r3, [r7, #32]
 80139a4:	b29a      	uxth	r2, r3
 80139a6:	f107 0310 	add.w	r3, r7, #16
 80139aa:	9301      	str	r3, [sp, #4]
 80139ac:	69fb      	ldr	r3, [r7, #28]
 80139ae:	9300      	str	r3, [sp, #0]
 80139b0:	68bb      	ldr	r3, [r7, #8]
 80139b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80139b4:	68f8      	ldr	r0, [r7, #12]
 80139b6:	f002 f9fc 	bl	8015db2 <xTaskCreate>
 80139ba:	4603      	mov	r3, r0
 80139bc:	2b01      	cmp	r3, #1
 80139be:	d001      	beq.n	80139c4 <osThreadNew+0x11a>
            hTask = NULL;
 80139c0:	2300      	movs	r3, #0
 80139c2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80139c4:	693b      	ldr	r3, [r7, #16]
}
 80139c6:	4618      	mov	r0, r3
 80139c8:	3728      	adds	r7, #40	; 0x28
 80139ca:	46bd      	mov	sp, r7
 80139cc:	bd80      	pop	{r7, pc}

080139ce <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80139ce:	b580      	push	{r7, lr}
 80139d0:	b084      	sub	sp, #16
 80139d2:	af00      	add	r7, sp, #0
 80139d4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80139d6:	f3ef 8305 	mrs	r3, IPSR
 80139da:	60bb      	str	r3, [r7, #8]
  return(result);
 80139dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d003      	beq.n	80139ea <osDelay+0x1c>
    stat = osErrorISR;
 80139e2:	f06f 0305 	mvn.w	r3, #5
 80139e6:	60fb      	str	r3, [r7, #12]
 80139e8:	e007      	b.n	80139fa <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80139ea:	2300      	movs	r3, #0
 80139ec:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d002      	beq.n	80139fa <osDelay+0x2c>
      vTaskDelay(ticks);
 80139f4:	6878      	ldr	r0, [r7, #4]
 80139f6:	f002 fb21 	bl	801603c <vTaskDelay>
    }
  }

  return (stat);
 80139fa:	68fb      	ldr	r3, [r7, #12]
}
 80139fc:	4618      	mov	r0, r3
 80139fe:	3710      	adds	r7, #16
 8013a00:	46bd      	mov	sp, r7
 8013a02:	bd80      	pop	{r7, pc}

08013a04 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b084      	sub	sp, #16
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8013a0c:	6878      	ldr	r0, [r7, #4]
 8013a0e:	f003 fe2f 	bl	8017670 <pvTimerGetTimerID>
 8013a12:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d005      	beq.n	8013a26 <TimerCallback+0x22>
    callb->func (callb->arg);
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	68fa      	ldr	r2, [r7, #12]
 8013a20:	6852      	ldr	r2, [r2, #4]
 8013a22:	4610      	mov	r0, r2
 8013a24:	4798      	blx	r3
  }
}
 8013a26:	bf00      	nop
 8013a28:	3710      	adds	r7, #16
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	bd80      	pop	{r7, pc}
	...

08013a30 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8013a30:	b580      	push	{r7, lr}
 8013a32:	b08c      	sub	sp, #48	; 0x30
 8013a34:	af02      	add	r7, sp, #8
 8013a36:	60f8      	str	r0, [r7, #12]
 8013a38:	607a      	str	r2, [r7, #4]
 8013a3a:	603b      	str	r3, [r7, #0]
 8013a3c:	460b      	mov	r3, r1
 8013a3e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8013a40:	2300      	movs	r3, #0
 8013a42:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013a44:	f3ef 8305 	mrs	r3, IPSR
 8013a48:	613b      	str	r3, [r7, #16]
  return(result);
 8013a4a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d163      	bne.n	8013b18 <osTimerNew+0xe8>
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d060      	beq.n	8013b18 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8013a56:	2008      	movs	r0, #8
 8013a58:	f004 f896 	bl	8017b88 <pvPortMalloc>
 8013a5c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8013a5e:	697b      	ldr	r3, [r7, #20]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d059      	beq.n	8013b18 <osTimerNew+0xe8>
      callb->func = func;
 8013a64:	697b      	ldr	r3, [r7, #20]
 8013a66:	68fa      	ldr	r2, [r7, #12]
 8013a68:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8013a6a:	697b      	ldr	r3, [r7, #20]
 8013a6c:	687a      	ldr	r2, [r7, #4]
 8013a6e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8013a70:	7afb      	ldrb	r3, [r7, #11]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d102      	bne.n	8013a7c <osTimerNew+0x4c>
        reload = pdFALSE;
 8013a76:	2300      	movs	r3, #0
 8013a78:	61fb      	str	r3, [r7, #28]
 8013a7a:	e001      	b.n	8013a80 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8013a7c:	2301      	movs	r3, #1
 8013a7e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8013a80:	f04f 33ff 	mov.w	r3, #4294967295
 8013a84:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8013a86:	2300      	movs	r3, #0
 8013a88:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d01c      	beq.n	8013aca <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8013a90:	683b      	ldr	r3, [r7, #0]
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d002      	beq.n	8013a9e <osTimerNew+0x6e>
          name = attr->name;
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8013a9e:	683b      	ldr	r3, [r7, #0]
 8013aa0:	689b      	ldr	r3, [r3, #8]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d006      	beq.n	8013ab4 <osTimerNew+0x84>
 8013aa6:	683b      	ldr	r3, [r7, #0]
 8013aa8:	68db      	ldr	r3, [r3, #12]
 8013aaa:	2b2b      	cmp	r3, #43	; 0x2b
 8013aac:	d902      	bls.n	8013ab4 <osTimerNew+0x84>
          mem = 1;
 8013aae:	2301      	movs	r3, #1
 8013ab0:	61bb      	str	r3, [r7, #24]
 8013ab2:	e00c      	b.n	8013ace <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8013ab4:	683b      	ldr	r3, [r7, #0]
 8013ab6:	689b      	ldr	r3, [r3, #8]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d108      	bne.n	8013ace <osTimerNew+0x9e>
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	68db      	ldr	r3, [r3, #12]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d104      	bne.n	8013ace <osTimerNew+0x9e>
            mem = 0;
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	61bb      	str	r3, [r7, #24]
 8013ac8:	e001      	b.n	8013ace <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8013aca:	2300      	movs	r3, #0
 8013acc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8013ace:	69bb      	ldr	r3, [r7, #24]
 8013ad0:	2b01      	cmp	r3, #1
 8013ad2:	d10c      	bne.n	8013aee <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8013ad4:	683b      	ldr	r3, [r7, #0]
 8013ad6:	689b      	ldr	r3, [r3, #8]
 8013ad8:	9301      	str	r3, [sp, #4]
 8013ada:	4b12      	ldr	r3, [pc, #72]	; (8013b24 <osTimerNew+0xf4>)
 8013adc:	9300      	str	r3, [sp, #0]
 8013ade:	697b      	ldr	r3, [r7, #20]
 8013ae0:	69fa      	ldr	r2, [r7, #28]
 8013ae2:	2101      	movs	r1, #1
 8013ae4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ae6:	f003 fa44 	bl	8016f72 <xTimerCreateStatic>
 8013aea:	6238      	str	r0, [r7, #32]
 8013aec:	e00b      	b.n	8013b06 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8013aee:	69bb      	ldr	r3, [r7, #24]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d108      	bne.n	8013b06 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8013af4:	4b0b      	ldr	r3, [pc, #44]	; (8013b24 <osTimerNew+0xf4>)
 8013af6:	9300      	str	r3, [sp, #0]
 8013af8:	697b      	ldr	r3, [r7, #20]
 8013afa:	69fa      	ldr	r2, [r7, #28]
 8013afc:	2101      	movs	r1, #1
 8013afe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b00:	f003 fa16 	bl	8016f30 <xTimerCreate>
 8013b04:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8013b06:	6a3b      	ldr	r3, [r7, #32]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d105      	bne.n	8013b18 <osTimerNew+0xe8>
 8013b0c:	697b      	ldr	r3, [r7, #20]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d002      	beq.n	8013b18 <osTimerNew+0xe8>
        vPortFree (callb);
 8013b12:	6978      	ldr	r0, [r7, #20]
 8013b14:	f004 f904 	bl	8017d20 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8013b18:	6a3b      	ldr	r3, [r7, #32]
}
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	3728      	adds	r7, #40	; 0x28
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	bd80      	pop	{r7, pc}
 8013b22:	bf00      	nop
 8013b24:	08013a05 	.word	0x08013a05

08013b28 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b088      	sub	sp, #32
 8013b2c:	af02      	add	r7, sp, #8
 8013b2e:	6078      	str	r0, [r7, #4]
 8013b30:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013b36:	f3ef 8305 	mrs	r3, IPSR
 8013b3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8013b3c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d003      	beq.n	8013b4a <osTimerStart+0x22>
    stat = osErrorISR;
 8013b42:	f06f 0305 	mvn.w	r3, #5
 8013b46:	617b      	str	r3, [r7, #20]
 8013b48:	e017      	b.n	8013b7a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8013b4a:	693b      	ldr	r3, [r7, #16]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d103      	bne.n	8013b58 <osTimerStart+0x30>
    stat = osErrorParameter;
 8013b50:	f06f 0303 	mvn.w	r3, #3
 8013b54:	617b      	str	r3, [r7, #20]
 8013b56:	e010      	b.n	8013b7a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8013b58:	2300      	movs	r3, #0
 8013b5a:	9300      	str	r3, [sp, #0]
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	683a      	ldr	r2, [r7, #0]
 8013b60:	2104      	movs	r1, #4
 8013b62:	6938      	ldr	r0, [r7, #16]
 8013b64:	f003 fa7e 	bl	8017064 <xTimerGenericCommand>
 8013b68:	4603      	mov	r3, r0
 8013b6a:	2b01      	cmp	r3, #1
 8013b6c:	d102      	bne.n	8013b74 <osTimerStart+0x4c>
      stat = osOK;
 8013b6e:	2300      	movs	r3, #0
 8013b70:	617b      	str	r3, [r7, #20]
 8013b72:	e002      	b.n	8013b7a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8013b74:	f06f 0302 	mvn.w	r3, #2
 8013b78:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8013b7a:	697b      	ldr	r3, [r7, #20]
}
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	3718      	adds	r7, #24
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bd80      	pop	{r7, pc}

08013b84 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b086      	sub	sp, #24
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013b90:	f3ef 8305 	mrs	r3, IPSR
 8013b94:	60fb      	str	r3, [r7, #12]
  return(result);
 8013b96:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d12d      	bne.n	8013bf8 <osEventFlagsNew+0x74>
    mem = -1;
 8013b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8013ba0:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d015      	beq.n	8013bd4 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	689b      	ldr	r3, [r3, #8]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d006      	beq.n	8013bbe <osEventFlagsNew+0x3a>
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	68db      	ldr	r3, [r3, #12]
 8013bb4:	2b1f      	cmp	r3, #31
 8013bb6:	d902      	bls.n	8013bbe <osEventFlagsNew+0x3a>
        mem = 1;
 8013bb8:	2301      	movs	r3, #1
 8013bba:	613b      	str	r3, [r7, #16]
 8013bbc:	e00c      	b.n	8013bd8 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	689b      	ldr	r3, [r3, #8]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d108      	bne.n	8013bd8 <osEventFlagsNew+0x54>
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	68db      	ldr	r3, [r3, #12]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d104      	bne.n	8013bd8 <osEventFlagsNew+0x54>
          mem = 0;
 8013bce:	2300      	movs	r3, #0
 8013bd0:	613b      	str	r3, [r7, #16]
 8013bd2:	e001      	b.n	8013bd8 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8013bd8:	693b      	ldr	r3, [r7, #16]
 8013bda:	2b01      	cmp	r3, #1
 8013bdc:	d106      	bne.n	8013bec <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	689b      	ldr	r3, [r3, #8]
 8013be2:	4618      	mov	r0, r3
 8013be4:	f000 fcb0 	bl	8014548 <xEventGroupCreateStatic>
 8013be8:	6178      	str	r0, [r7, #20]
 8013bea:	e005      	b.n	8013bf8 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8013bec:	693b      	ldr	r3, [r7, #16]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d102      	bne.n	8013bf8 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8013bf2:	f000 fce0 	bl	80145b6 <xEventGroupCreate>
 8013bf6:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8013bf8:	697b      	ldr	r3, [r7, #20]
}
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	3718      	adds	r7, #24
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bd80      	pop	{r7, pc}
	...

08013c04 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b086      	sub	sp, #24
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
 8013c0c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013c12:	693b      	ldr	r3, [r7, #16]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d004      	beq.n	8013c22 <osEventFlagsSet+0x1e>
 8013c18:	683b      	ldr	r3, [r7, #0]
 8013c1a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d003      	beq.n	8013c2a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8013c22:	f06f 0303 	mvn.w	r3, #3
 8013c26:	617b      	str	r3, [r7, #20]
 8013c28:	e028      	b.n	8013c7c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013c2a:	f3ef 8305 	mrs	r3, IPSR
 8013c2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8013c30:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d01d      	beq.n	8013c72 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8013c36:	2300      	movs	r3, #0
 8013c38:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8013c3a:	f107 0308 	add.w	r3, r7, #8
 8013c3e:	461a      	mov	r2, r3
 8013c40:	6839      	ldr	r1, [r7, #0]
 8013c42:	6938      	ldr	r0, [r7, #16]
 8013c44:	f000 fe90 	bl	8014968 <xEventGroupSetBitsFromISR>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d103      	bne.n	8013c56 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8013c4e:	f06f 0302 	mvn.w	r3, #2
 8013c52:	617b      	str	r3, [r7, #20]
 8013c54:	e012      	b.n	8013c7c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8013c56:	683b      	ldr	r3, [r7, #0]
 8013c58:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8013c5a:	68bb      	ldr	r3, [r7, #8]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d00d      	beq.n	8013c7c <osEventFlagsSet+0x78>
 8013c60:	4b09      	ldr	r3, [pc, #36]	; (8013c88 <osEventFlagsSet+0x84>)
 8013c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c66:	601a      	str	r2, [r3, #0]
 8013c68:	f3bf 8f4f 	dsb	sy
 8013c6c:	f3bf 8f6f 	isb	sy
 8013c70:	e004      	b.n	8013c7c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8013c72:	6839      	ldr	r1, [r7, #0]
 8013c74:	6938      	ldr	r0, [r7, #16]
 8013c76:	f000 fd87 	bl	8014788 <xEventGroupSetBits>
 8013c7a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8013c7c:	697b      	ldr	r3, [r7, #20]
}
 8013c7e:	4618      	mov	r0, r3
 8013c80:	3718      	adds	r7, #24
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bd80      	pop	{r7, pc}
 8013c86:	bf00      	nop
 8013c88:	e000ed04 	.word	0xe000ed04

08013c8c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b08c      	sub	sp, #48	; 0x30
 8013c90:	af02      	add	r7, sp, #8
 8013c92:	60f8      	str	r0, [r7, #12]
 8013c94:	60b9      	str	r1, [r7, #8]
 8013c96:	607a      	str	r2, [r7, #4]
 8013c98:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013c9e:	69bb      	ldr	r3, [r7, #24]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d004      	beq.n	8013cae <osEventFlagsWait+0x22>
 8013ca4:	68bb      	ldr	r3, [r7, #8]
 8013ca6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d003      	beq.n	8013cb6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8013cae:	f06f 0303 	mvn.w	r3, #3
 8013cb2:	61fb      	str	r3, [r7, #28]
 8013cb4:	e04b      	b.n	8013d4e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013cb6:	f3ef 8305 	mrs	r3, IPSR
 8013cba:	617b      	str	r3, [r7, #20]
  return(result);
 8013cbc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d003      	beq.n	8013cca <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8013cc2:	f06f 0305 	mvn.w	r3, #5
 8013cc6:	61fb      	str	r3, [r7, #28]
 8013cc8:	e041      	b.n	8013d4e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	f003 0301 	and.w	r3, r3, #1
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d002      	beq.n	8013cda <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8013cd4:	2301      	movs	r3, #1
 8013cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8013cd8:	e001      	b.n	8013cde <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8013cda:	2300      	movs	r3, #0
 8013cdc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	f003 0302 	and.w	r3, r3, #2
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d002      	beq.n	8013cee <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8013ce8:	2300      	movs	r3, #0
 8013cea:	623b      	str	r3, [r7, #32]
 8013cec:	e001      	b.n	8013cf2 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8013cee:	2301      	movs	r3, #1
 8013cf0:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8013cf2:	683b      	ldr	r3, [r7, #0]
 8013cf4:	9300      	str	r3, [sp, #0]
 8013cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cf8:	6a3a      	ldr	r2, [r7, #32]
 8013cfa:	68b9      	ldr	r1, [r7, #8]
 8013cfc:	69b8      	ldr	r0, [r7, #24]
 8013cfe:	f000 fc75 	bl	80145ec <xEventGroupWaitBits>
 8013d02:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	f003 0301 	and.w	r3, r3, #1
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d010      	beq.n	8013d30 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8013d0e:	68ba      	ldr	r2, [r7, #8]
 8013d10:	69fb      	ldr	r3, [r7, #28]
 8013d12:	4013      	ands	r3, r2
 8013d14:	68ba      	ldr	r2, [r7, #8]
 8013d16:	429a      	cmp	r2, r3
 8013d18:	d019      	beq.n	8013d4e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d003      	beq.n	8013d28 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8013d20:	f06f 0301 	mvn.w	r3, #1
 8013d24:	61fb      	str	r3, [r7, #28]
 8013d26:	e012      	b.n	8013d4e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8013d28:	f06f 0302 	mvn.w	r3, #2
 8013d2c:	61fb      	str	r3, [r7, #28]
 8013d2e:	e00e      	b.n	8013d4e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8013d30:	68ba      	ldr	r2, [r7, #8]
 8013d32:	69fb      	ldr	r3, [r7, #28]
 8013d34:	4013      	ands	r3, r2
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d109      	bne.n	8013d4e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8013d3a:	683b      	ldr	r3, [r7, #0]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d003      	beq.n	8013d48 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8013d40:	f06f 0301 	mvn.w	r3, #1
 8013d44:	61fb      	str	r3, [r7, #28]
 8013d46:	e002      	b.n	8013d4e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8013d48:	f06f 0302 	mvn.w	r3, #2
 8013d4c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8013d4e:	69fb      	ldr	r3, [r7, #28]
}
 8013d50:	4618      	mov	r0, r3
 8013d52:	3728      	adds	r7, #40	; 0x28
 8013d54:	46bd      	mov	sp, r7
 8013d56:	bd80      	pop	{r7, pc}

08013d58 <osEventFlagsDelete>:

osStatus_t osEventFlagsDelete (osEventFlagsId_t ef_id) {
 8013d58:	b580      	push	{r7, lr}
 8013d5a:	b086      	sub	sp, #24
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013d64:	f3ef 8305 	mrs	r3, IPSR
 8013d68:	60fb      	str	r3, [r7, #12]
  return(result);
 8013d6a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d003      	beq.n	8013d78 <osEventFlagsDelete+0x20>
    stat = osErrorISR;
 8013d70:	f06f 0305 	mvn.w	r3, #5
 8013d74:	617b      	str	r3, [r7, #20]
 8013d76:	e00b      	b.n	8013d90 <osEventFlagsDelete+0x38>
  }
  else if (hEventGroup == NULL) {
 8013d78:	693b      	ldr	r3, [r7, #16]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d103      	bne.n	8013d86 <osEventFlagsDelete+0x2e>
    stat = osErrorParameter;
 8013d7e:	f06f 0303 	mvn.w	r3, #3
 8013d82:	617b      	str	r3, [r7, #20]
 8013d84:	e004      	b.n	8013d90 <osEventFlagsDelete+0x38>
  }
  else {
    stat = osOK;
 8013d86:	2300      	movs	r3, #0
 8013d88:	617b      	str	r3, [r7, #20]
    vEventGroupDelete (hEventGroup);
 8013d8a:	6938      	ldr	r0, [r7, #16]
 8013d8c:	f000 fd87 	bl	801489e <vEventGroupDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8013d90:	697b      	ldr	r3, [r7, #20]
}
 8013d92:	4618      	mov	r0, r3
 8013d94:	3718      	adds	r7, #24
 8013d96:	46bd      	mov	sp, r7
 8013d98:	bd80      	pop	{r7, pc}

08013d9a <osMutexNew>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8013d9a:	b580      	push	{r7, lr}
 8013d9c:	b088      	sub	sp, #32
 8013d9e:	af00      	add	r7, sp, #0
 8013da0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8013da2:	2300      	movs	r3, #0
 8013da4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013da6:	f3ef 8305 	mrs	r3, IPSR
 8013daa:	60bb      	str	r3, [r7, #8]
  return(result);
 8013dac:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d174      	bne.n	8013e9c <osMutexNew+0x102>
    if (attr != NULL) {
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d003      	beq.n	8013dc0 <osMutexNew+0x26>
      type = attr->attr_bits;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	685b      	ldr	r3, [r3, #4]
 8013dbc:	61bb      	str	r3, [r7, #24]
 8013dbe:	e001      	b.n	8013dc4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8013dc4:	69bb      	ldr	r3, [r7, #24]
 8013dc6:	f003 0301 	and.w	r3, r3, #1
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d002      	beq.n	8013dd4 <osMutexNew+0x3a>
      rmtx = 1U;
 8013dce:	2301      	movs	r3, #1
 8013dd0:	617b      	str	r3, [r7, #20]
 8013dd2:	e001      	b.n	8013dd8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8013dd8:	69bb      	ldr	r3, [r7, #24]
 8013dda:	f003 0308 	and.w	r3, r3, #8
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d15c      	bne.n	8013e9c <osMutexNew+0x102>
      mem = -1;
 8013de2:	f04f 33ff 	mov.w	r3, #4294967295
 8013de6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d015      	beq.n	8013e1a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	689b      	ldr	r3, [r3, #8]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d006      	beq.n	8013e04 <osMutexNew+0x6a>
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	68db      	ldr	r3, [r3, #12]
 8013dfa:	2b4f      	cmp	r3, #79	; 0x4f
 8013dfc:	d902      	bls.n	8013e04 <osMutexNew+0x6a>
          mem = 1;
 8013dfe:	2301      	movs	r3, #1
 8013e00:	613b      	str	r3, [r7, #16]
 8013e02:	e00c      	b.n	8013e1e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	689b      	ldr	r3, [r3, #8]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d108      	bne.n	8013e1e <osMutexNew+0x84>
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	68db      	ldr	r3, [r3, #12]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d104      	bne.n	8013e1e <osMutexNew+0x84>
            mem = 0;
 8013e14:	2300      	movs	r3, #0
 8013e16:	613b      	str	r3, [r7, #16]
 8013e18:	e001      	b.n	8013e1e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8013e1e:	693b      	ldr	r3, [r7, #16]
 8013e20:	2b01      	cmp	r3, #1
 8013e22:	d112      	bne.n	8013e4a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8013e24:	697b      	ldr	r3, [r7, #20]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d007      	beq.n	8013e3a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	689b      	ldr	r3, [r3, #8]
 8013e2e:	4619      	mov	r1, r3
 8013e30:	2004      	movs	r0, #4
 8013e32:	f000 ffd0 	bl	8014dd6 <xQueueCreateMutexStatic>
 8013e36:	61f8      	str	r0, [r7, #28]
 8013e38:	e016      	b.n	8013e68 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	689b      	ldr	r3, [r3, #8]
 8013e3e:	4619      	mov	r1, r3
 8013e40:	2001      	movs	r0, #1
 8013e42:	f000 ffc8 	bl	8014dd6 <xQueueCreateMutexStatic>
 8013e46:	61f8      	str	r0, [r7, #28]
 8013e48:	e00e      	b.n	8013e68 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8013e4a:	693b      	ldr	r3, [r7, #16]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d10b      	bne.n	8013e68 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8013e50:	697b      	ldr	r3, [r7, #20]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d004      	beq.n	8013e60 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8013e56:	2004      	movs	r0, #4
 8013e58:	f000 ffa5 	bl	8014da6 <xQueueCreateMutex>
 8013e5c:	61f8      	str	r0, [r7, #28]
 8013e5e:	e003      	b.n	8013e68 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8013e60:	2001      	movs	r0, #1
 8013e62:	f000 ffa0 	bl	8014da6 <xQueueCreateMutex>
 8013e66:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8013e68:	69fb      	ldr	r3, [r7, #28]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d00c      	beq.n	8013e88 <osMutexNew+0xee>
        if (attr != NULL) {
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d003      	beq.n	8013e7c <osMutexNew+0xe2>
          name = attr->name;
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	60fb      	str	r3, [r7, #12]
 8013e7a:	e001      	b.n	8013e80 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8013e80:	68f9      	ldr	r1, [r7, #12]
 8013e82:	69f8      	ldr	r0, [r7, #28]
 8013e84:	f001 feb0 	bl	8015be8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8013e88:	69fb      	ldr	r3, [r7, #28]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d006      	beq.n	8013e9c <osMutexNew+0x102>
 8013e8e:	697b      	ldr	r3, [r7, #20]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d003      	beq.n	8013e9c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8013e94:	69fb      	ldr	r3, [r7, #28]
 8013e96:	f043 0301 	orr.w	r3, r3, #1
 8013e9a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8013e9c:	69fb      	ldr	r3, [r7, #28]
}
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	3720      	adds	r7, #32
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	bd80      	pop	{r7, pc}

08013ea6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8013ea6:	b580      	push	{r7, lr}
 8013ea8:	b086      	sub	sp, #24
 8013eaa:	af00      	add	r7, sp, #0
 8013eac:	6078      	str	r0, [r7, #4]
 8013eae:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	f023 0301 	bic.w	r3, r3, #1
 8013eb6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	f003 0301 	and.w	r3, r3, #1
 8013ebe:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013ec4:	f3ef 8305 	mrs	r3, IPSR
 8013ec8:	60bb      	str	r3, [r7, #8]
  return(result);
 8013eca:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d003      	beq.n	8013ed8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8013ed0:	f06f 0305 	mvn.w	r3, #5
 8013ed4:	617b      	str	r3, [r7, #20]
 8013ed6:	e02c      	b.n	8013f32 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8013ed8:	693b      	ldr	r3, [r7, #16]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d103      	bne.n	8013ee6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8013ede:	f06f 0303 	mvn.w	r3, #3
 8013ee2:	617b      	str	r3, [r7, #20]
 8013ee4:	e025      	b.n	8013f32 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d011      	beq.n	8013f10 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8013eec:	6839      	ldr	r1, [r7, #0]
 8013eee:	6938      	ldr	r0, [r7, #16]
 8013ef0:	f000 ffc0 	bl	8014e74 <xQueueTakeMutexRecursive>
 8013ef4:	4603      	mov	r3, r0
 8013ef6:	2b01      	cmp	r3, #1
 8013ef8:	d01b      	beq.n	8013f32 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8013efa:	683b      	ldr	r3, [r7, #0]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d003      	beq.n	8013f08 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8013f00:	f06f 0301 	mvn.w	r3, #1
 8013f04:	617b      	str	r3, [r7, #20]
 8013f06:	e014      	b.n	8013f32 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8013f08:	f06f 0302 	mvn.w	r3, #2
 8013f0c:	617b      	str	r3, [r7, #20]
 8013f0e:	e010      	b.n	8013f32 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8013f10:	6839      	ldr	r1, [r7, #0]
 8013f12:	6938      	ldr	r0, [r7, #16]
 8013f14:	f001 fb54 	bl	80155c0 <xQueueSemaphoreTake>
 8013f18:	4603      	mov	r3, r0
 8013f1a:	2b01      	cmp	r3, #1
 8013f1c:	d009      	beq.n	8013f32 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8013f1e:	683b      	ldr	r3, [r7, #0]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d003      	beq.n	8013f2c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8013f24:	f06f 0301 	mvn.w	r3, #1
 8013f28:	617b      	str	r3, [r7, #20]
 8013f2a:	e002      	b.n	8013f32 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8013f2c:	f06f 0302 	mvn.w	r3, #2
 8013f30:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8013f32:	697b      	ldr	r3, [r7, #20]
}
 8013f34:	4618      	mov	r0, r3
 8013f36:	3718      	adds	r7, #24
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bd80      	pop	{r7, pc}

08013f3c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b086      	sub	sp, #24
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	f023 0301 	bic.w	r3, r3, #1
 8013f4a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	f003 0301 	and.w	r3, r3, #1
 8013f52:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8013f54:	2300      	movs	r3, #0
 8013f56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013f58:	f3ef 8305 	mrs	r3, IPSR
 8013f5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8013f5e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d003      	beq.n	8013f6c <osMutexRelease+0x30>
    stat = osErrorISR;
 8013f64:	f06f 0305 	mvn.w	r3, #5
 8013f68:	617b      	str	r3, [r7, #20]
 8013f6a:	e01f      	b.n	8013fac <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8013f6c:	693b      	ldr	r3, [r7, #16]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d103      	bne.n	8013f7a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8013f72:	f06f 0303 	mvn.w	r3, #3
 8013f76:	617b      	str	r3, [r7, #20]
 8013f78:	e018      	b.n	8013fac <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d009      	beq.n	8013f94 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8013f80:	6938      	ldr	r0, [r7, #16]
 8013f82:	f000 ff43 	bl	8014e0c <xQueueGiveMutexRecursive>
 8013f86:	4603      	mov	r3, r0
 8013f88:	2b01      	cmp	r3, #1
 8013f8a:	d00f      	beq.n	8013fac <osMutexRelease+0x70>
        stat = osErrorResource;
 8013f8c:	f06f 0302 	mvn.w	r3, #2
 8013f90:	617b      	str	r3, [r7, #20]
 8013f92:	e00b      	b.n	8013fac <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8013f94:	2300      	movs	r3, #0
 8013f96:	2200      	movs	r2, #0
 8013f98:	2100      	movs	r1, #0
 8013f9a:	6938      	ldr	r0, [r7, #16]
 8013f9c:	f001 f80a 	bl	8014fb4 <xQueueGenericSend>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	2b01      	cmp	r3, #1
 8013fa4:	d002      	beq.n	8013fac <osMutexRelease+0x70>
        stat = osErrorResource;
 8013fa6:	f06f 0302 	mvn.w	r3, #2
 8013faa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8013fac:	697b      	ldr	r3, [r7, #20]
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	3718      	adds	r7, #24
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}

08013fb6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8013fb6:	b580      	push	{r7, lr}
 8013fb8:	b08a      	sub	sp, #40	; 0x28
 8013fba:	af02      	add	r7, sp, #8
 8013fbc:	60f8      	str	r0, [r7, #12]
 8013fbe:	60b9      	str	r1, [r7, #8]
 8013fc0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013fc6:	f3ef 8305 	mrs	r3, IPSR
 8013fca:	613b      	str	r3, [r7, #16]
  return(result);
 8013fcc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d175      	bne.n	80140be <osSemaphoreNew+0x108>
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d072      	beq.n	80140be <osSemaphoreNew+0x108>
 8013fd8:	68ba      	ldr	r2, [r7, #8]
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	429a      	cmp	r2, r3
 8013fde:	d86e      	bhi.n	80140be <osSemaphoreNew+0x108>
    mem = -1;
 8013fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8013fe4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d015      	beq.n	8014018 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	689b      	ldr	r3, [r3, #8]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d006      	beq.n	8014002 <osSemaphoreNew+0x4c>
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	68db      	ldr	r3, [r3, #12]
 8013ff8:	2b4f      	cmp	r3, #79	; 0x4f
 8013ffa:	d902      	bls.n	8014002 <osSemaphoreNew+0x4c>
        mem = 1;
 8013ffc:	2301      	movs	r3, #1
 8013ffe:	61bb      	str	r3, [r7, #24]
 8014000:	e00c      	b.n	801401c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	689b      	ldr	r3, [r3, #8]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d108      	bne.n	801401c <osSemaphoreNew+0x66>
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	68db      	ldr	r3, [r3, #12]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d104      	bne.n	801401c <osSemaphoreNew+0x66>
          mem = 0;
 8014012:	2300      	movs	r3, #0
 8014014:	61bb      	str	r3, [r7, #24]
 8014016:	e001      	b.n	801401c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8014018:	2300      	movs	r3, #0
 801401a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 801401c:	69bb      	ldr	r3, [r7, #24]
 801401e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014022:	d04c      	beq.n	80140be <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	2b01      	cmp	r3, #1
 8014028:	d128      	bne.n	801407c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 801402a:	69bb      	ldr	r3, [r7, #24]
 801402c:	2b01      	cmp	r3, #1
 801402e:	d10a      	bne.n	8014046 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	689b      	ldr	r3, [r3, #8]
 8014034:	2203      	movs	r2, #3
 8014036:	9200      	str	r2, [sp, #0]
 8014038:	2200      	movs	r2, #0
 801403a:	2100      	movs	r1, #0
 801403c:	2001      	movs	r0, #1
 801403e:	f000 fdc3 	bl	8014bc8 <xQueueGenericCreateStatic>
 8014042:	61f8      	str	r0, [r7, #28]
 8014044:	e005      	b.n	8014052 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8014046:	2203      	movs	r2, #3
 8014048:	2100      	movs	r1, #0
 801404a:	2001      	movs	r0, #1
 801404c:	f000 fe34 	bl	8014cb8 <xQueueGenericCreate>
 8014050:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8014052:	69fb      	ldr	r3, [r7, #28]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d022      	beq.n	801409e <osSemaphoreNew+0xe8>
 8014058:	68bb      	ldr	r3, [r7, #8]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d01f      	beq.n	801409e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801405e:	2300      	movs	r3, #0
 8014060:	2200      	movs	r2, #0
 8014062:	2100      	movs	r1, #0
 8014064:	69f8      	ldr	r0, [r7, #28]
 8014066:	f000 ffa5 	bl	8014fb4 <xQueueGenericSend>
 801406a:	4603      	mov	r3, r0
 801406c:	2b01      	cmp	r3, #1
 801406e:	d016      	beq.n	801409e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8014070:	69f8      	ldr	r0, [r7, #28]
 8014072:	f001 fc6d 	bl	8015950 <vQueueDelete>
            hSemaphore = NULL;
 8014076:	2300      	movs	r3, #0
 8014078:	61fb      	str	r3, [r7, #28]
 801407a:	e010      	b.n	801409e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 801407c:	69bb      	ldr	r3, [r7, #24]
 801407e:	2b01      	cmp	r3, #1
 8014080:	d108      	bne.n	8014094 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	689b      	ldr	r3, [r3, #8]
 8014086:	461a      	mov	r2, r3
 8014088:	68b9      	ldr	r1, [r7, #8]
 801408a:	68f8      	ldr	r0, [r7, #12]
 801408c:	f000 ff28 	bl	8014ee0 <xQueueCreateCountingSemaphoreStatic>
 8014090:	61f8      	str	r0, [r7, #28]
 8014092:	e004      	b.n	801409e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8014094:	68b9      	ldr	r1, [r7, #8]
 8014096:	68f8      	ldr	r0, [r7, #12]
 8014098:	f000 ff59 	bl	8014f4e <xQueueCreateCountingSemaphore>
 801409c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801409e:	69fb      	ldr	r3, [r7, #28]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d00c      	beq.n	80140be <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d003      	beq.n	80140b2 <osSemaphoreNew+0xfc>
          name = attr->name;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	617b      	str	r3, [r7, #20]
 80140b0:	e001      	b.n	80140b6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80140b2:	2300      	movs	r3, #0
 80140b4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80140b6:	6979      	ldr	r1, [r7, #20]
 80140b8:	69f8      	ldr	r0, [r7, #28]
 80140ba:	f001 fd95 	bl	8015be8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80140be:	69fb      	ldr	r3, [r7, #28]
}
 80140c0:	4618      	mov	r0, r3
 80140c2:	3720      	adds	r7, #32
 80140c4:	46bd      	mov	sp, r7
 80140c6:	bd80      	pop	{r7, pc}

080140c8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b086      	sub	sp, #24
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
 80140d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80140d6:	2300      	movs	r3, #0
 80140d8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80140da:	693b      	ldr	r3, [r7, #16]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d103      	bne.n	80140e8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80140e0:	f06f 0303 	mvn.w	r3, #3
 80140e4:	617b      	str	r3, [r7, #20]
 80140e6:	e039      	b.n	801415c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80140e8:	f3ef 8305 	mrs	r3, IPSR
 80140ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80140ee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d022      	beq.n	801413a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80140f4:	683b      	ldr	r3, [r7, #0]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d003      	beq.n	8014102 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80140fa:	f06f 0303 	mvn.w	r3, #3
 80140fe:	617b      	str	r3, [r7, #20]
 8014100:	e02c      	b.n	801415c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8014102:	2300      	movs	r3, #0
 8014104:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8014106:	f107 0308 	add.w	r3, r7, #8
 801410a:	461a      	mov	r2, r3
 801410c:	2100      	movs	r1, #0
 801410e:	6938      	ldr	r0, [r7, #16]
 8014110:	f001 fb62 	bl	80157d8 <xQueueReceiveFromISR>
 8014114:	4603      	mov	r3, r0
 8014116:	2b01      	cmp	r3, #1
 8014118:	d003      	beq.n	8014122 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801411a:	f06f 0302 	mvn.w	r3, #2
 801411e:	617b      	str	r3, [r7, #20]
 8014120:	e01c      	b.n	801415c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8014122:	68bb      	ldr	r3, [r7, #8]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d019      	beq.n	801415c <osSemaphoreAcquire+0x94>
 8014128:	4b0f      	ldr	r3, [pc, #60]	; (8014168 <osSemaphoreAcquire+0xa0>)
 801412a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801412e:	601a      	str	r2, [r3, #0]
 8014130:	f3bf 8f4f 	dsb	sy
 8014134:	f3bf 8f6f 	isb	sy
 8014138:	e010      	b.n	801415c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801413a:	6839      	ldr	r1, [r7, #0]
 801413c:	6938      	ldr	r0, [r7, #16]
 801413e:	f001 fa3f 	bl	80155c0 <xQueueSemaphoreTake>
 8014142:	4603      	mov	r3, r0
 8014144:	2b01      	cmp	r3, #1
 8014146:	d009      	beq.n	801415c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8014148:	683b      	ldr	r3, [r7, #0]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d003      	beq.n	8014156 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 801414e:	f06f 0301 	mvn.w	r3, #1
 8014152:	617b      	str	r3, [r7, #20]
 8014154:	e002      	b.n	801415c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8014156:	f06f 0302 	mvn.w	r3, #2
 801415a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 801415c:	697b      	ldr	r3, [r7, #20]
}
 801415e:	4618      	mov	r0, r3
 8014160:	3718      	adds	r7, #24
 8014162:	46bd      	mov	sp, r7
 8014164:	bd80      	pop	{r7, pc}
 8014166:	bf00      	nop
 8014168:	e000ed04 	.word	0xe000ed04

0801416c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801416c:	b580      	push	{r7, lr}
 801416e:	b086      	sub	sp, #24
 8014170:	af00      	add	r7, sp, #0
 8014172:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8014178:	2300      	movs	r3, #0
 801417a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801417c:	693b      	ldr	r3, [r7, #16]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d103      	bne.n	801418a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8014182:	f06f 0303 	mvn.w	r3, #3
 8014186:	617b      	str	r3, [r7, #20]
 8014188:	e02c      	b.n	80141e4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801418a:	f3ef 8305 	mrs	r3, IPSR
 801418e:	60fb      	str	r3, [r7, #12]
  return(result);
 8014190:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014192:	2b00      	cmp	r3, #0
 8014194:	d01a      	beq.n	80141cc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8014196:	2300      	movs	r3, #0
 8014198:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801419a:	f107 0308 	add.w	r3, r7, #8
 801419e:	4619      	mov	r1, r3
 80141a0:	6938      	ldr	r0, [r7, #16]
 80141a2:	f001 f8a0 	bl	80152e6 <xQueueGiveFromISR>
 80141a6:	4603      	mov	r3, r0
 80141a8:	2b01      	cmp	r3, #1
 80141aa:	d003      	beq.n	80141b4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80141ac:	f06f 0302 	mvn.w	r3, #2
 80141b0:	617b      	str	r3, [r7, #20]
 80141b2:	e017      	b.n	80141e4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80141b4:	68bb      	ldr	r3, [r7, #8]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d014      	beq.n	80141e4 <osSemaphoreRelease+0x78>
 80141ba:	4b0d      	ldr	r3, [pc, #52]	; (80141f0 <osSemaphoreRelease+0x84>)
 80141bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80141c0:	601a      	str	r2, [r3, #0]
 80141c2:	f3bf 8f4f 	dsb	sy
 80141c6:	f3bf 8f6f 	isb	sy
 80141ca:	e00b      	b.n	80141e4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80141cc:	2300      	movs	r3, #0
 80141ce:	2200      	movs	r2, #0
 80141d0:	2100      	movs	r1, #0
 80141d2:	6938      	ldr	r0, [r7, #16]
 80141d4:	f000 feee 	bl	8014fb4 <xQueueGenericSend>
 80141d8:	4603      	mov	r3, r0
 80141da:	2b01      	cmp	r3, #1
 80141dc:	d002      	beq.n	80141e4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80141de:	f06f 0302 	mvn.w	r3, #2
 80141e2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80141e4:	697b      	ldr	r3, [r7, #20]
}
 80141e6:	4618      	mov	r0, r3
 80141e8:	3718      	adds	r7, #24
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bd80      	pop	{r7, pc}
 80141ee:	bf00      	nop
 80141f0:	e000ed04 	.word	0xe000ed04

080141f4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b08a      	sub	sp, #40	; 0x28
 80141f8:	af02      	add	r7, sp, #8
 80141fa:	60f8      	str	r0, [r7, #12]
 80141fc:	60b9      	str	r1, [r7, #8]
 80141fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8014200:	2300      	movs	r3, #0
 8014202:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014204:	f3ef 8305 	mrs	r3, IPSR
 8014208:	613b      	str	r3, [r7, #16]
  return(result);
 801420a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801420c:	2b00      	cmp	r3, #0
 801420e:	d15f      	bne.n	80142d0 <osMessageQueueNew+0xdc>
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d05c      	beq.n	80142d0 <osMessageQueueNew+0xdc>
 8014216:	68bb      	ldr	r3, [r7, #8]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d059      	beq.n	80142d0 <osMessageQueueNew+0xdc>
    mem = -1;
 801421c:	f04f 33ff 	mov.w	r3, #4294967295
 8014220:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d029      	beq.n	801427c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	689b      	ldr	r3, [r3, #8]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d012      	beq.n	8014256 <osMessageQueueNew+0x62>
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	68db      	ldr	r3, [r3, #12]
 8014234:	2b4f      	cmp	r3, #79	; 0x4f
 8014236:	d90e      	bls.n	8014256 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801423c:	2b00      	cmp	r3, #0
 801423e:	d00a      	beq.n	8014256 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	695a      	ldr	r2, [r3, #20]
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	68b9      	ldr	r1, [r7, #8]
 8014248:	fb01 f303 	mul.w	r3, r1, r3
 801424c:	429a      	cmp	r2, r3
 801424e:	d302      	bcc.n	8014256 <osMessageQueueNew+0x62>
        mem = 1;
 8014250:	2301      	movs	r3, #1
 8014252:	61bb      	str	r3, [r7, #24]
 8014254:	e014      	b.n	8014280 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	689b      	ldr	r3, [r3, #8]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d110      	bne.n	8014280 <osMessageQueueNew+0x8c>
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	68db      	ldr	r3, [r3, #12]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d10c      	bne.n	8014280 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801426a:	2b00      	cmp	r3, #0
 801426c:	d108      	bne.n	8014280 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	695b      	ldr	r3, [r3, #20]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d104      	bne.n	8014280 <osMessageQueueNew+0x8c>
          mem = 0;
 8014276:	2300      	movs	r3, #0
 8014278:	61bb      	str	r3, [r7, #24]
 801427a:	e001      	b.n	8014280 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 801427c:	2300      	movs	r3, #0
 801427e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8014280:	69bb      	ldr	r3, [r7, #24]
 8014282:	2b01      	cmp	r3, #1
 8014284:	d10b      	bne.n	801429e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	691a      	ldr	r2, [r3, #16]
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	689b      	ldr	r3, [r3, #8]
 801428e:	2100      	movs	r1, #0
 8014290:	9100      	str	r1, [sp, #0]
 8014292:	68b9      	ldr	r1, [r7, #8]
 8014294:	68f8      	ldr	r0, [r7, #12]
 8014296:	f000 fc97 	bl	8014bc8 <xQueueGenericCreateStatic>
 801429a:	61f8      	str	r0, [r7, #28]
 801429c:	e008      	b.n	80142b0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801429e:	69bb      	ldr	r3, [r7, #24]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d105      	bne.n	80142b0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80142a4:	2200      	movs	r2, #0
 80142a6:	68b9      	ldr	r1, [r7, #8]
 80142a8:	68f8      	ldr	r0, [r7, #12]
 80142aa:	f000 fd05 	bl	8014cb8 <xQueueGenericCreate>
 80142ae:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80142b0:	69fb      	ldr	r3, [r7, #28]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d00c      	beq.n	80142d0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d003      	beq.n	80142c4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	617b      	str	r3, [r7, #20]
 80142c2:	e001      	b.n	80142c8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80142c4:	2300      	movs	r3, #0
 80142c6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80142c8:	6979      	ldr	r1, [r7, #20]
 80142ca:	69f8      	ldr	r0, [r7, #28]
 80142cc:	f001 fc8c 	bl	8015be8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80142d0:	69fb      	ldr	r3, [r7, #28]
}
 80142d2:	4618      	mov	r0, r3
 80142d4:	3720      	adds	r7, #32
 80142d6:	46bd      	mov	sp, r7
 80142d8:	bd80      	pop	{r7, pc}
	...

080142dc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80142dc:	b580      	push	{r7, lr}
 80142de:	b088      	sub	sp, #32
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	60f8      	str	r0, [r7, #12]
 80142e4:	60b9      	str	r1, [r7, #8]
 80142e6:	603b      	str	r3, [r7, #0]
 80142e8:	4613      	mov	r3, r2
 80142ea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80142f0:	2300      	movs	r3, #0
 80142f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80142f4:	f3ef 8305 	mrs	r3, IPSR
 80142f8:	617b      	str	r3, [r7, #20]
  return(result);
 80142fa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d028      	beq.n	8014352 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8014300:	69bb      	ldr	r3, [r7, #24]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d005      	beq.n	8014312 <osMessageQueuePut+0x36>
 8014306:	68bb      	ldr	r3, [r7, #8]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d002      	beq.n	8014312 <osMessageQueuePut+0x36>
 801430c:	683b      	ldr	r3, [r7, #0]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d003      	beq.n	801431a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8014312:	f06f 0303 	mvn.w	r3, #3
 8014316:	61fb      	str	r3, [r7, #28]
 8014318:	e038      	b.n	801438c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801431a:	2300      	movs	r3, #0
 801431c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801431e:	f107 0210 	add.w	r2, r7, #16
 8014322:	2300      	movs	r3, #0
 8014324:	68b9      	ldr	r1, [r7, #8]
 8014326:	69b8      	ldr	r0, [r7, #24]
 8014328:	f000 ff42 	bl	80151b0 <xQueueGenericSendFromISR>
 801432c:	4603      	mov	r3, r0
 801432e:	2b01      	cmp	r3, #1
 8014330:	d003      	beq.n	801433a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8014332:	f06f 0302 	mvn.w	r3, #2
 8014336:	61fb      	str	r3, [r7, #28]
 8014338:	e028      	b.n	801438c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801433a:	693b      	ldr	r3, [r7, #16]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d025      	beq.n	801438c <osMessageQueuePut+0xb0>
 8014340:	4b15      	ldr	r3, [pc, #84]	; (8014398 <osMessageQueuePut+0xbc>)
 8014342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014346:	601a      	str	r2, [r3, #0]
 8014348:	f3bf 8f4f 	dsb	sy
 801434c:	f3bf 8f6f 	isb	sy
 8014350:	e01c      	b.n	801438c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8014352:	69bb      	ldr	r3, [r7, #24]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d002      	beq.n	801435e <osMessageQueuePut+0x82>
 8014358:	68bb      	ldr	r3, [r7, #8]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d103      	bne.n	8014366 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801435e:	f06f 0303 	mvn.w	r3, #3
 8014362:	61fb      	str	r3, [r7, #28]
 8014364:	e012      	b.n	801438c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8014366:	2300      	movs	r3, #0
 8014368:	683a      	ldr	r2, [r7, #0]
 801436a:	68b9      	ldr	r1, [r7, #8]
 801436c:	69b8      	ldr	r0, [r7, #24]
 801436e:	f000 fe21 	bl	8014fb4 <xQueueGenericSend>
 8014372:	4603      	mov	r3, r0
 8014374:	2b01      	cmp	r3, #1
 8014376:	d009      	beq.n	801438c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8014378:	683b      	ldr	r3, [r7, #0]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d003      	beq.n	8014386 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801437e:	f06f 0301 	mvn.w	r3, #1
 8014382:	61fb      	str	r3, [r7, #28]
 8014384:	e002      	b.n	801438c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8014386:	f06f 0302 	mvn.w	r3, #2
 801438a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801438c:	69fb      	ldr	r3, [r7, #28]
}
 801438e:	4618      	mov	r0, r3
 8014390:	3720      	adds	r7, #32
 8014392:	46bd      	mov	sp, r7
 8014394:	bd80      	pop	{r7, pc}
 8014396:	bf00      	nop
 8014398:	e000ed04 	.word	0xe000ed04

0801439c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801439c:	b580      	push	{r7, lr}
 801439e:	b088      	sub	sp, #32
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	60f8      	str	r0, [r7, #12]
 80143a4:	60b9      	str	r1, [r7, #8]
 80143a6:	607a      	str	r2, [r7, #4]
 80143a8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80143ae:	2300      	movs	r3, #0
 80143b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80143b2:	f3ef 8305 	mrs	r3, IPSR
 80143b6:	617b      	str	r3, [r7, #20]
  return(result);
 80143b8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d028      	beq.n	8014410 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80143be:	69bb      	ldr	r3, [r7, #24]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d005      	beq.n	80143d0 <osMessageQueueGet+0x34>
 80143c4:	68bb      	ldr	r3, [r7, #8]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d002      	beq.n	80143d0 <osMessageQueueGet+0x34>
 80143ca:	683b      	ldr	r3, [r7, #0]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d003      	beq.n	80143d8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80143d0:	f06f 0303 	mvn.w	r3, #3
 80143d4:	61fb      	str	r3, [r7, #28]
 80143d6:	e037      	b.n	8014448 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80143d8:	2300      	movs	r3, #0
 80143da:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80143dc:	f107 0310 	add.w	r3, r7, #16
 80143e0:	461a      	mov	r2, r3
 80143e2:	68b9      	ldr	r1, [r7, #8]
 80143e4:	69b8      	ldr	r0, [r7, #24]
 80143e6:	f001 f9f7 	bl	80157d8 <xQueueReceiveFromISR>
 80143ea:	4603      	mov	r3, r0
 80143ec:	2b01      	cmp	r3, #1
 80143ee:	d003      	beq.n	80143f8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80143f0:	f06f 0302 	mvn.w	r3, #2
 80143f4:	61fb      	str	r3, [r7, #28]
 80143f6:	e027      	b.n	8014448 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80143f8:	693b      	ldr	r3, [r7, #16]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d024      	beq.n	8014448 <osMessageQueueGet+0xac>
 80143fe:	4b15      	ldr	r3, [pc, #84]	; (8014454 <osMessageQueueGet+0xb8>)
 8014400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014404:	601a      	str	r2, [r3, #0]
 8014406:	f3bf 8f4f 	dsb	sy
 801440a:	f3bf 8f6f 	isb	sy
 801440e:	e01b      	b.n	8014448 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8014410:	69bb      	ldr	r3, [r7, #24]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d002      	beq.n	801441c <osMessageQueueGet+0x80>
 8014416:	68bb      	ldr	r3, [r7, #8]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d103      	bne.n	8014424 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 801441c:	f06f 0303 	mvn.w	r3, #3
 8014420:	61fb      	str	r3, [r7, #28]
 8014422:	e011      	b.n	8014448 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8014424:	683a      	ldr	r2, [r7, #0]
 8014426:	68b9      	ldr	r1, [r7, #8]
 8014428:	69b8      	ldr	r0, [r7, #24]
 801442a:	f000 ffe9 	bl	8015400 <xQueueReceive>
 801442e:	4603      	mov	r3, r0
 8014430:	2b01      	cmp	r3, #1
 8014432:	d009      	beq.n	8014448 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8014434:	683b      	ldr	r3, [r7, #0]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d003      	beq.n	8014442 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801443a:	f06f 0301 	mvn.w	r3, #1
 801443e:	61fb      	str	r3, [r7, #28]
 8014440:	e002      	b.n	8014448 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8014442:	f06f 0302 	mvn.w	r3, #2
 8014446:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8014448:	69fb      	ldr	r3, [r7, #28]
}
 801444a:	4618      	mov	r0, r3
 801444c:	3720      	adds	r7, #32
 801444e:	46bd      	mov	sp, r7
 8014450:	bd80      	pop	{r7, pc}
 8014452:	bf00      	nop
 8014454:	e000ed04 	.word	0xe000ed04

08014458 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8014458:	b580      	push	{r7, lr}
 801445a:	b086      	sub	sp, #24
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8014464:	693b      	ldr	r3, [r7, #16]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d102      	bne.n	8014470 <osMessageQueueGetCount+0x18>
    count = 0U;
 801446a:	2300      	movs	r3, #0
 801446c:	617b      	str	r3, [r7, #20]
 801446e:	e00e      	b.n	801448e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014470:	f3ef 8305 	mrs	r3, IPSR
 8014474:	60fb      	str	r3, [r7, #12]
  return(result);
 8014476:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014478:	2b00      	cmp	r3, #0
 801447a:	d004      	beq.n	8014486 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 801447c:	6938      	ldr	r0, [r7, #16]
 801447e:	f001 fa49 	bl	8015914 <uxQueueMessagesWaitingFromISR>
 8014482:	6178      	str	r0, [r7, #20]
 8014484:	e003      	b.n	801448e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8014486:	6938      	ldr	r0, [r7, #16]
 8014488:	f001 fa26 	bl	80158d8 <uxQueueMessagesWaiting>
 801448c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 801448e:	697b      	ldr	r3, [r7, #20]
}
 8014490:	4618      	mov	r0, r3
 8014492:	3718      	adds	r7, #24
 8014494:	46bd      	mov	sp, r7
 8014496:	bd80      	pop	{r7, pc}

08014498 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8014498:	b580      	push	{r7, lr}
 801449a:	b086      	sub	sp, #24
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80144a4:	f3ef 8305 	mrs	r3, IPSR
 80144a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80144aa:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d003      	beq.n	80144b8 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 80144b0:	f06f 0305 	mvn.w	r3, #5
 80144b4:	617b      	str	r3, [r7, #20]
 80144b6:	e00e      	b.n	80144d6 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 80144b8:	693b      	ldr	r3, [r7, #16]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d103      	bne.n	80144c6 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 80144be:	f06f 0303 	mvn.w	r3, #3
 80144c2:	617b      	str	r3, [r7, #20]
 80144c4:	e007      	b.n	80144d6 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 80144c6:	6938      	ldr	r0, [r7, #16]
 80144c8:	f001 fbb8 	bl	8015c3c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80144cc:	2300      	movs	r3, #0
 80144ce:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 80144d0:	6938      	ldr	r0, [r7, #16]
 80144d2:	f001 fa3d 	bl	8015950 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80144d6:	697b      	ldr	r3, [r7, #20]
}
 80144d8:	4618      	mov	r0, r3
 80144da:	3718      	adds	r7, #24
 80144dc:	46bd      	mov	sp, r7
 80144de:	bd80      	pop	{r7, pc}

080144e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80144e0:	b480      	push	{r7}
 80144e2:	b085      	sub	sp, #20
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	60f8      	str	r0, [r7, #12]
 80144e8:	60b9      	str	r1, [r7, #8]
 80144ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	4a07      	ldr	r2, [pc, #28]	; (801450c <vApplicationGetIdleTaskMemory+0x2c>)
 80144f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80144f2:	68bb      	ldr	r3, [r7, #8]
 80144f4:	4a06      	ldr	r2, [pc, #24]	; (8014510 <vApplicationGetIdleTaskMemory+0x30>)
 80144f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2280      	movs	r2, #128	; 0x80
 80144fc:	601a      	str	r2, [r3, #0]
}
 80144fe:	bf00      	nop
 8014500:	3714      	adds	r7, #20
 8014502:	46bd      	mov	sp, r7
 8014504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014508:	4770      	bx	lr
 801450a:	bf00      	nop
 801450c:	20004b3c 	.word	0x20004b3c
 8014510:	20004b98 	.word	0x20004b98

08014514 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8014514:	b480      	push	{r7}
 8014516:	b085      	sub	sp, #20
 8014518:	af00      	add	r7, sp, #0
 801451a:	60f8      	str	r0, [r7, #12]
 801451c:	60b9      	str	r1, [r7, #8]
 801451e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	4a07      	ldr	r2, [pc, #28]	; (8014540 <vApplicationGetTimerTaskMemory+0x2c>)
 8014524:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8014526:	68bb      	ldr	r3, [r7, #8]
 8014528:	4a06      	ldr	r2, [pc, #24]	; (8014544 <vApplicationGetTimerTaskMemory+0x30>)
 801452a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014532:	601a      	str	r2, [r3, #0]
}
 8014534:	bf00      	nop
 8014536:	3714      	adds	r7, #20
 8014538:	46bd      	mov	sp, r7
 801453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801453e:	4770      	bx	lr
 8014540:	20004d98 	.word	0x20004d98
 8014544:	20004df4 	.word	0x20004df4

08014548 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8014548:	b580      	push	{r7, lr}
 801454a:	b086      	sub	sp, #24
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d10a      	bne.n	801456c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014556:	f04f 0350 	mov.w	r3, #80	; 0x50
 801455a:	f383 8811 	msr	BASEPRI, r3
 801455e:	f3bf 8f6f 	isb	sy
 8014562:	f3bf 8f4f 	dsb	sy
 8014566:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014568:	bf00      	nop
 801456a:	e7fe      	b.n	801456a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 801456c:	2320      	movs	r3, #32
 801456e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8014570:	68bb      	ldr	r3, [r7, #8]
 8014572:	2b20      	cmp	r3, #32
 8014574:	d00a      	beq.n	801458c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8014576:	f04f 0350 	mov.w	r3, #80	; 0x50
 801457a:	f383 8811 	msr	BASEPRI, r3
 801457e:	f3bf 8f6f 	isb	sy
 8014582:	f3bf 8f4f 	dsb	sy
 8014586:	60fb      	str	r3, [r7, #12]
}
 8014588:	bf00      	nop
 801458a:	e7fe      	b.n	801458a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8014590:	697b      	ldr	r3, [r7, #20]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d00a      	beq.n	80145ac <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8014596:	697b      	ldr	r3, [r7, #20]
 8014598:	2200      	movs	r2, #0
 801459a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801459c:	697b      	ldr	r3, [r7, #20]
 801459e:	3304      	adds	r3, #4
 80145a0:	4618      	mov	r0, r3
 80145a2:	f000 f9f5 	bl	8014990 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80145a6:	697b      	ldr	r3, [r7, #20]
 80145a8:	2201      	movs	r2, #1
 80145aa:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80145ac:	697b      	ldr	r3, [r7, #20]
	}
 80145ae:	4618      	mov	r0, r3
 80145b0:	3718      	adds	r7, #24
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd80      	pop	{r7, pc}

080145b6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80145b6:	b580      	push	{r7, lr}
 80145b8:	b082      	sub	sp, #8
 80145ba:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80145bc:	2020      	movs	r0, #32
 80145be:	f003 fae3 	bl	8017b88 <pvPortMalloc>
 80145c2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d00a      	beq.n	80145e0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	2200      	movs	r2, #0
 80145ce:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	3304      	adds	r3, #4
 80145d4:	4618      	mov	r0, r3
 80145d6:	f000 f9db 	bl	8014990 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	2200      	movs	r2, #0
 80145de:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80145e0:	687b      	ldr	r3, [r7, #4]
	}
 80145e2:	4618      	mov	r0, r3
 80145e4:	3708      	adds	r7, #8
 80145e6:	46bd      	mov	sp, r7
 80145e8:	bd80      	pop	{r7, pc}
	...

080145ec <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b090      	sub	sp, #64	; 0x40
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	60f8      	str	r0, [r7, #12]
 80145f4:	60b9      	str	r1, [r7, #8]
 80145f6:	607a      	str	r2, [r7, #4]
 80145f8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80145fe:	2300      	movs	r3, #0
 8014600:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8014602:	2300      	movs	r3, #0
 8014604:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d10a      	bne.n	8014622 <xEventGroupWaitBits+0x36>
	__asm volatile
 801460c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014610:	f383 8811 	msr	BASEPRI, r3
 8014614:	f3bf 8f6f 	isb	sy
 8014618:	f3bf 8f4f 	dsb	sy
 801461c:	623b      	str	r3, [r7, #32]
}
 801461e:	bf00      	nop
 8014620:	e7fe      	b.n	8014620 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8014622:	68bb      	ldr	r3, [r7, #8]
 8014624:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8014628:	2b00      	cmp	r3, #0
 801462a:	d00a      	beq.n	8014642 <xEventGroupWaitBits+0x56>
	__asm volatile
 801462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014630:	f383 8811 	msr	BASEPRI, r3
 8014634:	f3bf 8f6f 	isb	sy
 8014638:	f3bf 8f4f 	dsb	sy
 801463c:	61fb      	str	r3, [r7, #28]
}
 801463e:	bf00      	nop
 8014640:	e7fe      	b.n	8014640 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8014642:	68bb      	ldr	r3, [r7, #8]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d10a      	bne.n	801465e <xEventGroupWaitBits+0x72>
	__asm volatile
 8014648:	f04f 0350 	mov.w	r3, #80	; 0x50
 801464c:	f383 8811 	msr	BASEPRI, r3
 8014650:	f3bf 8f6f 	isb	sy
 8014654:	f3bf 8f4f 	dsb	sy
 8014658:	61bb      	str	r3, [r7, #24]
}
 801465a:	bf00      	nop
 801465c:	e7fe      	b.n	801465c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801465e:	f002 fa29 	bl	8016ab4 <xTaskGetSchedulerState>
 8014662:	4603      	mov	r3, r0
 8014664:	2b00      	cmp	r3, #0
 8014666:	d102      	bne.n	801466e <xEventGroupWaitBits+0x82>
 8014668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801466a:	2b00      	cmp	r3, #0
 801466c:	d101      	bne.n	8014672 <xEventGroupWaitBits+0x86>
 801466e:	2301      	movs	r3, #1
 8014670:	e000      	b.n	8014674 <xEventGroupWaitBits+0x88>
 8014672:	2300      	movs	r3, #0
 8014674:	2b00      	cmp	r3, #0
 8014676:	d10a      	bne.n	801468e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8014678:	f04f 0350 	mov.w	r3, #80	; 0x50
 801467c:	f383 8811 	msr	BASEPRI, r3
 8014680:	f3bf 8f6f 	isb	sy
 8014684:	f3bf 8f4f 	dsb	sy
 8014688:	617b      	str	r3, [r7, #20]
}
 801468a:	bf00      	nop
 801468c:	e7fe      	b.n	801468c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 801468e:	f001 fd6f 	bl	8016170 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8014692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8014698:	683a      	ldr	r2, [r7, #0]
 801469a:	68b9      	ldr	r1, [r7, #8]
 801469c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801469e:	f000 f940 	bl	8014922 <prvTestWaitCondition>
 80146a2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80146a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d00e      	beq.n	80146c8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80146aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146ac:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80146ae:	2300      	movs	r3, #0
 80146b0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d028      	beq.n	801470a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80146b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146ba:	681a      	ldr	r2, [r3, #0]
 80146bc:	68bb      	ldr	r3, [r7, #8]
 80146be:	43db      	mvns	r3, r3
 80146c0:	401a      	ands	r2, r3
 80146c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146c4:	601a      	str	r2, [r3, #0]
 80146c6:	e020      	b.n	801470a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80146c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d104      	bne.n	80146d8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80146ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146d0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80146d2:	2301      	movs	r3, #1
 80146d4:	633b      	str	r3, [r7, #48]	; 0x30
 80146d6:	e018      	b.n	801470a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d003      	beq.n	80146e6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80146de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80146e4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80146e6:	683b      	ldr	r3, [r7, #0]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d003      	beq.n	80146f4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80146ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80146f2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80146f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146f6:	1d18      	adds	r0, r3, #4
 80146f8:	68ba      	ldr	r2, [r7, #8]
 80146fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146fc:	4313      	orrs	r3, r2
 80146fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014700:	4619      	mov	r1, r3
 8014702:	f001 ff3f 	bl	8016584 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8014706:	2300      	movs	r3, #0
 8014708:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801470a:	f001 fd3f 	bl	801618c <xTaskResumeAll>
 801470e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8014710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014712:	2b00      	cmp	r3, #0
 8014714:	d031      	beq.n	801477a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8014716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014718:	2b00      	cmp	r3, #0
 801471a:	d107      	bne.n	801472c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 801471c:	4b19      	ldr	r3, [pc, #100]	; (8014784 <xEventGroupWaitBits+0x198>)
 801471e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014722:	601a      	str	r2, [r3, #0]
 8014724:	f3bf 8f4f 	dsb	sy
 8014728:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 801472c:	f002 fb38 	bl	8016da0 <uxTaskResetEventItemValue>
 8014730:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8014732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014738:	2b00      	cmp	r3, #0
 801473a:	d11a      	bne.n	8014772 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 801473c:	f003 f902 	bl	8017944 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8014740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8014746:	683a      	ldr	r2, [r7, #0]
 8014748:	68b9      	ldr	r1, [r7, #8]
 801474a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801474c:	f000 f8e9 	bl	8014922 <prvTestWaitCondition>
 8014750:	4603      	mov	r3, r0
 8014752:	2b00      	cmp	r3, #0
 8014754:	d009      	beq.n	801476a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d006      	beq.n	801476a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801475c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801475e:	681a      	ldr	r2, [r3, #0]
 8014760:	68bb      	ldr	r3, [r7, #8]
 8014762:	43db      	mvns	r3, r3
 8014764:	401a      	ands	r2, r3
 8014766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014768:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801476a:	2301      	movs	r3, #1
 801476c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 801476e:	f003 f919 	bl	80179a4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8014772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014774:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014778:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 801477a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801477c:	4618      	mov	r0, r3
 801477e:	3740      	adds	r7, #64	; 0x40
 8014780:	46bd      	mov	sp, r7
 8014782:	bd80      	pop	{r7, pc}
 8014784:	e000ed04 	.word	0xe000ed04

08014788 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8014788:	b580      	push	{r7, lr}
 801478a:	b08e      	sub	sp, #56	; 0x38
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
 8014790:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8014792:	2300      	movs	r3, #0
 8014794:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801479a:	2300      	movs	r3, #0
 801479c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d10a      	bne.n	80147ba <xEventGroupSetBits+0x32>
	__asm volatile
 80147a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147a8:	f383 8811 	msr	BASEPRI, r3
 80147ac:	f3bf 8f6f 	isb	sy
 80147b0:	f3bf 8f4f 	dsb	sy
 80147b4:	613b      	str	r3, [r7, #16]
}
 80147b6:	bf00      	nop
 80147b8:	e7fe      	b.n	80147b8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80147ba:	683b      	ldr	r3, [r7, #0]
 80147bc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d00a      	beq.n	80147da <xEventGroupSetBits+0x52>
	__asm volatile
 80147c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147c8:	f383 8811 	msr	BASEPRI, r3
 80147cc:	f3bf 8f6f 	isb	sy
 80147d0:	f3bf 8f4f 	dsb	sy
 80147d4:	60fb      	str	r3, [r7, #12]
}
 80147d6:	bf00      	nop
 80147d8:	e7fe      	b.n	80147d8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80147da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147dc:	3304      	adds	r3, #4
 80147de:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80147e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147e2:	3308      	adds	r3, #8
 80147e4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80147e6:	f001 fcc3 	bl	8016170 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80147ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ec:	68db      	ldr	r3, [r3, #12]
 80147ee:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80147f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147f2:	681a      	ldr	r2, [r3, #0]
 80147f4:	683b      	ldr	r3, [r7, #0]
 80147f6:	431a      	orrs	r2, r3
 80147f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147fa:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80147fc:	e03c      	b.n	8014878 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80147fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014800:	685b      	ldr	r3, [r3, #4]
 8014802:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8014804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801480a:	2300      	movs	r3, #0
 801480c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801480e:	69bb      	ldr	r3, [r7, #24]
 8014810:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8014814:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8014816:	69bb      	ldr	r3, [r7, #24]
 8014818:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801481c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801481e:	697b      	ldr	r3, [r7, #20]
 8014820:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014824:	2b00      	cmp	r3, #0
 8014826:	d108      	bne.n	801483a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8014828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801482a:	681a      	ldr	r2, [r3, #0]
 801482c:	69bb      	ldr	r3, [r7, #24]
 801482e:	4013      	ands	r3, r2
 8014830:	2b00      	cmp	r3, #0
 8014832:	d00b      	beq.n	801484c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8014834:	2301      	movs	r3, #1
 8014836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014838:	e008      	b.n	801484c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801483c:	681a      	ldr	r2, [r3, #0]
 801483e:	69bb      	ldr	r3, [r7, #24]
 8014840:	4013      	ands	r3, r2
 8014842:	69ba      	ldr	r2, [r7, #24]
 8014844:	429a      	cmp	r2, r3
 8014846:	d101      	bne.n	801484c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8014848:	2301      	movs	r3, #1
 801484a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 801484c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801484e:	2b00      	cmp	r3, #0
 8014850:	d010      	beq.n	8014874 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8014852:	697b      	ldr	r3, [r7, #20]
 8014854:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014858:	2b00      	cmp	r3, #0
 801485a:	d003      	beq.n	8014864 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 801485c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801485e:	69bb      	ldr	r3, [r7, #24]
 8014860:	4313      	orrs	r3, r2
 8014862:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8014864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801486c:	4619      	mov	r1, r3
 801486e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014870:	f001 ff54 	bl	801671c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8014874:	69fb      	ldr	r3, [r7, #28]
 8014876:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8014878:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801487a:	6a3b      	ldr	r3, [r7, #32]
 801487c:	429a      	cmp	r2, r3
 801487e:	d1be      	bne.n	80147fe <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8014880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014882:	681a      	ldr	r2, [r3, #0]
 8014884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014886:	43db      	mvns	r3, r3
 8014888:	401a      	ands	r2, r3
 801488a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801488c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 801488e:	f001 fc7d 	bl	801618c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8014892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014894:	681b      	ldr	r3, [r3, #0]
}
 8014896:	4618      	mov	r0, r3
 8014898:	3738      	adds	r7, #56	; 0x38
 801489a:	46bd      	mov	sp, r7
 801489c:	bd80      	pop	{r7, pc}

0801489e <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 801489e:	b580      	push	{r7, lr}
 80148a0:	b086      	sub	sp, #24
 80148a2:	af00      	add	r7, sp, #0
 80148a4:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = xEventGroup;
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	617b      	str	r3, [r7, #20]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 80148aa:	697b      	ldr	r3, [r7, #20]
 80148ac:	3304      	adds	r3, #4
 80148ae:	613b      	str	r3, [r7, #16]

	vTaskSuspendAll();
 80148b0:	f001 fc5e 	bl	8016170 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80148b4:	e017      	b.n	80148e6 <vEventGroupDelete+0x48>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 80148b6:	693b      	ldr	r3, [r7, #16]
 80148b8:	68da      	ldr	r2, [r3, #12]
 80148ba:	693b      	ldr	r3, [r7, #16]
 80148bc:	3308      	adds	r3, #8
 80148be:	429a      	cmp	r2, r3
 80148c0:	d10a      	bne.n	80148d8 <vEventGroupDelete+0x3a>
	__asm volatile
 80148c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148c6:	f383 8811 	msr	BASEPRI, r3
 80148ca:	f3bf 8f6f 	isb	sy
 80148ce:	f3bf 8f4f 	dsb	sy
 80148d2:	60fb      	str	r3, [r7, #12]
}
 80148d4:	bf00      	nop
 80148d6:	e7fe      	b.n	80148d6 <vEventGroupDelete+0x38>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 80148d8:	693b      	ldr	r3, [r7, #16]
 80148da:	68db      	ldr	r3, [r3, #12]
 80148dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80148e0:	4618      	mov	r0, r3
 80148e2:	f001 ff1b 	bl	801671c <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80148e6:	693b      	ldr	r3, [r7, #16]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d1e3      	bne.n	80148b6 <vEventGroupDelete+0x18>
		}
		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
		{
			/* The event group could have been allocated statically or
			dynamically, so check before attempting to free the memory. */
			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80148ee:	697b      	ldr	r3, [r7, #20]
 80148f0:	7f1b      	ldrb	r3, [r3, #28]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d102      	bne.n	80148fc <vEventGroupDelete+0x5e>
			{
				vPortFree( pxEventBits );
 80148f6:	6978      	ldr	r0, [r7, #20]
 80148f8:	f003 fa12 	bl	8017d20 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 80148fc:	f001 fc46 	bl	801618c <xTaskResumeAll>
}
 8014900:	bf00      	nop
 8014902:	3718      	adds	r7, #24
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}

08014908 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8014908:	b580      	push	{r7, lr}
 801490a:	b082      	sub	sp, #8
 801490c:	af00      	add	r7, sp, #0
 801490e:	6078      	str	r0, [r7, #4]
 8014910:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8014912:	6839      	ldr	r1, [r7, #0]
 8014914:	6878      	ldr	r0, [r7, #4]
 8014916:	f7ff ff37 	bl	8014788 <xEventGroupSetBits>
}
 801491a:	bf00      	nop
 801491c:	3708      	adds	r7, #8
 801491e:	46bd      	mov	sp, r7
 8014920:	bd80      	pop	{r7, pc}

08014922 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8014922:	b480      	push	{r7}
 8014924:	b087      	sub	sp, #28
 8014926:	af00      	add	r7, sp, #0
 8014928:	60f8      	str	r0, [r7, #12]
 801492a:	60b9      	str	r1, [r7, #8]
 801492c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801492e:	2300      	movs	r3, #0
 8014930:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d107      	bne.n	8014948 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8014938:	68fa      	ldr	r2, [r7, #12]
 801493a:	68bb      	ldr	r3, [r7, #8]
 801493c:	4013      	ands	r3, r2
 801493e:	2b00      	cmp	r3, #0
 8014940:	d00a      	beq.n	8014958 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8014942:	2301      	movs	r3, #1
 8014944:	617b      	str	r3, [r7, #20]
 8014946:	e007      	b.n	8014958 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8014948:	68fa      	ldr	r2, [r7, #12]
 801494a:	68bb      	ldr	r3, [r7, #8]
 801494c:	4013      	ands	r3, r2
 801494e:	68ba      	ldr	r2, [r7, #8]
 8014950:	429a      	cmp	r2, r3
 8014952:	d101      	bne.n	8014958 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8014954:	2301      	movs	r3, #1
 8014956:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8014958:	697b      	ldr	r3, [r7, #20]
}
 801495a:	4618      	mov	r0, r3
 801495c:	371c      	adds	r7, #28
 801495e:	46bd      	mov	sp, r7
 8014960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014964:	4770      	bx	lr
	...

08014968 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014968:	b580      	push	{r7, lr}
 801496a:	b086      	sub	sp, #24
 801496c:	af00      	add	r7, sp, #0
 801496e:	60f8      	str	r0, [r7, #12]
 8014970:	60b9      	str	r1, [r7, #8]
 8014972:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	68ba      	ldr	r2, [r7, #8]
 8014978:	68f9      	ldr	r1, [r7, #12]
 801497a:	4804      	ldr	r0, [pc, #16]	; (801498c <xEventGroupSetBitsFromISR+0x24>)
 801497c:	f002 fe98 	bl	80176b0 <xTimerPendFunctionCallFromISR>
 8014980:	6178      	str	r0, [r7, #20]

		return xReturn;
 8014982:	697b      	ldr	r3, [r7, #20]
	}
 8014984:	4618      	mov	r0, r3
 8014986:	3718      	adds	r7, #24
 8014988:	46bd      	mov	sp, r7
 801498a:	bd80      	pop	{r7, pc}
 801498c:	08014909 	.word	0x08014909

08014990 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014990:	b480      	push	{r7}
 8014992:	b083      	sub	sp, #12
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	f103 0208 	add.w	r2, r3, #8
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	f04f 32ff 	mov.w	r2, #4294967295
 80149a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	f103 0208 	add.w	r2, r3, #8
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	f103 0208 	add.w	r2, r3, #8
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	2200      	movs	r2, #0
 80149c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80149c4:	bf00      	nop
 80149c6:	370c      	adds	r7, #12
 80149c8:	46bd      	mov	sp, r7
 80149ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ce:	4770      	bx	lr

080149d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80149d0:	b480      	push	{r7}
 80149d2:	b083      	sub	sp, #12
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	2200      	movs	r2, #0
 80149dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80149de:	bf00      	nop
 80149e0:	370c      	adds	r7, #12
 80149e2:	46bd      	mov	sp, r7
 80149e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e8:	4770      	bx	lr

080149ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80149ea:	b480      	push	{r7}
 80149ec:	b085      	sub	sp, #20
 80149ee:	af00      	add	r7, sp, #0
 80149f0:	6078      	str	r0, [r7, #4]
 80149f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	685b      	ldr	r3, [r3, #4]
 80149f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80149fa:	683b      	ldr	r3, [r7, #0]
 80149fc:	68fa      	ldr	r2, [r7, #12]
 80149fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	689a      	ldr	r2, [r3, #8]
 8014a04:	683b      	ldr	r3, [r7, #0]
 8014a06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	689b      	ldr	r3, [r3, #8]
 8014a0c:	683a      	ldr	r2, [r7, #0]
 8014a0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	683a      	ldr	r2, [r7, #0]
 8014a14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014a16:	683b      	ldr	r3, [r7, #0]
 8014a18:	687a      	ldr	r2, [r7, #4]
 8014a1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	1c5a      	adds	r2, r3, #1
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	601a      	str	r2, [r3, #0]
}
 8014a26:	bf00      	nop
 8014a28:	3714      	adds	r7, #20
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a30:	4770      	bx	lr

08014a32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014a32:	b480      	push	{r7}
 8014a34:	b085      	sub	sp, #20
 8014a36:	af00      	add	r7, sp, #0
 8014a38:	6078      	str	r0, [r7, #4]
 8014a3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014a3c:	683b      	ldr	r3, [r7, #0]
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014a42:	68bb      	ldr	r3, [r7, #8]
 8014a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a48:	d103      	bne.n	8014a52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	691b      	ldr	r3, [r3, #16]
 8014a4e:	60fb      	str	r3, [r7, #12]
 8014a50:	e00c      	b.n	8014a6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	3308      	adds	r3, #8
 8014a56:	60fb      	str	r3, [r7, #12]
 8014a58:	e002      	b.n	8014a60 <vListInsert+0x2e>
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	685b      	ldr	r3, [r3, #4]
 8014a5e:	60fb      	str	r3, [r7, #12]
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	685b      	ldr	r3, [r3, #4]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	68ba      	ldr	r2, [r7, #8]
 8014a68:	429a      	cmp	r2, r3
 8014a6a:	d2f6      	bcs.n	8014a5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	685a      	ldr	r2, [r3, #4]
 8014a70:	683b      	ldr	r3, [r7, #0]
 8014a72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014a74:	683b      	ldr	r3, [r7, #0]
 8014a76:	685b      	ldr	r3, [r3, #4]
 8014a78:	683a      	ldr	r2, [r7, #0]
 8014a7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014a7c:	683b      	ldr	r3, [r7, #0]
 8014a7e:	68fa      	ldr	r2, [r7, #12]
 8014a80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	683a      	ldr	r2, [r7, #0]
 8014a86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014a88:	683b      	ldr	r3, [r7, #0]
 8014a8a:	687a      	ldr	r2, [r7, #4]
 8014a8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	1c5a      	adds	r2, r3, #1
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	601a      	str	r2, [r3, #0]
}
 8014a98:	bf00      	nop
 8014a9a:	3714      	adds	r7, #20
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa2:	4770      	bx	lr

08014aa4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014aa4:	b480      	push	{r7}
 8014aa6:	b085      	sub	sp, #20
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	691b      	ldr	r3, [r3, #16]
 8014ab0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	685b      	ldr	r3, [r3, #4]
 8014ab6:	687a      	ldr	r2, [r7, #4]
 8014ab8:	6892      	ldr	r2, [r2, #8]
 8014aba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	689b      	ldr	r3, [r3, #8]
 8014ac0:	687a      	ldr	r2, [r7, #4]
 8014ac2:	6852      	ldr	r2, [r2, #4]
 8014ac4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	685b      	ldr	r3, [r3, #4]
 8014aca:	687a      	ldr	r2, [r7, #4]
 8014acc:	429a      	cmp	r2, r3
 8014ace:	d103      	bne.n	8014ad8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	689a      	ldr	r2, [r3, #8]
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	2200      	movs	r2, #0
 8014adc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	1e5a      	subs	r2, r3, #1
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	681b      	ldr	r3, [r3, #0]
}
 8014aec:	4618      	mov	r0, r3
 8014aee:	3714      	adds	r7, #20
 8014af0:	46bd      	mov	sp, r7
 8014af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af6:	4770      	bx	lr

08014af8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b084      	sub	sp, #16
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
 8014b00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d10a      	bne.n	8014b22 <xQueueGenericReset+0x2a>
	__asm volatile
 8014b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b10:	f383 8811 	msr	BASEPRI, r3
 8014b14:	f3bf 8f6f 	isb	sy
 8014b18:	f3bf 8f4f 	dsb	sy
 8014b1c:	60bb      	str	r3, [r7, #8]
}
 8014b1e:	bf00      	nop
 8014b20:	e7fe      	b.n	8014b20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8014b22:	f002 ff0f 	bl	8017944 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	681a      	ldr	r2, [r3, #0]
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b2e:	68f9      	ldr	r1, [r7, #12]
 8014b30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014b32:	fb01 f303 	mul.w	r3, r1, r3
 8014b36:	441a      	add	r2, r3
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	2200      	movs	r2, #0
 8014b40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	681a      	ldr	r2, [r3, #0]
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	681a      	ldr	r2, [r3, #0]
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b52:	3b01      	subs	r3, #1
 8014b54:	68f9      	ldr	r1, [r7, #12]
 8014b56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014b58:	fb01 f303 	mul.w	r3, r1, r3
 8014b5c:	441a      	add	r2, r3
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	22ff      	movs	r2, #255	; 0xff
 8014b66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	22ff      	movs	r2, #255	; 0xff
 8014b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8014b72:	683b      	ldr	r3, [r7, #0]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d114      	bne.n	8014ba2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	691b      	ldr	r3, [r3, #16]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d01a      	beq.n	8014bb6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	3310      	adds	r3, #16
 8014b84:	4618      	mov	r0, r3
 8014b86:	f001 fd65 	bl	8016654 <xTaskRemoveFromEventList>
 8014b8a:	4603      	mov	r3, r0
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d012      	beq.n	8014bb6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014b90:	4b0c      	ldr	r3, [pc, #48]	; (8014bc4 <xQueueGenericReset+0xcc>)
 8014b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b96:	601a      	str	r2, [r3, #0]
 8014b98:	f3bf 8f4f 	dsb	sy
 8014b9c:	f3bf 8f6f 	isb	sy
 8014ba0:	e009      	b.n	8014bb6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	3310      	adds	r3, #16
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f7ff fef2 	bl	8014990 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	3324      	adds	r3, #36	; 0x24
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	f7ff feed 	bl	8014990 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014bb6:	f002 fef5 	bl	80179a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014bba:	2301      	movs	r3, #1
}
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	3710      	adds	r7, #16
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	bd80      	pop	{r7, pc}
 8014bc4:	e000ed04 	.word	0xe000ed04

08014bc8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	b08e      	sub	sp, #56	; 0x38
 8014bcc:	af02      	add	r7, sp, #8
 8014bce:	60f8      	str	r0, [r7, #12]
 8014bd0:	60b9      	str	r1, [r7, #8]
 8014bd2:	607a      	str	r2, [r7, #4]
 8014bd4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d10a      	bne.n	8014bf2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8014bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014be0:	f383 8811 	msr	BASEPRI, r3
 8014be4:	f3bf 8f6f 	isb	sy
 8014be8:	f3bf 8f4f 	dsb	sy
 8014bec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014bee:	bf00      	nop
 8014bf0:	e7fe      	b.n	8014bf0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014bf2:	683b      	ldr	r3, [r7, #0]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d10a      	bne.n	8014c0e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8014bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bfc:	f383 8811 	msr	BASEPRI, r3
 8014c00:	f3bf 8f6f 	isb	sy
 8014c04:	f3bf 8f4f 	dsb	sy
 8014c08:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014c0a:	bf00      	nop
 8014c0c:	e7fe      	b.n	8014c0c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d002      	beq.n	8014c1a <xQueueGenericCreateStatic+0x52>
 8014c14:	68bb      	ldr	r3, [r7, #8]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d001      	beq.n	8014c1e <xQueueGenericCreateStatic+0x56>
 8014c1a:	2301      	movs	r3, #1
 8014c1c:	e000      	b.n	8014c20 <xQueueGenericCreateStatic+0x58>
 8014c1e:	2300      	movs	r3, #0
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d10a      	bne.n	8014c3a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8014c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c28:	f383 8811 	msr	BASEPRI, r3
 8014c2c:	f3bf 8f6f 	isb	sy
 8014c30:	f3bf 8f4f 	dsb	sy
 8014c34:	623b      	str	r3, [r7, #32]
}
 8014c36:	bf00      	nop
 8014c38:	e7fe      	b.n	8014c38 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d102      	bne.n	8014c46 <xQueueGenericCreateStatic+0x7e>
 8014c40:	68bb      	ldr	r3, [r7, #8]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d101      	bne.n	8014c4a <xQueueGenericCreateStatic+0x82>
 8014c46:	2301      	movs	r3, #1
 8014c48:	e000      	b.n	8014c4c <xQueueGenericCreateStatic+0x84>
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d10a      	bne.n	8014c66 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8014c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c54:	f383 8811 	msr	BASEPRI, r3
 8014c58:	f3bf 8f6f 	isb	sy
 8014c5c:	f3bf 8f4f 	dsb	sy
 8014c60:	61fb      	str	r3, [r7, #28]
}
 8014c62:	bf00      	nop
 8014c64:	e7fe      	b.n	8014c64 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014c66:	2350      	movs	r3, #80	; 0x50
 8014c68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014c6a:	697b      	ldr	r3, [r7, #20]
 8014c6c:	2b50      	cmp	r3, #80	; 0x50
 8014c6e:	d00a      	beq.n	8014c86 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8014c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c74:	f383 8811 	msr	BASEPRI, r3
 8014c78:	f3bf 8f6f 	isb	sy
 8014c7c:	f3bf 8f4f 	dsb	sy
 8014c80:	61bb      	str	r3, [r7, #24]
}
 8014c82:	bf00      	nop
 8014c84:	e7fe      	b.n	8014c84 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014c86:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014c88:	683b      	ldr	r3, [r7, #0]
 8014c8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d00d      	beq.n	8014cae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c94:	2201      	movs	r2, #1
 8014c96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014c9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8014c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ca0:	9300      	str	r3, [sp, #0]
 8014ca2:	4613      	mov	r3, r2
 8014ca4:	687a      	ldr	r2, [r7, #4]
 8014ca6:	68b9      	ldr	r1, [r7, #8]
 8014ca8:	68f8      	ldr	r0, [r7, #12]
 8014caa:	f000 f83f 	bl	8014d2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	3730      	adds	r7, #48	; 0x30
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	bd80      	pop	{r7, pc}

08014cb8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b08a      	sub	sp, #40	; 0x28
 8014cbc:	af02      	add	r7, sp, #8
 8014cbe:	60f8      	str	r0, [r7, #12]
 8014cc0:	60b9      	str	r1, [r7, #8]
 8014cc2:	4613      	mov	r3, r2
 8014cc4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d10a      	bne.n	8014ce2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8014ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cd0:	f383 8811 	msr	BASEPRI, r3
 8014cd4:	f3bf 8f6f 	isb	sy
 8014cd8:	f3bf 8f4f 	dsb	sy
 8014cdc:	613b      	str	r3, [r7, #16]
}
 8014cde:	bf00      	nop
 8014ce0:	e7fe      	b.n	8014ce0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	68ba      	ldr	r2, [r7, #8]
 8014ce6:	fb02 f303 	mul.w	r3, r2, r3
 8014cea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014cec:	69fb      	ldr	r3, [r7, #28]
 8014cee:	3350      	adds	r3, #80	; 0x50
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	f002 ff49 	bl	8017b88 <pvPortMalloc>
 8014cf6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014cf8:	69bb      	ldr	r3, [r7, #24]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d011      	beq.n	8014d22 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014cfe:	69bb      	ldr	r3, [r7, #24]
 8014d00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014d02:	697b      	ldr	r3, [r7, #20]
 8014d04:	3350      	adds	r3, #80	; 0x50
 8014d06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014d08:	69bb      	ldr	r3, [r7, #24]
 8014d0a:	2200      	movs	r2, #0
 8014d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014d10:	79fa      	ldrb	r2, [r7, #7]
 8014d12:	69bb      	ldr	r3, [r7, #24]
 8014d14:	9300      	str	r3, [sp, #0]
 8014d16:	4613      	mov	r3, r2
 8014d18:	697a      	ldr	r2, [r7, #20]
 8014d1a:	68b9      	ldr	r1, [r7, #8]
 8014d1c:	68f8      	ldr	r0, [r7, #12]
 8014d1e:	f000 f805 	bl	8014d2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014d22:	69bb      	ldr	r3, [r7, #24]
	}
 8014d24:	4618      	mov	r0, r3
 8014d26:	3720      	adds	r7, #32
 8014d28:	46bd      	mov	sp, r7
 8014d2a:	bd80      	pop	{r7, pc}

08014d2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014d2c:	b580      	push	{r7, lr}
 8014d2e:	b084      	sub	sp, #16
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	60f8      	str	r0, [r7, #12]
 8014d34:	60b9      	str	r1, [r7, #8]
 8014d36:	607a      	str	r2, [r7, #4]
 8014d38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014d3a:	68bb      	ldr	r3, [r7, #8]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d103      	bne.n	8014d48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014d40:	69bb      	ldr	r3, [r7, #24]
 8014d42:	69ba      	ldr	r2, [r7, #24]
 8014d44:	601a      	str	r2, [r3, #0]
 8014d46:	e002      	b.n	8014d4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014d48:	69bb      	ldr	r3, [r7, #24]
 8014d4a:	687a      	ldr	r2, [r7, #4]
 8014d4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014d4e:	69bb      	ldr	r3, [r7, #24]
 8014d50:	68fa      	ldr	r2, [r7, #12]
 8014d52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014d54:	69bb      	ldr	r3, [r7, #24]
 8014d56:	68ba      	ldr	r2, [r7, #8]
 8014d58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014d5a:	2101      	movs	r1, #1
 8014d5c:	69b8      	ldr	r0, [r7, #24]
 8014d5e:	f7ff fecb 	bl	8014af8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8014d62:	69bb      	ldr	r3, [r7, #24]
 8014d64:	78fa      	ldrb	r2, [r7, #3]
 8014d66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014d6a:	bf00      	nop
 8014d6c:	3710      	adds	r7, #16
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	bd80      	pop	{r7, pc}

08014d72 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8014d72:	b580      	push	{r7, lr}
 8014d74:	b082      	sub	sp, #8
 8014d76:	af00      	add	r7, sp, #0
 8014d78:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d00e      	beq.n	8014d9e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	2200      	movs	r2, #0
 8014d84:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	2200      	movs	r2, #0
 8014d8a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	2200      	movs	r2, #0
 8014d90:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8014d92:	2300      	movs	r3, #0
 8014d94:	2200      	movs	r2, #0
 8014d96:	2100      	movs	r1, #0
 8014d98:	6878      	ldr	r0, [r7, #4]
 8014d9a:	f000 f90b 	bl	8014fb4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8014d9e:	bf00      	nop
 8014da0:	3708      	adds	r7, #8
 8014da2:	46bd      	mov	sp, r7
 8014da4:	bd80      	pop	{r7, pc}

08014da6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8014da6:	b580      	push	{r7, lr}
 8014da8:	b086      	sub	sp, #24
 8014daa:	af00      	add	r7, sp, #0
 8014dac:	4603      	mov	r3, r0
 8014dae:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8014db0:	2301      	movs	r3, #1
 8014db2:	617b      	str	r3, [r7, #20]
 8014db4:	2300      	movs	r3, #0
 8014db6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8014db8:	79fb      	ldrb	r3, [r7, #7]
 8014dba:	461a      	mov	r2, r3
 8014dbc:	6939      	ldr	r1, [r7, #16]
 8014dbe:	6978      	ldr	r0, [r7, #20]
 8014dc0:	f7ff ff7a 	bl	8014cb8 <xQueueGenericCreate>
 8014dc4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8014dc6:	68f8      	ldr	r0, [r7, #12]
 8014dc8:	f7ff ffd3 	bl	8014d72 <prvInitialiseMutex>

		return xNewQueue;
 8014dcc:	68fb      	ldr	r3, [r7, #12]
	}
 8014dce:	4618      	mov	r0, r3
 8014dd0:	3718      	adds	r7, #24
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	bd80      	pop	{r7, pc}

08014dd6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8014dd6:	b580      	push	{r7, lr}
 8014dd8:	b088      	sub	sp, #32
 8014dda:	af02      	add	r7, sp, #8
 8014ddc:	4603      	mov	r3, r0
 8014dde:	6039      	str	r1, [r7, #0]
 8014de0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8014de2:	2301      	movs	r3, #1
 8014de4:	617b      	str	r3, [r7, #20]
 8014de6:	2300      	movs	r3, #0
 8014de8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8014dea:	79fb      	ldrb	r3, [r7, #7]
 8014dec:	9300      	str	r3, [sp, #0]
 8014dee:	683b      	ldr	r3, [r7, #0]
 8014df0:	2200      	movs	r2, #0
 8014df2:	6939      	ldr	r1, [r7, #16]
 8014df4:	6978      	ldr	r0, [r7, #20]
 8014df6:	f7ff fee7 	bl	8014bc8 <xQueueGenericCreateStatic>
 8014dfa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8014dfc:	68f8      	ldr	r0, [r7, #12]
 8014dfe:	f7ff ffb8 	bl	8014d72 <prvInitialiseMutex>

		return xNewQueue;
 8014e02:	68fb      	ldr	r3, [r7, #12]
	}
 8014e04:	4618      	mov	r0, r3
 8014e06:	3718      	adds	r7, #24
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	bd80      	pop	{r7, pc}

08014e0c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8014e0c:	b590      	push	{r4, r7, lr}
 8014e0e:	b087      	sub	sp, #28
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8014e18:	693b      	ldr	r3, [r7, #16]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d10a      	bne.n	8014e34 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8014e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e22:	f383 8811 	msr	BASEPRI, r3
 8014e26:	f3bf 8f6f 	isb	sy
 8014e2a:	f3bf 8f4f 	dsb	sy
 8014e2e:	60fb      	str	r3, [r7, #12]
}
 8014e30:	bf00      	nop
 8014e32:	e7fe      	b.n	8014e32 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8014e34:	693b      	ldr	r3, [r7, #16]
 8014e36:	689c      	ldr	r4, [r3, #8]
 8014e38:	f001 fe2c 	bl	8016a94 <xTaskGetCurrentTaskHandle>
 8014e3c:	4603      	mov	r3, r0
 8014e3e:	429c      	cmp	r4, r3
 8014e40:	d111      	bne.n	8014e66 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8014e42:	693b      	ldr	r3, [r7, #16]
 8014e44:	68db      	ldr	r3, [r3, #12]
 8014e46:	1e5a      	subs	r2, r3, #1
 8014e48:	693b      	ldr	r3, [r7, #16]
 8014e4a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8014e4c:	693b      	ldr	r3, [r7, #16]
 8014e4e:	68db      	ldr	r3, [r3, #12]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d105      	bne.n	8014e60 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8014e54:	2300      	movs	r3, #0
 8014e56:	2200      	movs	r2, #0
 8014e58:	2100      	movs	r1, #0
 8014e5a:	6938      	ldr	r0, [r7, #16]
 8014e5c:	f000 f8aa 	bl	8014fb4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8014e60:	2301      	movs	r3, #1
 8014e62:	617b      	str	r3, [r7, #20]
 8014e64:	e001      	b.n	8014e6a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8014e66:	2300      	movs	r3, #0
 8014e68:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8014e6a:	697b      	ldr	r3, [r7, #20]
	}
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	371c      	adds	r7, #28
 8014e70:	46bd      	mov	sp, r7
 8014e72:	bd90      	pop	{r4, r7, pc}

08014e74 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8014e74:	b590      	push	{r4, r7, lr}
 8014e76:	b087      	sub	sp, #28
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
 8014e7c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8014e82:	693b      	ldr	r3, [r7, #16]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d10a      	bne.n	8014e9e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8014e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e8c:	f383 8811 	msr	BASEPRI, r3
 8014e90:	f3bf 8f6f 	isb	sy
 8014e94:	f3bf 8f4f 	dsb	sy
 8014e98:	60fb      	str	r3, [r7, #12]
}
 8014e9a:	bf00      	nop
 8014e9c:	e7fe      	b.n	8014e9c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8014e9e:	693b      	ldr	r3, [r7, #16]
 8014ea0:	689c      	ldr	r4, [r3, #8]
 8014ea2:	f001 fdf7 	bl	8016a94 <xTaskGetCurrentTaskHandle>
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	429c      	cmp	r4, r3
 8014eaa:	d107      	bne.n	8014ebc <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8014eac:	693b      	ldr	r3, [r7, #16]
 8014eae:	68db      	ldr	r3, [r3, #12]
 8014eb0:	1c5a      	adds	r2, r3, #1
 8014eb2:	693b      	ldr	r3, [r7, #16]
 8014eb4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8014eb6:	2301      	movs	r3, #1
 8014eb8:	617b      	str	r3, [r7, #20]
 8014eba:	e00c      	b.n	8014ed6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8014ebc:	6839      	ldr	r1, [r7, #0]
 8014ebe:	6938      	ldr	r0, [r7, #16]
 8014ec0:	f000 fb7e 	bl	80155c0 <xQueueSemaphoreTake>
 8014ec4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8014ec6:	697b      	ldr	r3, [r7, #20]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d004      	beq.n	8014ed6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8014ecc:	693b      	ldr	r3, [r7, #16]
 8014ece:	68db      	ldr	r3, [r3, #12]
 8014ed0:	1c5a      	adds	r2, r3, #1
 8014ed2:	693b      	ldr	r3, [r7, #16]
 8014ed4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8014ed6:	697b      	ldr	r3, [r7, #20]
	}
 8014ed8:	4618      	mov	r0, r3
 8014eda:	371c      	adds	r7, #28
 8014edc:	46bd      	mov	sp, r7
 8014ede:	bd90      	pop	{r4, r7, pc}

08014ee0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b08a      	sub	sp, #40	; 0x28
 8014ee4:	af02      	add	r7, sp, #8
 8014ee6:	60f8      	str	r0, [r7, #12]
 8014ee8:	60b9      	str	r1, [r7, #8]
 8014eea:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d10a      	bne.n	8014f08 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8014ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ef6:	f383 8811 	msr	BASEPRI, r3
 8014efa:	f3bf 8f6f 	isb	sy
 8014efe:	f3bf 8f4f 	dsb	sy
 8014f02:	61bb      	str	r3, [r7, #24]
}
 8014f04:	bf00      	nop
 8014f06:	e7fe      	b.n	8014f06 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8014f08:	68ba      	ldr	r2, [r7, #8]
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	429a      	cmp	r2, r3
 8014f0e:	d90a      	bls.n	8014f26 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8014f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f14:	f383 8811 	msr	BASEPRI, r3
 8014f18:	f3bf 8f6f 	isb	sy
 8014f1c:	f3bf 8f4f 	dsb	sy
 8014f20:	617b      	str	r3, [r7, #20]
}
 8014f22:	bf00      	nop
 8014f24:	e7fe      	b.n	8014f24 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8014f26:	2302      	movs	r3, #2
 8014f28:	9300      	str	r3, [sp, #0]
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	2200      	movs	r2, #0
 8014f2e:	2100      	movs	r1, #0
 8014f30:	68f8      	ldr	r0, [r7, #12]
 8014f32:	f7ff fe49 	bl	8014bc8 <xQueueGenericCreateStatic>
 8014f36:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8014f38:	69fb      	ldr	r3, [r7, #28]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d002      	beq.n	8014f44 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8014f3e:	69fb      	ldr	r3, [r7, #28]
 8014f40:	68ba      	ldr	r2, [r7, #8]
 8014f42:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8014f44:	69fb      	ldr	r3, [r7, #28]
	}
 8014f46:	4618      	mov	r0, r3
 8014f48:	3720      	adds	r7, #32
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	bd80      	pop	{r7, pc}

08014f4e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8014f4e:	b580      	push	{r7, lr}
 8014f50:	b086      	sub	sp, #24
 8014f52:	af00      	add	r7, sp, #0
 8014f54:	6078      	str	r0, [r7, #4]
 8014f56:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d10a      	bne.n	8014f74 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8014f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f62:	f383 8811 	msr	BASEPRI, r3
 8014f66:	f3bf 8f6f 	isb	sy
 8014f6a:	f3bf 8f4f 	dsb	sy
 8014f6e:	613b      	str	r3, [r7, #16]
}
 8014f70:	bf00      	nop
 8014f72:	e7fe      	b.n	8014f72 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8014f74:	683a      	ldr	r2, [r7, #0]
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	429a      	cmp	r2, r3
 8014f7a:	d90a      	bls.n	8014f92 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8014f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f80:	f383 8811 	msr	BASEPRI, r3
 8014f84:	f3bf 8f6f 	isb	sy
 8014f88:	f3bf 8f4f 	dsb	sy
 8014f8c:	60fb      	str	r3, [r7, #12]
}
 8014f8e:	bf00      	nop
 8014f90:	e7fe      	b.n	8014f90 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8014f92:	2202      	movs	r2, #2
 8014f94:	2100      	movs	r1, #0
 8014f96:	6878      	ldr	r0, [r7, #4]
 8014f98:	f7ff fe8e 	bl	8014cb8 <xQueueGenericCreate>
 8014f9c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8014f9e:	697b      	ldr	r3, [r7, #20]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d002      	beq.n	8014faa <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8014fa4:	697b      	ldr	r3, [r7, #20]
 8014fa6:	683a      	ldr	r2, [r7, #0]
 8014fa8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8014faa:	697b      	ldr	r3, [r7, #20]
	}
 8014fac:	4618      	mov	r0, r3
 8014fae:	3718      	adds	r7, #24
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	bd80      	pop	{r7, pc}

08014fb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b08e      	sub	sp, #56	; 0x38
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	60f8      	str	r0, [r7, #12]
 8014fbc:	60b9      	str	r1, [r7, #8]
 8014fbe:	607a      	str	r2, [r7, #4]
 8014fc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d10a      	bne.n	8014fe6 <xQueueGenericSend+0x32>
	__asm volatile
 8014fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fd4:	f383 8811 	msr	BASEPRI, r3
 8014fd8:	f3bf 8f6f 	isb	sy
 8014fdc:	f3bf 8f4f 	dsb	sy
 8014fe0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014fe2:	bf00      	nop
 8014fe4:	e7fe      	b.n	8014fe4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014fe6:	68bb      	ldr	r3, [r7, #8]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d103      	bne.n	8014ff4 <xQueueGenericSend+0x40>
 8014fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d101      	bne.n	8014ff8 <xQueueGenericSend+0x44>
 8014ff4:	2301      	movs	r3, #1
 8014ff6:	e000      	b.n	8014ffa <xQueueGenericSend+0x46>
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d10a      	bne.n	8015014 <xQueueGenericSend+0x60>
	__asm volatile
 8014ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015002:	f383 8811 	msr	BASEPRI, r3
 8015006:	f3bf 8f6f 	isb	sy
 801500a:	f3bf 8f4f 	dsb	sy
 801500e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015010:	bf00      	nop
 8015012:	e7fe      	b.n	8015012 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015014:	683b      	ldr	r3, [r7, #0]
 8015016:	2b02      	cmp	r3, #2
 8015018:	d103      	bne.n	8015022 <xQueueGenericSend+0x6e>
 801501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801501c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801501e:	2b01      	cmp	r3, #1
 8015020:	d101      	bne.n	8015026 <xQueueGenericSend+0x72>
 8015022:	2301      	movs	r3, #1
 8015024:	e000      	b.n	8015028 <xQueueGenericSend+0x74>
 8015026:	2300      	movs	r3, #0
 8015028:	2b00      	cmp	r3, #0
 801502a:	d10a      	bne.n	8015042 <xQueueGenericSend+0x8e>
	__asm volatile
 801502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015030:	f383 8811 	msr	BASEPRI, r3
 8015034:	f3bf 8f6f 	isb	sy
 8015038:	f3bf 8f4f 	dsb	sy
 801503c:	623b      	str	r3, [r7, #32]
}
 801503e:	bf00      	nop
 8015040:	e7fe      	b.n	8015040 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015042:	f001 fd37 	bl	8016ab4 <xTaskGetSchedulerState>
 8015046:	4603      	mov	r3, r0
 8015048:	2b00      	cmp	r3, #0
 801504a:	d102      	bne.n	8015052 <xQueueGenericSend+0x9e>
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d101      	bne.n	8015056 <xQueueGenericSend+0xa2>
 8015052:	2301      	movs	r3, #1
 8015054:	e000      	b.n	8015058 <xQueueGenericSend+0xa4>
 8015056:	2300      	movs	r3, #0
 8015058:	2b00      	cmp	r3, #0
 801505a:	d10a      	bne.n	8015072 <xQueueGenericSend+0xbe>
	__asm volatile
 801505c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015060:	f383 8811 	msr	BASEPRI, r3
 8015064:	f3bf 8f6f 	isb	sy
 8015068:	f3bf 8f4f 	dsb	sy
 801506c:	61fb      	str	r3, [r7, #28]
}
 801506e:	bf00      	nop
 8015070:	e7fe      	b.n	8015070 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015072:	f002 fc67 	bl	8017944 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801507c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801507e:	429a      	cmp	r2, r3
 8015080:	d302      	bcc.n	8015088 <xQueueGenericSend+0xd4>
 8015082:	683b      	ldr	r3, [r7, #0]
 8015084:	2b02      	cmp	r3, #2
 8015086:	d129      	bne.n	80150dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015088:	683a      	ldr	r2, [r7, #0]
 801508a:	68b9      	ldr	r1, [r7, #8]
 801508c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801508e:	f000 fc9a 	bl	80159c6 <prvCopyDataToQueue>
 8015092:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015098:	2b00      	cmp	r3, #0
 801509a:	d010      	beq.n	80150be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801509e:	3324      	adds	r3, #36	; 0x24
 80150a0:	4618      	mov	r0, r3
 80150a2:	f001 fad7 	bl	8016654 <xTaskRemoveFromEventList>
 80150a6:	4603      	mov	r3, r0
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d013      	beq.n	80150d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80150ac:	4b3f      	ldr	r3, [pc, #252]	; (80151ac <xQueueGenericSend+0x1f8>)
 80150ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150b2:	601a      	str	r2, [r3, #0]
 80150b4:	f3bf 8f4f 	dsb	sy
 80150b8:	f3bf 8f6f 	isb	sy
 80150bc:	e00a      	b.n	80150d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80150be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d007      	beq.n	80150d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80150c4:	4b39      	ldr	r3, [pc, #228]	; (80151ac <xQueueGenericSend+0x1f8>)
 80150c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150ca:	601a      	str	r2, [r3, #0]
 80150cc:	f3bf 8f4f 	dsb	sy
 80150d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80150d4:	f002 fc66 	bl	80179a4 <vPortExitCritical>
				return pdPASS;
 80150d8:	2301      	movs	r3, #1
 80150da:	e063      	b.n	80151a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d103      	bne.n	80150ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80150e2:	f002 fc5f 	bl	80179a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80150e6:	2300      	movs	r3, #0
 80150e8:	e05c      	b.n	80151a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80150ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d106      	bne.n	80150fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80150f0:	f107 0314 	add.w	r3, r7, #20
 80150f4:	4618      	mov	r0, r3
 80150f6:	f001 fb73 	bl	80167e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80150fa:	2301      	movs	r3, #1
 80150fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80150fe:	f002 fc51 	bl	80179a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015102:	f001 f835 	bl	8016170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015106:	f002 fc1d 	bl	8017944 <vPortEnterCritical>
 801510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801510c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015110:	b25b      	sxtb	r3, r3
 8015112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015116:	d103      	bne.n	8015120 <xQueueGenericSend+0x16c>
 8015118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801511a:	2200      	movs	r2, #0
 801511c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015122:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015126:	b25b      	sxtb	r3, r3
 8015128:	f1b3 3fff 	cmp.w	r3, #4294967295
 801512c:	d103      	bne.n	8015136 <xQueueGenericSend+0x182>
 801512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015130:	2200      	movs	r2, #0
 8015132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015136:	f002 fc35 	bl	80179a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801513a:	1d3a      	adds	r2, r7, #4
 801513c:	f107 0314 	add.w	r3, r7, #20
 8015140:	4611      	mov	r1, r2
 8015142:	4618      	mov	r0, r3
 8015144:	f001 fb62 	bl	801680c <xTaskCheckForTimeOut>
 8015148:	4603      	mov	r3, r0
 801514a:	2b00      	cmp	r3, #0
 801514c:	d124      	bne.n	8015198 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801514e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015150:	f000 fd31 	bl	8015bb6 <prvIsQueueFull>
 8015154:	4603      	mov	r3, r0
 8015156:	2b00      	cmp	r3, #0
 8015158:	d018      	beq.n	801518c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801515a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801515c:	3310      	adds	r3, #16
 801515e:	687a      	ldr	r2, [r7, #4]
 8015160:	4611      	mov	r1, r2
 8015162:	4618      	mov	r0, r3
 8015164:	f001 f9ea 	bl	801653c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801516a:	f000 fcbc 	bl	8015ae6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801516e:	f001 f80d 	bl	801618c <xTaskResumeAll>
 8015172:	4603      	mov	r3, r0
 8015174:	2b00      	cmp	r3, #0
 8015176:	f47f af7c 	bne.w	8015072 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801517a:	4b0c      	ldr	r3, [pc, #48]	; (80151ac <xQueueGenericSend+0x1f8>)
 801517c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015180:	601a      	str	r2, [r3, #0]
 8015182:	f3bf 8f4f 	dsb	sy
 8015186:	f3bf 8f6f 	isb	sy
 801518a:	e772      	b.n	8015072 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801518c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801518e:	f000 fcaa 	bl	8015ae6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015192:	f000 fffb 	bl	801618c <xTaskResumeAll>
 8015196:	e76c      	b.n	8015072 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801519a:	f000 fca4 	bl	8015ae6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801519e:	f000 fff5 	bl	801618c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80151a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80151a4:	4618      	mov	r0, r3
 80151a6:	3738      	adds	r7, #56	; 0x38
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}
 80151ac:	e000ed04 	.word	0xe000ed04

080151b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80151b0:	b580      	push	{r7, lr}
 80151b2:	b090      	sub	sp, #64	; 0x40
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	60f8      	str	r0, [r7, #12]
 80151b8:	60b9      	str	r1, [r7, #8]
 80151ba:	607a      	str	r2, [r7, #4]
 80151bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80151c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d10a      	bne.n	80151de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80151c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151cc:	f383 8811 	msr	BASEPRI, r3
 80151d0:	f3bf 8f6f 	isb	sy
 80151d4:	f3bf 8f4f 	dsb	sy
 80151d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80151da:	bf00      	nop
 80151dc:	e7fe      	b.n	80151dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80151de:	68bb      	ldr	r3, [r7, #8]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d103      	bne.n	80151ec <xQueueGenericSendFromISR+0x3c>
 80151e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d101      	bne.n	80151f0 <xQueueGenericSendFromISR+0x40>
 80151ec:	2301      	movs	r3, #1
 80151ee:	e000      	b.n	80151f2 <xQueueGenericSendFromISR+0x42>
 80151f0:	2300      	movs	r3, #0
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d10a      	bne.n	801520c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80151f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151fa:	f383 8811 	msr	BASEPRI, r3
 80151fe:	f3bf 8f6f 	isb	sy
 8015202:	f3bf 8f4f 	dsb	sy
 8015206:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015208:	bf00      	nop
 801520a:	e7fe      	b.n	801520a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801520c:	683b      	ldr	r3, [r7, #0]
 801520e:	2b02      	cmp	r3, #2
 8015210:	d103      	bne.n	801521a <xQueueGenericSendFromISR+0x6a>
 8015212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015216:	2b01      	cmp	r3, #1
 8015218:	d101      	bne.n	801521e <xQueueGenericSendFromISR+0x6e>
 801521a:	2301      	movs	r3, #1
 801521c:	e000      	b.n	8015220 <xQueueGenericSendFromISR+0x70>
 801521e:	2300      	movs	r3, #0
 8015220:	2b00      	cmp	r3, #0
 8015222:	d10a      	bne.n	801523a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8015224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015228:	f383 8811 	msr	BASEPRI, r3
 801522c:	f3bf 8f6f 	isb	sy
 8015230:	f3bf 8f4f 	dsb	sy
 8015234:	623b      	str	r3, [r7, #32]
}
 8015236:	bf00      	nop
 8015238:	e7fe      	b.n	8015238 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801523a:	f002 fc65 	bl	8017b08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801523e:	f3ef 8211 	mrs	r2, BASEPRI
 8015242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015246:	f383 8811 	msr	BASEPRI, r3
 801524a:	f3bf 8f6f 	isb	sy
 801524e:	f3bf 8f4f 	dsb	sy
 8015252:	61fa      	str	r2, [r7, #28]
 8015254:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015256:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015258:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801525c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801525e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015262:	429a      	cmp	r2, r3
 8015264:	d302      	bcc.n	801526c <xQueueGenericSendFromISR+0xbc>
 8015266:	683b      	ldr	r3, [r7, #0]
 8015268:	2b02      	cmp	r3, #2
 801526a:	d12f      	bne.n	80152cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801526c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801526e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801527a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801527c:	683a      	ldr	r2, [r7, #0]
 801527e:	68b9      	ldr	r1, [r7, #8]
 8015280:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015282:	f000 fba0 	bl	80159c6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015286:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801528a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801528e:	d112      	bne.n	80152b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015294:	2b00      	cmp	r3, #0
 8015296:	d016      	beq.n	80152c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801529a:	3324      	adds	r3, #36	; 0x24
 801529c:	4618      	mov	r0, r3
 801529e:	f001 f9d9 	bl	8016654 <xTaskRemoveFromEventList>
 80152a2:	4603      	mov	r3, r0
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d00e      	beq.n	80152c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d00b      	beq.n	80152c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	2201      	movs	r2, #1
 80152b2:	601a      	str	r2, [r3, #0]
 80152b4:	e007      	b.n	80152c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80152b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80152ba:	3301      	adds	r3, #1
 80152bc:	b2db      	uxtb	r3, r3
 80152be:	b25a      	sxtb	r2, r3
 80152c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80152c6:	2301      	movs	r3, #1
 80152c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80152ca:	e001      	b.n	80152d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80152cc:	2300      	movs	r3, #0
 80152ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80152d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80152d4:	697b      	ldr	r3, [r7, #20]
 80152d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80152da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80152dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80152de:	4618      	mov	r0, r3
 80152e0:	3740      	adds	r7, #64	; 0x40
 80152e2:	46bd      	mov	sp, r7
 80152e4:	bd80      	pop	{r7, pc}

080152e6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80152e6:	b580      	push	{r7, lr}
 80152e8:	b08e      	sub	sp, #56	; 0x38
 80152ea:	af00      	add	r7, sp, #0
 80152ec:	6078      	str	r0, [r7, #4]
 80152ee:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80152f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d10a      	bne.n	8015310 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80152fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152fe:	f383 8811 	msr	BASEPRI, r3
 8015302:	f3bf 8f6f 	isb	sy
 8015306:	f3bf 8f4f 	dsb	sy
 801530a:	623b      	str	r3, [r7, #32]
}
 801530c:	bf00      	nop
 801530e:	e7fe      	b.n	801530e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015314:	2b00      	cmp	r3, #0
 8015316:	d00a      	beq.n	801532e <xQueueGiveFromISR+0x48>
	__asm volatile
 8015318:	f04f 0350 	mov.w	r3, #80	; 0x50
 801531c:	f383 8811 	msr	BASEPRI, r3
 8015320:	f3bf 8f6f 	isb	sy
 8015324:	f3bf 8f4f 	dsb	sy
 8015328:	61fb      	str	r3, [r7, #28]
}
 801532a:	bf00      	nop
 801532c:	e7fe      	b.n	801532c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d103      	bne.n	801533e <xQueueGiveFromISR+0x58>
 8015336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015338:	689b      	ldr	r3, [r3, #8]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d101      	bne.n	8015342 <xQueueGiveFromISR+0x5c>
 801533e:	2301      	movs	r3, #1
 8015340:	e000      	b.n	8015344 <xQueueGiveFromISR+0x5e>
 8015342:	2300      	movs	r3, #0
 8015344:	2b00      	cmp	r3, #0
 8015346:	d10a      	bne.n	801535e <xQueueGiveFromISR+0x78>
	__asm volatile
 8015348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801534c:	f383 8811 	msr	BASEPRI, r3
 8015350:	f3bf 8f6f 	isb	sy
 8015354:	f3bf 8f4f 	dsb	sy
 8015358:	61bb      	str	r3, [r7, #24]
}
 801535a:	bf00      	nop
 801535c:	e7fe      	b.n	801535c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801535e:	f002 fbd3 	bl	8017b08 <vPortValidateInterruptPriority>
	__asm volatile
 8015362:	f3ef 8211 	mrs	r2, BASEPRI
 8015366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801536a:	f383 8811 	msr	BASEPRI, r3
 801536e:	f3bf 8f6f 	isb	sy
 8015372:	f3bf 8f4f 	dsb	sy
 8015376:	617a      	str	r2, [r7, #20]
 8015378:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801537a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801537c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015382:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801538a:	429a      	cmp	r2, r3
 801538c:	d22b      	bcs.n	80153e6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015390:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801539a:	1c5a      	adds	r2, r3, #1
 801539c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801539e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80153a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80153a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153a8:	d112      	bne.n	80153d0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80153aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d016      	beq.n	80153e0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80153b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153b4:	3324      	adds	r3, #36	; 0x24
 80153b6:	4618      	mov	r0, r3
 80153b8:	f001 f94c 	bl	8016654 <xTaskRemoveFromEventList>
 80153bc:	4603      	mov	r3, r0
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d00e      	beq.n	80153e0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80153c2:	683b      	ldr	r3, [r7, #0]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d00b      	beq.n	80153e0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80153c8:	683b      	ldr	r3, [r7, #0]
 80153ca:	2201      	movs	r2, #1
 80153cc:	601a      	str	r2, [r3, #0]
 80153ce:	e007      	b.n	80153e0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80153d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153d4:	3301      	adds	r3, #1
 80153d6:	b2db      	uxtb	r3, r3
 80153d8:	b25a      	sxtb	r2, r3
 80153da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80153e0:	2301      	movs	r3, #1
 80153e2:	637b      	str	r3, [r7, #52]	; 0x34
 80153e4:	e001      	b.n	80153ea <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80153e6:	2300      	movs	r3, #0
 80153e8:	637b      	str	r3, [r7, #52]	; 0x34
 80153ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153ec:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	f383 8811 	msr	BASEPRI, r3
}
 80153f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80153f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80153f8:	4618      	mov	r0, r3
 80153fa:	3738      	adds	r7, #56	; 0x38
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd80      	pop	{r7, pc}

08015400 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b08c      	sub	sp, #48	; 0x30
 8015404:	af00      	add	r7, sp, #0
 8015406:	60f8      	str	r0, [r7, #12]
 8015408:	60b9      	str	r1, [r7, #8]
 801540a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801540c:	2300      	movs	r3, #0
 801540e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015416:	2b00      	cmp	r3, #0
 8015418:	d10a      	bne.n	8015430 <xQueueReceive+0x30>
	__asm volatile
 801541a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801541e:	f383 8811 	msr	BASEPRI, r3
 8015422:	f3bf 8f6f 	isb	sy
 8015426:	f3bf 8f4f 	dsb	sy
 801542a:	623b      	str	r3, [r7, #32]
}
 801542c:	bf00      	nop
 801542e:	e7fe      	b.n	801542e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015430:	68bb      	ldr	r3, [r7, #8]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d103      	bne.n	801543e <xQueueReceive+0x3e>
 8015436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801543a:	2b00      	cmp	r3, #0
 801543c:	d101      	bne.n	8015442 <xQueueReceive+0x42>
 801543e:	2301      	movs	r3, #1
 8015440:	e000      	b.n	8015444 <xQueueReceive+0x44>
 8015442:	2300      	movs	r3, #0
 8015444:	2b00      	cmp	r3, #0
 8015446:	d10a      	bne.n	801545e <xQueueReceive+0x5e>
	__asm volatile
 8015448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801544c:	f383 8811 	msr	BASEPRI, r3
 8015450:	f3bf 8f6f 	isb	sy
 8015454:	f3bf 8f4f 	dsb	sy
 8015458:	61fb      	str	r3, [r7, #28]
}
 801545a:	bf00      	nop
 801545c:	e7fe      	b.n	801545c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801545e:	f001 fb29 	bl	8016ab4 <xTaskGetSchedulerState>
 8015462:	4603      	mov	r3, r0
 8015464:	2b00      	cmp	r3, #0
 8015466:	d102      	bne.n	801546e <xQueueReceive+0x6e>
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d101      	bne.n	8015472 <xQueueReceive+0x72>
 801546e:	2301      	movs	r3, #1
 8015470:	e000      	b.n	8015474 <xQueueReceive+0x74>
 8015472:	2300      	movs	r3, #0
 8015474:	2b00      	cmp	r3, #0
 8015476:	d10a      	bne.n	801548e <xQueueReceive+0x8e>
	__asm volatile
 8015478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801547c:	f383 8811 	msr	BASEPRI, r3
 8015480:	f3bf 8f6f 	isb	sy
 8015484:	f3bf 8f4f 	dsb	sy
 8015488:	61bb      	str	r3, [r7, #24]
}
 801548a:	bf00      	nop
 801548c:	e7fe      	b.n	801548c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801548e:	f002 fa59 	bl	8017944 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015496:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801549a:	2b00      	cmp	r3, #0
 801549c:	d01f      	beq.n	80154de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801549e:	68b9      	ldr	r1, [r7, #8]
 80154a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80154a2:	f000 fafa 	bl	8015a9a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80154a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154a8:	1e5a      	subs	r2, r3, #1
 80154aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80154ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154b0:	691b      	ldr	r3, [r3, #16]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d00f      	beq.n	80154d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80154b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154b8:	3310      	adds	r3, #16
 80154ba:	4618      	mov	r0, r3
 80154bc:	f001 f8ca 	bl	8016654 <xTaskRemoveFromEventList>
 80154c0:	4603      	mov	r3, r0
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d007      	beq.n	80154d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80154c6:	4b3d      	ldr	r3, [pc, #244]	; (80155bc <xQueueReceive+0x1bc>)
 80154c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154cc:	601a      	str	r2, [r3, #0]
 80154ce:	f3bf 8f4f 	dsb	sy
 80154d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80154d6:	f002 fa65 	bl	80179a4 <vPortExitCritical>
				return pdPASS;
 80154da:	2301      	movs	r3, #1
 80154dc:	e069      	b.n	80155b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d103      	bne.n	80154ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80154e4:	f002 fa5e 	bl	80179a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80154e8:	2300      	movs	r3, #0
 80154ea:	e062      	b.n	80155b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80154ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d106      	bne.n	8015500 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80154f2:	f107 0310 	add.w	r3, r7, #16
 80154f6:	4618      	mov	r0, r3
 80154f8:	f001 f972 	bl	80167e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80154fc:	2301      	movs	r3, #1
 80154fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015500:	f002 fa50 	bl	80179a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015504:	f000 fe34 	bl	8016170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015508:	f002 fa1c 	bl	8017944 <vPortEnterCritical>
 801550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801550e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015512:	b25b      	sxtb	r3, r3
 8015514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015518:	d103      	bne.n	8015522 <xQueueReceive+0x122>
 801551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801551c:	2200      	movs	r2, #0
 801551e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015528:	b25b      	sxtb	r3, r3
 801552a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801552e:	d103      	bne.n	8015538 <xQueueReceive+0x138>
 8015530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015532:	2200      	movs	r2, #0
 8015534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015538:	f002 fa34 	bl	80179a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801553c:	1d3a      	adds	r2, r7, #4
 801553e:	f107 0310 	add.w	r3, r7, #16
 8015542:	4611      	mov	r1, r2
 8015544:	4618      	mov	r0, r3
 8015546:	f001 f961 	bl	801680c <xTaskCheckForTimeOut>
 801554a:	4603      	mov	r3, r0
 801554c:	2b00      	cmp	r3, #0
 801554e:	d123      	bne.n	8015598 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015552:	f000 fb1a 	bl	8015b8a <prvIsQueueEmpty>
 8015556:	4603      	mov	r3, r0
 8015558:	2b00      	cmp	r3, #0
 801555a:	d017      	beq.n	801558c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801555e:	3324      	adds	r3, #36	; 0x24
 8015560:	687a      	ldr	r2, [r7, #4]
 8015562:	4611      	mov	r1, r2
 8015564:	4618      	mov	r0, r3
 8015566:	f000 ffe9 	bl	801653c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801556a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801556c:	f000 fabb 	bl	8015ae6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015570:	f000 fe0c 	bl	801618c <xTaskResumeAll>
 8015574:	4603      	mov	r3, r0
 8015576:	2b00      	cmp	r3, #0
 8015578:	d189      	bne.n	801548e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801557a:	4b10      	ldr	r3, [pc, #64]	; (80155bc <xQueueReceive+0x1bc>)
 801557c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015580:	601a      	str	r2, [r3, #0]
 8015582:	f3bf 8f4f 	dsb	sy
 8015586:	f3bf 8f6f 	isb	sy
 801558a:	e780      	b.n	801548e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801558c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801558e:	f000 faaa 	bl	8015ae6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015592:	f000 fdfb 	bl	801618c <xTaskResumeAll>
 8015596:	e77a      	b.n	801548e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801559a:	f000 faa4 	bl	8015ae6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801559e:	f000 fdf5 	bl	801618c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80155a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80155a4:	f000 faf1 	bl	8015b8a <prvIsQueueEmpty>
 80155a8:	4603      	mov	r3, r0
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	f43f af6f 	beq.w	801548e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80155b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80155b2:	4618      	mov	r0, r3
 80155b4:	3730      	adds	r7, #48	; 0x30
 80155b6:	46bd      	mov	sp, r7
 80155b8:	bd80      	pop	{r7, pc}
 80155ba:	bf00      	nop
 80155bc:	e000ed04 	.word	0xe000ed04

080155c0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b08e      	sub	sp, #56	; 0x38
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6078      	str	r0, [r7, #4]
 80155c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80155ca:	2300      	movs	r3, #0
 80155cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80155d2:	2300      	movs	r3, #0
 80155d4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80155d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d10a      	bne.n	80155f2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80155dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155e0:	f383 8811 	msr	BASEPRI, r3
 80155e4:	f3bf 8f6f 	isb	sy
 80155e8:	f3bf 8f4f 	dsb	sy
 80155ec:	623b      	str	r3, [r7, #32]
}
 80155ee:	bf00      	nop
 80155f0:	e7fe      	b.n	80155f0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80155f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d00a      	beq.n	8015610 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80155fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155fe:	f383 8811 	msr	BASEPRI, r3
 8015602:	f3bf 8f6f 	isb	sy
 8015606:	f3bf 8f4f 	dsb	sy
 801560a:	61fb      	str	r3, [r7, #28]
}
 801560c:	bf00      	nop
 801560e:	e7fe      	b.n	801560e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015610:	f001 fa50 	bl	8016ab4 <xTaskGetSchedulerState>
 8015614:	4603      	mov	r3, r0
 8015616:	2b00      	cmp	r3, #0
 8015618:	d102      	bne.n	8015620 <xQueueSemaphoreTake+0x60>
 801561a:	683b      	ldr	r3, [r7, #0]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d101      	bne.n	8015624 <xQueueSemaphoreTake+0x64>
 8015620:	2301      	movs	r3, #1
 8015622:	e000      	b.n	8015626 <xQueueSemaphoreTake+0x66>
 8015624:	2300      	movs	r3, #0
 8015626:	2b00      	cmp	r3, #0
 8015628:	d10a      	bne.n	8015640 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801562a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801562e:	f383 8811 	msr	BASEPRI, r3
 8015632:	f3bf 8f6f 	isb	sy
 8015636:	f3bf 8f4f 	dsb	sy
 801563a:	61bb      	str	r3, [r7, #24]
}
 801563c:	bf00      	nop
 801563e:	e7fe      	b.n	801563e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015640:	f002 f980 	bl	8017944 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015648:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801564c:	2b00      	cmp	r3, #0
 801564e:	d024      	beq.n	801569a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015652:	1e5a      	subs	r2, r3, #1
 8015654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015656:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d104      	bne.n	801566a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015660:	f001 fbb6 	bl	8016dd0 <pvTaskIncrementMutexHeldCount>
 8015664:	4602      	mov	r2, r0
 8015666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015668:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801566a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801566c:	691b      	ldr	r3, [r3, #16]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d00f      	beq.n	8015692 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015674:	3310      	adds	r3, #16
 8015676:	4618      	mov	r0, r3
 8015678:	f000 ffec 	bl	8016654 <xTaskRemoveFromEventList>
 801567c:	4603      	mov	r3, r0
 801567e:	2b00      	cmp	r3, #0
 8015680:	d007      	beq.n	8015692 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015682:	4b54      	ldr	r3, [pc, #336]	; (80157d4 <xQueueSemaphoreTake+0x214>)
 8015684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015688:	601a      	str	r2, [r3, #0]
 801568a:	f3bf 8f4f 	dsb	sy
 801568e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015692:	f002 f987 	bl	80179a4 <vPortExitCritical>
				return pdPASS;
 8015696:	2301      	movs	r3, #1
 8015698:	e097      	b.n	80157ca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801569a:	683b      	ldr	r3, [r7, #0]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d111      	bne.n	80156c4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80156a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d00a      	beq.n	80156bc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80156a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156aa:	f383 8811 	msr	BASEPRI, r3
 80156ae:	f3bf 8f6f 	isb	sy
 80156b2:	f3bf 8f4f 	dsb	sy
 80156b6:	617b      	str	r3, [r7, #20]
}
 80156b8:	bf00      	nop
 80156ba:	e7fe      	b.n	80156ba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80156bc:	f002 f972 	bl	80179a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80156c0:	2300      	movs	r3, #0
 80156c2:	e082      	b.n	80157ca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80156c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d106      	bne.n	80156d8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80156ca:	f107 030c 	add.w	r3, r7, #12
 80156ce:	4618      	mov	r0, r3
 80156d0:	f001 f886 	bl	80167e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80156d4:	2301      	movs	r3, #1
 80156d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80156d8:	f002 f964 	bl	80179a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80156dc:	f000 fd48 	bl	8016170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80156e0:	f002 f930 	bl	8017944 <vPortEnterCritical>
 80156e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80156ea:	b25b      	sxtb	r3, r3
 80156ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156f0:	d103      	bne.n	80156fa <xQueueSemaphoreTake+0x13a>
 80156f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156f4:	2200      	movs	r2, #0
 80156f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80156fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015700:	b25b      	sxtb	r3, r3
 8015702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015706:	d103      	bne.n	8015710 <xQueueSemaphoreTake+0x150>
 8015708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801570a:	2200      	movs	r2, #0
 801570c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015710:	f002 f948 	bl	80179a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015714:	463a      	mov	r2, r7
 8015716:	f107 030c 	add.w	r3, r7, #12
 801571a:	4611      	mov	r1, r2
 801571c:	4618      	mov	r0, r3
 801571e:	f001 f875 	bl	801680c <xTaskCheckForTimeOut>
 8015722:	4603      	mov	r3, r0
 8015724:	2b00      	cmp	r3, #0
 8015726:	d132      	bne.n	801578e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015728:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801572a:	f000 fa2e 	bl	8015b8a <prvIsQueueEmpty>
 801572e:	4603      	mov	r3, r0
 8015730:	2b00      	cmp	r3, #0
 8015732:	d026      	beq.n	8015782 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d109      	bne.n	8015750 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801573c:	f002 f902 	bl	8017944 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015742:	689b      	ldr	r3, [r3, #8]
 8015744:	4618      	mov	r0, r3
 8015746:	f001 f9d3 	bl	8016af0 <xTaskPriorityInherit>
 801574a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801574c:	f002 f92a 	bl	80179a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015752:	3324      	adds	r3, #36	; 0x24
 8015754:	683a      	ldr	r2, [r7, #0]
 8015756:	4611      	mov	r1, r2
 8015758:	4618      	mov	r0, r3
 801575a:	f000 feef 	bl	801653c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801575e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015760:	f000 f9c1 	bl	8015ae6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015764:	f000 fd12 	bl	801618c <xTaskResumeAll>
 8015768:	4603      	mov	r3, r0
 801576a:	2b00      	cmp	r3, #0
 801576c:	f47f af68 	bne.w	8015640 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8015770:	4b18      	ldr	r3, [pc, #96]	; (80157d4 <xQueueSemaphoreTake+0x214>)
 8015772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015776:	601a      	str	r2, [r3, #0]
 8015778:	f3bf 8f4f 	dsb	sy
 801577c:	f3bf 8f6f 	isb	sy
 8015780:	e75e      	b.n	8015640 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015782:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015784:	f000 f9af 	bl	8015ae6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015788:	f000 fd00 	bl	801618c <xTaskResumeAll>
 801578c:	e758      	b.n	8015640 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801578e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015790:	f000 f9a9 	bl	8015ae6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015794:	f000 fcfa 	bl	801618c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015798:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801579a:	f000 f9f6 	bl	8015b8a <prvIsQueueEmpty>
 801579e:	4603      	mov	r3, r0
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	f43f af4d 	beq.w	8015640 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80157a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d00d      	beq.n	80157c8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80157ac:	f002 f8ca 	bl	8017944 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80157b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80157b2:	f000 f8f0 	bl	8015996 <prvGetDisinheritPriorityAfterTimeout>
 80157b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80157b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ba:	689b      	ldr	r3, [r3, #8]
 80157bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80157be:	4618      	mov	r0, r3
 80157c0:	f001 fa6c 	bl	8016c9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80157c4:	f002 f8ee 	bl	80179a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80157c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80157ca:	4618      	mov	r0, r3
 80157cc:	3738      	adds	r7, #56	; 0x38
 80157ce:	46bd      	mov	sp, r7
 80157d0:	bd80      	pop	{r7, pc}
 80157d2:	bf00      	nop
 80157d4:	e000ed04 	.word	0xe000ed04

080157d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b08e      	sub	sp, #56	; 0x38
 80157dc:	af00      	add	r7, sp, #0
 80157de:	60f8      	str	r0, [r7, #12]
 80157e0:	60b9      	str	r1, [r7, #8]
 80157e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80157e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d10a      	bne.n	8015804 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80157ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157f2:	f383 8811 	msr	BASEPRI, r3
 80157f6:	f3bf 8f6f 	isb	sy
 80157fa:	f3bf 8f4f 	dsb	sy
 80157fe:	623b      	str	r3, [r7, #32]
}
 8015800:	bf00      	nop
 8015802:	e7fe      	b.n	8015802 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015804:	68bb      	ldr	r3, [r7, #8]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d103      	bne.n	8015812 <xQueueReceiveFromISR+0x3a>
 801580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801580e:	2b00      	cmp	r3, #0
 8015810:	d101      	bne.n	8015816 <xQueueReceiveFromISR+0x3e>
 8015812:	2301      	movs	r3, #1
 8015814:	e000      	b.n	8015818 <xQueueReceiveFromISR+0x40>
 8015816:	2300      	movs	r3, #0
 8015818:	2b00      	cmp	r3, #0
 801581a:	d10a      	bne.n	8015832 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801581c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015820:	f383 8811 	msr	BASEPRI, r3
 8015824:	f3bf 8f6f 	isb	sy
 8015828:	f3bf 8f4f 	dsb	sy
 801582c:	61fb      	str	r3, [r7, #28]
}
 801582e:	bf00      	nop
 8015830:	e7fe      	b.n	8015830 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015832:	f002 f969 	bl	8017b08 <vPortValidateInterruptPriority>
	__asm volatile
 8015836:	f3ef 8211 	mrs	r2, BASEPRI
 801583a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801583e:	f383 8811 	msr	BASEPRI, r3
 8015842:	f3bf 8f6f 	isb	sy
 8015846:	f3bf 8f4f 	dsb	sy
 801584a:	61ba      	str	r2, [r7, #24]
 801584c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801584e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015850:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015856:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801585a:	2b00      	cmp	r3, #0
 801585c:	d02f      	beq.n	80158be <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015860:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015868:	68b9      	ldr	r1, [r7, #8]
 801586a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801586c:	f000 f915 	bl	8015a9a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015872:	1e5a      	subs	r2, r3, #1
 8015874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015876:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015878:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801587c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015880:	d112      	bne.n	80158a8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015884:	691b      	ldr	r3, [r3, #16]
 8015886:	2b00      	cmp	r3, #0
 8015888:	d016      	beq.n	80158b8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801588a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801588c:	3310      	adds	r3, #16
 801588e:	4618      	mov	r0, r3
 8015890:	f000 fee0 	bl	8016654 <xTaskRemoveFromEventList>
 8015894:	4603      	mov	r3, r0
 8015896:	2b00      	cmp	r3, #0
 8015898:	d00e      	beq.n	80158b8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d00b      	beq.n	80158b8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	2201      	movs	r2, #1
 80158a4:	601a      	str	r2, [r3, #0]
 80158a6:	e007      	b.n	80158b8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80158a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80158ac:	3301      	adds	r3, #1
 80158ae:	b2db      	uxtb	r3, r3
 80158b0:	b25a      	sxtb	r2, r3
 80158b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80158b8:	2301      	movs	r3, #1
 80158ba:	637b      	str	r3, [r7, #52]	; 0x34
 80158bc:	e001      	b.n	80158c2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80158be:	2300      	movs	r3, #0
 80158c0:	637b      	str	r3, [r7, #52]	; 0x34
 80158c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80158c6:	693b      	ldr	r3, [r7, #16]
 80158c8:	f383 8811 	msr	BASEPRI, r3
}
 80158cc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80158ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80158d0:	4618      	mov	r0, r3
 80158d2:	3738      	adds	r7, #56	; 0x38
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bd80      	pop	{r7, pc}

080158d8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80158d8:	b580      	push	{r7, lr}
 80158da:	b084      	sub	sp, #16
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d10a      	bne.n	80158fc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80158e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158ea:	f383 8811 	msr	BASEPRI, r3
 80158ee:	f3bf 8f6f 	isb	sy
 80158f2:	f3bf 8f4f 	dsb	sy
 80158f6:	60bb      	str	r3, [r7, #8]
}
 80158f8:	bf00      	nop
 80158fa:	e7fe      	b.n	80158fa <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80158fc:	f002 f822 	bl	8017944 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015904:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8015906:	f002 f84d 	bl	80179a4 <vPortExitCritical>

	return uxReturn;
 801590a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801590c:	4618      	mov	r0, r3
 801590e:	3710      	adds	r7, #16
 8015910:	46bd      	mov	sp, r7
 8015912:	bd80      	pop	{r7, pc}

08015914 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8015914:	b480      	push	{r7}
 8015916:	b087      	sub	sp, #28
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8015920:	697b      	ldr	r3, [r7, #20]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d10a      	bne.n	801593c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8015926:	f04f 0350 	mov.w	r3, #80	; 0x50
 801592a:	f383 8811 	msr	BASEPRI, r3
 801592e:	f3bf 8f6f 	isb	sy
 8015932:	f3bf 8f4f 	dsb	sy
 8015936:	60fb      	str	r3, [r7, #12]
}
 8015938:	bf00      	nop
 801593a:	e7fe      	b.n	801593a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 801593c:	697b      	ldr	r3, [r7, #20]
 801593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015940:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8015942:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015944:	4618      	mov	r0, r3
 8015946:	371c      	adds	r7, #28
 8015948:	46bd      	mov	sp, r7
 801594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594e:	4770      	bx	lr

08015950 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8015950:	b580      	push	{r7, lr}
 8015952:	b084      	sub	sp, #16
 8015954:	af00      	add	r7, sp, #0
 8015956:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d10a      	bne.n	8015978 <vQueueDelete+0x28>
	__asm volatile
 8015962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015966:	f383 8811 	msr	BASEPRI, r3
 801596a:	f3bf 8f6f 	isb	sy
 801596e:	f3bf 8f4f 	dsb	sy
 8015972:	60bb      	str	r3, [r7, #8]
}
 8015974:	bf00      	nop
 8015976:	e7fe      	b.n	8015976 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8015978:	68f8      	ldr	r0, [r7, #12]
 801597a:	f000 f95f 	bl	8015c3c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8015984:	2b00      	cmp	r3, #0
 8015986:	d102      	bne.n	801598e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8015988:	68f8      	ldr	r0, [r7, #12]
 801598a:	f002 f9c9 	bl	8017d20 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801598e:	bf00      	nop
 8015990:	3710      	adds	r7, #16
 8015992:	46bd      	mov	sp, r7
 8015994:	bd80      	pop	{r7, pc}

08015996 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015996:	b480      	push	{r7}
 8015998:	b085      	sub	sp, #20
 801599a:	af00      	add	r7, sp, #0
 801599c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d006      	beq.n	80159b4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80159b0:	60fb      	str	r3, [r7, #12]
 80159b2:	e001      	b.n	80159b8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80159b4:	2300      	movs	r3, #0
 80159b6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80159b8:	68fb      	ldr	r3, [r7, #12]
	}
 80159ba:	4618      	mov	r0, r3
 80159bc:	3714      	adds	r7, #20
 80159be:	46bd      	mov	sp, r7
 80159c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c4:	4770      	bx	lr

080159c6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80159c6:	b580      	push	{r7, lr}
 80159c8:	b086      	sub	sp, #24
 80159ca:	af00      	add	r7, sp, #0
 80159cc:	60f8      	str	r0, [r7, #12]
 80159ce:	60b9      	str	r1, [r7, #8]
 80159d0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80159d2:	2300      	movs	r3, #0
 80159d4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80159da:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d10d      	bne.n	8015a00 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d14d      	bne.n	8015a88 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	689b      	ldr	r3, [r3, #8]
 80159f0:	4618      	mov	r0, r3
 80159f2:	f001 f8e5 	bl	8016bc0 <xTaskPriorityDisinherit>
 80159f6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	2200      	movs	r2, #0
 80159fc:	609a      	str	r2, [r3, #8]
 80159fe:	e043      	b.n	8015a88 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d119      	bne.n	8015a3a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	6858      	ldr	r0, [r3, #4]
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a0e:	461a      	mov	r2, r3
 8015a10:	68b9      	ldr	r1, [r7, #8]
 8015a12:	f002 fb8d 	bl	8018130 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	685a      	ldr	r2, [r3, #4]
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a1e:	441a      	add	r2, r3
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	685a      	ldr	r2, [r3, #4]
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	689b      	ldr	r3, [r3, #8]
 8015a2c:	429a      	cmp	r2, r3
 8015a2e:	d32b      	bcc.n	8015a88 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	681a      	ldr	r2, [r3, #0]
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	605a      	str	r2, [r3, #4]
 8015a38:	e026      	b.n	8015a88 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	68d8      	ldr	r0, [r3, #12]
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a42:	461a      	mov	r2, r3
 8015a44:	68b9      	ldr	r1, [r7, #8]
 8015a46:	f002 fb73 	bl	8018130 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	68da      	ldr	r2, [r3, #12]
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a52:	425b      	negs	r3, r3
 8015a54:	441a      	add	r2, r3
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	68da      	ldr	r2, [r3, #12]
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	429a      	cmp	r2, r3
 8015a64:	d207      	bcs.n	8015a76 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	689a      	ldr	r2, [r3, #8]
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a6e:	425b      	negs	r3, r3
 8015a70:	441a      	add	r2, r3
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	2b02      	cmp	r3, #2
 8015a7a:	d105      	bne.n	8015a88 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015a7c:	693b      	ldr	r3, [r7, #16]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d002      	beq.n	8015a88 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015a82:	693b      	ldr	r3, [r7, #16]
 8015a84:	3b01      	subs	r3, #1
 8015a86:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015a88:	693b      	ldr	r3, [r7, #16]
 8015a8a:	1c5a      	adds	r2, r3, #1
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015a90:	697b      	ldr	r3, [r7, #20]
}
 8015a92:	4618      	mov	r0, r3
 8015a94:	3718      	adds	r7, #24
 8015a96:	46bd      	mov	sp, r7
 8015a98:	bd80      	pop	{r7, pc}

08015a9a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015a9a:	b580      	push	{r7, lr}
 8015a9c:	b082      	sub	sp, #8
 8015a9e:	af00      	add	r7, sp, #0
 8015aa0:	6078      	str	r0, [r7, #4]
 8015aa2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d018      	beq.n	8015ade <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	68da      	ldr	r2, [r3, #12]
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ab4:	441a      	add	r2, r3
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	68da      	ldr	r2, [r3, #12]
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	689b      	ldr	r3, [r3, #8]
 8015ac2:	429a      	cmp	r2, r3
 8015ac4:	d303      	bcc.n	8015ace <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	681a      	ldr	r2, [r3, #0]
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	68d9      	ldr	r1, [r3, #12]
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ad6:	461a      	mov	r2, r3
 8015ad8:	6838      	ldr	r0, [r7, #0]
 8015ada:	f002 fb29 	bl	8018130 <memcpy>
	}
}
 8015ade:	bf00      	nop
 8015ae0:	3708      	adds	r7, #8
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	bd80      	pop	{r7, pc}

08015ae6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015ae6:	b580      	push	{r7, lr}
 8015ae8:	b084      	sub	sp, #16
 8015aea:	af00      	add	r7, sp, #0
 8015aec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015aee:	f001 ff29 	bl	8017944 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015af8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015afa:	e011      	b.n	8015b20 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d012      	beq.n	8015b2a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	3324      	adds	r3, #36	; 0x24
 8015b08:	4618      	mov	r0, r3
 8015b0a:	f000 fda3 	bl	8016654 <xTaskRemoveFromEventList>
 8015b0e:	4603      	mov	r3, r0
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d001      	beq.n	8015b18 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015b14:	f000 fedc 	bl	80168d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015b18:	7bfb      	ldrb	r3, [r7, #15]
 8015b1a:	3b01      	subs	r3, #1
 8015b1c:	b2db      	uxtb	r3, r3
 8015b1e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	dce9      	bgt.n	8015afc <prvUnlockQueue+0x16>
 8015b28:	e000      	b.n	8015b2c <prvUnlockQueue+0x46>
					break;
 8015b2a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	22ff      	movs	r2, #255	; 0xff
 8015b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015b34:	f001 ff36 	bl	80179a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015b38:	f001 ff04 	bl	8017944 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015b42:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015b44:	e011      	b.n	8015b6a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	691b      	ldr	r3, [r3, #16]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d012      	beq.n	8015b74 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	3310      	adds	r3, #16
 8015b52:	4618      	mov	r0, r3
 8015b54:	f000 fd7e 	bl	8016654 <xTaskRemoveFromEventList>
 8015b58:	4603      	mov	r3, r0
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d001      	beq.n	8015b62 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015b5e:	f000 feb7 	bl	80168d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015b62:	7bbb      	ldrb	r3, [r7, #14]
 8015b64:	3b01      	subs	r3, #1
 8015b66:	b2db      	uxtb	r3, r3
 8015b68:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015b6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	dce9      	bgt.n	8015b46 <prvUnlockQueue+0x60>
 8015b72:	e000      	b.n	8015b76 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015b74:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	22ff      	movs	r2, #255	; 0xff
 8015b7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8015b7e:	f001 ff11 	bl	80179a4 <vPortExitCritical>
}
 8015b82:	bf00      	nop
 8015b84:	3710      	adds	r7, #16
 8015b86:	46bd      	mov	sp, r7
 8015b88:	bd80      	pop	{r7, pc}

08015b8a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015b8a:	b580      	push	{r7, lr}
 8015b8c:	b084      	sub	sp, #16
 8015b8e:	af00      	add	r7, sp, #0
 8015b90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015b92:	f001 fed7 	bl	8017944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d102      	bne.n	8015ba4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015b9e:	2301      	movs	r3, #1
 8015ba0:	60fb      	str	r3, [r7, #12]
 8015ba2:	e001      	b.n	8015ba8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015ba8:	f001 fefc 	bl	80179a4 <vPortExitCritical>

	return xReturn;
 8015bac:	68fb      	ldr	r3, [r7, #12]
}
 8015bae:	4618      	mov	r0, r3
 8015bb0:	3710      	adds	r7, #16
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}

08015bb6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015bb6:	b580      	push	{r7, lr}
 8015bb8:	b084      	sub	sp, #16
 8015bba:	af00      	add	r7, sp, #0
 8015bbc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015bbe:	f001 fec1 	bl	8017944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015bca:	429a      	cmp	r2, r3
 8015bcc:	d102      	bne.n	8015bd4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015bce:	2301      	movs	r3, #1
 8015bd0:	60fb      	str	r3, [r7, #12]
 8015bd2:	e001      	b.n	8015bd8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015bd8:	f001 fee4 	bl	80179a4 <vPortExitCritical>

	return xReturn;
 8015bdc:	68fb      	ldr	r3, [r7, #12]
}
 8015bde:	4618      	mov	r0, r3
 8015be0:	3710      	adds	r7, #16
 8015be2:	46bd      	mov	sp, r7
 8015be4:	bd80      	pop	{r7, pc}
	...

08015be8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8015be8:	b480      	push	{r7}
 8015bea:	b085      	sub	sp, #20
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	6078      	str	r0, [r7, #4]
 8015bf0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	60fb      	str	r3, [r7, #12]
 8015bf6:	e014      	b.n	8015c22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8015bf8:	4a0f      	ldr	r2, [pc, #60]	; (8015c38 <vQueueAddToRegistry+0x50>)
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d10b      	bne.n	8015c1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015c04:	490c      	ldr	r1, [pc, #48]	; (8015c38 <vQueueAddToRegistry+0x50>)
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	683a      	ldr	r2, [r7, #0]
 8015c0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015c0e:	4a0a      	ldr	r2, [pc, #40]	; (8015c38 <vQueueAddToRegistry+0x50>)
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	00db      	lsls	r3, r3, #3
 8015c14:	4413      	add	r3, r2
 8015c16:	687a      	ldr	r2, [r7, #4]
 8015c18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8015c1a:	e006      	b.n	8015c2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	3301      	adds	r3, #1
 8015c20:	60fb      	str	r3, [r7, #12]
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	2b07      	cmp	r3, #7
 8015c26:	d9e7      	bls.n	8015bf8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015c28:	bf00      	nop
 8015c2a:	bf00      	nop
 8015c2c:	3714      	adds	r7, #20
 8015c2e:	46bd      	mov	sp, r7
 8015c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c34:	4770      	bx	lr
 8015c36:	bf00      	nop
 8015c38:	200051f4 	.word	0x200051f4

08015c3c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8015c3c:	b480      	push	{r7}
 8015c3e:	b085      	sub	sp, #20
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015c44:	2300      	movs	r3, #0
 8015c46:	60fb      	str	r3, [r7, #12]
 8015c48:	e016      	b.n	8015c78 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8015c4a:	4a10      	ldr	r2, [pc, #64]	; (8015c8c <vQueueUnregisterQueue+0x50>)
 8015c4c:	68fb      	ldr	r3, [r7, #12]
 8015c4e:	00db      	lsls	r3, r3, #3
 8015c50:	4413      	add	r3, r2
 8015c52:	685b      	ldr	r3, [r3, #4]
 8015c54:	687a      	ldr	r2, [r7, #4]
 8015c56:	429a      	cmp	r2, r3
 8015c58:	d10b      	bne.n	8015c72 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8015c5a:	4a0c      	ldr	r2, [pc, #48]	; (8015c8c <vQueueUnregisterQueue+0x50>)
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	2100      	movs	r1, #0
 8015c60:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8015c64:	4a09      	ldr	r2, [pc, #36]	; (8015c8c <vQueueUnregisterQueue+0x50>)
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	00db      	lsls	r3, r3, #3
 8015c6a:	4413      	add	r3, r2
 8015c6c:	2200      	movs	r2, #0
 8015c6e:	605a      	str	r2, [r3, #4]
				break;
 8015c70:	e006      	b.n	8015c80 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	3301      	adds	r3, #1
 8015c76:	60fb      	str	r3, [r7, #12]
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	2b07      	cmp	r3, #7
 8015c7c:	d9e5      	bls.n	8015c4a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8015c7e:	bf00      	nop
 8015c80:	bf00      	nop
 8015c82:	3714      	adds	r7, #20
 8015c84:	46bd      	mov	sp, r7
 8015c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c8a:	4770      	bx	lr
 8015c8c:	200051f4 	.word	0x200051f4

08015c90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015c90:	b580      	push	{r7, lr}
 8015c92:	b086      	sub	sp, #24
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	60f8      	str	r0, [r7, #12]
 8015c98:	60b9      	str	r1, [r7, #8]
 8015c9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8015ca0:	f001 fe50 	bl	8017944 <vPortEnterCritical>
 8015ca4:	697b      	ldr	r3, [r7, #20]
 8015ca6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015caa:	b25b      	sxtb	r3, r3
 8015cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cb0:	d103      	bne.n	8015cba <vQueueWaitForMessageRestricted+0x2a>
 8015cb2:	697b      	ldr	r3, [r7, #20]
 8015cb4:	2200      	movs	r2, #0
 8015cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015cba:	697b      	ldr	r3, [r7, #20]
 8015cbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015cc0:	b25b      	sxtb	r3, r3
 8015cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cc6:	d103      	bne.n	8015cd0 <vQueueWaitForMessageRestricted+0x40>
 8015cc8:	697b      	ldr	r3, [r7, #20]
 8015cca:	2200      	movs	r2, #0
 8015ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015cd0:	f001 fe68 	bl	80179a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8015cd4:	697b      	ldr	r3, [r7, #20]
 8015cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d106      	bne.n	8015cea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8015cdc:	697b      	ldr	r3, [r7, #20]
 8015cde:	3324      	adds	r3, #36	; 0x24
 8015ce0:	687a      	ldr	r2, [r7, #4]
 8015ce2:	68b9      	ldr	r1, [r7, #8]
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	f000 fc89 	bl	80165fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8015cea:	6978      	ldr	r0, [r7, #20]
 8015cec:	f7ff fefb 	bl	8015ae6 <prvUnlockQueue>
	}
 8015cf0:	bf00      	nop
 8015cf2:	3718      	adds	r7, #24
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	bd80      	pop	{r7, pc}

08015cf8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b08e      	sub	sp, #56	; 0x38
 8015cfc:	af04      	add	r7, sp, #16
 8015cfe:	60f8      	str	r0, [r7, #12]
 8015d00:	60b9      	str	r1, [r7, #8]
 8015d02:	607a      	str	r2, [r7, #4]
 8015d04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d10a      	bne.n	8015d22 <xTaskCreateStatic+0x2a>
	__asm volatile
 8015d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d10:	f383 8811 	msr	BASEPRI, r3
 8015d14:	f3bf 8f6f 	isb	sy
 8015d18:	f3bf 8f4f 	dsb	sy
 8015d1c:	623b      	str	r3, [r7, #32]
}
 8015d1e:	bf00      	nop
 8015d20:	e7fe      	b.n	8015d20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8015d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d10a      	bne.n	8015d3e <xTaskCreateStatic+0x46>
	__asm volatile
 8015d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d2c:	f383 8811 	msr	BASEPRI, r3
 8015d30:	f3bf 8f6f 	isb	sy
 8015d34:	f3bf 8f4f 	dsb	sy
 8015d38:	61fb      	str	r3, [r7, #28]
}
 8015d3a:	bf00      	nop
 8015d3c:	e7fe      	b.n	8015d3c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015d3e:	235c      	movs	r3, #92	; 0x5c
 8015d40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015d42:	693b      	ldr	r3, [r7, #16]
 8015d44:	2b5c      	cmp	r3, #92	; 0x5c
 8015d46:	d00a      	beq.n	8015d5e <xTaskCreateStatic+0x66>
	__asm volatile
 8015d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d4c:	f383 8811 	msr	BASEPRI, r3
 8015d50:	f3bf 8f6f 	isb	sy
 8015d54:	f3bf 8f4f 	dsb	sy
 8015d58:	61bb      	str	r3, [r7, #24]
}
 8015d5a:	bf00      	nop
 8015d5c:	e7fe      	b.n	8015d5c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015d5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d01e      	beq.n	8015da4 <xTaskCreateStatic+0xac>
 8015d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d01b      	beq.n	8015da4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015d74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d78:	2202      	movs	r2, #2
 8015d7a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015d7e:	2300      	movs	r3, #0
 8015d80:	9303      	str	r3, [sp, #12]
 8015d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d84:	9302      	str	r3, [sp, #8]
 8015d86:	f107 0314 	add.w	r3, r7, #20
 8015d8a:	9301      	str	r3, [sp, #4]
 8015d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d8e:	9300      	str	r3, [sp, #0]
 8015d90:	683b      	ldr	r3, [r7, #0]
 8015d92:	687a      	ldr	r2, [r7, #4]
 8015d94:	68b9      	ldr	r1, [r7, #8]
 8015d96:	68f8      	ldr	r0, [r7, #12]
 8015d98:	f000 f850 	bl	8015e3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015d9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d9e:	f000 f8dd 	bl	8015f5c <prvAddNewTaskToReadyList>
 8015da2:	e001      	b.n	8015da8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8015da4:	2300      	movs	r3, #0
 8015da6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8015da8:	697b      	ldr	r3, [r7, #20]
	}
 8015daa:	4618      	mov	r0, r3
 8015dac:	3728      	adds	r7, #40	; 0x28
 8015dae:	46bd      	mov	sp, r7
 8015db0:	bd80      	pop	{r7, pc}

08015db2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015db2:	b580      	push	{r7, lr}
 8015db4:	b08c      	sub	sp, #48	; 0x30
 8015db6:	af04      	add	r7, sp, #16
 8015db8:	60f8      	str	r0, [r7, #12]
 8015dba:	60b9      	str	r1, [r7, #8]
 8015dbc:	603b      	str	r3, [r7, #0]
 8015dbe:	4613      	mov	r3, r2
 8015dc0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015dc2:	88fb      	ldrh	r3, [r7, #6]
 8015dc4:	009b      	lsls	r3, r3, #2
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	f001 fede 	bl	8017b88 <pvPortMalloc>
 8015dcc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015dce:	697b      	ldr	r3, [r7, #20]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d00e      	beq.n	8015df2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015dd4:	205c      	movs	r0, #92	; 0x5c
 8015dd6:	f001 fed7 	bl	8017b88 <pvPortMalloc>
 8015dda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015ddc:	69fb      	ldr	r3, [r7, #28]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d003      	beq.n	8015dea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015de2:	69fb      	ldr	r3, [r7, #28]
 8015de4:	697a      	ldr	r2, [r7, #20]
 8015de6:	631a      	str	r2, [r3, #48]	; 0x30
 8015de8:	e005      	b.n	8015df6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015dea:	6978      	ldr	r0, [r7, #20]
 8015dec:	f001 ff98 	bl	8017d20 <vPortFree>
 8015df0:	e001      	b.n	8015df6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015df2:	2300      	movs	r3, #0
 8015df4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015df6:	69fb      	ldr	r3, [r7, #28]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d017      	beq.n	8015e2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015dfc:	69fb      	ldr	r3, [r7, #28]
 8015dfe:	2200      	movs	r2, #0
 8015e00:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015e04:	88fa      	ldrh	r2, [r7, #6]
 8015e06:	2300      	movs	r3, #0
 8015e08:	9303      	str	r3, [sp, #12]
 8015e0a:	69fb      	ldr	r3, [r7, #28]
 8015e0c:	9302      	str	r3, [sp, #8]
 8015e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e10:	9301      	str	r3, [sp, #4]
 8015e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e14:	9300      	str	r3, [sp, #0]
 8015e16:	683b      	ldr	r3, [r7, #0]
 8015e18:	68b9      	ldr	r1, [r7, #8]
 8015e1a:	68f8      	ldr	r0, [r7, #12]
 8015e1c:	f000 f80e 	bl	8015e3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015e20:	69f8      	ldr	r0, [r7, #28]
 8015e22:	f000 f89b 	bl	8015f5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015e26:	2301      	movs	r3, #1
 8015e28:	61bb      	str	r3, [r7, #24]
 8015e2a:	e002      	b.n	8015e32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8015e30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015e32:	69bb      	ldr	r3, [r7, #24]
	}
 8015e34:	4618      	mov	r0, r3
 8015e36:	3720      	adds	r7, #32
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bd80      	pop	{r7, pc}

08015e3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b088      	sub	sp, #32
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	60f8      	str	r0, [r7, #12]
 8015e44:	60b9      	str	r1, [r7, #8]
 8015e46:	607a      	str	r2, [r7, #4]
 8015e48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	009b      	lsls	r3, r3, #2
 8015e52:	461a      	mov	r2, r3
 8015e54:	21a5      	movs	r1, #165	; 0xa5
 8015e56:	f002 f993 	bl	8018180 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015e64:	3b01      	subs	r3, #1
 8015e66:	009b      	lsls	r3, r3, #2
 8015e68:	4413      	add	r3, r2
 8015e6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015e6c:	69bb      	ldr	r3, [r7, #24]
 8015e6e:	f023 0307 	bic.w	r3, r3, #7
 8015e72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015e74:	69bb      	ldr	r3, [r7, #24]
 8015e76:	f003 0307 	and.w	r3, r3, #7
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d00a      	beq.n	8015e94 <prvInitialiseNewTask+0x58>
	__asm volatile
 8015e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e82:	f383 8811 	msr	BASEPRI, r3
 8015e86:	f3bf 8f6f 	isb	sy
 8015e8a:	f3bf 8f4f 	dsb	sy
 8015e8e:	617b      	str	r3, [r7, #20]
}
 8015e90:	bf00      	nop
 8015e92:	e7fe      	b.n	8015e92 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015e94:	68bb      	ldr	r3, [r7, #8]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d01f      	beq.n	8015eda <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	61fb      	str	r3, [r7, #28]
 8015e9e:	e012      	b.n	8015ec6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015ea0:	68ba      	ldr	r2, [r7, #8]
 8015ea2:	69fb      	ldr	r3, [r7, #28]
 8015ea4:	4413      	add	r3, r2
 8015ea6:	7819      	ldrb	r1, [r3, #0]
 8015ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015eaa:	69fb      	ldr	r3, [r7, #28]
 8015eac:	4413      	add	r3, r2
 8015eae:	3334      	adds	r3, #52	; 0x34
 8015eb0:	460a      	mov	r2, r1
 8015eb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015eb4:	68ba      	ldr	r2, [r7, #8]
 8015eb6:	69fb      	ldr	r3, [r7, #28]
 8015eb8:	4413      	add	r3, r2
 8015eba:	781b      	ldrb	r3, [r3, #0]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d006      	beq.n	8015ece <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015ec0:	69fb      	ldr	r3, [r7, #28]
 8015ec2:	3301      	adds	r3, #1
 8015ec4:	61fb      	str	r3, [r7, #28]
 8015ec6:	69fb      	ldr	r3, [r7, #28]
 8015ec8:	2b0f      	cmp	r3, #15
 8015eca:	d9e9      	bls.n	8015ea0 <prvInitialiseNewTask+0x64>
 8015ecc:	e000      	b.n	8015ed0 <prvInitialiseNewTask+0x94>
			{
				break;
 8015ece:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ed2:	2200      	movs	r2, #0
 8015ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015ed8:	e003      	b.n	8015ee2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015edc:	2200      	movs	r2, #0
 8015ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ee4:	2b37      	cmp	r3, #55	; 0x37
 8015ee6:	d901      	bls.n	8015eec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015ee8:	2337      	movs	r3, #55	; 0x37
 8015eea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ef0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ef4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ef6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8015ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015efa:	2200      	movs	r2, #0
 8015efc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f00:	3304      	adds	r3, #4
 8015f02:	4618      	mov	r0, r3
 8015f04:	f7fe fd64 	bl	80149d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f0a:	3318      	adds	r3, #24
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	f7fe fd5f 	bl	80149d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f30:	2200      	movs	r2, #0
 8015f32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015f36:	683a      	ldr	r2, [r7, #0]
 8015f38:	68f9      	ldr	r1, [r7, #12]
 8015f3a:	69b8      	ldr	r0, [r7, #24]
 8015f3c:	f001 fbd8 	bl	80176f0 <pxPortInitialiseStack>
 8015f40:	4602      	mov	r2, r0
 8015f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f44:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d002      	beq.n	8015f52 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015f52:	bf00      	nop
 8015f54:	3720      	adds	r7, #32
 8015f56:	46bd      	mov	sp, r7
 8015f58:	bd80      	pop	{r7, pc}
	...

08015f5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b082      	sub	sp, #8
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015f64:	f001 fcee 	bl	8017944 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015f68:	4b2d      	ldr	r3, [pc, #180]	; (8016020 <prvAddNewTaskToReadyList+0xc4>)
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	3301      	adds	r3, #1
 8015f6e:	4a2c      	ldr	r2, [pc, #176]	; (8016020 <prvAddNewTaskToReadyList+0xc4>)
 8015f70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015f72:	4b2c      	ldr	r3, [pc, #176]	; (8016024 <prvAddNewTaskToReadyList+0xc8>)
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d109      	bne.n	8015f8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015f7a:	4a2a      	ldr	r2, [pc, #168]	; (8016024 <prvAddNewTaskToReadyList+0xc8>)
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015f80:	4b27      	ldr	r3, [pc, #156]	; (8016020 <prvAddNewTaskToReadyList+0xc4>)
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	2b01      	cmp	r3, #1
 8015f86:	d110      	bne.n	8015faa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015f88:	f000 fcc6 	bl	8016918 <prvInitialiseTaskLists>
 8015f8c:	e00d      	b.n	8015faa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015f8e:	4b26      	ldr	r3, [pc, #152]	; (8016028 <prvAddNewTaskToReadyList+0xcc>)
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d109      	bne.n	8015faa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015f96:	4b23      	ldr	r3, [pc, #140]	; (8016024 <prvAddNewTaskToReadyList+0xc8>)
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fa0:	429a      	cmp	r2, r3
 8015fa2:	d802      	bhi.n	8015faa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015fa4:	4a1f      	ldr	r2, [pc, #124]	; (8016024 <prvAddNewTaskToReadyList+0xc8>)
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015faa:	4b20      	ldr	r3, [pc, #128]	; (801602c <prvAddNewTaskToReadyList+0xd0>)
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	3301      	adds	r3, #1
 8015fb0:	4a1e      	ldr	r2, [pc, #120]	; (801602c <prvAddNewTaskToReadyList+0xd0>)
 8015fb2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8015fb4:	4b1d      	ldr	r3, [pc, #116]	; (801602c <prvAddNewTaskToReadyList+0xd0>)
 8015fb6:	681a      	ldr	r2, [r3, #0]
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015fc0:	4b1b      	ldr	r3, [pc, #108]	; (8016030 <prvAddNewTaskToReadyList+0xd4>)
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	429a      	cmp	r2, r3
 8015fc6:	d903      	bls.n	8015fd0 <prvAddNewTaskToReadyList+0x74>
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fcc:	4a18      	ldr	r2, [pc, #96]	; (8016030 <prvAddNewTaskToReadyList+0xd4>)
 8015fce:	6013      	str	r3, [r2, #0]
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015fd4:	4613      	mov	r3, r2
 8015fd6:	009b      	lsls	r3, r3, #2
 8015fd8:	4413      	add	r3, r2
 8015fda:	009b      	lsls	r3, r3, #2
 8015fdc:	4a15      	ldr	r2, [pc, #84]	; (8016034 <prvAddNewTaskToReadyList+0xd8>)
 8015fde:	441a      	add	r2, r3
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	3304      	adds	r3, #4
 8015fe4:	4619      	mov	r1, r3
 8015fe6:	4610      	mov	r0, r2
 8015fe8:	f7fe fcff 	bl	80149ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015fec:	f001 fcda 	bl	80179a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015ff0:	4b0d      	ldr	r3, [pc, #52]	; (8016028 <prvAddNewTaskToReadyList+0xcc>)
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d00e      	beq.n	8016016 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015ff8:	4b0a      	ldr	r3, [pc, #40]	; (8016024 <prvAddNewTaskToReadyList+0xc8>)
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016002:	429a      	cmp	r2, r3
 8016004:	d207      	bcs.n	8016016 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016006:	4b0c      	ldr	r3, [pc, #48]	; (8016038 <prvAddNewTaskToReadyList+0xdc>)
 8016008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801600c:	601a      	str	r2, [r3, #0]
 801600e:	f3bf 8f4f 	dsb	sy
 8016012:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016016:	bf00      	nop
 8016018:	3708      	adds	r7, #8
 801601a:	46bd      	mov	sp, r7
 801601c:	bd80      	pop	{r7, pc}
 801601e:	bf00      	nop
 8016020:	20005708 	.word	0x20005708
 8016024:	20005234 	.word	0x20005234
 8016028:	20005714 	.word	0x20005714
 801602c:	20005724 	.word	0x20005724
 8016030:	20005710 	.word	0x20005710
 8016034:	20005238 	.word	0x20005238
 8016038:	e000ed04 	.word	0xe000ed04

0801603c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801603c:	b580      	push	{r7, lr}
 801603e:	b084      	sub	sp, #16
 8016040:	af00      	add	r7, sp, #0
 8016042:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016044:	2300      	movs	r3, #0
 8016046:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d017      	beq.n	801607e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801604e:	4b13      	ldr	r3, [pc, #76]	; (801609c <vTaskDelay+0x60>)
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d00a      	beq.n	801606c <vTaskDelay+0x30>
	__asm volatile
 8016056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801605a:	f383 8811 	msr	BASEPRI, r3
 801605e:	f3bf 8f6f 	isb	sy
 8016062:	f3bf 8f4f 	dsb	sy
 8016066:	60bb      	str	r3, [r7, #8]
}
 8016068:	bf00      	nop
 801606a:	e7fe      	b.n	801606a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801606c:	f000 f880 	bl	8016170 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016070:	2100      	movs	r1, #0
 8016072:	6878      	ldr	r0, [r7, #4]
 8016074:	f000 fec0 	bl	8016df8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016078:	f000 f888 	bl	801618c <xTaskResumeAll>
 801607c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d107      	bne.n	8016094 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8016084:	4b06      	ldr	r3, [pc, #24]	; (80160a0 <vTaskDelay+0x64>)
 8016086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801608a:	601a      	str	r2, [r3, #0]
 801608c:	f3bf 8f4f 	dsb	sy
 8016090:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016094:	bf00      	nop
 8016096:	3710      	adds	r7, #16
 8016098:	46bd      	mov	sp, r7
 801609a:	bd80      	pop	{r7, pc}
 801609c:	20005730 	.word	0x20005730
 80160a0:	e000ed04 	.word	0xe000ed04

080160a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b08a      	sub	sp, #40	; 0x28
 80160a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80160aa:	2300      	movs	r3, #0
 80160ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80160ae:	2300      	movs	r3, #0
 80160b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80160b2:	463a      	mov	r2, r7
 80160b4:	1d39      	adds	r1, r7, #4
 80160b6:	f107 0308 	add.w	r3, r7, #8
 80160ba:	4618      	mov	r0, r3
 80160bc:	f7fe fa10 	bl	80144e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80160c0:	6839      	ldr	r1, [r7, #0]
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	68ba      	ldr	r2, [r7, #8]
 80160c6:	9202      	str	r2, [sp, #8]
 80160c8:	9301      	str	r3, [sp, #4]
 80160ca:	2300      	movs	r3, #0
 80160cc:	9300      	str	r3, [sp, #0]
 80160ce:	2300      	movs	r3, #0
 80160d0:	460a      	mov	r2, r1
 80160d2:	4921      	ldr	r1, [pc, #132]	; (8016158 <vTaskStartScheduler+0xb4>)
 80160d4:	4821      	ldr	r0, [pc, #132]	; (801615c <vTaskStartScheduler+0xb8>)
 80160d6:	f7ff fe0f 	bl	8015cf8 <xTaskCreateStatic>
 80160da:	4603      	mov	r3, r0
 80160dc:	4a20      	ldr	r2, [pc, #128]	; (8016160 <vTaskStartScheduler+0xbc>)
 80160de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80160e0:	4b1f      	ldr	r3, [pc, #124]	; (8016160 <vTaskStartScheduler+0xbc>)
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d002      	beq.n	80160ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80160e8:	2301      	movs	r3, #1
 80160ea:	617b      	str	r3, [r7, #20]
 80160ec:	e001      	b.n	80160f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80160ee:	2300      	movs	r3, #0
 80160f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80160f2:	697b      	ldr	r3, [r7, #20]
 80160f4:	2b01      	cmp	r3, #1
 80160f6:	d102      	bne.n	80160fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80160f8:	f000 fed2 	bl	8016ea0 <xTimerCreateTimerTask>
 80160fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80160fe:	697b      	ldr	r3, [r7, #20]
 8016100:	2b01      	cmp	r3, #1
 8016102:	d116      	bne.n	8016132 <vTaskStartScheduler+0x8e>
	__asm volatile
 8016104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016108:	f383 8811 	msr	BASEPRI, r3
 801610c:	f3bf 8f6f 	isb	sy
 8016110:	f3bf 8f4f 	dsb	sy
 8016114:	613b      	str	r3, [r7, #16]
}
 8016116:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016118:	4b12      	ldr	r3, [pc, #72]	; (8016164 <vTaskStartScheduler+0xc0>)
 801611a:	f04f 32ff 	mov.w	r2, #4294967295
 801611e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016120:	4b11      	ldr	r3, [pc, #68]	; (8016168 <vTaskStartScheduler+0xc4>)
 8016122:	2201      	movs	r2, #1
 8016124:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016126:	4b11      	ldr	r3, [pc, #68]	; (801616c <vTaskStartScheduler+0xc8>)
 8016128:	2200      	movs	r2, #0
 801612a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801612c:	f001 fb68 	bl	8017800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016130:	e00e      	b.n	8016150 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016132:	697b      	ldr	r3, [r7, #20]
 8016134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016138:	d10a      	bne.n	8016150 <vTaskStartScheduler+0xac>
	__asm volatile
 801613a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801613e:	f383 8811 	msr	BASEPRI, r3
 8016142:	f3bf 8f6f 	isb	sy
 8016146:	f3bf 8f4f 	dsb	sy
 801614a:	60fb      	str	r3, [r7, #12]
}
 801614c:	bf00      	nop
 801614e:	e7fe      	b.n	801614e <vTaskStartScheduler+0xaa>
}
 8016150:	bf00      	nop
 8016152:	3718      	adds	r7, #24
 8016154:	46bd      	mov	sp, r7
 8016156:	bd80      	pop	{r7, pc}
 8016158:	0801a1c8 	.word	0x0801a1c8
 801615c:	080168e9 	.word	0x080168e9
 8016160:	2000572c 	.word	0x2000572c
 8016164:	20005728 	.word	0x20005728
 8016168:	20005714 	.word	0x20005714
 801616c:	2000570c 	.word	0x2000570c

08016170 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016170:	b480      	push	{r7}
 8016172:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8016174:	4b04      	ldr	r3, [pc, #16]	; (8016188 <vTaskSuspendAll+0x18>)
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	3301      	adds	r3, #1
 801617a:	4a03      	ldr	r2, [pc, #12]	; (8016188 <vTaskSuspendAll+0x18>)
 801617c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801617e:	bf00      	nop
 8016180:	46bd      	mov	sp, r7
 8016182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016186:	4770      	bx	lr
 8016188:	20005730 	.word	0x20005730

0801618c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801618c:	b580      	push	{r7, lr}
 801618e:	b084      	sub	sp, #16
 8016190:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016192:	2300      	movs	r3, #0
 8016194:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016196:	2300      	movs	r3, #0
 8016198:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801619a:	4b42      	ldr	r3, [pc, #264]	; (80162a4 <xTaskResumeAll+0x118>)
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d10a      	bne.n	80161b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80161a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161a6:	f383 8811 	msr	BASEPRI, r3
 80161aa:	f3bf 8f6f 	isb	sy
 80161ae:	f3bf 8f4f 	dsb	sy
 80161b2:	603b      	str	r3, [r7, #0]
}
 80161b4:	bf00      	nop
 80161b6:	e7fe      	b.n	80161b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80161b8:	f001 fbc4 	bl	8017944 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80161bc:	4b39      	ldr	r3, [pc, #228]	; (80162a4 <xTaskResumeAll+0x118>)
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	3b01      	subs	r3, #1
 80161c2:	4a38      	ldr	r2, [pc, #224]	; (80162a4 <xTaskResumeAll+0x118>)
 80161c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80161c6:	4b37      	ldr	r3, [pc, #220]	; (80162a4 <xTaskResumeAll+0x118>)
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d162      	bne.n	8016294 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80161ce:	4b36      	ldr	r3, [pc, #216]	; (80162a8 <xTaskResumeAll+0x11c>)
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d05e      	beq.n	8016294 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80161d6:	e02f      	b.n	8016238 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80161d8:	4b34      	ldr	r3, [pc, #208]	; (80162ac <xTaskResumeAll+0x120>)
 80161da:	68db      	ldr	r3, [r3, #12]
 80161dc:	68db      	ldr	r3, [r3, #12]
 80161de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	3318      	adds	r3, #24
 80161e4:	4618      	mov	r0, r3
 80161e6:	f7fe fc5d 	bl	8014aa4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	3304      	adds	r3, #4
 80161ee:	4618      	mov	r0, r3
 80161f0:	f7fe fc58 	bl	8014aa4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161f8:	4b2d      	ldr	r3, [pc, #180]	; (80162b0 <xTaskResumeAll+0x124>)
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	429a      	cmp	r2, r3
 80161fe:	d903      	bls.n	8016208 <xTaskResumeAll+0x7c>
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016204:	4a2a      	ldr	r2, [pc, #168]	; (80162b0 <xTaskResumeAll+0x124>)
 8016206:	6013      	str	r3, [r2, #0]
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801620c:	4613      	mov	r3, r2
 801620e:	009b      	lsls	r3, r3, #2
 8016210:	4413      	add	r3, r2
 8016212:	009b      	lsls	r3, r3, #2
 8016214:	4a27      	ldr	r2, [pc, #156]	; (80162b4 <xTaskResumeAll+0x128>)
 8016216:	441a      	add	r2, r3
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	3304      	adds	r3, #4
 801621c:	4619      	mov	r1, r3
 801621e:	4610      	mov	r0, r2
 8016220:	f7fe fbe3 	bl	80149ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016228:	4b23      	ldr	r3, [pc, #140]	; (80162b8 <xTaskResumeAll+0x12c>)
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801622e:	429a      	cmp	r2, r3
 8016230:	d302      	bcc.n	8016238 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8016232:	4b22      	ldr	r3, [pc, #136]	; (80162bc <xTaskResumeAll+0x130>)
 8016234:	2201      	movs	r2, #1
 8016236:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016238:	4b1c      	ldr	r3, [pc, #112]	; (80162ac <xTaskResumeAll+0x120>)
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d1cb      	bne.n	80161d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d001      	beq.n	801624a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016246:	f000 fc05 	bl	8016a54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801624a:	4b1d      	ldr	r3, [pc, #116]	; (80162c0 <xTaskResumeAll+0x134>)
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	2b00      	cmp	r3, #0
 8016254:	d010      	beq.n	8016278 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016256:	f000 f859 	bl	801630c <xTaskIncrementTick>
 801625a:	4603      	mov	r3, r0
 801625c:	2b00      	cmp	r3, #0
 801625e:	d002      	beq.n	8016266 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8016260:	4b16      	ldr	r3, [pc, #88]	; (80162bc <xTaskResumeAll+0x130>)
 8016262:	2201      	movs	r2, #1
 8016264:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	3b01      	subs	r3, #1
 801626a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	2b00      	cmp	r3, #0
 8016270:	d1f1      	bne.n	8016256 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8016272:	4b13      	ldr	r3, [pc, #76]	; (80162c0 <xTaskResumeAll+0x134>)
 8016274:	2200      	movs	r2, #0
 8016276:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016278:	4b10      	ldr	r3, [pc, #64]	; (80162bc <xTaskResumeAll+0x130>)
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d009      	beq.n	8016294 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016280:	2301      	movs	r3, #1
 8016282:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016284:	4b0f      	ldr	r3, [pc, #60]	; (80162c4 <xTaskResumeAll+0x138>)
 8016286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801628a:	601a      	str	r2, [r3, #0]
 801628c:	f3bf 8f4f 	dsb	sy
 8016290:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016294:	f001 fb86 	bl	80179a4 <vPortExitCritical>

	return xAlreadyYielded;
 8016298:	68bb      	ldr	r3, [r7, #8]
}
 801629a:	4618      	mov	r0, r3
 801629c:	3710      	adds	r7, #16
 801629e:	46bd      	mov	sp, r7
 80162a0:	bd80      	pop	{r7, pc}
 80162a2:	bf00      	nop
 80162a4:	20005730 	.word	0x20005730
 80162a8:	20005708 	.word	0x20005708
 80162ac:	200056c8 	.word	0x200056c8
 80162b0:	20005710 	.word	0x20005710
 80162b4:	20005238 	.word	0x20005238
 80162b8:	20005234 	.word	0x20005234
 80162bc:	2000571c 	.word	0x2000571c
 80162c0:	20005718 	.word	0x20005718
 80162c4:	e000ed04 	.word	0xe000ed04

080162c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80162c8:	b480      	push	{r7}
 80162ca:	b083      	sub	sp, #12
 80162cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80162ce:	4b05      	ldr	r3, [pc, #20]	; (80162e4 <xTaskGetTickCount+0x1c>)
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80162d4:	687b      	ldr	r3, [r7, #4]
}
 80162d6:	4618      	mov	r0, r3
 80162d8:	370c      	adds	r7, #12
 80162da:	46bd      	mov	sp, r7
 80162dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e0:	4770      	bx	lr
 80162e2:	bf00      	nop
 80162e4:	2000570c 	.word	0x2000570c

080162e8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80162e8:	b580      	push	{r7, lr}
 80162ea:	b082      	sub	sp, #8
 80162ec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80162ee:	f001 fc0b 	bl	8017b08 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80162f2:	2300      	movs	r3, #0
 80162f4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80162f6:	4b04      	ldr	r3, [pc, #16]	; (8016308 <xTaskGetTickCountFromISR+0x20>)
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80162fc:	683b      	ldr	r3, [r7, #0]
}
 80162fe:	4618      	mov	r0, r3
 8016300:	3708      	adds	r7, #8
 8016302:	46bd      	mov	sp, r7
 8016304:	bd80      	pop	{r7, pc}
 8016306:	bf00      	nop
 8016308:	2000570c 	.word	0x2000570c

0801630c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801630c:	b580      	push	{r7, lr}
 801630e:	b086      	sub	sp, #24
 8016310:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016312:	2300      	movs	r3, #0
 8016314:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016316:	4b4f      	ldr	r3, [pc, #316]	; (8016454 <xTaskIncrementTick+0x148>)
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	2b00      	cmp	r3, #0
 801631c:	f040 808f 	bne.w	801643e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016320:	4b4d      	ldr	r3, [pc, #308]	; (8016458 <xTaskIncrementTick+0x14c>)
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	3301      	adds	r3, #1
 8016326:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016328:	4a4b      	ldr	r2, [pc, #300]	; (8016458 <xTaskIncrementTick+0x14c>)
 801632a:	693b      	ldr	r3, [r7, #16]
 801632c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801632e:	693b      	ldr	r3, [r7, #16]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d120      	bne.n	8016376 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8016334:	4b49      	ldr	r3, [pc, #292]	; (801645c <xTaskIncrementTick+0x150>)
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	2b00      	cmp	r3, #0
 801633c:	d00a      	beq.n	8016354 <xTaskIncrementTick+0x48>
	__asm volatile
 801633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016342:	f383 8811 	msr	BASEPRI, r3
 8016346:	f3bf 8f6f 	isb	sy
 801634a:	f3bf 8f4f 	dsb	sy
 801634e:	603b      	str	r3, [r7, #0]
}
 8016350:	bf00      	nop
 8016352:	e7fe      	b.n	8016352 <xTaskIncrementTick+0x46>
 8016354:	4b41      	ldr	r3, [pc, #260]	; (801645c <xTaskIncrementTick+0x150>)
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	60fb      	str	r3, [r7, #12]
 801635a:	4b41      	ldr	r3, [pc, #260]	; (8016460 <xTaskIncrementTick+0x154>)
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	4a3f      	ldr	r2, [pc, #252]	; (801645c <xTaskIncrementTick+0x150>)
 8016360:	6013      	str	r3, [r2, #0]
 8016362:	4a3f      	ldr	r2, [pc, #252]	; (8016460 <xTaskIncrementTick+0x154>)
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	6013      	str	r3, [r2, #0]
 8016368:	4b3e      	ldr	r3, [pc, #248]	; (8016464 <xTaskIncrementTick+0x158>)
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	3301      	adds	r3, #1
 801636e:	4a3d      	ldr	r2, [pc, #244]	; (8016464 <xTaskIncrementTick+0x158>)
 8016370:	6013      	str	r3, [r2, #0]
 8016372:	f000 fb6f 	bl	8016a54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016376:	4b3c      	ldr	r3, [pc, #240]	; (8016468 <xTaskIncrementTick+0x15c>)
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	693a      	ldr	r2, [r7, #16]
 801637c:	429a      	cmp	r2, r3
 801637e:	d349      	bcc.n	8016414 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016380:	4b36      	ldr	r3, [pc, #216]	; (801645c <xTaskIncrementTick+0x150>)
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d104      	bne.n	8016394 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801638a:	4b37      	ldr	r3, [pc, #220]	; (8016468 <xTaskIncrementTick+0x15c>)
 801638c:	f04f 32ff 	mov.w	r2, #4294967295
 8016390:	601a      	str	r2, [r3, #0]
					break;
 8016392:	e03f      	b.n	8016414 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016394:	4b31      	ldr	r3, [pc, #196]	; (801645c <xTaskIncrementTick+0x150>)
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	68db      	ldr	r3, [r3, #12]
 801639a:	68db      	ldr	r3, [r3, #12]
 801639c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801639e:	68bb      	ldr	r3, [r7, #8]
 80163a0:	685b      	ldr	r3, [r3, #4]
 80163a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80163a4:	693a      	ldr	r2, [r7, #16]
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	429a      	cmp	r2, r3
 80163aa:	d203      	bcs.n	80163b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80163ac:	4a2e      	ldr	r2, [pc, #184]	; (8016468 <xTaskIncrementTick+0x15c>)
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80163b2:	e02f      	b.n	8016414 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80163b4:	68bb      	ldr	r3, [r7, #8]
 80163b6:	3304      	adds	r3, #4
 80163b8:	4618      	mov	r0, r3
 80163ba:	f7fe fb73 	bl	8014aa4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80163be:	68bb      	ldr	r3, [r7, #8]
 80163c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d004      	beq.n	80163d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80163c6:	68bb      	ldr	r3, [r7, #8]
 80163c8:	3318      	adds	r3, #24
 80163ca:	4618      	mov	r0, r3
 80163cc:	f7fe fb6a 	bl	8014aa4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80163d0:	68bb      	ldr	r3, [r7, #8]
 80163d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163d4:	4b25      	ldr	r3, [pc, #148]	; (801646c <xTaskIncrementTick+0x160>)
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	429a      	cmp	r2, r3
 80163da:	d903      	bls.n	80163e4 <xTaskIncrementTick+0xd8>
 80163dc:	68bb      	ldr	r3, [r7, #8]
 80163de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163e0:	4a22      	ldr	r2, [pc, #136]	; (801646c <xTaskIncrementTick+0x160>)
 80163e2:	6013      	str	r3, [r2, #0]
 80163e4:	68bb      	ldr	r3, [r7, #8]
 80163e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163e8:	4613      	mov	r3, r2
 80163ea:	009b      	lsls	r3, r3, #2
 80163ec:	4413      	add	r3, r2
 80163ee:	009b      	lsls	r3, r3, #2
 80163f0:	4a1f      	ldr	r2, [pc, #124]	; (8016470 <xTaskIncrementTick+0x164>)
 80163f2:	441a      	add	r2, r3
 80163f4:	68bb      	ldr	r3, [r7, #8]
 80163f6:	3304      	adds	r3, #4
 80163f8:	4619      	mov	r1, r3
 80163fa:	4610      	mov	r0, r2
 80163fc:	f7fe faf5 	bl	80149ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016400:	68bb      	ldr	r3, [r7, #8]
 8016402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016404:	4b1b      	ldr	r3, [pc, #108]	; (8016474 <xTaskIncrementTick+0x168>)
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801640a:	429a      	cmp	r2, r3
 801640c:	d3b8      	bcc.n	8016380 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801640e:	2301      	movs	r3, #1
 8016410:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016412:	e7b5      	b.n	8016380 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016414:	4b17      	ldr	r3, [pc, #92]	; (8016474 <xTaskIncrementTick+0x168>)
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801641a:	4915      	ldr	r1, [pc, #84]	; (8016470 <xTaskIncrementTick+0x164>)
 801641c:	4613      	mov	r3, r2
 801641e:	009b      	lsls	r3, r3, #2
 8016420:	4413      	add	r3, r2
 8016422:	009b      	lsls	r3, r3, #2
 8016424:	440b      	add	r3, r1
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	2b01      	cmp	r3, #1
 801642a:	d901      	bls.n	8016430 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801642c:	2301      	movs	r3, #1
 801642e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8016430:	4b11      	ldr	r3, [pc, #68]	; (8016478 <xTaskIncrementTick+0x16c>)
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d007      	beq.n	8016448 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8016438:	2301      	movs	r3, #1
 801643a:	617b      	str	r3, [r7, #20]
 801643c:	e004      	b.n	8016448 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801643e:	4b0f      	ldr	r3, [pc, #60]	; (801647c <xTaskIncrementTick+0x170>)
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	3301      	adds	r3, #1
 8016444:	4a0d      	ldr	r2, [pc, #52]	; (801647c <xTaskIncrementTick+0x170>)
 8016446:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8016448:	697b      	ldr	r3, [r7, #20]
}
 801644a:	4618      	mov	r0, r3
 801644c:	3718      	adds	r7, #24
 801644e:	46bd      	mov	sp, r7
 8016450:	bd80      	pop	{r7, pc}
 8016452:	bf00      	nop
 8016454:	20005730 	.word	0x20005730
 8016458:	2000570c 	.word	0x2000570c
 801645c:	200056c0 	.word	0x200056c0
 8016460:	200056c4 	.word	0x200056c4
 8016464:	20005720 	.word	0x20005720
 8016468:	20005728 	.word	0x20005728
 801646c:	20005710 	.word	0x20005710
 8016470:	20005238 	.word	0x20005238
 8016474:	20005234 	.word	0x20005234
 8016478:	2000571c 	.word	0x2000571c
 801647c:	20005718 	.word	0x20005718

08016480 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016480:	b480      	push	{r7}
 8016482:	b085      	sub	sp, #20
 8016484:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016486:	4b28      	ldr	r3, [pc, #160]	; (8016528 <vTaskSwitchContext+0xa8>)
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d003      	beq.n	8016496 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801648e:	4b27      	ldr	r3, [pc, #156]	; (801652c <vTaskSwitchContext+0xac>)
 8016490:	2201      	movs	r2, #1
 8016492:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016494:	e041      	b.n	801651a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8016496:	4b25      	ldr	r3, [pc, #148]	; (801652c <vTaskSwitchContext+0xac>)
 8016498:	2200      	movs	r2, #0
 801649a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801649c:	4b24      	ldr	r3, [pc, #144]	; (8016530 <vTaskSwitchContext+0xb0>)
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	60fb      	str	r3, [r7, #12]
 80164a2:	e010      	b.n	80164c6 <vTaskSwitchContext+0x46>
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d10a      	bne.n	80164c0 <vTaskSwitchContext+0x40>
	__asm volatile
 80164aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164ae:	f383 8811 	msr	BASEPRI, r3
 80164b2:	f3bf 8f6f 	isb	sy
 80164b6:	f3bf 8f4f 	dsb	sy
 80164ba:	607b      	str	r3, [r7, #4]
}
 80164bc:	bf00      	nop
 80164be:	e7fe      	b.n	80164be <vTaskSwitchContext+0x3e>
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	3b01      	subs	r3, #1
 80164c4:	60fb      	str	r3, [r7, #12]
 80164c6:	491b      	ldr	r1, [pc, #108]	; (8016534 <vTaskSwitchContext+0xb4>)
 80164c8:	68fa      	ldr	r2, [r7, #12]
 80164ca:	4613      	mov	r3, r2
 80164cc:	009b      	lsls	r3, r3, #2
 80164ce:	4413      	add	r3, r2
 80164d0:	009b      	lsls	r3, r3, #2
 80164d2:	440b      	add	r3, r1
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d0e4      	beq.n	80164a4 <vTaskSwitchContext+0x24>
 80164da:	68fa      	ldr	r2, [r7, #12]
 80164dc:	4613      	mov	r3, r2
 80164de:	009b      	lsls	r3, r3, #2
 80164e0:	4413      	add	r3, r2
 80164e2:	009b      	lsls	r3, r3, #2
 80164e4:	4a13      	ldr	r2, [pc, #76]	; (8016534 <vTaskSwitchContext+0xb4>)
 80164e6:	4413      	add	r3, r2
 80164e8:	60bb      	str	r3, [r7, #8]
 80164ea:	68bb      	ldr	r3, [r7, #8]
 80164ec:	685b      	ldr	r3, [r3, #4]
 80164ee:	685a      	ldr	r2, [r3, #4]
 80164f0:	68bb      	ldr	r3, [r7, #8]
 80164f2:	605a      	str	r2, [r3, #4]
 80164f4:	68bb      	ldr	r3, [r7, #8]
 80164f6:	685a      	ldr	r2, [r3, #4]
 80164f8:	68bb      	ldr	r3, [r7, #8]
 80164fa:	3308      	adds	r3, #8
 80164fc:	429a      	cmp	r2, r3
 80164fe:	d104      	bne.n	801650a <vTaskSwitchContext+0x8a>
 8016500:	68bb      	ldr	r3, [r7, #8]
 8016502:	685b      	ldr	r3, [r3, #4]
 8016504:	685a      	ldr	r2, [r3, #4]
 8016506:	68bb      	ldr	r3, [r7, #8]
 8016508:	605a      	str	r2, [r3, #4]
 801650a:	68bb      	ldr	r3, [r7, #8]
 801650c:	685b      	ldr	r3, [r3, #4]
 801650e:	68db      	ldr	r3, [r3, #12]
 8016510:	4a09      	ldr	r2, [pc, #36]	; (8016538 <vTaskSwitchContext+0xb8>)
 8016512:	6013      	str	r3, [r2, #0]
 8016514:	4a06      	ldr	r2, [pc, #24]	; (8016530 <vTaskSwitchContext+0xb0>)
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	6013      	str	r3, [r2, #0]
}
 801651a:	bf00      	nop
 801651c:	3714      	adds	r7, #20
 801651e:	46bd      	mov	sp, r7
 8016520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016524:	4770      	bx	lr
 8016526:	bf00      	nop
 8016528:	20005730 	.word	0x20005730
 801652c:	2000571c 	.word	0x2000571c
 8016530:	20005710 	.word	0x20005710
 8016534:	20005238 	.word	0x20005238
 8016538:	20005234 	.word	0x20005234

0801653c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801653c:	b580      	push	{r7, lr}
 801653e:	b084      	sub	sp, #16
 8016540:	af00      	add	r7, sp, #0
 8016542:	6078      	str	r0, [r7, #4]
 8016544:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	2b00      	cmp	r3, #0
 801654a:	d10a      	bne.n	8016562 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016550:	f383 8811 	msr	BASEPRI, r3
 8016554:	f3bf 8f6f 	isb	sy
 8016558:	f3bf 8f4f 	dsb	sy
 801655c:	60fb      	str	r3, [r7, #12]
}
 801655e:	bf00      	nop
 8016560:	e7fe      	b.n	8016560 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016562:	4b07      	ldr	r3, [pc, #28]	; (8016580 <vTaskPlaceOnEventList+0x44>)
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	3318      	adds	r3, #24
 8016568:	4619      	mov	r1, r3
 801656a:	6878      	ldr	r0, [r7, #4]
 801656c:	f7fe fa61 	bl	8014a32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016570:	2101      	movs	r1, #1
 8016572:	6838      	ldr	r0, [r7, #0]
 8016574:	f000 fc40 	bl	8016df8 <prvAddCurrentTaskToDelayedList>
}
 8016578:	bf00      	nop
 801657a:	3710      	adds	r7, #16
 801657c:	46bd      	mov	sp, r7
 801657e:	bd80      	pop	{r7, pc}
 8016580:	20005234 	.word	0x20005234

08016584 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8016584:	b580      	push	{r7, lr}
 8016586:	b086      	sub	sp, #24
 8016588:	af00      	add	r7, sp, #0
 801658a:	60f8      	str	r0, [r7, #12]
 801658c:	60b9      	str	r1, [r7, #8]
 801658e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d10a      	bne.n	80165ac <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8016596:	f04f 0350 	mov.w	r3, #80	; 0x50
 801659a:	f383 8811 	msr	BASEPRI, r3
 801659e:	f3bf 8f6f 	isb	sy
 80165a2:	f3bf 8f4f 	dsb	sy
 80165a6:	617b      	str	r3, [r7, #20]
}
 80165a8:	bf00      	nop
 80165aa:	e7fe      	b.n	80165aa <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80165ac:	4b11      	ldr	r3, [pc, #68]	; (80165f4 <vTaskPlaceOnUnorderedEventList+0x70>)
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d10a      	bne.n	80165ca <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80165b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165b8:	f383 8811 	msr	BASEPRI, r3
 80165bc:	f3bf 8f6f 	isb	sy
 80165c0:	f3bf 8f4f 	dsb	sy
 80165c4:	613b      	str	r3, [r7, #16]
}
 80165c6:	bf00      	nop
 80165c8:	e7fe      	b.n	80165c8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80165ca:	4b0b      	ldr	r3, [pc, #44]	; (80165f8 <vTaskPlaceOnUnorderedEventList+0x74>)
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	68ba      	ldr	r2, [r7, #8]
 80165d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80165d4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80165d6:	4b08      	ldr	r3, [pc, #32]	; (80165f8 <vTaskPlaceOnUnorderedEventList+0x74>)
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	3318      	adds	r3, #24
 80165dc:	4619      	mov	r1, r3
 80165de:	68f8      	ldr	r0, [r7, #12]
 80165e0:	f7fe fa03 	bl	80149ea <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80165e4:	2101      	movs	r1, #1
 80165e6:	6878      	ldr	r0, [r7, #4]
 80165e8:	f000 fc06 	bl	8016df8 <prvAddCurrentTaskToDelayedList>
}
 80165ec:	bf00      	nop
 80165ee:	3718      	adds	r7, #24
 80165f0:	46bd      	mov	sp, r7
 80165f2:	bd80      	pop	{r7, pc}
 80165f4:	20005730 	.word	0x20005730
 80165f8:	20005234 	.word	0x20005234

080165fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80165fc:	b580      	push	{r7, lr}
 80165fe:	b086      	sub	sp, #24
 8016600:	af00      	add	r7, sp, #0
 8016602:	60f8      	str	r0, [r7, #12]
 8016604:	60b9      	str	r1, [r7, #8]
 8016606:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	2b00      	cmp	r3, #0
 801660c:	d10a      	bne.n	8016624 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016612:	f383 8811 	msr	BASEPRI, r3
 8016616:	f3bf 8f6f 	isb	sy
 801661a:	f3bf 8f4f 	dsb	sy
 801661e:	617b      	str	r3, [r7, #20]
}
 8016620:	bf00      	nop
 8016622:	e7fe      	b.n	8016622 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016624:	4b0a      	ldr	r3, [pc, #40]	; (8016650 <vTaskPlaceOnEventListRestricted+0x54>)
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	3318      	adds	r3, #24
 801662a:	4619      	mov	r1, r3
 801662c:	68f8      	ldr	r0, [r7, #12]
 801662e:	f7fe f9dc 	bl	80149ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d002      	beq.n	801663e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8016638:	f04f 33ff 	mov.w	r3, #4294967295
 801663c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801663e:	6879      	ldr	r1, [r7, #4]
 8016640:	68b8      	ldr	r0, [r7, #8]
 8016642:	f000 fbd9 	bl	8016df8 <prvAddCurrentTaskToDelayedList>
	}
 8016646:	bf00      	nop
 8016648:	3718      	adds	r7, #24
 801664a:	46bd      	mov	sp, r7
 801664c:	bd80      	pop	{r7, pc}
 801664e:	bf00      	nop
 8016650:	20005234 	.word	0x20005234

08016654 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016654:	b580      	push	{r7, lr}
 8016656:	b086      	sub	sp, #24
 8016658:	af00      	add	r7, sp, #0
 801665a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	68db      	ldr	r3, [r3, #12]
 8016660:	68db      	ldr	r3, [r3, #12]
 8016662:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016664:	693b      	ldr	r3, [r7, #16]
 8016666:	2b00      	cmp	r3, #0
 8016668:	d10a      	bne.n	8016680 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801666a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801666e:	f383 8811 	msr	BASEPRI, r3
 8016672:	f3bf 8f6f 	isb	sy
 8016676:	f3bf 8f4f 	dsb	sy
 801667a:	60fb      	str	r3, [r7, #12]
}
 801667c:	bf00      	nop
 801667e:	e7fe      	b.n	801667e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016680:	693b      	ldr	r3, [r7, #16]
 8016682:	3318      	adds	r3, #24
 8016684:	4618      	mov	r0, r3
 8016686:	f7fe fa0d 	bl	8014aa4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801668a:	4b1e      	ldr	r3, [pc, #120]	; (8016704 <xTaskRemoveFromEventList+0xb0>)
 801668c:	681b      	ldr	r3, [r3, #0]
 801668e:	2b00      	cmp	r3, #0
 8016690:	d11d      	bne.n	80166ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016692:	693b      	ldr	r3, [r7, #16]
 8016694:	3304      	adds	r3, #4
 8016696:	4618      	mov	r0, r3
 8016698:	f7fe fa04 	bl	8014aa4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801669c:	693b      	ldr	r3, [r7, #16]
 801669e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80166a0:	4b19      	ldr	r3, [pc, #100]	; (8016708 <xTaskRemoveFromEventList+0xb4>)
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	429a      	cmp	r2, r3
 80166a6:	d903      	bls.n	80166b0 <xTaskRemoveFromEventList+0x5c>
 80166a8:	693b      	ldr	r3, [r7, #16]
 80166aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166ac:	4a16      	ldr	r2, [pc, #88]	; (8016708 <xTaskRemoveFromEventList+0xb4>)
 80166ae:	6013      	str	r3, [r2, #0]
 80166b0:	693b      	ldr	r3, [r7, #16]
 80166b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80166b4:	4613      	mov	r3, r2
 80166b6:	009b      	lsls	r3, r3, #2
 80166b8:	4413      	add	r3, r2
 80166ba:	009b      	lsls	r3, r3, #2
 80166bc:	4a13      	ldr	r2, [pc, #76]	; (801670c <xTaskRemoveFromEventList+0xb8>)
 80166be:	441a      	add	r2, r3
 80166c0:	693b      	ldr	r3, [r7, #16]
 80166c2:	3304      	adds	r3, #4
 80166c4:	4619      	mov	r1, r3
 80166c6:	4610      	mov	r0, r2
 80166c8:	f7fe f98f 	bl	80149ea <vListInsertEnd>
 80166cc:	e005      	b.n	80166da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80166ce:	693b      	ldr	r3, [r7, #16]
 80166d0:	3318      	adds	r3, #24
 80166d2:	4619      	mov	r1, r3
 80166d4:	480e      	ldr	r0, [pc, #56]	; (8016710 <xTaskRemoveFromEventList+0xbc>)
 80166d6:	f7fe f988 	bl	80149ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80166da:	693b      	ldr	r3, [r7, #16]
 80166dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80166de:	4b0d      	ldr	r3, [pc, #52]	; (8016714 <xTaskRemoveFromEventList+0xc0>)
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166e4:	429a      	cmp	r2, r3
 80166e6:	d905      	bls.n	80166f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80166e8:	2301      	movs	r3, #1
 80166ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80166ec:	4b0a      	ldr	r3, [pc, #40]	; (8016718 <xTaskRemoveFromEventList+0xc4>)
 80166ee:	2201      	movs	r2, #1
 80166f0:	601a      	str	r2, [r3, #0]
 80166f2:	e001      	b.n	80166f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80166f4:	2300      	movs	r3, #0
 80166f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80166f8:	697b      	ldr	r3, [r7, #20]
}
 80166fa:	4618      	mov	r0, r3
 80166fc:	3718      	adds	r7, #24
 80166fe:	46bd      	mov	sp, r7
 8016700:	bd80      	pop	{r7, pc}
 8016702:	bf00      	nop
 8016704:	20005730 	.word	0x20005730
 8016708:	20005710 	.word	0x20005710
 801670c:	20005238 	.word	0x20005238
 8016710:	200056c8 	.word	0x200056c8
 8016714:	20005234 	.word	0x20005234
 8016718:	2000571c 	.word	0x2000571c

0801671c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 801671c:	b580      	push	{r7, lr}
 801671e:	b086      	sub	sp, #24
 8016720:	af00      	add	r7, sp, #0
 8016722:	6078      	str	r0, [r7, #4]
 8016724:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8016726:	4b29      	ldr	r3, [pc, #164]	; (80167cc <vTaskRemoveFromUnorderedEventList+0xb0>)
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d10a      	bne.n	8016744 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016732:	f383 8811 	msr	BASEPRI, r3
 8016736:	f3bf 8f6f 	isb	sy
 801673a:	f3bf 8f4f 	dsb	sy
 801673e:	613b      	str	r3, [r7, #16]
}
 8016740:	bf00      	nop
 8016742:	e7fe      	b.n	8016742 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8016744:	683b      	ldr	r3, [r7, #0]
 8016746:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	68db      	ldr	r3, [r3, #12]
 8016752:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8016754:	697b      	ldr	r3, [r7, #20]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d10a      	bne.n	8016770 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801675e:	f383 8811 	msr	BASEPRI, r3
 8016762:	f3bf 8f6f 	isb	sy
 8016766:	f3bf 8f4f 	dsb	sy
 801676a:	60fb      	str	r3, [r7, #12]
}
 801676c:	bf00      	nop
 801676e:	e7fe      	b.n	801676e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8016770:	6878      	ldr	r0, [r7, #4]
 8016772:	f7fe f997 	bl	8014aa4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016776:	697b      	ldr	r3, [r7, #20]
 8016778:	3304      	adds	r3, #4
 801677a:	4618      	mov	r0, r3
 801677c:	f7fe f992 	bl	8014aa4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8016780:	697b      	ldr	r3, [r7, #20]
 8016782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016784:	4b12      	ldr	r3, [pc, #72]	; (80167d0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	429a      	cmp	r2, r3
 801678a:	d903      	bls.n	8016794 <vTaskRemoveFromUnorderedEventList+0x78>
 801678c:	697b      	ldr	r3, [r7, #20]
 801678e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016790:	4a0f      	ldr	r2, [pc, #60]	; (80167d0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8016792:	6013      	str	r3, [r2, #0]
 8016794:	697b      	ldr	r3, [r7, #20]
 8016796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016798:	4613      	mov	r3, r2
 801679a:	009b      	lsls	r3, r3, #2
 801679c:	4413      	add	r3, r2
 801679e:	009b      	lsls	r3, r3, #2
 80167a0:	4a0c      	ldr	r2, [pc, #48]	; (80167d4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80167a2:	441a      	add	r2, r3
 80167a4:	697b      	ldr	r3, [r7, #20]
 80167a6:	3304      	adds	r3, #4
 80167a8:	4619      	mov	r1, r3
 80167aa:	4610      	mov	r0, r2
 80167ac:	f7fe f91d 	bl	80149ea <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80167b0:	697b      	ldr	r3, [r7, #20]
 80167b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167b4:	4b08      	ldr	r3, [pc, #32]	; (80167d8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167ba:	429a      	cmp	r2, r3
 80167bc:	d902      	bls.n	80167c4 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80167be:	4b07      	ldr	r3, [pc, #28]	; (80167dc <vTaskRemoveFromUnorderedEventList+0xc0>)
 80167c0:	2201      	movs	r2, #1
 80167c2:	601a      	str	r2, [r3, #0]
	}
}
 80167c4:	bf00      	nop
 80167c6:	3718      	adds	r7, #24
 80167c8:	46bd      	mov	sp, r7
 80167ca:	bd80      	pop	{r7, pc}
 80167cc:	20005730 	.word	0x20005730
 80167d0:	20005710 	.word	0x20005710
 80167d4:	20005238 	.word	0x20005238
 80167d8:	20005234 	.word	0x20005234
 80167dc:	2000571c 	.word	0x2000571c

080167e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80167e0:	b480      	push	{r7}
 80167e2:	b083      	sub	sp, #12
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80167e8:	4b06      	ldr	r3, [pc, #24]	; (8016804 <vTaskInternalSetTimeOutState+0x24>)
 80167ea:	681a      	ldr	r2, [r3, #0]
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80167f0:	4b05      	ldr	r3, [pc, #20]	; (8016808 <vTaskInternalSetTimeOutState+0x28>)
 80167f2:	681a      	ldr	r2, [r3, #0]
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	605a      	str	r2, [r3, #4]
}
 80167f8:	bf00      	nop
 80167fa:	370c      	adds	r7, #12
 80167fc:	46bd      	mov	sp, r7
 80167fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016802:	4770      	bx	lr
 8016804:	20005720 	.word	0x20005720
 8016808:	2000570c 	.word	0x2000570c

0801680c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801680c:	b580      	push	{r7, lr}
 801680e:	b088      	sub	sp, #32
 8016810:	af00      	add	r7, sp, #0
 8016812:	6078      	str	r0, [r7, #4]
 8016814:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	2b00      	cmp	r3, #0
 801681a:	d10a      	bne.n	8016832 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016820:	f383 8811 	msr	BASEPRI, r3
 8016824:	f3bf 8f6f 	isb	sy
 8016828:	f3bf 8f4f 	dsb	sy
 801682c:	613b      	str	r3, [r7, #16]
}
 801682e:	bf00      	nop
 8016830:	e7fe      	b.n	8016830 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016832:	683b      	ldr	r3, [r7, #0]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d10a      	bne.n	801684e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8016838:	f04f 0350 	mov.w	r3, #80	; 0x50
 801683c:	f383 8811 	msr	BASEPRI, r3
 8016840:	f3bf 8f6f 	isb	sy
 8016844:	f3bf 8f4f 	dsb	sy
 8016848:	60fb      	str	r3, [r7, #12]
}
 801684a:	bf00      	nop
 801684c:	e7fe      	b.n	801684c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801684e:	f001 f879 	bl	8017944 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016852:	4b1d      	ldr	r3, [pc, #116]	; (80168c8 <xTaskCheckForTimeOut+0xbc>)
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	685b      	ldr	r3, [r3, #4]
 801685c:	69ba      	ldr	r2, [r7, #24]
 801685e:	1ad3      	subs	r3, r2, r3
 8016860:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016862:	683b      	ldr	r3, [r7, #0]
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	f1b3 3fff 	cmp.w	r3, #4294967295
 801686a:	d102      	bne.n	8016872 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801686c:	2300      	movs	r3, #0
 801686e:	61fb      	str	r3, [r7, #28]
 8016870:	e023      	b.n	80168ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	681a      	ldr	r2, [r3, #0]
 8016876:	4b15      	ldr	r3, [pc, #84]	; (80168cc <xTaskCheckForTimeOut+0xc0>)
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	429a      	cmp	r2, r3
 801687c:	d007      	beq.n	801688e <xTaskCheckForTimeOut+0x82>
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	685b      	ldr	r3, [r3, #4]
 8016882:	69ba      	ldr	r2, [r7, #24]
 8016884:	429a      	cmp	r2, r3
 8016886:	d302      	bcc.n	801688e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016888:	2301      	movs	r3, #1
 801688a:	61fb      	str	r3, [r7, #28]
 801688c:	e015      	b.n	80168ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801688e:	683b      	ldr	r3, [r7, #0]
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	697a      	ldr	r2, [r7, #20]
 8016894:	429a      	cmp	r2, r3
 8016896:	d20b      	bcs.n	80168b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016898:	683b      	ldr	r3, [r7, #0]
 801689a:	681a      	ldr	r2, [r3, #0]
 801689c:	697b      	ldr	r3, [r7, #20]
 801689e:	1ad2      	subs	r2, r2, r3
 80168a0:	683b      	ldr	r3, [r7, #0]
 80168a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80168a4:	6878      	ldr	r0, [r7, #4]
 80168a6:	f7ff ff9b 	bl	80167e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80168aa:	2300      	movs	r3, #0
 80168ac:	61fb      	str	r3, [r7, #28]
 80168ae:	e004      	b.n	80168ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80168b0:	683b      	ldr	r3, [r7, #0]
 80168b2:	2200      	movs	r2, #0
 80168b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80168b6:	2301      	movs	r3, #1
 80168b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80168ba:	f001 f873 	bl	80179a4 <vPortExitCritical>

	return xReturn;
 80168be:	69fb      	ldr	r3, [r7, #28]
}
 80168c0:	4618      	mov	r0, r3
 80168c2:	3720      	adds	r7, #32
 80168c4:	46bd      	mov	sp, r7
 80168c6:	bd80      	pop	{r7, pc}
 80168c8:	2000570c 	.word	0x2000570c
 80168cc:	20005720 	.word	0x20005720

080168d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80168d0:	b480      	push	{r7}
 80168d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80168d4:	4b03      	ldr	r3, [pc, #12]	; (80168e4 <vTaskMissedYield+0x14>)
 80168d6:	2201      	movs	r2, #1
 80168d8:	601a      	str	r2, [r3, #0]
}
 80168da:	bf00      	nop
 80168dc:	46bd      	mov	sp, r7
 80168de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e2:	4770      	bx	lr
 80168e4:	2000571c 	.word	0x2000571c

080168e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b082      	sub	sp, #8
 80168ec:	af00      	add	r7, sp, #0
 80168ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80168f0:	f000 f852 	bl	8016998 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80168f4:	4b06      	ldr	r3, [pc, #24]	; (8016910 <prvIdleTask+0x28>)
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	2b01      	cmp	r3, #1
 80168fa:	d9f9      	bls.n	80168f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80168fc:	4b05      	ldr	r3, [pc, #20]	; (8016914 <prvIdleTask+0x2c>)
 80168fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016902:	601a      	str	r2, [r3, #0]
 8016904:	f3bf 8f4f 	dsb	sy
 8016908:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801690c:	e7f0      	b.n	80168f0 <prvIdleTask+0x8>
 801690e:	bf00      	nop
 8016910:	20005238 	.word	0x20005238
 8016914:	e000ed04 	.word	0xe000ed04

08016918 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b082      	sub	sp, #8
 801691c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801691e:	2300      	movs	r3, #0
 8016920:	607b      	str	r3, [r7, #4]
 8016922:	e00c      	b.n	801693e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016924:	687a      	ldr	r2, [r7, #4]
 8016926:	4613      	mov	r3, r2
 8016928:	009b      	lsls	r3, r3, #2
 801692a:	4413      	add	r3, r2
 801692c:	009b      	lsls	r3, r3, #2
 801692e:	4a12      	ldr	r2, [pc, #72]	; (8016978 <prvInitialiseTaskLists+0x60>)
 8016930:	4413      	add	r3, r2
 8016932:	4618      	mov	r0, r3
 8016934:	f7fe f82c 	bl	8014990 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	3301      	adds	r3, #1
 801693c:	607b      	str	r3, [r7, #4]
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	2b37      	cmp	r3, #55	; 0x37
 8016942:	d9ef      	bls.n	8016924 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016944:	480d      	ldr	r0, [pc, #52]	; (801697c <prvInitialiseTaskLists+0x64>)
 8016946:	f7fe f823 	bl	8014990 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801694a:	480d      	ldr	r0, [pc, #52]	; (8016980 <prvInitialiseTaskLists+0x68>)
 801694c:	f7fe f820 	bl	8014990 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016950:	480c      	ldr	r0, [pc, #48]	; (8016984 <prvInitialiseTaskLists+0x6c>)
 8016952:	f7fe f81d 	bl	8014990 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016956:	480c      	ldr	r0, [pc, #48]	; (8016988 <prvInitialiseTaskLists+0x70>)
 8016958:	f7fe f81a 	bl	8014990 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801695c:	480b      	ldr	r0, [pc, #44]	; (801698c <prvInitialiseTaskLists+0x74>)
 801695e:	f7fe f817 	bl	8014990 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016962:	4b0b      	ldr	r3, [pc, #44]	; (8016990 <prvInitialiseTaskLists+0x78>)
 8016964:	4a05      	ldr	r2, [pc, #20]	; (801697c <prvInitialiseTaskLists+0x64>)
 8016966:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016968:	4b0a      	ldr	r3, [pc, #40]	; (8016994 <prvInitialiseTaskLists+0x7c>)
 801696a:	4a05      	ldr	r2, [pc, #20]	; (8016980 <prvInitialiseTaskLists+0x68>)
 801696c:	601a      	str	r2, [r3, #0]
}
 801696e:	bf00      	nop
 8016970:	3708      	adds	r7, #8
 8016972:	46bd      	mov	sp, r7
 8016974:	bd80      	pop	{r7, pc}
 8016976:	bf00      	nop
 8016978:	20005238 	.word	0x20005238
 801697c:	20005698 	.word	0x20005698
 8016980:	200056ac 	.word	0x200056ac
 8016984:	200056c8 	.word	0x200056c8
 8016988:	200056dc 	.word	0x200056dc
 801698c:	200056f4 	.word	0x200056f4
 8016990:	200056c0 	.word	0x200056c0
 8016994:	200056c4 	.word	0x200056c4

08016998 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016998:	b580      	push	{r7, lr}
 801699a:	b082      	sub	sp, #8
 801699c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801699e:	e019      	b.n	80169d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80169a0:	f000 ffd0 	bl	8017944 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80169a4:	4b10      	ldr	r3, [pc, #64]	; (80169e8 <prvCheckTasksWaitingTermination+0x50>)
 80169a6:	68db      	ldr	r3, [r3, #12]
 80169a8:	68db      	ldr	r3, [r3, #12]
 80169aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	3304      	adds	r3, #4
 80169b0:	4618      	mov	r0, r3
 80169b2:	f7fe f877 	bl	8014aa4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80169b6:	4b0d      	ldr	r3, [pc, #52]	; (80169ec <prvCheckTasksWaitingTermination+0x54>)
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	3b01      	subs	r3, #1
 80169bc:	4a0b      	ldr	r2, [pc, #44]	; (80169ec <prvCheckTasksWaitingTermination+0x54>)
 80169be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80169c0:	4b0b      	ldr	r3, [pc, #44]	; (80169f0 <prvCheckTasksWaitingTermination+0x58>)
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	3b01      	subs	r3, #1
 80169c6:	4a0a      	ldr	r2, [pc, #40]	; (80169f0 <prvCheckTasksWaitingTermination+0x58>)
 80169c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80169ca:	f000 ffeb 	bl	80179a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80169ce:	6878      	ldr	r0, [r7, #4]
 80169d0:	f000 f810 	bl	80169f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80169d4:	4b06      	ldr	r3, [pc, #24]	; (80169f0 <prvCheckTasksWaitingTermination+0x58>)
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d1e1      	bne.n	80169a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80169dc:	bf00      	nop
 80169de:	bf00      	nop
 80169e0:	3708      	adds	r7, #8
 80169e2:	46bd      	mov	sp, r7
 80169e4:	bd80      	pop	{r7, pc}
 80169e6:	bf00      	nop
 80169e8:	200056dc 	.word	0x200056dc
 80169ec:	20005708 	.word	0x20005708
 80169f0:	200056f0 	.word	0x200056f0

080169f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80169f4:	b580      	push	{r7, lr}
 80169f6:	b084      	sub	sp, #16
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d108      	bne.n	8016a18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	f001 f988 	bl	8017d20 <vPortFree>
				vPortFree( pxTCB );
 8016a10:	6878      	ldr	r0, [r7, #4]
 8016a12:	f001 f985 	bl	8017d20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016a16:	e018      	b.n	8016a4a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8016a1e:	2b01      	cmp	r3, #1
 8016a20:	d103      	bne.n	8016a2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8016a22:	6878      	ldr	r0, [r7, #4]
 8016a24:	f001 f97c 	bl	8017d20 <vPortFree>
	}
 8016a28:	e00f      	b.n	8016a4a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8016a30:	2b02      	cmp	r3, #2
 8016a32:	d00a      	beq.n	8016a4a <prvDeleteTCB+0x56>
	__asm volatile
 8016a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a38:	f383 8811 	msr	BASEPRI, r3
 8016a3c:	f3bf 8f6f 	isb	sy
 8016a40:	f3bf 8f4f 	dsb	sy
 8016a44:	60fb      	str	r3, [r7, #12]
}
 8016a46:	bf00      	nop
 8016a48:	e7fe      	b.n	8016a48 <prvDeleteTCB+0x54>
	}
 8016a4a:	bf00      	nop
 8016a4c:	3710      	adds	r7, #16
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	bd80      	pop	{r7, pc}
	...

08016a54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016a54:	b480      	push	{r7}
 8016a56:	b083      	sub	sp, #12
 8016a58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016a5a:	4b0c      	ldr	r3, [pc, #48]	; (8016a8c <prvResetNextTaskUnblockTime+0x38>)
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d104      	bne.n	8016a6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016a64:	4b0a      	ldr	r3, [pc, #40]	; (8016a90 <prvResetNextTaskUnblockTime+0x3c>)
 8016a66:	f04f 32ff 	mov.w	r2, #4294967295
 8016a6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016a6c:	e008      	b.n	8016a80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a6e:	4b07      	ldr	r3, [pc, #28]	; (8016a8c <prvResetNextTaskUnblockTime+0x38>)
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	68db      	ldr	r3, [r3, #12]
 8016a74:	68db      	ldr	r3, [r3, #12]
 8016a76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	685b      	ldr	r3, [r3, #4]
 8016a7c:	4a04      	ldr	r2, [pc, #16]	; (8016a90 <prvResetNextTaskUnblockTime+0x3c>)
 8016a7e:	6013      	str	r3, [r2, #0]
}
 8016a80:	bf00      	nop
 8016a82:	370c      	adds	r7, #12
 8016a84:	46bd      	mov	sp, r7
 8016a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a8a:	4770      	bx	lr
 8016a8c:	200056c0 	.word	0x200056c0
 8016a90:	20005728 	.word	0x20005728

08016a94 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8016a94:	b480      	push	{r7}
 8016a96:	b083      	sub	sp, #12
 8016a98:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8016a9a:	4b05      	ldr	r3, [pc, #20]	; (8016ab0 <xTaskGetCurrentTaskHandle+0x1c>)
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8016aa0:	687b      	ldr	r3, [r7, #4]
	}
 8016aa2:	4618      	mov	r0, r3
 8016aa4:	370c      	adds	r7, #12
 8016aa6:	46bd      	mov	sp, r7
 8016aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aac:	4770      	bx	lr
 8016aae:	bf00      	nop
 8016ab0:	20005234 	.word	0x20005234

08016ab4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016ab4:	b480      	push	{r7}
 8016ab6:	b083      	sub	sp, #12
 8016ab8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016aba:	4b0b      	ldr	r3, [pc, #44]	; (8016ae8 <xTaskGetSchedulerState+0x34>)
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d102      	bne.n	8016ac8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016ac2:	2301      	movs	r3, #1
 8016ac4:	607b      	str	r3, [r7, #4]
 8016ac6:	e008      	b.n	8016ada <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016ac8:	4b08      	ldr	r3, [pc, #32]	; (8016aec <xTaskGetSchedulerState+0x38>)
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d102      	bne.n	8016ad6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016ad0:	2302      	movs	r3, #2
 8016ad2:	607b      	str	r3, [r7, #4]
 8016ad4:	e001      	b.n	8016ada <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016ada:	687b      	ldr	r3, [r7, #4]
	}
 8016adc:	4618      	mov	r0, r3
 8016ade:	370c      	adds	r7, #12
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae6:	4770      	bx	lr
 8016ae8:	20005714 	.word	0x20005714
 8016aec:	20005730 	.word	0x20005730

08016af0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016af0:	b580      	push	{r7, lr}
 8016af2:	b084      	sub	sp, #16
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016afc:	2300      	movs	r3, #0
 8016afe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d051      	beq.n	8016baa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016b06:	68bb      	ldr	r3, [r7, #8]
 8016b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b0a:	4b2a      	ldr	r3, [pc, #168]	; (8016bb4 <xTaskPriorityInherit+0xc4>)
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b10:	429a      	cmp	r2, r3
 8016b12:	d241      	bcs.n	8016b98 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016b14:	68bb      	ldr	r3, [r7, #8]
 8016b16:	699b      	ldr	r3, [r3, #24]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	db06      	blt.n	8016b2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016b1c:	4b25      	ldr	r3, [pc, #148]	; (8016bb4 <xTaskPriorityInherit+0xc4>)
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016b26:	68bb      	ldr	r3, [r7, #8]
 8016b28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016b2a:	68bb      	ldr	r3, [r7, #8]
 8016b2c:	6959      	ldr	r1, [r3, #20]
 8016b2e:	68bb      	ldr	r3, [r7, #8]
 8016b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b32:	4613      	mov	r3, r2
 8016b34:	009b      	lsls	r3, r3, #2
 8016b36:	4413      	add	r3, r2
 8016b38:	009b      	lsls	r3, r3, #2
 8016b3a:	4a1f      	ldr	r2, [pc, #124]	; (8016bb8 <xTaskPriorityInherit+0xc8>)
 8016b3c:	4413      	add	r3, r2
 8016b3e:	4299      	cmp	r1, r3
 8016b40:	d122      	bne.n	8016b88 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016b42:	68bb      	ldr	r3, [r7, #8]
 8016b44:	3304      	adds	r3, #4
 8016b46:	4618      	mov	r0, r3
 8016b48:	f7fd ffac 	bl	8014aa4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016b4c:	4b19      	ldr	r3, [pc, #100]	; (8016bb4 <xTaskPriorityInherit+0xc4>)
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b52:	68bb      	ldr	r3, [r7, #8]
 8016b54:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8016b56:	68bb      	ldr	r3, [r7, #8]
 8016b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b5a:	4b18      	ldr	r3, [pc, #96]	; (8016bbc <xTaskPriorityInherit+0xcc>)
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	429a      	cmp	r2, r3
 8016b60:	d903      	bls.n	8016b6a <xTaskPriorityInherit+0x7a>
 8016b62:	68bb      	ldr	r3, [r7, #8]
 8016b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b66:	4a15      	ldr	r2, [pc, #84]	; (8016bbc <xTaskPriorityInherit+0xcc>)
 8016b68:	6013      	str	r3, [r2, #0]
 8016b6a:	68bb      	ldr	r3, [r7, #8]
 8016b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b6e:	4613      	mov	r3, r2
 8016b70:	009b      	lsls	r3, r3, #2
 8016b72:	4413      	add	r3, r2
 8016b74:	009b      	lsls	r3, r3, #2
 8016b76:	4a10      	ldr	r2, [pc, #64]	; (8016bb8 <xTaskPriorityInherit+0xc8>)
 8016b78:	441a      	add	r2, r3
 8016b7a:	68bb      	ldr	r3, [r7, #8]
 8016b7c:	3304      	adds	r3, #4
 8016b7e:	4619      	mov	r1, r3
 8016b80:	4610      	mov	r0, r2
 8016b82:	f7fd ff32 	bl	80149ea <vListInsertEnd>
 8016b86:	e004      	b.n	8016b92 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016b88:	4b0a      	ldr	r3, [pc, #40]	; (8016bb4 <xTaskPriorityInherit+0xc4>)
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b8e:	68bb      	ldr	r3, [r7, #8]
 8016b90:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8016b92:	2301      	movs	r3, #1
 8016b94:	60fb      	str	r3, [r7, #12]
 8016b96:	e008      	b.n	8016baa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8016b98:	68bb      	ldr	r3, [r7, #8]
 8016b9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016b9c:	4b05      	ldr	r3, [pc, #20]	; (8016bb4 <xTaskPriorityInherit+0xc4>)
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ba2:	429a      	cmp	r2, r3
 8016ba4:	d201      	bcs.n	8016baa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8016ba6:	2301      	movs	r3, #1
 8016ba8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016baa:	68fb      	ldr	r3, [r7, #12]
	}
 8016bac:	4618      	mov	r0, r3
 8016bae:	3710      	adds	r7, #16
 8016bb0:	46bd      	mov	sp, r7
 8016bb2:	bd80      	pop	{r7, pc}
 8016bb4:	20005234 	.word	0x20005234
 8016bb8:	20005238 	.word	0x20005238
 8016bbc:	20005710 	.word	0x20005710

08016bc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b086      	sub	sp, #24
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016bcc:	2300      	movs	r3, #0
 8016bce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d056      	beq.n	8016c84 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016bd6:	4b2e      	ldr	r3, [pc, #184]	; (8016c90 <xTaskPriorityDisinherit+0xd0>)
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	693a      	ldr	r2, [r7, #16]
 8016bdc:	429a      	cmp	r2, r3
 8016bde:	d00a      	beq.n	8016bf6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8016be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016be4:	f383 8811 	msr	BASEPRI, r3
 8016be8:	f3bf 8f6f 	isb	sy
 8016bec:	f3bf 8f4f 	dsb	sy
 8016bf0:	60fb      	str	r3, [r7, #12]
}
 8016bf2:	bf00      	nop
 8016bf4:	e7fe      	b.n	8016bf4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8016bf6:	693b      	ldr	r3, [r7, #16]
 8016bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d10a      	bne.n	8016c14 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8016bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c02:	f383 8811 	msr	BASEPRI, r3
 8016c06:	f3bf 8f6f 	isb	sy
 8016c0a:	f3bf 8f4f 	dsb	sy
 8016c0e:	60bb      	str	r3, [r7, #8]
}
 8016c10:	bf00      	nop
 8016c12:	e7fe      	b.n	8016c12 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8016c14:	693b      	ldr	r3, [r7, #16]
 8016c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016c18:	1e5a      	subs	r2, r3, #1
 8016c1a:	693b      	ldr	r3, [r7, #16]
 8016c1c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016c1e:	693b      	ldr	r3, [r7, #16]
 8016c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c22:	693b      	ldr	r3, [r7, #16]
 8016c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016c26:	429a      	cmp	r2, r3
 8016c28:	d02c      	beq.n	8016c84 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016c2a:	693b      	ldr	r3, [r7, #16]
 8016c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d128      	bne.n	8016c84 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016c32:	693b      	ldr	r3, [r7, #16]
 8016c34:	3304      	adds	r3, #4
 8016c36:	4618      	mov	r0, r3
 8016c38:	f7fd ff34 	bl	8014aa4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016c3c:	693b      	ldr	r3, [r7, #16]
 8016c3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016c40:	693b      	ldr	r3, [r7, #16]
 8016c42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016c44:	693b      	ldr	r3, [r7, #16]
 8016c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c48:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016c4c:	693b      	ldr	r3, [r7, #16]
 8016c4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016c50:	693b      	ldr	r3, [r7, #16]
 8016c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c54:	4b0f      	ldr	r3, [pc, #60]	; (8016c94 <xTaskPriorityDisinherit+0xd4>)
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	429a      	cmp	r2, r3
 8016c5a:	d903      	bls.n	8016c64 <xTaskPriorityDisinherit+0xa4>
 8016c5c:	693b      	ldr	r3, [r7, #16]
 8016c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c60:	4a0c      	ldr	r2, [pc, #48]	; (8016c94 <xTaskPriorityDisinherit+0xd4>)
 8016c62:	6013      	str	r3, [r2, #0]
 8016c64:	693b      	ldr	r3, [r7, #16]
 8016c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c68:	4613      	mov	r3, r2
 8016c6a:	009b      	lsls	r3, r3, #2
 8016c6c:	4413      	add	r3, r2
 8016c6e:	009b      	lsls	r3, r3, #2
 8016c70:	4a09      	ldr	r2, [pc, #36]	; (8016c98 <xTaskPriorityDisinherit+0xd8>)
 8016c72:	441a      	add	r2, r3
 8016c74:	693b      	ldr	r3, [r7, #16]
 8016c76:	3304      	adds	r3, #4
 8016c78:	4619      	mov	r1, r3
 8016c7a:	4610      	mov	r0, r2
 8016c7c:	f7fd feb5 	bl	80149ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016c80:	2301      	movs	r3, #1
 8016c82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016c84:	697b      	ldr	r3, [r7, #20]
	}
 8016c86:	4618      	mov	r0, r3
 8016c88:	3718      	adds	r7, #24
 8016c8a:	46bd      	mov	sp, r7
 8016c8c:	bd80      	pop	{r7, pc}
 8016c8e:	bf00      	nop
 8016c90:	20005234 	.word	0x20005234
 8016c94:	20005710 	.word	0x20005710
 8016c98:	20005238 	.word	0x20005238

08016c9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016c9c:	b580      	push	{r7, lr}
 8016c9e:	b088      	sub	sp, #32
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	6078      	str	r0, [r7, #4]
 8016ca4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8016caa:	2301      	movs	r3, #1
 8016cac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d06a      	beq.n	8016d8a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8016cb4:	69bb      	ldr	r3, [r7, #24]
 8016cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d10a      	bne.n	8016cd2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8016cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cc0:	f383 8811 	msr	BASEPRI, r3
 8016cc4:	f3bf 8f6f 	isb	sy
 8016cc8:	f3bf 8f4f 	dsb	sy
 8016ccc:	60fb      	str	r3, [r7, #12]
}
 8016cce:	bf00      	nop
 8016cd0:	e7fe      	b.n	8016cd0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016cd2:	69bb      	ldr	r3, [r7, #24]
 8016cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016cd6:	683a      	ldr	r2, [r7, #0]
 8016cd8:	429a      	cmp	r2, r3
 8016cda:	d902      	bls.n	8016ce2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8016cdc:	683b      	ldr	r3, [r7, #0]
 8016cde:	61fb      	str	r3, [r7, #28]
 8016ce0:	e002      	b.n	8016ce8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8016ce2:	69bb      	ldr	r3, [r7, #24]
 8016ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016ce6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8016ce8:	69bb      	ldr	r3, [r7, #24]
 8016cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cec:	69fa      	ldr	r2, [r7, #28]
 8016cee:	429a      	cmp	r2, r3
 8016cf0:	d04b      	beq.n	8016d8a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016cf2:	69bb      	ldr	r3, [r7, #24]
 8016cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016cf6:	697a      	ldr	r2, [r7, #20]
 8016cf8:	429a      	cmp	r2, r3
 8016cfa:	d146      	bne.n	8016d8a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8016cfc:	4b25      	ldr	r3, [pc, #148]	; (8016d94 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	69ba      	ldr	r2, [r7, #24]
 8016d02:	429a      	cmp	r2, r3
 8016d04:	d10a      	bne.n	8016d1c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8016d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d0a:	f383 8811 	msr	BASEPRI, r3
 8016d0e:	f3bf 8f6f 	isb	sy
 8016d12:	f3bf 8f4f 	dsb	sy
 8016d16:	60bb      	str	r3, [r7, #8]
}
 8016d18:	bf00      	nop
 8016d1a:	e7fe      	b.n	8016d1a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8016d1c:	69bb      	ldr	r3, [r7, #24]
 8016d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d20:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8016d22:	69bb      	ldr	r3, [r7, #24]
 8016d24:	69fa      	ldr	r2, [r7, #28]
 8016d26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016d28:	69bb      	ldr	r3, [r7, #24]
 8016d2a:	699b      	ldr	r3, [r3, #24]
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	db04      	blt.n	8016d3a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016d30:	69fb      	ldr	r3, [r7, #28]
 8016d32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016d36:	69bb      	ldr	r3, [r7, #24]
 8016d38:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016d3a:	69bb      	ldr	r3, [r7, #24]
 8016d3c:	6959      	ldr	r1, [r3, #20]
 8016d3e:	693a      	ldr	r2, [r7, #16]
 8016d40:	4613      	mov	r3, r2
 8016d42:	009b      	lsls	r3, r3, #2
 8016d44:	4413      	add	r3, r2
 8016d46:	009b      	lsls	r3, r3, #2
 8016d48:	4a13      	ldr	r2, [pc, #76]	; (8016d98 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8016d4a:	4413      	add	r3, r2
 8016d4c:	4299      	cmp	r1, r3
 8016d4e:	d11c      	bne.n	8016d8a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016d50:	69bb      	ldr	r3, [r7, #24]
 8016d52:	3304      	adds	r3, #4
 8016d54:	4618      	mov	r0, r3
 8016d56:	f7fd fea5 	bl	8014aa4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8016d5a:	69bb      	ldr	r3, [r7, #24]
 8016d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d5e:	4b0f      	ldr	r3, [pc, #60]	; (8016d9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	429a      	cmp	r2, r3
 8016d64:	d903      	bls.n	8016d6e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8016d66:	69bb      	ldr	r3, [r7, #24]
 8016d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d6a:	4a0c      	ldr	r2, [pc, #48]	; (8016d9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8016d6c:	6013      	str	r3, [r2, #0]
 8016d6e:	69bb      	ldr	r3, [r7, #24]
 8016d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d72:	4613      	mov	r3, r2
 8016d74:	009b      	lsls	r3, r3, #2
 8016d76:	4413      	add	r3, r2
 8016d78:	009b      	lsls	r3, r3, #2
 8016d7a:	4a07      	ldr	r2, [pc, #28]	; (8016d98 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8016d7c:	441a      	add	r2, r3
 8016d7e:	69bb      	ldr	r3, [r7, #24]
 8016d80:	3304      	adds	r3, #4
 8016d82:	4619      	mov	r1, r3
 8016d84:	4610      	mov	r0, r2
 8016d86:	f7fd fe30 	bl	80149ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016d8a:	bf00      	nop
 8016d8c:	3720      	adds	r7, #32
 8016d8e:	46bd      	mov	sp, r7
 8016d90:	bd80      	pop	{r7, pc}
 8016d92:	bf00      	nop
 8016d94:	20005234 	.word	0x20005234
 8016d98:	20005238 	.word	0x20005238
 8016d9c:	20005710 	.word	0x20005710

08016da0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8016da0:	b480      	push	{r7}
 8016da2:	b083      	sub	sp, #12
 8016da4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8016da6:	4b09      	ldr	r3, [pc, #36]	; (8016dcc <uxTaskResetEventItemValue+0x2c>)
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	699b      	ldr	r3, [r3, #24]
 8016dac:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016dae:	4b07      	ldr	r3, [pc, #28]	; (8016dcc <uxTaskResetEventItemValue+0x2c>)
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016db4:	4b05      	ldr	r3, [pc, #20]	; (8016dcc <uxTaskResetEventItemValue+0x2c>)
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8016dbc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8016dbe:	687b      	ldr	r3, [r7, #4]
}
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	370c      	adds	r7, #12
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dca:	4770      	bx	lr
 8016dcc:	20005234 	.word	0x20005234

08016dd0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8016dd0:	b480      	push	{r7}
 8016dd2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016dd4:	4b07      	ldr	r3, [pc, #28]	; (8016df4 <pvTaskIncrementMutexHeldCount+0x24>)
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d004      	beq.n	8016de6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016ddc:	4b05      	ldr	r3, [pc, #20]	; (8016df4 <pvTaskIncrementMutexHeldCount+0x24>)
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016de2:	3201      	adds	r2, #1
 8016de4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8016de6:	4b03      	ldr	r3, [pc, #12]	; (8016df4 <pvTaskIncrementMutexHeldCount+0x24>)
 8016de8:	681b      	ldr	r3, [r3, #0]
	}
 8016dea:	4618      	mov	r0, r3
 8016dec:	46bd      	mov	sp, r7
 8016dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016df2:	4770      	bx	lr
 8016df4:	20005234 	.word	0x20005234

08016df8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016df8:	b580      	push	{r7, lr}
 8016dfa:	b084      	sub	sp, #16
 8016dfc:	af00      	add	r7, sp, #0
 8016dfe:	6078      	str	r0, [r7, #4]
 8016e00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016e02:	4b21      	ldr	r3, [pc, #132]	; (8016e88 <prvAddCurrentTaskToDelayedList+0x90>)
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016e08:	4b20      	ldr	r3, [pc, #128]	; (8016e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	3304      	adds	r3, #4
 8016e0e:	4618      	mov	r0, r3
 8016e10:	f7fd fe48 	bl	8014aa4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e1a:	d10a      	bne.n	8016e32 <prvAddCurrentTaskToDelayedList+0x3a>
 8016e1c:	683b      	ldr	r3, [r7, #0]
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d007      	beq.n	8016e32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016e22:	4b1a      	ldr	r3, [pc, #104]	; (8016e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8016e24:	681b      	ldr	r3, [r3, #0]
 8016e26:	3304      	adds	r3, #4
 8016e28:	4619      	mov	r1, r3
 8016e2a:	4819      	ldr	r0, [pc, #100]	; (8016e90 <prvAddCurrentTaskToDelayedList+0x98>)
 8016e2c:	f7fd fddd 	bl	80149ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016e30:	e026      	b.n	8016e80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016e32:	68fa      	ldr	r2, [r7, #12]
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	4413      	add	r3, r2
 8016e38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016e3a:	4b14      	ldr	r3, [pc, #80]	; (8016e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	68ba      	ldr	r2, [r7, #8]
 8016e40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016e42:	68ba      	ldr	r2, [r7, #8]
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	429a      	cmp	r2, r3
 8016e48:	d209      	bcs.n	8016e5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016e4a:	4b12      	ldr	r3, [pc, #72]	; (8016e94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8016e4c:	681a      	ldr	r2, [r3, #0]
 8016e4e:	4b0f      	ldr	r3, [pc, #60]	; (8016e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	3304      	adds	r3, #4
 8016e54:	4619      	mov	r1, r3
 8016e56:	4610      	mov	r0, r2
 8016e58:	f7fd fdeb 	bl	8014a32 <vListInsert>
}
 8016e5c:	e010      	b.n	8016e80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016e5e:	4b0e      	ldr	r3, [pc, #56]	; (8016e98 <prvAddCurrentTaskToDelayedList+0xa0>)
 8016e60:	681a      	ldr	r2, [r3, #0]
 8016e62:	4b0a      	ldr	r3, [pc, #40]	; (8016e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	3304      	adds	r3, #4
 8016e68:	4619      	mov	r1, r3
 8016e6a:	4610      	mov	r0, r2
 8016e6c:	f7fd fde1 	bl	8014a32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016e70:	4b0a      	ldr	r3, [pc, #40]	; (8016e9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	68ba      	ldr	r2, [r7, #8]
 8016e76:	429a      	cmp	r2, r3
 8016e78:	d202      	bcs.n	8016e80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8016e7a:	4a08      	ldr	r2, [pc, #32]	; (8016e9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8016e7c:	68bb      	ldr	r3, [r7, #8]
 8016e7e:	6013      	str	r3, [r2, #0]
}
 8016e80:	bf00      	nop
 8016e82:	3710      	adds	r7, #16
 8016e84:	46bd      	mov	sp, r7
 8016e86:	bd80      	pop	{r7, pc}
 8016e88:	2000570c 	.word	0x2000570c
 8016e8c:	20005234 	.word	0x20005234
 8016e90:	200056f4 	.word	0x200056f4
 8016e94:	200056c4 	.word	0x200056c4
 8016e98:	200056c0 	.word	0x200056c0
 8016e9c:	20005728 	.word	0x20005728

08016ea0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b08a      	sub	sp, #40	; 0x28
 8016ea4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8016eaa:	f000 fba1 	bl	80175f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8016eae:	4b1c      	ldr	r3, [pc, #112]	; (8016f20 <xTimerCreateTimerTask+0x80>)
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d021      	beq.n	8016efa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8016eba:	2300      	movs	r3, #0
 8016ebc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8016ebe:	1d3a      	adds	r2, r7, #4
 8016ec0:	f107 0108 	add.w	r1, r7, #8
 8016ec4:	f107 030c 	add.w	r3, r7, #12
 8016ec8:	4618      	mov	r0, r3
 8016eca:	f7fd fb23 	bl	8014514 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8016ece:	6879      	ldr	r1, [r7, #4]
 8016ed0:	68bb      	ldr	r3, [r7, #8]
 8016ed2:	68fa      	ldr	r2, [r7, #12]
 8016ed4:	9202      	str	r2, [sp, #8]
 8016ed6:	9301      	str	r3, [sp, #4]
 8016ed8:	2302      	movs	r3, #2
 8016eda:	9300      	str	r3, [sp, #0]
 8016edc:	2300      	movs	r3, #0
 8016ede:	460a      	mov	r2, r1
 8016ee0:	4910      	ldr	r1, [pc, #64]	; (8016f24 <xTimerCreateTimerTask+0x84>)
 8016ee2:	4811      	ldr	r0, [pc, #68]	; (8016f28 <xTimerCreateTimerTask+0x88>)
 8016ee4:	f7fe ff08 	bl	8015cf8 <xTaskCreateStatic>
 8016ee8:	4603      	mov	r3, r0
 8016eea:	4a10      	ldr	r2, [pc, #64]	; (8016f2c <xTimerCreateTimerTask+0x8c>)
 8016eec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8016eee:	4b0f      	ldr	r3, [pc, #60]	; (8016f2c <xTimerCreateTimerTask+0x8c>)
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d001      	beq.n	8016efa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8016ef6:	2301      	movs	r3, #1
 8016ef8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8016efa:	697b      	ldr	r3, [r7, #20]
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d10a      	bne.n	8016f16 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8016f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f04:	f383 8811 	msr	BASEPRI, r3
 8016f08:	f3bf 8f6f 	isb	sy
 8016f0c:	f3bf 8f4f 	dsb	sy
 8016f10:	613b      	str	r3, [r7, #16]
}
 8016f12:	bf00      	nop
 8016f14:	e7fe      	b.n	8016f14 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8016f16:	697b      	ldr	r3, [r7, #20]
}
 8016f18:	4618      	mov	r0, r3
 8016f1a:	3718      	adds	r7, #24
 8016f1c:	46bd      	mov	sp, r7
 8016f1e:	bd80      	pop	{r7, pc}
 8016f20:	20005764 	.word	0x20005764
 8016f24:	0801a1d0 	.word	0x0801a1d0
 8016f28:	08017199 	.word	0x08017199
 8016f2c:	20005768 	.word	0x20005768

08016f30 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8016f30:	b580      	push	{r7, lr}
 8016f32:	b088      	sub	sp, #32
 8016f34:	af02      	add	r7, sp, #8
 8016f36:	60f8      	str	r0, [r7, #12]
 8016f38:	60b9      	str	r1, [r7, #8]
 8016f3a:	607a      	str	r2, [r7, #4]
 8016f3c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8016f3e:	202c      	movs	r0, #44	; 0x2c
 8016f40:	f000 fe22 	bl	8017b88 <pvPortMalloc>
 8016f44:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8016f46:	697b      	ldr	r3, [r7, #20]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d00d      	beq.n	8016f68 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8016f4c:	697b      	ldr	r3, [r7, #20]
 8016f4e:	2200      	movs	r2, #0
 8016f50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8016f54:	697b      	ldr	r3, [r7, #20]
 8016f56:	9301      	str	r3, [sp, #4]
 8016f58:	6a3b      	ldr	r3, [r7, #32]
 8016f5a:	9300      	str	r3, [sp, #0]
 8016f5c:	683b      	ldr	r3, [r7, #0]
 8016f5e:	687a      	ldr	r2, [r7, #4]
 8016f60:	68b9      	ldr	r1, [r7, #8]
 8016f62:	68f8      	ldr	r0, [r7, #12]
 8016f64:	f000 f843 	bl	8016fee <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8016f68:	697b      	ldr	r3, [r7, #20]
	}
 8016f6a:	4618      	mov	r0, r3
 8016f6c:	3718      	adds	r7, #24
 8016f6e:	46bd      	mov	sp, r7
 8016f70:	bd80      	pop	{r7, pc}

08016f72 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8016f72:	b580      	push	{r7, lr}
 8016f74:	b08a      	sub	sp, #40	; 0x28
 8016f76:	af02      	add	r7, sp, #8
 8016f78:	60f8      	str	r0, [r7, #12]
 8016f7a:	60b9      	str	r1, [r7, #8]
 8016f7c:	607a      	str	r2, [r7, #4]
 8016f7e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8016f80:	232c      	movs	r3, #44	; 0x2c
 8016f82:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8016f84:	693b      	ldr	r3, [r7, #16]
 8016f86:	2b2c      	cmp	r3, #44	; 0x2c
 8016f88:	d00a      	beq.n	8016fa0 <xTimerCreateStatic+0x2e>
	__asm volatile
 8016f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f8e:	f383 8811 	msr	BASEPRI, r3
 8016f92:	f3bf 8f6f 	isb	sy
 8016f96:	f3bf 8f4f 	dsb	sy
 8016f9a:	61bb      	str	r3, [r7, #24]
}
 8016f9c:	bf00      	nop
 8016f9e:	e7fe      	b.n	8016f9e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016fa0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8016fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d10a      	bne.n	8016fbe <xTimerCreateStatic+0x4c>
	__asm volatile
 8016fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fac:	f383 8811 	msr	BASEPRI, r3
 8016fb0:	f3bf 8f6f 	isb	sy
 8016fb4:	f3bf 8f4f 	dsb	sy
 8016fb8:	617b      	str	r3, [r7, #20]
}
 8016fba:	bf00      	nop
 8016fbc:	e7fe      	b.n	8016fbc <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8016fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fc0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8016fc2:	69fb      	ldr	r3, [r7, #28]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d00d      	beq.n	8016fe4 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8016fc8:	69fb      	ldr	r3, [r7, #28]
 8016fca:	2202      	movs	r2, #2
 8016fcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8016fd0:	69fb      	ldr	r3, [r7, #28]
 8016fd2:	9301      	str	r3, [sp, #4]
 8016fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fd6:	9300      	str	r3, [sp, #0]
 8016fd8:	683b      	ldr	r3, [r7, #0]
 8016fda:	687a      	ldr	r2, [r7, #4]
 8016fdc:	68b9      	ldr	r1, [r7, #8]
 8016fde:	68f8      	ldr	r0, [r7, #12]
 8016fe0:	f000 f805 	bl	8016fee <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8016fe4:	69fb      	ldr	r3, [r7, #28]
	}
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	3720      	adds	r7, #32
 8016fea:	46bd      	mov	sp, r7
 8016fec:	bd80      	pop	{r7, pc}

08016fee <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8016fee:	b580      	push	{r7, lr}
 8016ff0:	b086      	sub	sp, #24
 8016ff2:	af00      	add	r7, sp, #0
 8016ff4:	60f8      	str	r0, [r7, #12]
 8016ff6:	60b9      	str	r1, [r7, #8]
 8016ff8:	607a      	str	r2, [r7, #4]
 8016ffa:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8016ffc:	68bb      	ldr	r3, [r7, #8]
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d10a      	bne.n	8017018 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8017002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017006:	f383 8811 	msr	BASEPRI, r3
 801700a:	f3bf 8f6f 	isb	sy
 801700e:	f3bf 8f4f 	dsb	sy
 8017012:	617b      	str	r3, [r7, #20]
}
 8017014:	bf00      	nop
 8017016:	e7fe      	b.n	8017016 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8017018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801701a:	2b00      	cmp	r3, #0
 801701c:	d01e      	beq.n	801705c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 801701e:	f000 fae7 	bl	80175f0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8017022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017024:	68fa      	ldr	r2, [r7, #12]
 8017026:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8017028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801702a:	68ba      	ldr	r2, [r7, #8]
 801702c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 801702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017030:	683a      	ldr	r2, [r7, #0]
 8017032:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8017034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017036:	6a3a      	ldr	r2, [r7, #32]
 8017038:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801703a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801703c:	3304      	adds	r3, #4
 801703e:	4618      	mov	r0, r3
 8017040:	f7fd fcc6 	bl	80149d0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d008      	beq.n	801705c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 801704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801704c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017050:	f043 0304 	orr.w	r3, r3, #4
 8017054:	b2da      	uxtb	r2, r3
 8017056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017058:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 801705c:	bf00      	nop
 801705e:	3718      	adds	r7, #24
 8017060:	46bd      	mov	sp, r7
 8017062:	bd80      	pop	{r7, pc}

08017064 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017064:	b580      	push	{r7, lr}
 8017066:	b08a      	sub	sp, #40	; 0x28
 8017068:	af00      	add	r7, sp, #0
 801706a:	60f8      	str	r0, [r7, #12]
 801706c:	60b9      	str	r1, [r7, #8]
 801706e:	607a      	str	r2, [r7, #4]
 8017070:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8017072:	2300      	movs	r3, #0
 8017074:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	2b00      	cmp	r3, #0
 801707a:	d10a      	bne.n	8017092 <xTimerGenericCommand+0x2e>
	__asm volatile
 801707c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017080:	f383 8811 	msr	BASEPRI, r3
 8017084:	f3bf 8f6f 	isb	sy
 8017088:	f3bf 8f4f 	dsb	sy
 801708c:	623b      	str	r3, [r7, #32]
}
 801708e:	bf00      	nop
 8017090:	e7fe      	b.n	8017090 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8017092:	4b1a      	ldr	r3, [pc, #104]	; (80170fc <xTimerGenericCommand+0x98>)
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	2b00      	cmp	r3, #0
 8017098:	d02a      	beq.n	80170f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801709a:	68bb      	ldr	r3, [r7, #8]
 801709c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80170a6:	68bb      	ldr	r3, [r7, #8]
 80170a8:	2b05      	cmp	r3, #5
 80170aa:	dc18      	bgt.n	80170de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80170ac:	f7ff fd02 	bl	8016ab4 <xTaskGetSchedulerState>
 80170b0:	4603      	mov	r3, r0
 80170b2:	2b02      	cmp	r3, #2
 80170b4:	d109      	bne.n	80170ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80170b6:	4b11      	ldr	r3, [pc, #68]	; (80170fc <xTimerGenericCommand+0x98>)
 80170b8:	6818      	ldr	r0, [r3, #0]
 80170ba:	f107 0110 	add.w	r1, r7, #16
 80170be:	2300      	movs	r3, #0
 80170c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80170c2:	f7fd ff77 	bl	8014fb4 <xQueueGenericSend>
 80170c6:	6278      	str	r0, [r7, #36]	; 0x24
 80170c8:	e012      	b.n	80170f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80170ca:	4b0c      	ldr	r3, [pc, #48]	; (80170fc <xTimerGenericCommand+0x98>)
 80170cc:	6818      	ldr	r0, [r3, #0]
 80170ce:	f107 0110 	add.w	r1, r7, #16
 80170d2:	2300      	movs	r3, #0
 80170d4:	2200      	movs	r2, #0
 80170d6:	f7fd ff6d 	bl	8014fb4 <xQueueGenericSend>
 80170da:	6278      	str	r0, [r7, #36]	; 0x24
 80170dc:	e008      	b.n	80170f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80170de:	4b07      	ldr	r3, [pc, #28]	; (80170fc <xTimerGenericCommand+0x98>)
 80170e0:	6818      	ldr	r0, [r3, #0]
 80170e2:	f107 0110 	add.w	r1, r7, #16
 80170e6:	2300      	movs	r3, #0
 80170e8:	683a      	ldr	r2, [r7, #0]
 80170ea:	f7fe f861 	bl	80151b0 <xQueueGenericSendFromISR>
 80170ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80170f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80170f2:	4618      	mov	r0, r3
 80170f4:	3728      	adds	r7, #40	; 0x28
 80170f6:	46bd      	mov	sp, r7
 80170f8:	bd80      	pop	{r7, pc}
 80170fa:	bf00      	nop
 80170fc:	20005764 	.word	0x20005764

08017100 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017100:	b580      	push	{r7, lr}
 8017102:	b088      	sub	sp, #32
 8017104:	af02      	add	r7, sp, #8
 8017106:	6078      	str	r0, [r7, #4]
 8017108:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801710a:	4b22      	ldr	r3, [pc, #136]	; (8017194 <prvProcessExpiredTimer+0x94>)
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	68db      	ldr	r3, [r3, #12]
 8017110:	68db      	ldr	r3, [r3, #12]
 8017112:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017114:	697b      	ldr	r3, [r7, #20]
 8017116:	3304      	adds	r3, #4
 8017118:	4618      	mov	r0, r3
 801711a:	f7fd fcc3 	bl	8014aa4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801711e:	697b      	ldr	r3, [r7, #20]
 8017120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017124:	f003 0304 	and.w	r3, r3, #4
 8017128:	2b00      	cmp	r3, #0
 801712a:	d022      	beq.n	8017172 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801712c:	697b      	ldr	r3, [r7, #20]
 801712e:	699a      	ldr	r2, [r3, #24]
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	18d1      	adds	r1, r2, r3
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	683a      	ldr	r2, [r7, #0]
 8017138:	6978      	ldr	r0, [r7, #20]
 801713a:	f000 f8d1 	bl	80172e0 <prvInsertTimerInActiveList>
 801713e:	4603      	mov	r3, r0
 8017140:	2b00      	cmp	r3, #0
 8017142:	d01f      	beq.n	8017184 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017144:	2300      	movs	r3, #0
 8017146:	9300      	str	r3, [sp, #0]
 8017148:	2300      	movs	r3, #0
 801714a:	687a      	ldr	r2, [r7, #4]
 801714c:	2100      	movs	r1, #0
 801714e:	6978      	ldr	r0, [r7, #20]
 8017150:	f7ff ff88 	bl	8017064 <xTimerGenericCommand>
 8017154:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017156:	693b      	ldr	r3, [r7, #16]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d113      	bne.n	8017184 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801715c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017160:	f383 8811 	msr	BASEPRI, r3
 8017164:	f3bf 8f6f 	isb	sy
 8017168:	f3bf 8f4f 	dsb	sy
 801716c:	60fb      	str	r3, [r7, #12]
}
 801716e:	bf00      	nop
 8017170:	e7fe      	b.n	8017170 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017172:	697b      	ldr	r3, [r7, #20]
 8017174:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017178:	f023 0301 	bic.w	r3, r3, #1
 801717c:	b2da      	uxtb	r2, r3
 801717e:	697b      	ldr	r3, [r7, #20]
 8017180:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017184:	697b      	ldr	r3, [r7, #20]
 8017186:	6a1b      	ldr	r3, [r3, #32]
 8017188:	6978      	ldr	r0, [r7, #20]
 801718a:	4798      	blx	r3
}
 801718c:	bf00      	nop
 801718e:	3718      	adds	r7, #24
 8017190:	46bd      	mov	sp, r7
 8017192:	bd80      	pop	{r7, pc}
 8017194:	2000575c 	.word	0x2000575c

08017198 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b084      	sub	sp, #16
 801719c:	af00      	add	r7, sp, #0
 801719e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80171a0:	f107 0308 	add.w	r3, r7, #8
 80171a4:	4618      	mov	r0, r3
 80171a6:	f000 f857 	bl	8017258 <prvGetNextExpireTime>
 80171aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80171ac:	68bb      	ldr	r3, [r7, #8]
 80171ae:	4619      	mov	r1, r3
 80171b0:	68f8      	ldr	r0, [r7, #12]
 80171b2:	f000 f803 	bl	80171bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80171b6:	f000 f8d5 	bl	8017364 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80171ba:	e7f1      	b.n	80171a0 <prvTimerTask+0x8>

080171bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80171bc:	b580      	push	{r7, lr}
 80171be:	b084      	sub	sp, #16
 80171c0:	af00      	add	r7, sp, #0
 80171c2:	6078      	str	r0, [r7, #4]
 80171c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80171c6:	f7fe ffd3 	bl	8016170 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80171ca:	f107 0308 	add.w	r3, r7, #8
 80171ce:	4618      	mov	r0, r3
 80171d0:	f000 f866 	bl	80172a0 <prvSampleTimeNow>
 80171d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80171d6:	68bb      	ldr	r3, [r7, #8]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d130      	bne.n	801723e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80171dc:	683b      	ldr	r3, [r7, #0]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d10a      	bne.n	80171f8 <prvProcessTimerOrBlockTask+0x3c>
 80171e2:	687a      	ldr	r2, [r7, #4]
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	429a      	cmp	r2, r3
 80171e8:	d806      	bhi.n	80171f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80171ea:	f7fe ffcf 	bl	801618c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80171ee:	68f9      	ldr	r1, [r7, #12]
 80171f0:	6878      	ldr	r0, [r7, #4]
 80171f2:	f7ff ff85 	bl	8017100 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80171f6:	e024      	b.n	8017242 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80171f8:	683b      	ldr	r3, [r7, #0]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d008      	beq.n	8017210 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80171fe:	4b13      	ldr	r3, [pc, #76]	; (801724c <prvProcessTimerOrBlockTask+0x90>)
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	2b00      	cmp	r3, #0
 8017206:	d101      	bne.n	801720c <prvProcessTimerOrBlockTask+0x50>
 8017208:	2301      	movs	r3, #1
 801720a:	e000      	b.n	801720e <prvProcessTimerOrBlockTask+0x52>
 801720c:	2300      	movs	r3, #0
 801720e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017210:	4b0f      	ldr	r3, [pc, #60]	; (8017250 <prvProcessTimerOrBlockTask+0x94>)
 8017212:	6818      	ldr	r0, [r3, #0]
 8017214:	687a      	ldr	r2, [r7, #4]
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	1ad3      	subs	r3, r2, r3
 801721a:	683a      	ldr	r2, [r7, #0]
 801721c:	4619      	mov	r1, r3
 801721e:	f7fe fd37 	bl	8015c90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017222:	f7fe ffb3 	bl	801618c <xTaskResumeAll>
 8017226:	4603      	mov	r3, r0
 8017228:	2b00      	cmp	r3, #0
 801722a:	d10a      	bne.n	8017242 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801722c:	4b09      	ldr	r3, [pc, #36]	; (8017254 <prvProcessTimerOrBlockTask+0x98>)
 801722e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017232:	601a      	str	r2, [r3, #0]
 8017234:	f3bf 8f4f 	dsb	sy
 8017238:	f3bf 8f6f 	isb	sy
}
 801723c:	e001      	b.n	8017242 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801723e:	f7fe ffa5 	bl	801618c <xTaskResumeAll>
}
 8017242:	bf00      	nop
 8017244:	3710      	adds	r7, #16
 8017246:	46bd      	mov	sp, r7
 8017248:	bd80      	pop	{r7, pc}
 801724a:	bf00      	nop
 801724c:	20005760 	.word	0x20005760
 8017250:	20005764 	.word	0x20005764
 8017254:	e000ed04 	.word	0xe000ed04

08017258 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017258:	b480      	push	{r7}
 801725a:	b085      	sub	sp, #20
 801725c:	af00      	add	r7, sp, #0
 801725e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017260:	4b0e      	ldr	r3, [pc, #56]	; (801729c <prvGetNextExpireTime+0x44>)
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	681b      	ldr	r3, [r3, #0]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d101      	bne.n	801726e <prvGetNextExpireTime+0x16>
 801726a:	2201      	movs	r2, #1
 801726c:	e000      	b.n	8017270 <prvGetNextExpireTime+0x18>
 801726e:	2200      	movs	r2, #0
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	2b00      	cmp	r3, #0
 801727a:	d105      	bne.n	8017288 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801727c:	4b07      	ldr	r3, [pc, #28]	; (801729c <prvGetNextExpireTime+0x44>)
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	68db      	ldr	r3, [r3, #12]
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	60fb      	str	r3, [r7, #12]
 8017286:	e001      	b.n	801728c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017288:	2300      	movs	r3, #0
 801728a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801728c:	68fb      	ldr	r3, [r7, #12]
}
 801728e:	4618      	mov	r0, r3
 8017290:	3714      	adds	r7, #20
 8017292:	46bd      	mov	sp, r7
 8017294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017298:	4770      	bx	lr
 801729a:	bf00      	nop
 801729c:	2000575c 	.word	0x2000575c

080172a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80172a0:	b580      	push	{r7, lr}
 80172a2:	b084      	sub	sp, #16
 80172a4:	af00      	add	r7, sp, #0
 80172a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80172a8:	f7ff f80e 	bl	80162c8 <xTaskGetTickCount>
 80172ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80172ae:	4b0b      	ldr	r3, [pc, #44]	; (80172dc <prvSampleTimeNow+0x3c>)
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	68fa      	ldr	r2, [r7, #12]
 80172b4:	429a      	cmp	r2, r3
 80172b6:	d205      	bcs.n	80172c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80172b8:	f000 f936 	bl	8017528 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	2201      	movs	r2, #1
 80172c0:	601a      	str	r2, [r3, #0]
 80172c2:	e002      	b.n	80172ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	2200      	movs	r2, #0
 80172c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80172ca:	4a04      	ldr	r2, [pc, #16]	; (80172dc <prvSampleTimeNow+0x3c>)
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80172d0:	68fb      	ldr	r3, [r7, #12]
}
 80172d2:	4618      	mov	r0, r3
 80172d4:	3710      	adds	r7, #16
 80172d6:	46bd      	mov	sp, r7
 80172d8:	bd80      	pop	{r7, pc}
 80172da:	bf00      	nop
 80172dc:	2000576c 	.word	0x2000576c

080172e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	b086      	sub	sp, #24
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	60f8      	str	r0, [r7, #12]
 80172e8:	60b9      	str	r1, [r7, #8]
 80172ea:	607a      	str	r2, [r7, #4]
 80172ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80172ee:	2300      	movs	r3, #0
 80172f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	68ba      	ldr	r2, [r7, #8]
 80172f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	68fa      	ldr	r2, [r7, #12]
 80172fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80172fe:	68ba      	ldr	r2, [r7, #8]
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	429a      	cmp	r2, r3
 8017304:	d812      	bhi.n	801732c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017306:	687a      	ldr	r2, [r7, #4]
 8017308:	683b      	ldr	r3, [r7, #0]
 801730a:	1ad2      	subs	r2, r2, r3
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	699b      	ldr	r3, [r3, #24]
 8017310:	429a      	cmp	r2, r3
 8017312:	d302      	bcc.n	801731a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017314:	2301      	movs	r3, #1
 8017316:	617b      	str	r3, [r7, #20]
 8017318:	e01b      	b.n	8017352 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801731a:	4b10      	ldr	r3, [pc, #64]	; (801735c <prvInsertTimerInActiveList+0x7c>)
 801731c:	681a      	ldr	r2, [r3, #0]
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	3304      	adds	r3, #4
 8017322:	4619      	mov	r1, r3
 8017324:	4610      	mov	r0, r2
 8017326:	f7fd fb84 	bl	8014a32 <vListInsert>
 801732a:	e012      	b.n	8017352 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801732c:	687a      	ldr	r2, [r7, #4]
 801732e:	683b      	ldr	r3, [r7, #0]
 8017330:	429a      	cmp	r2, r3
 8017332:	d206      	bcs.n	8017342 <prvInsertTimerInActiveList+0x62>
 8017334:	68ba      	ldr	r2, [r7, #8]
 8017336:	683b      	ldr	r3, [r7, #0]
 8017338:	429a      	cmp	r2, r3
 801733a:	d302      	bcc.n	8017342 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801733c:	2301      	movs	r3, #1
 801733e:	617b      	str	r3, [r7, #20]
 8017340:	e007      	b.n	8017352 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017342:	4b07      	ldr	r3, [pc, #28]	; (8017360 <prvInsertTimerInActiveList+0x80>)
 8017344:	681a      	ldr	r2, [r3, #0]
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	3304      	adds	r3, #4
 801734a:	4619      	mov	r1, r3
 801734c:	4610      	mov	r0, r2
 801734e:	f7fd fb70 	bl	8014a32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8017352:	697b      	ldr	r3, [r7, #20]
}
 8017354:	4618      	mov	r0, r3
 8017356:	3718      	adds	r7, #24
 8017358:	46bd      	mov	sp, r7
 801735a:	bd80      	pop	{r7, pc}
 801735c:	20005760 	.word	0x20005760
 8017360:	2000575c 	.word	0x2000575c

08017364 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017364:	b580      	push	{r7, lr}
 8017366:	b08e      	sub	sp, #56	; 0x38
 8017368:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801736a:	e0ca      	b.n	8017502 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	2b00      	cmp	r3, #0
 8017370:	da18      	bge.n	80173a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8017372:	1d3b      	adds	r3, r7, #4
 8017374:	3304      	adds	r3, #4
 8017376:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8017378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801737a:	2b00      	cmp	r3, #0
 801737c:	d10a      	bne.n	8017394 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801737e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017382:	f383 8811 	msr	BASEPRI, r3
 8017386:	f3bf 8f6f 	isb	sy
 801738a:	f3bf 8f4f 	dsb	sy
 801738e:	61fb      	str	r3, [r7, #28]
}
 8017390:	bf00      	nop
 8017392:	e7fe      	b.n	8017392 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8017394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801739a:	6850      	ldr	r0, [r2, #4]
 801739c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801739e:	6892      	ldr	r2, [r2, #8]
 80173a0:	4611      	mov	r1, r2
 80173a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	f2c0 80aa 	blt.w	8017500 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80173b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173b2:	695b      	ldr	r3, [r3, #20]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d004      	beq.n	80173c2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80173b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173ba:	3304      	adds	r3, #4
 80173bc:	4618      	mov	r0, r3
 80173be:	f7fd fb71 	bl	8014aa4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80173c2:	463b      	mov	r3, r7
 80173c4:	4618      	mov	r0, r3
 80173c6:	f7ff ff6b 	bl	80172a0 <prvSampleTimeNow>
 80173ca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	2b09      	cmp	r3, #9
 80173d0:	f200 8097 	bhi.w	8017502 <prvProcessReceivedCommands+0x19e>
 80173d4:	a201      	add	r2, pc, #4	; (adr r2, 80173dc <prvProcessReceivedCommands+0x78>)
 80173d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80173da:	bf00      	nop
 80173dc:	08017405 	.word	0x08017405
 80173e0:	08017405 	.word	0x08017405
 80173e4:	08017405 	.word	0x08017405
 80173e8:	08017479 	.word	0x08017479
 80173ec:	0801748d 	.word	0x0801748d
 80173f0:	080174d7 	.word	0x080174d7
 80173f4:	08017405 	.word	0x08017405
 80173f8:	08017405 	.word	0x08017405
 80173fc:	08017479 	.word	0x08017479
 8017400:	0801748d 	.word	0x0801748d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017406:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801740a:	f043 0301 	orr.w	r3, r3, #1
 801740e:	b2da      	uxtb	r2, r3
 8017410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017412:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017416:	68ba      	ldr	r2, [r7, #8]
 8017418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801741a:	699b      	ldr	r3, [r3, #24]
 801741c:	18d1      	adds	r1, r2, r3
 801741e:	68bb      	ldr	r3, [r7, #8]
 8017420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017424:	f7ff ff5c 	bl	80172e0 <prvInsertTimerInActiveList>
 8017428:	4603      	mov	r3, r0
 801742a:	2b00      	cmp	r3, #0
 801742c:	d069      	beq.n	8017502 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017430:	6a1b      	ldr	r3, [r3, #32]
 8017432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017434:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801743c:	f003 0304 	and.w	r3, r3, #4
 8017440:	2b00      	cmp	r3, #0
 8017442:	d05e      	beq.n	8017502 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017444:	68ba      	ldr	r2, [r7, #8]
 8017446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017448:	699b      	ldr	r3, [r3, #24]
 801744a:	441a      	add	r2, r3
 801744c:	2300      	movs	r3, #0
 801744e:	9300      	str	r3, [sp, #0]
 8017450:	2300      	movs	r3, #0
 8017452:	2100      	movs	r1, #0
 8017454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017456:	f7ff fe05 	bl	8017064 <xTimerGenericCommand>
 801745a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801745c:	6a3b      	ldr	r3, [r7, #32]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d14f      	bne.n	8017502 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8017462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017466:	f383 8811 	msr	BASEPRI, r3
 801746a:	f3bf 8f6f 	isb	sy
 801746e:	f3bf 8f4f 	dsb	sy
 8017472:	61bb      	str	r3, [r7, #24]
}
 8017474:	bf00      	nop
 8017476:	e7fe      	b.n	8017476 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801747a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801747e:	f023 0301 	bic.w	r3, r3, #1
 8017482:	b2da      	uxtb	r2, r3
 8017484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017486:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801748a:	e03a      	b.n	8017502 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801748c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801748e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017492:	f043 0301 	orr.w	r3, r3, #1
 8017496:	b2da      	uxtb	r2, r3
 8017498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801749a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801749e:	68ba      	ldr	r2, [r7, #8]
 80174a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174a2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80174a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174a6:	699b      	ldr	r3, [r3, #24]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d10a      	bne.n	80174c2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80174ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174b0:	f383 8811 	msr	BASEPRI, r3
 80174b4:	f3bf 8f6f 	isb	sy
 80174b8:	f3bf 8f4f 	dsb	sy
 80174bc:	617b      	str	r3, [r7, #20]
}
 80174be:	bf00      	nop
 80174c0:	e7fe      	b.n	80174c0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80174c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174c4:	699a      	ldr	r2, [r3, #24]
 80174c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174c8:	18d1      	adds	r1, r2, r3
 80174ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80174ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80174d0:	f7ff ff06 	bl	80172e0 <prvInsertTimerInActiveList>
					break;
 80174d4:	e015      	b.n	8017502 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80174d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80174dc:	f003 0302 	and.w	r3, r3, #2
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d103      	bne.n	80174ec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80174e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80174e6:	f000 fc1b 	bl	8017d20 <vPortFree>
 80174ea:	e00a      	b.n	8017502 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80174ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80174f2:	f023 0301 	bic.w	r3, r3, #1
 80174f6:	b2da      	uxtb	r2, r3
 80174f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80174fe:	e000      	b.n	8017502 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8017500:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017502:	4b08      	ldr	r3, [pc, #32]	; (8017524 <prvProcessReceivedCommands+0x1c0>)
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	1d39      	adds	r1, r7, #4
 8017508:	2200      	movs	r2, #0
 801750a:	4618      	mov	r0, r3
 801750c:	f7fd ff78 	bl	8015400 <xQueueReceive>
 8017510:	4603      	mov	r3, r0
 8017512:	2b00      	cmp	r3, #0
 8017514:	f47f af2a 	bne.w	801736c <prvProcessReceivedCommands+0x8>
	}
}
 8017518:	bf00      	nop
 801751a:	bf00      	nop
 801751c:	3730      	adds	r7, #48	; 0x30
 801751e:	46bd      	mov	sp, r7
 8017520:	bd80      	pop	{r7, pc}
 8017522:	bf00      	nop
 8017524:	20005764 	.word	0x20005764

08017528 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017528:	b580      	push	{r7, lr}
 801752a:	b088      	sub	sp, #32
 801752c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801752e:	e048      	b.n	80175c2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017530:	4b2d      	ldr	r3, [pc, #180]	; (80175e8 <prvSwitchTimerLists+0xc0>)
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	68db      	ldr	r3, [r3, #12]
 8017536:	681b      	ldr	r3, [r3, #0]
 8017538:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801753a:	4b2b      	ldr	r3, [pc, #172]	; (80175e8 <prvSwitchTimerLists+0xc0>)
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	68db      	ldr	r3, [r3, #12]
 8017540:	68db      	ldr	r3, [r3, #12]
 8017542:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017544:	68fb      	ldr	r3, [r7, #12]
 8017546:	3304      	adds	r3, #4
 8017548:	4618      	mov	r0, r3
 801754a:	f7fd faab 	bl	8014aa4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	6a1b      	ldr	r3, [r3, #32]
 8017552:	68f8      	ldr	r0, [r7, #12]
 8017554:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017556:	68fb      	ldr	r3, [r7, #12]
 8017558:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801755c:	f003 0304 	and.w	r3, r3, #4
 8017560:	2b00      	cmp	r3, #0
 8017562:	d02e      	beq.n	80175c2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	699b      	ldr	r3, [r3, #24]
 8017568:	693a      	ldr	r2, [r7, #16]
 801756a:	4413      	add	r3, r2
 801756c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801756e:	68ba      	ldr	r2, [r7, #8]
 8017570:	693b      	ldr	r3, [r7, #16]
 8017572:	429a      	cmp	r2, r3
 8017574:	d90e      	bls.n	8017594 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	68ba      	ldr	r2, [r7, #8]
 801757a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801757c:	68fb      	ldr	r3, [r7, #12]
 801757e:	68fa      	ldr	r2, [r7, #12]
 8017580:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017582:	4b19      	ldr	r3, [pc, #100]	; (80175e8 <prvSwitchTimerLists+0xc0>)
 8017584:	681a      	ldr	r2, [r3, #0]
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	3304      	adds	r3, #4
 801758a:	4619      	mov	r1, r3
 801758c:	4610      	mov	r0, r2
 801758e:	f7fd fa50 	bl	8014a32 <vListInsert>
 8017592:	e016      	b.n	80175c2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017594:	2300      	movs	r3, #0
 8017596:	9300      	str	r3, [sp, #0]
 8017598:	2300      	movs	r3, #0
 801759a:	693a      	ldr	r2, [r7, #16]
 801759c:	2100      	movs	r1, #0
 801759e:	68f8      	ldr	r0, [r7, #12]
 80175a0:	f7ff fd60 	bl	8017064 <xTimerGenericCommand>
 80175a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d10a      	bne.n	80175c2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80175ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175b0:	f383 8811 	msr	BASEPRI, r3
 80175b4:	f3bf 8f6f 	isb	sy
 80175b8:	f3bf 8f4f 	dsb	sy
 80175bc:	603b      	str	r3, [r7, #0]
}
 80175be:	bf00      	nop
 80175c0:	e7fe      	b.n	80175c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80175c2:	4b09      	ldr	r3, [pc, #36]	; (80175e8 <prvSwitchTimerLists+0xc0>)
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d1b1      	bne.n	8017530 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80175cc:	4b06      	ldr	r3, [pc, #24]	; (80175e8 <prvSwitchTimerLists+0xc0>)
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80175d2:	4b06      	ldr	r3, [pc, #24]	; (80175ec <prvSwitchTimerLists+0xc4>)
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	4a04      	ldr	r2, [pc, #16]	; (80175e8 <prvSwitchTimerLists+0xc0>)
 80175d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80175da:	4a04      	ldr	r2, [pc, #16]	; (80175ec <prvSwitchTimerLists+0xc4>)
 80175dc:	697b      	ldr	r3, [r7, #20]
 80175de:	6013      	str	r3, [r2, #0]
}
 80175e0:	bf00      	nop
 80175e2:	3718      	adds	r7, #24
 80175e4:	46bd      	mov	sp, r7
 80175e6:	bd80      	pop	{r7, pc}
 80175e8:	2000575c 	.word	0x2000575c
 80175ec:	20005760 	.word	0x20005760

080175f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80175f0:	b580      	push	{r7, lr}
 80175f2:	b082      	sub	sp, #8
 80175f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80175f6:	f000 f9a5 	bl	8017944 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80175fa:	4b15      	ldr	r3, [pc, #84]	; (8017650 <prvCheckForValidListAndQueue+0x60>)
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d120      	bne.n	8017644 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017602:	4814      	ldr	r0, [pc, #80]	; (8017654 <prvCheckForValidListAndQueue+0x64>)
 8017604:	f7fd f9c4 	bl	8014990 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017608:	4813      	ldr	r0, [pc, #76]	; (8017658 <prvCheckForValidListAndQueue+0x68>)
 801760a:	f7fd f9c1 	bl	8014990 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801760e:	4b13      	ldr	r3, [pc, #76]	; (801765c <prvCheckForValidListAndQueue+0x6c>)
 8017610:	4a10      	ldr	r2, [pc, #64]	; (8017654 <prvCheckForValidListAndQueue+0x64>)
 8017612:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017614:	4b12      	ldr	r3, [pc, #72]	; (8017660 <prvCheckForValidListAndQueue+0x70>)
 8017616:	4a10      	ldr	r2, [pc, #64]	; (8017658 <prvCheckForValidListAndQueue+0x68>)
 8017618:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801761a:	2300      	movs	r3, #0
 801761c:	9300      	str	r3, [sp, #0]
 801761e:	4b11      	ldr	r3, [pc, #68]	; (8017664 <prvCheckForValidListAndQueue+0x74>)
 8017620:	4a11      	ldr	r2, [pc, #68]	; (8017668 <prvCheckForValidListAndQueue+0x78>)
 8017622:	2110      	movs	r1, #16
 8017624:	200a      	movs	r0, #10
 8017626:	f7fd facf 	bl	8014bc8 <xQueueGenericCreateStatic>
 801762a:	4603      	mov	r3, r0
 801762c:	4a08      	ldr	r2, [pc, #32]	; (8017650 <prvCheckForValidListAndQueue+0x60>)
 801762e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8017630:	4b07      	ldr	r3, [pc, #28]	; (8017650 <prvCheckForValidListAndQueue+0x60>)
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	2b00      	cmp	r3, #0
 8017636:	d005      	beq.n	8017644 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017638:	4b05      	ldr	r3, [pc, #20]	; (8017650 <prvCheckForValidListAndQueue+0x60>)
 801763a:	681b      	ldr	r3, [r3, #0]
 801763c:	490b      	ldr	r1, [pc, #44]	; (801766c <prvCheckForValidListAndQueue+0x7c>)
 801763e:	4618      	mov	r0, r3
 8017640:	f7fe fad2 	bl	8015be8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017644:	f000 f9ae 	bl	80179a4 <vPortExitCritical>
}
 8017648:	bf00      	nop
 801764a:	46bd      	mov	sp, r7
 801764c:	bd80      	pop	{r7, pc}
 801764e:	bf00      	nop
 8017650:	20005764 	.word	0x20005764
 8017654:	20005734 	.word	0x20005734
 8017658:	20005748 	.word	0x20005748
 801765c:	2000575c 	.word	0x2000575c
 8017660:	20005760 	.word	0x20005760
 8017664:	20005810 	.word	0x20005810
 8017668:	20005770 	.word	0x20005770
 801766c:	0801a1d8 	.word	0x0801a1d8

08017670 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8017670:	b580      	push	{r7, lr}
 8017672:	b086      	sub	sp, #24
 8017674:	af00      	add	r7, sp, #0
 8017676:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	2b00      	cmp	r3, #0
 8017680:	d10a      	bne.n	8017698 <pvTimerGetTimerID+0x28>
	__asm volatile
 8017682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017686:	f383 8811 	msr	BASEPRI, r3
 801768a:	f3bf 8f6f 	isb	sy
 801768e:	f3bf 8f4f 	dsb	sy
 8017692:	60fb      	str	r3, [r7, #12]
}
 8017694:	bf00      	nop
 8017696:	e7fe      	b.n	8017696 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8017698:	f000 f954 	bl	8017944 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 801769c:	697b      	ldr	r3, [r7, #20]
 801769e:	69db      	ldr	r3, [r3, #28]
 80176a0:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80176a2:	f000 f97f 	bl	80179a4 <vPortExitCritical>

	return pvReturn;
 80176a6:	693b      	ldr	r3, [r7, #16]
}
 80176a8:	4618      	mov	r0, r3
 80176aa:	3718      	adds	r7, #24
 80176ac:	46bd      	mov	sp, r7
 80176ae:	bd80      	pop	{r7, pc}

080176b0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b08a      	sub	sp, #40	; 0x28
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	60f8      	str	r0, [r7, #12]
 80176b8:	60b9      	str	r1, [r7, #8]
 80176ba:	607a      	str	r2, [r7, #4]
 80176bc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80176be:	f06f 0301 	mvn.w	r3, #1
 80176c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80176c8:	68bb      	ldr	r3, [r7, #8]
 80176ca:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80176d0:	4b06      	ldr	r3, [pc, #24]	; (80176ec <xTimerPendFunctionCallFromISR+0x3c>)
 80176d2:	6818      	ldr	r0, [r3, #0]
 80176d4:	f107 0114 	add.w	r1, r7, #20
 80176d8:	2300      	movs	r3, #0
 80176da:	683a      	ldr	r2, [r7, #0]
 80176dc:	f7fd fd68 	bl	80151b0 <xQueueGenericSendFromISR>
 80176e0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80176e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80176e4:	4618      	mov	r0, r3
 80176e6:	3728      	adds	r7, #40	; 0x28
 80176e8:	46bd      	mov	sp, r7
 80176ea:	bd80      	pop	{r7, pc}
 80176ec:	20005764 	.word	0x20005764

080176f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80176f0:	b480      	push	{r7}
 80176f2:	b085      	sub	sp, #20
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	60f8      	str	r0, [r7, #12]
 80176f8:	60b9      	str	r1, [r7, #8]
 80176fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	3b04      	subs	r3, #4
 8017700:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	3b04      	subs	r3, #4
 801770e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017710:	68bb      	ldr	r3, [r7, #8]
 8017712:	f023 0201 	bic.w	r2, r3, #1
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	3b04      	subs	r3, #4
 801771e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017720:	4a0c      	ldr	r2, [pc, #48]	; (8017754 <pxPortInitialiseStack+0x64>)
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	3b14      	subs	r3, #20
 801772a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801772c:	687a      	ldr	r2, [r7, #4]
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8017732:	68fb      	ldr	r3, [r7, #12]
 8017734:	3b04      	subs	r3, #4
 8017736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	f06f 0202 	mvn.w	r2, #2
 801773e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	3b20      	subs	r3, #32
 8017744:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017746:	68fb      	ldr	r3, [r7, #12]
}
 8017748:	4618      	mov	r0, r3
 801774a:	3714      	adds	r7, #20
 801774c:	46bd      	mov	sp, r7
 801774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017752:	4770      	bx	lr
 8017754:	08017759 	.word	0x08017759

08017758 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017758:	b480      	push	{r7}
 801775a:	b085      	sub	sp, #20
 801775c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801775e:	2300      	movs	r3, #0
 8017760:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017762:	4b12      	ldr	r3, [pc, #72]	; (80177ac <prvTaskExitError+0x54>)
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	f1b3 3fff 	cmp.w	r3, #4294967295
 801776a:	d00a      	beq.n	8017782 <prvTaskExitError+0x2a>
	__asm volatile
 801776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017770:	f383 8811 	msr	BASEPRI, r3
 8017774:	f3bf 8f6f 	isb	sy
 8017778:	f3bf 8f4f 	dsb	sy
 801777c:	60fb      	str	r3, [r7, #12]
}
 801777e:	bf00      	nop
 8017780:	e7fe      	b.n	8017780 <prvTaskExitError+0x28>
	__asm volatile
 8017782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017786:	f383 8811 	msr	BASEPRI, r3
 801778a:	f3bf 8f6f 	isb	sy
 801778e:	f3bf 8f4f 	dsb	sy
 8017792:	60bb      	str	r3, [r7, #8]
}
 8017794:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017796:	bf00      	nop
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d0fc      	beq.n	8017798 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801779e:	bf00      	nop
 80177a0:	bf00      	nop
 80177a2:	3714      	adds	r7, #20
 80177a4:	46bd      	mov	sp, r7
 80177a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177aa:	4770      	bx	lr
 80177ac:	2000005c 	.word	0x2000005c

080177b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80177b0:	4b07      	ldr	r3, [pc, #28]	; (80177d0 <pxCurrentTCBConst2>)
 80177b2:	6819      	ldr	r1, [r3, #0]
 80177b4:	6808      	ldr	r0, [r1, #0]
 80177b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177ba:	f380 8809 	msr	PSP, r0
 80177be:	f3bf 8f6f 	isb	sy
 80177c2:	f04f 0000 	mov.w	r0, #0
 80177c6:	f380 8811 	msr	BASEPRI, r0
 80177ca:	4770      	bx	lr
 80177cc:	f3af 8000 	nop.w

080177d0 <pxCurrentTCBConst2>:
 80177d0:	20005234 	.word	0x20005234
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80177d4:	bf00      	nop
 80177d6:	bf00      	nop

080177d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80177d8:	4808      	ldr	r0, [pc, #32]	; (80177fc <prvPortStartFirstTask+0x24>)
 80177da:	6800      	ldr	r0, [r0, #0]
 80177dc:	6800      	ldr	r0, [r0, #0]
 80177de:	f380 8808 	msr	MSP, r0
 80177e2:	f04f 0000 	mov.w	r0, #0
 80177e6:	f380 8814 	msr	CONTROL, r0
 80177ea:	b662      	cpsie	i
 80177ec:	b661      	cpsie	f
 80177ee:	f3bf 8f4f 	dsb	sy
 80177f2:	f3bf 8f6f 	isb	sy
 80177f6:	df00      	svc	0
 80177f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80177fa:	bf00      	nop
 80177fc:	e000ed08 	.word	0xe000ed08

08017800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017800:	b580      	push	{r7, lr}
 8017802:	b086      	sub	sp, #24
 8017804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8017806:	4b46      	ldr	r3, [pc, #280]	; (8017920 <xPortStartScheduler+0x120>)
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	4a46      	ldr	r2, [pc, #280]	; (8017924 <xPortStartScheduler+0x124>)
 801780c:	4293      	cmp	r3, r2
 801780e:	d10a      	bne.n	8017826 <xPortStartScheduler+0x26>
	__asm volatile
 8017810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017814:	f383 8811 	msr	BASEPRI, r3
 8017818:	f3bf 8f6f 	isb	sy
 801781c:	f3bf 8f4f 	dsb	sy
 8017820:	613b      	str	r3, [r7, #16]
}
 8017822:	bf00      	nop
 8017824:	e7fe      	b.n	8017824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8017826:	4b3e      	ldr	r3, [pc, #248]	; (8017920 <xPortStartScheduler+0x120>)
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	4a3f      	ldr	r2, [pc, #252]	; (8017928 <xPortStartScheduler+0x128>)
 801782c:	4293      	cmp	r3, r2
 801782e:	d10a      	bne.n	8017846 <xPortStartScheduler+0x46>
	__asm volatile
 8017830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017834:	f383 8811 	msr	BASEPRI, r3
 8017838:	f3bf 8f6f 	isb	sy
 801783c:	f3bf 8f4f 	dsb	sy
 8017840:	60fb      	str	r3, [r7, #12]
}
 8017842:	bf00      	nop
 8017844:	e7fe      	b.n	8017844 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8017846:	4b39      	ldr	r3, [pc, #228]	; (801792c <xPortStartScheduler+0x12c>)
 8017848:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801784a:	697b      	ldr	r3, [r7, #20]
 801784c:	781b      	ldrb	r3, [r3, #0]
 801784e:	b2db      	uxtb	r3, r3
 8017850:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017852:	697b      	ldr	r3, [r7, #20]
 8017854:	22ff      	movs	r2, #255	; 0xff
 8017856:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017858:	697b      	ldr	r3, [r7, #20]
 801785a:	781b      	ldrb	r3, [r3, #0]
 801785c:	b2db      	uxtb	r3, r3
 801785e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017860:	78fb      	ldrb	r3, [r7, #3]
 8017862:	b2db      	uxtb	r3, r3
 8017864:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017868:	b2da      	uxtb	r2, r3
 801786a:	4b31      	ldr	r3, [pc, #196]	; (8017930 <xPortStartScheduler+0x130>)
 801786c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801786e:	4b31      	ldr	r3, [pc, #196]	; (8017934 <xPortStartScheduler+0x134>)
 8017870:	2207      	movs	r2, #7
 8017872:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017874:	e009      	b.n	801788a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8017876:	4b2f      	ldr	r3, [pc, #188]	; (8017934 <xPortStartScheduler+0x134>)
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	3b01      	subs	r3, #1
 801787c:	4a2d      	ldr	r2, [pc, #180]	; (8017934 <xPortStartScheduler+0x134>)
 801787e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017880:	78fb      	ldrb	r3, [r7, #3]
 8017882:	b2db      	uxtb	r3, r3
 8017884:	005b      	lsls	r3, r3, #1
 8017886:	b2db      	uxtb	r3, r3
 8017888:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801788a:	78fb      	ldrb	r3, [r7, #3]
 801788c:	b2db      	uxtb	r3, r3
 801788e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017892:	2b80      	cmp	r3, #128	; 0x80
 8017894:	d0ef      	beq.n	8017876 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017896:	4b27      	ldr	r3, [pc, #156]	; (8017934 <xPortStartScheduler+0x134>)
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	f1c3 0307 	rsb	r3, r3, #7
 801789e:	2b04      	cmp	r3, #4
 80178a0:	d00a      	beq.n	80178b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80178a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178a6:	f383 8811 	msr	BASEPRI, r3
 80178aa:	f3bf 8f6f 	isb	sy
 80178ae:	f3bf 8f4f 	dsb	sy
 80178b2:	60bb      	str	r3, [r7, #8]
}
 80178b4:	bf00      	nop
 80178b6:	e7fe      	b.n	80178b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80178b8:	4b1e      	ldr	r3, [pc, #120]	; (8017934 <xPortStartScheduler+0x134>)
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	021b      	lsls	r3, r3, #8
 80178be:	4a1d      	ldr	r2, [pc, #116]	; (8017934 <xPortStartScheduler+0x134>)
 80178c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80178c2:	4b1c      	ldr	r3, [pc, #112]	; (8017934 <xPortStartScheduler+0x134>)
 80178c4:	681b      	ldr	r3, [r3, #0]
 80178c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80178ca:	4a1a      	ldr	r2, [pc, #104]	; (8017934 <xPortStartScheduler+0x134>)
 80178cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	b2da      	uxtb	r2, r3
 80178d2:	697b      	ldr	r3, [r7, #20]
 80178d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80178d6:	4b18      	ldr	r3, [pc, #96]	; (8017938 <xPortStartScheduler+0x138>)
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	4a17      	ldr	r2, [pc, #92]	; (8017938 <xPortStartScheduler+0x138>)
 80178dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80178e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80178e2:	4b15      	ldr	r3, [pc, #84]	; (8017938 <xPortStartScheduler+0x138>)
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	4a14      	ldr	r2, [pc, #80]	; (8017938 <xPortStartScheduler+0x138>)
 80178e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80178ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80178ee:	f000 f8dd 	bl	8017aac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80178f2:	4b12      	ldr	r3, [pc, #72]	; (801793c <xPortStartScheduler+0x13c>)
 80178f4:	2200      	movs	r2, #0
 80178f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80178f8:	f000 f8fc 	bl	8017af4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80178fc:	4b10      	ldr	r3, [pc, #64]	; (8017940 <xPortStartScheduler+0x140>)
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	4a0f      	ldr	r2, [pc, #60]	; (8017940 <xPortStartScheduler+0x140>)
 8017902:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8017906:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8017908:	f7ff ff66 	bl	80177d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801790c:	f7fe fdb8 	bl	8016480 <vTaskSwitchContext>
	prvTaskExitError();
 8017910:	f7ff ff22 	bl	8017758 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8017914:	2300      	movs	r3, #0
}
 8017916:	4618      	mov	r0, r3
 8017918:	3718      	adds	r7, #24
 801791a:	46bd      	mov	sp, r7
 801791c:	bd80      	pop	{r7, pc}
 801791e:	bf00      	nop
 8017920:	e000ed00 	.word	0xe000ed00
 8017924:	410fc271 	.word	0x410fc271
 8017928:	410fc270 	.word	0x410fc270
 801792c:	e000e400 	.word	0xe000e400
 8017930:	20005860 	.word	0x20005860
 8017934:	20005864 	.word	0x20005864
 8017938:	e000ed20 	.word	0xe000ed20
 801793c:	2000005c 	.word	0x2000005c
 8017940:	e000ef34 	.word	0xe000ef34

08017944 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017944:	b480      	push	{r7}
 8017946:	b083      	sub	sp, #12
 8017948:	af00      	add	r7, sp, #0
	__asm volatile
 801794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801794e:	f383 8811 	msr	BASEPRI, r3
 8017952:	f3bf 8f6f 	isb	sy
 8017956:	f3bf 8f4f 	dsb	sy
 801795a:	607b      	str	r3, [r7, #4]
}
 801795c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801795e:	4b0f      	ldr	r3, [pc, #60]	; (801799c <vPortEnterCritical+0x58>)
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	3301      	adds	r3, #1
 8017964:	4a0d      	ldr	r2, [pc, #52]	; (801799c <vPortEnterCritical+0x58>)
 8017966:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017968:	4b0c      	ldr	r3, [pc, #48]	; (801799c <vPortEnterCritical+0x58>)
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	2b01      	cmp	r3, #1
 801796e:	d10f      	bne.n	8017990 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017970:	4b0b      	ldr	r3, [pc, #44]	; (80179a0 <vPortEnterCritical+0x5c>)
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	b2db      	uxtb	r3, r3
 8017976:	2b00      	cmp	r3, #0
 8017978:	d00a      	beq.n	8017990 <vPortEnterCritical+0x4c>
	__asm volatile
 801797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801797e:	f383 8811 	msr	BASEPRI, r3
 8017982:	f3bf 8f6f 	isb	sy
 8017986:	f3bf 8f4f 	dsb	sy
 801798a:	603b      	str	r3, [r7, #0]
}
 801798c:	bf00      	nop
 801798e:	e7fe      	b.n	801798e <vPortEnterCritical+0x4a>
	}
}
 8017990:	bf00      	nop
 8017992:	370c      	adds	r7, #12
 8017994:	46bd      	mov	sp, r7
 8017996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801799a:	4770      	bx	lr
 801799c:	2000005c 	.word	0x2000005c
 80179a0:	e000ed04 	.word	0xe000ed04

080179a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80179a4:	b480      	push	{r7}
 80179a6:	b083      	sub	sp, #12
 80179a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80179aa:	4b12      	ldr	r3, [pc, #72]	; (80179f4 <vPortExitCritical+0x50>)
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d10a      	bne.n	80179c8 <vPortExitCritical+0x24>
	__asm volatile
 80179b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179b6:	f383 8811 	msr	BASEPRI, r3
 80179ba:	f3bf 8f6f 	isb	sy
 80179be:	f3bf 8f4f 	dsb	sy
 80179c2:	607b      	str	r3, [r7, #4]
}
 80179c4:	bf00      	nop
 80179c6:	e7fe      	b.n	80179c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80179c8:	4b0a      	ldr	r3, [pc, #40]	; (80179f4 <vPortExitCritical+0x50>)
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	3b01      	subs	r3, #1
 80179ce:	4a09      	ldr	r2, [pc, #36]	; (80179f4 <vPortExitCritical+0x50>)
 80179d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80179d2:	4b08      	ldr	r3, [pc, #32]	; (80179f4 <vPortExitCritical+0x50>)
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d105      	bne.n	80179e6 <vPortExitCritical+0x42>
 80179da:	2300      	movs	r3, #0
 80179dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80179de:	683b      	ldr	r3, [r7, #0]
 80179e0:	f383 8811 	msr	BASEPRI, r3
}
 80179e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80179e6:	bf00      	nop
 80179e8:	370c      	adds	r7, #12
 80179ea:	46bd      	mov	sp, r7
 80179ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179f0:	4770      	bx	lr
 80179f2:	bf00      	nop
 80179f4:	2000005c 	.word	0x2000005c
	...

08017a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017a00:	f3ef 8009 	mrs	r0, PSP
 8017a04:	f3bf 8f6f 	isb	sy
 8017a08:	4b15      	ldr	r3, [pc, #84]	; (8017a60 <pxCurrentTCBConst>)
 8017a0a:	681a      	ldr	r2, [r3, #0]
 8017a0c:	f01e 0f10 	tst.w	lr, #16
 8017a10:	bf08      	it	eq
 8017a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a1a:	6010      	str	r0, [r2, #0]
 8017a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8017a24:	f380 8811 	msr	BASEPRI, r0
 8017a28:	f3bf 8f4f 	dsb	sy
 8017a2c:	f3bf 8f6f 	isb	sy
 8017a30:	f7fe fd26 	bl	8016480 <vTaskSwitchContext>
 8017a34:	f04f 0000 	mov.w	r0, #0
 8017a38:	f380 8811 	msr	BASEPRI, r0
 8017a3c:	bc09      	pop	{r0, r3}
 8017a3e:	6819      	ldr	r1, [r3, #0]
 8017a40:	6808      	ldr	r0, [r1, #0]
 8017a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a46:	f01e 0f10 	tst.w	lr, #16
 8017a4a:	bf08      	it	eq
 8017a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017a50:	f380 8809 	msr	PSP, r0
 8017a54:	f3bf 8f6f 	isb	sy
 8017a58:	4770      	bx	lr
 8017a5a:	bf00      	nop
 8017a5c:	f3af 8000 	nop.w

08017a60 <pxCurrentTCBConst>:
 8017a60:	20005234 	.word	0x20005234
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017a64:	bf00      	nop
 8017a66:	bf00      	nop

08017a68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017a68:	b580      	push	{r7, lr}
 8017a6a:	b082      	sub	sp, #8
 8017a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8017a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a72:	f383 8811 	msr	BASEPRI, r3
 8017a76:	f3bf 8f6f 	isb	sy
 8017a7a:	f3bf 8f4f 	dsb	sy
 8017a7e:	607b      	str	r3, [r7, #4]
}
 8017a80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017a82:	f7fe fc43 	bl	801630c <xTaskIncrementTick>
 8017a86:	4603      	mov	r3, r0
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d003      	beq.n	8017a94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017a8c:	4b06      	ldr	r3, [pc, #24]	; (8017aa8 <xPortSysTickHandler+0x40>)
 8017a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a92:	601a      	str	r2, [r3, #0]
 8017a94:	2300      	movs	r3, #0
 8017a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017a98:	683b      	ldr	r3, [r7, #0]
 8017a9a:	f383 8811 	msr	BASEPRI, r3
}
 8017a9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017aa0:	bf00      	nop
 8017aa2:	3708      	adds	r7, #8
 8017aa4:	46bd      	mov	sp, r7
 8017aa6:	bd80      	pop	{r7, pc}
 8017aa8:	e000ed04 	.word	0xe000ed04

08017aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8017aac:	b480      	push	{r7}
 8017aae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017ab0:	4b0b      	ldr	r3, [pc, #44]	; (8017ae0 <vPortSetupTimerInterrupt+0x34>)
 8017ab2:	2200      	movs	r2, #0
 8017ab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017ab6:	4b0b      	ldr	r3, [pc, #44]	; (8017ae4 <vPortSetupTimerInterrupt+0x38>)
 8017ab8:	2200      	movs	r2, #0
 8017aba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017abc:	4b0a      	ldr	r3, [pc, #40]	; (8017ae8 <vPortSetupTimerInterrupt+0x3c>)
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	4a0a      	ldr	r2, [pc, #40]	; (8017aec <vPortSetupTimerInterrupt+0x40>)
 8017ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8017ac6:	099b      	lsrs	r3, r3, #6
 8017ac8:	4a09      	ldr	r2, [pc, #36]	; (8017af0 <vPortSetupTimerInterrupt+0x44>)
 8017aca:	3b01      	subs	r3, #1
 8017acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017ace:	4b04      	ldr	r3, [pc, #16]	; (8017ae0 <vPortSetupTimerInterrupt+0x34>)
 8017ad0:	2207      	movs	r2, #7
 8017ad2:	601a      	str	r2, [r3, #0]
}
 8017ad4:	bf00      	nop
 8017ad6:	46bd      	mov	sp, r7
 8017ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017adc:	4770      	bx	lr
 8017ade:	bf00      	nop
 8017ae0:	e000e010 	.word	0xe000e010
 8017ae4:	e000e018 	.word	0xe000e018
 8017ae8:	20000004 	.word	0x20000004
 8017aec:	10624dd3 	.word	0x10624dd3
 8017af0:	e000e014 	.word	0xe000e014

08017af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017af4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8017b04 <vPortEnableVFP+0x10>
 8017af8:	6801      	ldr	r1, [r0, #0]
 8017afa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8017afe:	6001      	str	r1, [r0, #0]
 8017b00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017b02:	bf00      	nop
 8017b04:	e000ed88 	.word	0xe000ed88

08017b08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017b08:	b480      	push	{r7}
 8017b0a:	b085      	sub	sp, #20
 8017b0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8017b0e:	f3ef 8305 	mrs	r3, IPSR
 8017b12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017b14:	68fb      	ldr	r3, [r7, #12]
 8017b16:	2b0f      	cmp	r3, #15
 8017b18:	d914      	bls.n	8017b44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8017b1a:	4a17      	ldr	r2, [pc, #92]	; (8017b78 <vPortValidateInterruptPriority+0x70>)
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	4413      	add	r3, r2
 8017b20:	781b      	ldrb	r3, [r3, #0]
 8017b22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017b24:	4b15      	ldr	r3, [pc, #84]	; (8017b7c <vPortValidateInterruptPriority+0x74>)
 8017b26:	781b      	ldrb	r3, [r3, #0]
 8017b28:	7afa      	ldrb	r2, [r7, #11]
 8017b2a:	429a      	cmp	r2, r3
 8017b2c:	d20a      	bcs.n	8017b44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8017b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b32:	f383 8811 	msr	BASEPRI, r3
 8017b36:	f3bf 8f6f 	isb	sy
 8017b3a:	f3bf 8f4f 	dsb	sy
 8017b3e:	607b      	str	r3, [r7, #4]
}
 8017b40:	bf00      	nop
 8017b42:	e7fe      	b.n	8017b42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017b44:	4b0e      	ldr	r3, [pc, #56]	; (8017b80 <vPortValidateInterruptPriority+0x78>)
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8017b4c:	4b0d      	ldr	r3, [pc, #52]	; (8017b84 <vPortValidateInterruptPriority+0x7c>)
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	429a      	cmp	r2, r3
 8017b52:	d90a      	bls.n	8017b6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8017b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b58:	f383 8811 	msr	BASEPRI, r3
 8017b5c:	f3bf 8f6f 	isb	sy
 8017b60:	f3bf 8f4f 	dsb	sy
 8017b64:	603b      	str	r3, [r7, #0]
}
 8017b66:	bf00      	nop
 8017b68:	e7fe      	b.n	8017b68 <vPortValidateInterruptPriority+0x60>
	}
 8017b6a:	bf00      	nop
 8017b6c:	3714      	adds	r7, #20
 8017b6e:	46bd      	mov	sp, r7
 8017b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b74:	4770      	bx	lr
 8017b76:	bf00      	nop
 8017b78:	e000e3f0 	.word	0xe000e3f0
 8017b7c:	20005860 	.word	0x20005860
 8017b80:	e000ed0c 	.word	0xe000ed0c
 8017b84:	20005864 	.word	0x20005864

08017b88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017b88:	b580      	push	{r7, lr}
 8017b8a:	b08a      	sub	sp, #40	; 0x28
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017b90:	2300      	movs	r3, #0
 8017b92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017b94:	f7fe faec 	bl	8016170 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017b98:	4b5b      	ldr	r3, [pc, #364]	; (8017d08 <pvPortMalloc+0x180>)
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d101      	bne.n	8017ba4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017ba0:	f000 f920 	bl	8017de4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017ba4:	4b59      	ldr	r3, [pc, #356]	; (8017d0c <pvPortMalloc+0x184>)
 8017ba6:	681a      	ldr	r2, [r3, #0]
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	4013      	ands	r3, r2
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	f040 8093 	bne.w	8017cd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d01d      	beq.n	8017bf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8017bb8:	2208      	movs	r2, #8
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	4413      	add	r3, r2
 8017bbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	f003 0307 	and.w	r3, r3, #7
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d014      	beq.n	8017bf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	f023 0307 	bic.w	r3, r3, #7
 8017bd0:	3308      	adds	r3, #8
 8017bd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	f003 0307 	and.w	r3, r3, #7
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d00a      	beq.n	8017bf4 <pvPortMalloc+0x6c>
	__asm volatile
 8017bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017be2:	f383 8811 	msr	BASEPRI, r3
 8017be6:	f3bf 8f6f 	isb	sy
 8017bea:	f3bf 8f4f 	dsb	sy
 8017bee:	617b      	str	r3, [r7, #20]
}
 8017bf0:	bf00      	nop
 8017bf2:	e7fe      	b.n	8017bf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d06e      	beq.n	8017cd8 <pvPortMalloc+0x150>
 8017bfa:	4b45      	ldr	r3, [pc, #276]	; (8017d10 <pvPortMalloc+0x188>)
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	687a      	ldr	r2, [r7, #4]
 8017c00:	429a      	cmp	r2, r3
 8017c02:	d869      	bhi.n	8017cd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8017c04:	4b43      	ldr	r3, [pc, #268]	; (8017d14 <pvPortMalloc+0x18c>)
 8017c06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8017c08:	4b42      	ldr	r3, [pc, #264]	; (8017d14 <pvPortMalloc+0x18c>)
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017c0e:	e004      	b.n	8017c1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8017c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8017c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c1c:	685b      	ldr	r3, [r3, #4]
 8017c1e:	687a      	ldr	r2, [r7, #4]
 8017c20:	429a      	cmp	r2, r3
 8017c22:	d903      	bls.n	8017c2c <pvPortMalloc+0xa4>
 8017c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d1f1      	bne.n	8017c10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017c2c:	4b36      	ldr	r3, [pc, #216]	; (8017d08 <pvPortMalloc+0x180>)
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c32:	429a      	cmp	r2, r3
 8017c34:	d050      	beq.n	8017cd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017c36:	6a3b      	ldr	r3, [r7, #32]
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	2208      	movs	r2, #8
 8017c3c:	4413      	add	r3, r2
 8017c3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c42:	681a      	ldr	r2, [r3, #0]
 8017c44:	6a3b      	ldr	r3, [r7, #32]
 8017c46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c4a:	685a      	ldr	r2, [r3, #4]
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	1ad2      	subs	r2, r2, r3
 8017c50:	2308      	movs	r3, #8
 8017c52:	005b      	lsls	r3, r3, #1
 8017c54:	429a      	cmp	r2, r3
 8017c56:	d91f      	bls.n	8017c98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	4413      	add	r3, r2
 8017c5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017c60:	69bb      	ldr	r3, [r7, #24]
 8017c62:	f003 0307 	and.w	r3, r3, #7
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d00a      	beq.n	8017c80 <pvPortMalloc+0xf8>
	__asm volatile
 8017c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c6e:	f383 8811 	msr	BASEPRI, r3
 8017c72:	f3bf 8f6f 	isb	sy
 8017c76:	f3bf 8f4f 	dsb	sy
 8017c7a:	613b      	str	r3, [r7, #16]
}
 8017c7c:	bf00      	nop
 8017c7e:	e7fe      	b.n	8017c7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c82:	685a      	ldr	r2, [r3, #4]
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	1ad2      	subs	r2, r2, r3
 8017c88:	69bb      	ldr	r3, [r7, #24]
 8017c8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c8e:	687a      	ldr	r2, [r7, #4]
 8017c90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017c92:	69b8      	ldr	r0, [r7, #24]
 8017c94:	f000 f908 	bl	8017ea8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017c98:	4b1d      	ldr	r3, [pc, #116]	; (8017d10 <pvPortMalloc+0x188>)
 8017c9a:	681a      	ldr	r2, [r3, #0]
 8017c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c9e:	685b      	ldr	r3, [r3, #4]
 8017ca0:	1ad3      	subs	r3, r2, r3
 8017ca2:	4a1b      	ldr	r2, [pc, #108]	; (8017d10 <pvPortMalloc+0x188>)
 8017ca4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017ca6:	4b1a      	ldr	r3, [pc, #104]	; (8017d10 <pvPortMalloc+0x188>)
 8017ca8:	681a      	ldr	r2, [r3, #0]
 8017caa:	4b1b      	ldr	r3, [pc, #108]	; (8017d18 <pvPortMalloc+0x190>)
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	429a      	cmp	r2, r3
 8017cb0:	d203      	bcs.n	8017cba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017cb2:	4b17      	ldr	r3, [pc, #92]	; (8017d10 <pvPortMalloc+0x188>)
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	4a18      	ldr	r2, [pc, #96]	; (8017d18 <pvPortMalloc+0x190>)
 8017cb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cbc:	685a      	ldr	r2, [r3, #4]
 8017cbe:	4b13      	ldr	r3, [pc, #76]	; (8017d0c <pvPortMalloc+0x184>)
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	431a      	orrs	r2, r3
 8017cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cca:	2200      	movs	r2, #0
 8017ccc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8017cce:	4b13      	ldr	r3, [pc, #76]	; (8017d1c <pvPortMalloc+0x194>)
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	3301      	adds	r3, #1
 8017cd4:	4a11      	ldr	r2, [pc, #68]	; (8017d1c <pvPortMalloc+0x194>)
 8017cd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017cd8:	f7fe fa58 	bl	801618c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017cdc:	69fb      	ldr	r3, [r7, #28]
 8017cde:	f003 0307 	and.w	r3, r3, #7
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d00a      	beq.n	8017cfc <pvPortMalloc+0x174>
	__asm volatile
 8017ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cea:	f383 8811 	msr	BASEPRI, r3
 8017cee:	f3bf 8f6f 	isb	sy
 8017cf2:	f3bf 8f4f 	dsb	sy
 8017cf6:	60fb      	str	r3, [r7, #12]
}
 8017cf8:	bf00      	nop
 8017cfa:	e7fe      	b.n	8017cfa <pvPortMalloc+0x172>
	return pvReturn;
 8017cfc:	69fb      	ldr	r3, [r7, #28]
}
 8017cfe:	4618      	mov	r0, r3
 8017d00:	3728      	adds	r7, #40	; 0x28
 8017d02:	46bd      	mov	sp, r7
 8017d04:	bd80      	pop	{r7, pc}
 8017d06:	bf00      	nop
 8017d08:	20006470 	.word	0x20006470
 8017d0c:	20006484 	.word	0x20006484
 8017d10:	20006474 	.word	0x20006474
 8017d14:	20006468 	.word	0x20006468
 8017d18:	20006478 	.word	0x20006478
 8017d1c:	2000647c 	.word	0x2000647c

08017d20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017d20:	b580      	push	{r7, lr}
 8017d22:	b086      	sub	sp, #24
 8017d24:	af00      	add	r7, sp, #0
 8017d26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d04d      	beq.n	8017dce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017d32:	2308      	movs	r3, #8
 8017d34:	425b      	negs	r3, r3
 8017d36:	697a      	ldr	r2, [r7, #20]
 8017d38:	4413      	add	r3, r2
 8017d3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017d3c:	697b      	ldr	r3, [r7, #20]
 8017d3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017d40:	693b      	ldr	r3, [r7, #16]
 8017d42:	685a      	ldr	r2, [r3, #4]
 8017d44:	4b24      	ldr	r3, [pc, #144]	; (8017dd8 <vPortFree+0xb8>)
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	4013      	ands	r3, r2
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d10a      	bne.n	8017d64 <vPortFree+0x44>
	__asm volatile
 8017d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d52:	f383 8811 	msr	BASEPRI, r3
 8017d56:	f3bf 8f6f 	isb	sy
 8017d5a:	f3bf 8f4f 	dsb	sy
 8017d5e:	60fb      	str	r3, [r7, #12]
}
 8017d60:	bf00      	nop
 8017d62:	e7fe      	b.n	8017d62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017d64:	693b      	ldr	r3, [r7, #16]
 8017d66:	681b      	ldr	r3, [r3, #0]
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d00a      	beq.n	8017d82 <vPortFree+0x62>
	__asm volatile
 8017d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d70:	f383 8811 	msr	BASEPRI, r3
 8017d74:	f3bf 8f6f 	isb	sy
 8017d78:	f3bf 8f4f 	dsb	sy
 8017d7c:	60bb      	str	r3, [r7, #8]
}
 8017d7e:	bf00      	nop
 8017d80:	e7fe      	b.n	8017d80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017d82:	693b      	ldr	r3, [r7, #16]
 8017d84:	685a      	ldr	r2, [r3, #4]
 8017d86:	4b14      	ldr	r3, [pc, #80]	; (8017dd8 <vPortFree+0xb8>)
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	4013      	ands	r3, r2
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d01e      	beq.n	8017dce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017d90:	693b      	ldr	r3, [r7, #16]
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d11a      	bne.n	8017dce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017d98:	693b      	ldr	r3, [r7, #16]
 8017d9a:	685a      	ldr	r2, [r3, #4]
 8017d9c:	4b0e      	ldr	r3, [pc, #56]	; (8017dd8 <vPortFree+0xb8>)
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	43db      	mvns	r3, r3
 8017da2:	401a      	ands	r2, r3
 8017da4:	693b      	ldr	r3, [r7, #16]
 8017da6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017da8:	f7fe f9e2 	bl	8016170 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017dac:	693b      	ldr	r3, [r7, #16]
 8017dae:	685a      	ldr	r2, [r3, #4]
 8017db0:	4b0a      	ldr	r3, [pc, #40]	; (8017ddc <vPortFree+0xbc>)
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	4413      	add	r3, r2
 8017db6:	4a09      	ldr	r2, [pc, #36]	; (8017ddc <vPortFree+0xbc>)
 8017db8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017dba:	6938      	ldr	r0, [r7, #16]
 8017dbc:	f000 f874 	bl	8017ea8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8017dc0:	4b07      	ldr	r3, [pc, #28]	; (8017de0 <vPortFree+0xc0>)
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	3301      	adds	r3, #1
 8017dc6:	4a06      	ldr	r2, [pc, #24]	; (8017de0 <vPortFree+0xc0>)
 8017dc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8017dca:	f7fe f9df 	bl	801618c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8017dce:	bf00      	nop
 8017dd0:	3718      	adds	r7, #24
 8017dd2:	46bd      	mov	sp, r7
 8017dd4:	bd80      	pop	{r7, pc}
 8017dd6:	bf00      	nop
 8017dd8:	20006484 	.word	0x20006484
 8017ddc:	20006474 	.word	0x20006474
 8017de0:	20006480 	.word	0x20006480

08017de4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017de4:	b480      	push	{r7}
 8017de6:	b085      	sub	sp, #20
 8017de8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017dea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8017dee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017df0:	4b27      	ldr	r3, [pc, #156]	; (8017e90 <prvHeapInit+0xac>)
 8017df2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	f003 0307 	and.w	r3, r3, #7
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d00c      	beq.n	8017e18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	3307      	adds	r3, #7
 8017e02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017e04:	68fb      	ldr	r3, [r7, #12]
 8017e06:	f023 0307 	bic.w	r3, r3, #7
 8017e0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017e0c:	68ba      	ldr	r2, [r7, #8]
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	1ad3      	subs	r3, r2, r3
 8017e12:	4a1f      	ldr	r2, [pc, #124]	; (8017e90 <prvHeapInit+0xac>)
 8017e14:	4413      	add	r3, r2
 8017e16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017e1c:	4a1d      	ldr	r2, [pc, #116]	; (8017e94 <prvHeapInit+0xb0>)
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017e22:	4b1c      	ldr	r3, [pc, #112]	; (8017e94 <prvHeapInit+0xb0>)
 8017e24:	2200      	movs	r2, #0
 8017e26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	68ba      	ldr	r2, [r7, #8]
 8017e2c:	4413      	add	r3, r2
 8017e2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017e30:	2208      	movs	r2, #8
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	1a9b      	subs	r3, r3, r2
 8017e36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	f023 0307 	bic.w	r3, r3, #7
 8017e3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	4a15      	ldr	r2, [pc, #84]	; (8017e98 <prvHeapInit+0xb4>)
 8017e44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017e46:	4b14      	ldr	r3, [pc, #80]	; (8017e98 <prvHeapInit+0xb4>)
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	2200      	movs	r2, #0
 8017e4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017e4e:	4b12      	ldr	r3, [pc, #72]	; (8017e98 <prvHeapInit+0xb4>)
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	2200      	movs	r2, #0
 8017e54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017e5a:	683b      	ldr	r3, [r7, #0]
 8017e5c:	68fa      	ldr	r2, [r7, #12]
 8017e5e:	1ad2      	subs	r2, r2, r3
 8017e60:	683b      	ldr	r3, [r7, #0]
 8017e62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017e64:	4b0c      	ldr	r3, [pc, #48]	; (8017e98 <prvHeapInit+0xb4>)
 8017e66:	681a      	ldr	r2, [r3, #0]
 8017e68:	683b      	ldr	r3, [r7, #0]
 8017e6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017e6c:	683b      	ldr	r3, [r7, #0]
 8017e6e:	685b      	ldr	r3, [r3, #4]
 8017e70:	4a0a      	ldr	r2, [pc, #40]	; (8017e9c <prvHeapInit+0xb8>)
 8017e72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017e74:	683b      	ldr	r3, [r7, #0]
 8017e76:	685b      	ldr	r3, [r3, #4]
 8017e78:	4a09      	ldr	r2, [pc, #36]	; (8017ea0 <prvHeapInit+0xbc>)
 8017e7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017e7c:	4b09      	ldr	r3, [pc, #36]	; (8017ea4 <prvHeapInit+0xc0>)
 8017e7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017e82:	601a      	str	r2, [r3, #0]
}
 8017e84:	bf00      	nop
 8017e86:	3714      	adds	r7, #20
 8017e88:	46bd      	mov	sp, r7
 8017e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e8e:	4770      	bx	lr
 8017e90:	20005868 	.word	0x20005868
 8017e94:	20006468 	.word	0x20006468
 8017e98:	20006470 	.word	0x20006470
 8017e9c:	20006478 	.word	0x20006478
 8017ea0:	20006474 	.word	0x20006474
 8017ea4:	20006484 	.word	0x20006484

08017ea8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017ea8:	b480      	push	{r7}
 8017eaa:	b085      	sub	sp, #20
 8017eac:	af00      	add	r7, sp, #0
 8017eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017eb0:	4b28      	ldr	r3, [pc, #160]	; (8017f54 <prvInsertBlockIntoFreeList+0xac>)
 8017eb2:	60fb      	str	r3, [r7, #12]
 8017eb4:	e002      	b.n	8017ebc <prvInsertBlockIntoFreeList+0x14>
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	60fb      	str	r3, [r7, #12]
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	687a      	ldr	r2, [r7, #4]
 8017ec2:	429a      	cmp	r2, r3
 8017ec4:	d8f7      	bhi.n	8017eb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	685b      	ldr	r3, [r3, #4]
 8017ece:	68ba      	ldr	r2, [r7, #8]
 8017ed0:	4413      	add	r3, r2
 8017ed2:	687a      	ldr	r2, [r7, #4]
 8017ed4:	429a      	cmp	r2, r3
 8017ed6:	d108      	bne.n	8017eea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017ed8:	68fb      	ldr	r3, [r7, #12]
 8017eda:	685a      	ldr	r2, [r3, #4]
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	685b      	ldr	r3, [r3, #4]
 8017ee0:	441a      	add	r2, r3
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	685b      	ldr	r3, [r3, #4]
 8017ef2:	68ba      	ldr	r2, [r7, #8]
 8017ef4:	441a      	add	r2, r3
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	429a      	cmp	r2, r3
 8017efc:	d118      	bne.n	8017f30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	681a      	ldr	r2, [r3, #0]
 8017f02:	4b15      	ldr	r3, [pc, #84]	; (8017f58 <prvInsertBlockIntoFreeList+0xb0>)
 8017f04:	681b      	ldr	r3, [r3, #0]
 8017f06:	429a      	cmp	r2, r3
 8017f08:	d00d      	beq.n	8017f26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	685a      	ldr	r2, [r3, #4]
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	685b      	ldr	r3, [r3, #4]
 8017f14:	441a      	add	r2, r3
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017f1a:	68fb      	ldr	r3, [r7, #12]
 8017f1c:	681b      	ldr	r3, [r3, #0]
 8017f1e:	681a      	ldr	r2, [r3, #0]
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	601a      	str	r2, [r3, #0]
 8017f24:	e008      	b.n	8017f38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017f26:	4b0c      	ldr	r3, [pc, #48]	; (8017f58 <prvInsertBlockIntoFreeList+0xb0>)
 8017f28:	681a      	ldr	r2, [r3, #0]
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	601a      	str	r2, [r3, #0]
 8017f2e:	e003      	b.n	8017f38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	681a      	ldr	r2, [r3, #0]
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017f38:	68fa      	ldr	r2, [r7, #12]
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	429a      	cmp	r2, r3
 8017f3e:	d002      	beq.n	8017f46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	687a      	ldr	r2, [r7, #4]
 8017f44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017f46:	bf00      	nop
 8017f48:	3714      	adds	r7, #20
 8017f4a:	46bd      	mov	sp, r7
 8017f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f50:	4770      	bx	lr
 8017f52:	bf00      	nop
 8017f54:	20006468 	.word	0x20006468
 8017f58:	20006470 	.word	0x20006470

08017f5c <_ZdlPvj>:
 8017f5c:	f000 b803 	b.w	8017f66 <_ZdlPv>

08017f60 <__cxa_pure_virtual>:
 8017f60:	b508      	push	{r3, lr}
 8017f62:	f000 f80f 	bl	8017f84 <_ZSt9terminatev>

08017f66 <_ZdlPv>:
 8017f66:	f000 b8db 	b.w	8018120 <free>

08017f6a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8017f6a:	b508      	push	{r3, lr}
 8017f6c:	4780      	blx	r0
 8017f6e:	f000 f875 	bl	801805c <abort>
	...

08017f74 <_ZSt13get_terminatev>:
 8017f74:	4b02      	ldr	r3, [pc, #8]	; (8017f80 <_ZSt13get_terminatev+0xc>)
 8017f76:	6818      	ldr	r0, [r3, #0]
 8017f78:	f3bf 8f5b 	dmb	ish
 8017f7c:	4770      	bx	lr
 8017f7e:	bf00      	nop
 8017f80:	20000060 	.word	0x20000060

08017f84 <_ZSt9terminatev>:
 8017f84:	b508      	push	{r3, lr}
 8017f86:	f7ff fff5 	bl	8017f74 <_ZSt13get_terminatev>
 8017f8a:	f7ff ffee 	bl	8017f6a <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08017f90 <floorf>:
 8017f90:	ee10 3a10 	vmov	r3, s0
 8017f94:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8017f98:	3a7f      	subs	r2, #127	; 0x7f
 8017f9a:	2a16      	cmp	r2, #22
 8017f9c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017fa0:	dc2a      	bgt.n	8017ff8 <floorf+0x68>
 8017fa2:	2a00      	cmp	r2, #0
 8017fa4:	da11      	bge.n	8017fca <floorf+0x3a>
 8017fa6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8018008 <floorf+0x78>
 8017faa:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017fae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fb6:	dd05      	ble.n	8017fc4 <floorf+0x34>
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	da23      	bge.n	8018004 <floorf+0x74>
 8017fbc:	4a13      	ldr	r2, [pc, #76]	; (801800c <floorf+0x7c>)
 8017fbe:	2900      	cmp	r1, #0
 8017fc0:	bf18      	it	ne
 8017fc2:	4613      	movne	r3, r2
 8017fc4:	ee00 3a10 	vmov	s0, r3
 8017fc8:	4770      	bx	lr
 8017fca:	4911      	ldr	r1, [pc, #68]	; (8018010 <floorf+0x80>)
 8017fcc:	4111      	asrs	r1, r2
 8017fce:	420b      	tst	r3, r1
 8017fd0:	d0fa      	beq.n	8017fc8 <floorf+0x38>
 8017fd2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8018008 <floorf+0x78>
 8017fd6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017fda:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fe2:	ddef      	ble.n	8017fc4 <floorf+0x34>
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	bfbe      	ittt	lt
 8017fe8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8017fec:	fa40 f202 	asrlt.w	r2, r0, r2
 8017ff0:	189b      	addlt	r3, r3, r2
 8017ff2:	ea23 0301 	bic.w	r3, r3, r1
 8017ff6:	e7e5      	b.n	8017fc4 <floorf+0x34>
 8017ff8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8017ffc:	d3e4      	bcc.n	8017fc8 <floorf+0x38>
 8017ffe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018002:	4770      	bx	lr
 8018004:	2300      	movs	r3, #0
 8018006:	e7dd      	b.n	8017fc4 <floorf+0x34>
 8018008:	7149f2ca 	.word	0x7149f2ca
 801800c:	bf800000 	.word	0xbf800000
 8018010:	007fffff 	.word	0x007fffff

08018014 <roundf>:
 8018014:	ee10 0a10 	vmov	r0, s0
 8018018:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801801c:	3a7f      	subs	r2, #127	; 0x7f
 801801e:	2a16      	cmp	r2, #22
 8018020:	dc15      	bgt.n	801804e <roundf+0x3a>
 8018022:	2a00      	cmp	r2, #0
 8018024:	da08      	bge.n	8018038 <roundf+0x24>
 8018026:	3201      	adds	r2, #1
 8018028:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801802c:	d101      	bne.n	8018032 <roundf+0x1e>
 801802e:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8018032:	ee00 3a10 	vmov	s0, r3
 8018036:	4770      	bx	lr
 8018038:	4907      	ldr	r1, [pc, #28]	; (8018058 <roundf+0x44>)
 801803a:	4111      	asrs	r1, r2
 801803c:	4208      	tst	r0, r1
 801803e:	d0fa      	beq.n	8018036 <roundf+0x22>
 8018040:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8018044:	4113      	asrs	r3, r2
 8018046:	4403      	add	r3, r0
 8018048:	ea23 0301 	bic.w	r3, r3, r1
 801804c:	e7f1      	b.n	8018032 <roundf+0x1e>
 801804e:	2a80      	cmp	r2, #128	; 0x80
 8018050:	d1f1      	bne.n	8018036 <roundf+0x22>
 8018052:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018056:	4770      	bx	lr
 8018058:	007fffff 	.word	0x007fffff

0801805c <abort>:
 801805c:	b508      	push	{r3, lr}
 801805e:	2006      	movs	r0, #6
 8018060:	f000 fc9c 	bl	801899c <raise>
 8018064:	2001      	movs	r0, #1
 8018066:	f7ea faf5 	bl	8002654 <_exit>
	...

0801806c <__assert_func>:
 801806c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801806e:	4614      	mov	r4, r2
 8018070:	461a      	mov	r2, r3
 8018072:	4b09      	ldr	r3, [pc, #36]	; (8018098 <__assert_func+0x2c>)
 8018074:	681b      	ldr	r3, [r3, #0]
 8018076:	4605      	mov	r5, r0
 8018078:	68d8      	ldr	r0, [r3, #12]
 801807a:	b14c      	cbz	r4, 8018090 <__assert_func+0x24>
 801807c:	4b07      	ldr	r3, [pc, #28]	; (801809c <__assert_func+0x30>)
 801807e:	9100      	str	r1, [sp, #0]
 8018080:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018084:	4906      	ldr	r1, [pc, #24]	; (80180a0 <__assert_func+0x34>)
 8018086:	462b      	mov	r3, r5
 8018088:	f000 f814 	bl	80180b4 <fiprintf>
 801808c:	f7ff ffe6 	bl	801805c <abort>
 8018090:	4b04      	ldr	r3, [pc, #16]	; (80180a4 <__assert_func+0x38>)
 8018092:	461c      	mov	r4, r3
 8018094:	e7f3      	b.n	801807e <__assert_func+0x12>
 8018096:	bf00      	nop
 8018098:	20000064 	.word	0x20000064
 801809c:	0801a9bc 	.word	0x0801a9bc
 80180a0:	0801a9c9 	.word	0x0801a9c9
 80180a4:	0801a9f7 	.word	0x0801a9f7

080180a8 <__errno>:
 80180a8:	4b01      	ldr	r3, [pc, #4]	; (80180b0 <__errno+0x8>)
 80180aa:	6818      	ldr	r0, [r3, #0]
 80180ac:	4770      	bx	lr
 80180ae:	bf00      	nop
 80180b0:	20000064 	.word	0x20000064

080180b4 <fiprintf>:
 80180b4:	b40e      	push	{r1, r2, r3}
 80180b6:	b503      	push	{r0, r1, lr}
 80180b8:	4601      	mov	r1, r0
 80180ba:	ab03      	add	r3, sp, #12
 80180bc:	4805      	ldr	r0, [pc, #20]	; (80180d4 <fiprintf+0x20>)
 80180be:	f853 2b04 	ldr.w	r2, [r3], #4
 80180c2:	6800      	ldr	r0, [r0, #0]
 80180c4:	9301      	str	r3, [sp, #4]
 80180c6:	f000 f96d 	bl	80183a4 <_vfiprintf_r>
 80180ca:	b002      	add	sp, #8
 80180cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80180d0:	b003      	add	sp, #12
 80180d2:	4770      	bx	lr
 80180d4:	20000064 	.word	0x20000064

080180d8 <__libc_init_array>:
 80180d8:	b570      	push	{r4, r5, r6, lr}
 80180da:	4d0d      	ldr	r5, [pc, #52]	; (8018110 <__libc_init_array+0x38>)
 80180dc:	4c0d      	ldr	r4, [pc, #52]	; (8018114 <__libc_init_array+0x3c>)
 80180de:	1b64      	subs	r4, r4, r5
 80180e0:	10a4      	asrs	r4, r4, #2
 80180e2:	2600      	movs	r6, #0
 80180e4:	42a6      	cmp	r6, r4
 80180e6:	d109      	bne.n	80180fc <__libc_init_array+0x24>
 80180e8:	4d0b      	ldr	r5, [pc, #44]	; (8018118 <__libc_init_array+0x40>)
 80180ea:	4c0c      	ldr	r4, [pc, #48]	; (801811c <__libc_init_array+0x44>)
 80180ec:	f001 f80a 	bl	8019104 <_init>
 80180f0:	1b64      	subs	r4, r4, r5
 80180f2:	10a4      	asrs	r4, r4, #2
 80180f4:	2600      	movs	r6, #0
 80180f6:	42a6      	cmp	r6, r4
 80180f8:	d105      	bne.n	8018106 <__libc_init_array+0x2e>
 80180fa:	bd70      	pop	{r4, r5, r6, pc}
 80180fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8018100:	4798      	blx	r3
 8018102:	3601      	adds	r6, #1
 8018104:	e7ee      	b.n	80180e4 <__libc_init_array+0xc>
 8018106:	f855 3b04 	ldr.w	r3, [r5], #4
 801810a:	4798      	blx	r3
 801810c:	3601      	adds	r6, #1
 801810e:	e7f2      	b.n	80180f6 <__libc_init_array+0x1e>
 8018110:	0801aa98 	.word	0x0801aa98
 8018114:	0801aa98 	.word	0x0801aa98
 8018118:	0801aa98 	.word	0x0801aa98
 801811c:	0801aaa0 	.word	0x0801aaa0

08018120 <free>:
 8018120:	4b02      	ldr	r3, [pc, #8]	; (801812c <free+0xc>)
 8018122:	4601      	mov	r1, r0
 8018124:	6818      	ldr	r0, [r3, #0]
 8018126:	f000 b833 	b.w	8018190 <_free_r>
 801812a:	bf00      	nop
 801812c:	20000064 	.word	0x20000064

08018130 <memcpy>:
 8018130:	440a      	add	r2, r1
 8018132:	4291      	cmp	r1, r2
 8018134:	f100 33ff 	add.w	r3, r0, #4294967295
 8018138:	d100      	bne.n	801813c <memcpy+0xc>
 801813a:	4770      	bx	lr
 801813c:	b510      	push	{r4, lr}
 801813e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018142:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018146:	4291      	cmp	r1, r2
 8018148:	d1f9      	bne.n	801813e <memcpy+0xe>
 801814a:	bd10      	pop	{r4, pc}

0801814c <memmove>:
 801814c:	4288      	cmp	r0, r1
 801814e:	b510      	push	{r4, lr}
 8018150:	eb01 0402 	add.w	r4, r1, r2
 8018154:	d902      	bls.n	801815c <memmove+0x10>
 8018156:	4284      	cmp	r4, r0
 8018158:	4623      	mov	r3, r4
 801815a:	d807      	bhi.n	801816c <memmove+0x20>
 801815c:	1e43      	subs	r3, r0, #1
 801815e:	42a1      	cmp	r1, r4
 8018160:	d008      	beq.n	8018174 <memmove+0x28>
 8018162:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018166:	f803 2f01 	strb.w	r2, [r3, #1]!
 801816a:	e7f8      	b.n	801815e <memmove+0x12>
 801816c:	4402      	add	r2, r0
 801816e:	4601      	mov	r1, r0
 8018170:	428a      	cmp	r2, r1
 8018172:	d100      	bne.n	8018176 <memmove+0x2a>
 8018174:	bd10      	pop	{r4, pc}
 8018176:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801817a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801817e:	e7f7      	b.n	8018170 <memmove+0x24>

08018180 <memset>:
 8018180:	4402      	add	r2, r0
 8018182:	4603      	mov	r3, r0
 8018184:	4293      	cmp	r3, r2
 8018186:	d100      	bne.n	801818a <memset+0xa>
 8018188:	4770      	bx	lr
 801818a:	f803 1b01 	strb.w	r1, [r3], #1
 801818e:	e7f9      	b.n	8018184 <memset+0x4>

08018190 <_free_r>:
 8018190:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018192:	2900      	cmp	r1, #0
 8018194:	d044      	beq.n	8018220 <_free_r+0x90>
 8018196:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801819a:	9001      	str	r0, [sp, #4]
 801819c:	2b00      	cmp	r3, #0
 801819e:	f1a1 0404 	sub.w	r4, r1, #4
 80181a2:	bfb8      	it	lt
 80181a4:	18e4      	addlt	r4, r4, r3
 80181a6:	f000 fef5 	bl	8018f94 <__malloc_lock>
 80181aa:	4a1e      	ldr	r2, [pc, #120]	; (8018224 <_free_r+0x94>)
 80181ac:	9801      	ldr	r0, [sp, #4]
 80181ae:	6813      	ldr	r3, [r2, #0]
 80181b0:	b933      	cbnz	r3, 80181c0 <_free_r+0x30>
 80181b2:	6063      	str	r3, [r4, #4]
 80181b4:	6014      	str	r4, [r2, #0]
 80181b6:	b003      	add	sp, #12
 80181b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80181bc:	f000 bef0 	b.w	8018fa0 <__malloc_unlock>
 80181c0:	42a3      	cmp	r3, r4
 80181c2:	d908      	bls.n	80181d6 <_free_r+0x46>
 80181c4:	6825      	ldr	r5, [r4, #0]
 80181c6:	1961      	adds	r1, r4, r5
 80181c8:	428b      	cmp	r3, r1
 80181ca:	bf01      	itttt	eq
 80181cc:	6819      	ldreq	r1, [r3, #0]
 80181ce:	685b      	ldreq	r3, [r3, #4]
 80181d0:	1949      	addeq	r1, r1, r5
 80181d2:	6021      	streq	r1, [r4, #0]
 80181d4:	e7ed      	b.n	80181b2 <_free_r+0x22>
 80181d6:	461a      	mov	r2, r3
 80181d8:	685b      	ldr	r3, [r3, #4]
 80181da:	b10b      	cbz	r3, 80181e0 <_free_r+0x50>
 80181dc:	42a3      	cmp	r3, r4
 80181de:	d9fa      	bls.n	80181d6 <_free_r+0x46>
 80181e0:	6811      	ldr	r1, [r2, #0]
 80181e2:	1855      	adds	r5, r2, r1
 80181e4:	42a5      	cmp	r5, r4
 80181e6:	d10b      	bne.n	8018200 <_free_r+0x70>
 80181e8:	6824      	ldr	r4, [r4, #0]
 80181ea:	4421      	add	r1, r4
 80181ec:	1854      	adds	r4, r2, r1
 80181ee:	42a3      	cmp	r3, r4
 80181f0:	6011      	str	r1, [r2, #0]
 80181f2:	d1e0      	bne.n	80181b6 <_free_r+0x26>
 80181f4:	681c      	ldr	r4, [r3, #0]
 80181f6:	685b      	ldr	r3, [r3, #4]
 80181f8:	6053      	str	r3, [r2, #4]
 80181fa:	4421      	add	r1, r4
 80181fc:	6011      	str	r1, [r2, #0]
 80181fe:	e7da      	b.n	80181b6 <_free_r+0x26>
 8018200:	d902      	bls.n	8018208 <_free_r+0x78>
 8018202:	230c      	movs	r3, #12
 8018204:	6003      	str	r3, [r0, #0]
 8018206:	e7d6      	b.n	80181b6 <_free_r+0x26>
 8018208:	6825      	ldr	r5, [r4, #0]
 801820a:	1961      	adds	r1, r4, r5
 801820c:	428b      	cmp	r3, r1
 801820e:	bf04      	itt	eq
 8018210:	6819      	ldreq	r1, [r3, #0]
 8018212:	685b      	ldreq	r3, [r3, #4]
 8018214:	6063      	str	r3, [r4, #4]
 8018216:	bf04      	itt	eq
 8018218:	1949      	addeq	r1, r1, r5
 801821a:	6021      	streq	r1, [r4, #0]
 801821c:	6054      	str	r4, [r2, #4]
 801821e:	e7ca      	b.n	80181b6 <_free_r+0x26>
 8018220:	b003      	add	sp, #12
 8018222:	bd30      	pop	{r4, r5, pc}
 8018224:	20006488 	.word	0x20006488

08018228 <sbrk_aligned>:
 8018228:	b570      	push	{r4, r5, r6, lr}
 801822a:	4e0e      	ldr	r6, [pc, #56]	; (8018264 <sbrk_aligned+0x3c>)
 801822c:	460c      	mov	r4, r1
 801822e:	6831      	ldr	r1, [r6, #0]
 8018230:	4605      	mov	r5, r0
 8018232:	b911      	cbnz	r1, 801823a <sbrk_aligned+0x12>
 8018234:	f000 fb7a 	bl	801892c <_sbrk_r>
 8018238:	6030      	str	r0, [r6, #0]
 801823a:	4621      	mov	r1, r4
 801823c:	4628      	mov	r0, r5
 801823e:	f000 fb75 	bl	801892c <_sbrk_r>
 8018242:	1c43      	adds	r3, r0, #1
 8018244:	d00a      	beq.n	801825c <sbrk_aligned+0x34>
 8018246:	1cc4      	adds	r4, r0, #3
 8018248:	f024 0403 	bic.w	r4, r4, #3
 801824c:	42a0      	cmp	r0, r4
 801824e:	d007      	beq.n	8018260 <sbrk_aligned+0x38>
 8018250:	1a21      	subs	r1, r4, r0
 8018252:	4628      	mov	r0, r5
 8018254:	f000 fb6a 	bl	801892c <_sbrk_r>
 8018258:	3001      	adds	r0, #1
 801825a:	d101      	bne.n	8018260 <sbrk_aligned+0x38>
 801825c:	f04f 34ff 	mov.w	r4, #4294967295
 8018260:	4620      	mov	r0, r4
 8018262:	bd70      	pop	{r4, r5, r6, pc}
 8018264:	2000648c 	.word	0x2000648c

08018268 <_malloc_r>:
 8018268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801826c:	1ccd      	adds	r5, r1, #3
 801826e:	f025 0503 	bic.w	r5, r5, #3
 8018272:	3508      	adds	r5, #8
 8018274:	2d0c      	cmp	r5, #12
 8018276:	bf38      	it	cc
 8018278:	250c      	movcc	r5, #12
 801827a:	2d00      	cmp	r5, #0
 801827c:	4607      	mov	r7, r0
 801827e:	db01      	blt.n	8018284 <_malloc_r+0x1c>
 8018280:	42a9      	cmp	r1, r5
 8018282:	d905      	bls.n	8018290 <_malloc_r+0x28>
 8018284:	230c      	movs	r3, #12
 8018286:	603b      	str	r3, [r7, #0]
 8018288:	2600      	movs	r6, #0
 801828a:	4630      	mov	r0, r6
 801828c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018290:	4e2e      	ldr	r6, [pc, #184]	; (801834c <_malloc_r+0xe4>)
 8018292:	f000 fe7f 	bl	8018f94 <__malloc_lock>
 8018296:	6833      	ldr	r3, [r6, #0]
 8018298:	461c      	mov	r4, r3
 801829a:	bb34      	cbnz	r4, 80182ea <_malloc_r+0x82>
 801829c:	4629      	mov	r1, r5
 801829e:	4638      	mov	r0, r7
 80182a0:	f7ff ffc2 	bl	8018228 <sbrk_aligned>
 80182a4:	1c43      	adds	r3, r0, #1
 80182a6:	4604      	mov	r4, r0
 80182a8:	d14d      	bne.n	8018346 <_malloc_r+0xde>
 80182aa:	6834      	ldr	r4, [r6, #0]
 80182ac:	4626      	mov	r6, r4
 80182ae:	2e00      	cmp	r6, #0
 80182b0:	d140      	bne.n	8018334 <_malloc_r+0xcc>
 80182b2:	6823      	ldr	r3, [r4, #0]
 80182b4:	4631      	mov	r1, r6
 80182b6:	4638      	mov	r0, r7
 80182b8:	eb04 0803 	add.w	r8, r4, r3
 80182bc:	f000 fb36 	bl	801892c <_sbrk_r>
 80182c0:	4580      	cmp	r8, r0
 80182c2:	d13a      	bne.n	801833a <_malloc_r+0xd2>
 80182c4:	6821      	ldr	r1, [r4, #0]
 80182c6:	3503      	adds	r5, #3
 80182c8:	1a6d      	subs	r5, r5, r1
 80182ca:	f025 0503 	bic.w	r5, r5, #3
 80182ce:	3508      	adds	r5, #8
 80182d0:	2d0c      	cmp	r5, #12
 80182d2:	bf38      	it	cc
 80182d4:	250c      	movcc	r5, #12
 80182d6:	4629      	mov	r1, r5
 80182d8:	4638      	mov	r0, r7
 80182da:	f7ff ffa5 	bl	8018228 <sbrk_aligned>
 80182de:	3001      	adds	r0, #1
 80182e0:	d02b      	beq.n	801833a <_malloc_r+0xd2>
 80182e2:	6823      	ldr	r3, [r4, #0]
 80182e4:	442b      	add	r3, r5
 80182e6:	6023      	str	r3, [r4, #0]
 80182e8:	e00e      	b.n	8018308 <_malloc_r+0xa0>
 80182ea:	6822      	ldr	r2, [r4, #0]
 80182ec:	1b52      	subs	r2, r2, r5
 80182ee:	d41e      	bmi.n	801832e <_malloc_r+0xc6>
 80182f0:	2a0b      	cmp	r2, #11
 80182f2:	d916      	bls.n	8018322 <_malloc_r+0xba>
 80182f4:	1961      	adds	r1, r4, r5
 80182f6:	42a3      	cmp	r3, r4
 80182f8:	6025      	str	r5, [r4, #0]
 80182fa:	bf18      	it	ne
 80182fc:	6059      	strne	r1, [r3, #4]
 80182fe:	6863      	ldr	r3, [r4, #4]
 8018300:	bf08      	it	eq
 8018302:	6031      	streq	r1, [r6, #0]
 8018304:	5162      	str	r2, [r4, r5]
 8018306:	604b      	str	r3, [r1, #4]
 8018308:	4638      	mov	r0, r7
 801830a:	f104 060b 	add.w	r6, r4, #11
 801830e:	f000 fe47 	bl	8018fa0 <__malloc_unlock>
 8018312:	f026 0607 	bic.w	r6, r6, #7
 8018316:	1d23      	adds	r3, r4, #4
 8018318:	1af2      	subs	r2, r6, r3
 801831a:	d0b6      	beq.n	801828a <_malloc_r+0x22>
 801831c:	1b9b      	subs	r3, r3, r6
 801831e:	50a3      	str	r3, [r4, r2]
 8018320:	e7b3      	b.n	801828a <_malloc_r+0x22>
 8018322:	6862      	ldr	r2, [r4, #4]
 8018324:	42a3      	cmp	r3, r4
 8018326:	bf0c      	ite	eq
 8018328:	6032      	streq	r2, [r6, #0]
 801832a:	605a      	strne	r2, [r3, #4]
 801832c:	e7ec      	b.n	8018308 <_malloc_r+0xa0>
 801832e:	4623      	mov	r3, r4
 8018330:	6864      	ldr	r4, [r4, #4]
 8018332:	e7b2      	b.n	801829a <_malloc_r+0x32>
 8018334:	4634      	mov	r4, r6
 8018336:	6876      	ldr	r6, [r6, #4]
 8018338:	e7b9      	b.n	80182ae <_malloc_r+0x46>
 801833a:	230c      	movs	r3, #12
 801833c:	603b      	str	r3, [r7, #0]
 801833e:	4638      	mov	r0, r7
 8018340:	f000 fe2e 	bl	8018fa0 <__malloc_unlock>
 8018344:	e7a1      	b.n	801828a <_malloc_r+0x22>
 8018346:	6025      	str	r5, [r4, #0]
 8018348:	e7de      	b.n	8018308 <_malloc_r+0xa0>
 801834a:	bf00      	nop
 801834c:	20006488 	.word	0x20006488

08018350 <__sfputc_r>:
 8018350:	6893      	ldr	r3, [r2, #8]
 8018352:	3b01      	subs	r3, #1
 8018354:	2b00      	cmp	r3, #0
 8018356:	b410      	push	{r4}
 8018358:	6093      	str	r3, [r2, #8]
 801835a:	da08      	bge.n	801836e <__sfputc_r+0x1e>
 801835c:	6994      	ldr	r4, [r2, #24]
 801835e:	42a3      	cmp	r3, r4
 8018360:	db01      	blt.n	8018366 <__sfputc_r+0x16>
 8018362:	290a      	cmp	r1, #10
 8018364:	d103      	bne.n	801836e <__sfputc_r+0x1e>
 8018366:	f85d 4b04 	ldr.w	r4, [sp], #4
 801836a:	f000 bb33 	b.w	80189d4 <__swbuf_r>
 801836e:	6813      	ldr	r3, [r2, #0]
 8018370:	1c58      	adds	r0, r3, #1
 8018372:	6010      	str	r0, [r2, #0]
 8018374:	7019      	strb	r1, [r3, #0]
 8018376:	4608      	mov	r0, r1
 8018378:	f85d 4b04 	ldr.w	r4, [sp], #4
 801837c:	4770      	bx	lr

0801837e <__sfputs_r>:
 801837e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018380:	4606      	mov	r6, r0
 8018382:	460f      	mov	r7, r1
 8018384:	4614      	mov	r4, r2
 8018386:	18d5      	adds	r5, r2, r3
 8018388:	42ac      	cmp	r4, r5
 801838a:	d101      	bne.n	8018390 <__sfputs_r+0x12>
 801838c:	2000      	movs	r0, #0
 801838e:	e007      	b.n	80183a0 <__sfputs_r+0x22>
 8018390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018394:	463a      	mov	r2, r7
 8018396:	4630      	mov	r0, r6
 8018398:	f7ff ffda 	bl	8018350 <__sfputc_r>
 801839c:	1c43      	adds	r3, r0, #1
 801839e:	d1f3      	bne.n	8018388 <__sfputs_r+0xa>
 80183a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080183a4 <_vfiprintf_r>:
 80183a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183a8:	460d      	mov	r5, r1
 80183aa:	b09d      	sub	sp, #116	; 0x74
 80183ac:	4614      	mov	r4, r2
 80183ae:	4698      	mov	r8, r3
 80183b0:	4606      	mov	r6, r0
 80183b2:	b118      	cbz	r0, 80183bc <_vfiprintf_r+0x18>
 80183b4:	6983      	ldr	r3, [r0, #24]
 80183b6:	b90b      	cbnz	r3, 80183bc <_vfiprintf_r+0x18>
 80183b8:	f000 fce6 	bl	8018d88 <__sinit>
 80183bc:	4b89      	ldr	r3, [pc, #548]	; (80185e4 <_vfiprintf_r+0x240>)
 80183be:	429d      	cmp	r5, r3
 80183c0:	d11b      	bne.n	80183fa <_vfiprintf_r+0x56>
 80183c2:	6875      	ldr	r5, [r6, #4]
 80183c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80183c6:	07d9      	lsls	r1, r3, #31
 80183c8:	d405      	bmi.n	80183d6 <_vfiprintf_r+0x32>
 80183ca:	89ab      	ldrh	r3, [r5, #12]
 80183cc:	059a      	lsls	r2, r3, #22
 80183ce:	d402      	bmi.n	80183d6 <_vfiprintf_r+0x32>
 80183d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80183d2:	f000 fd77 	bl	8018ec4 <__retarget_lock_acquire_recursive>
 80183d6:	89ab      	ldrh	r3, [r5, #12]
 80183d8:	071b      	lsls	r3, r3, #28
 80183da:	d501      	bpl.n	80183e0 <_vfiprintf_r+0x3c>
 80183dc:	692b      	ldr	r3, [r5, #16]
 80183de:	b9eb      	cbnz	r3, 801841c <_vfiprintf_r+0x78>
 80183e0:	4629      	mov	r1, r5
 80183e2:	4630      	mov	r0, r6
 80183e4:	f000 fb48 	bl	8018a78 <__swsetup_r>
 80183e8:	b1c0      	cbz	r0, 801841c <_vfiprintf_r+0x78>
 80183ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80183ec:	07dc      	lsls	r4, r3, #31
 80183ee:	d50e      	bpl.n	801840e <_vfiprintf_r+0x6a>
 80183f0:	f04f 30ff 	mov.w	r0, #4294967295
 80183f4:	b01d      	add	sp, #116	; 0x74
 80183f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183fa:	4b7b      	ldr	r3, [pc, #492]	; (80185e8 <_vfiprintf_r+0x244>)
 80183fc:	429d      	cmp	r5, r3
 80183fe:	d101      	bne.n	8018404 <_vfiprintf_r+0x60>
 8018400:	68b5      	ldr	r5, [r6, #8]
 8018402:	e7df      	b.n	80183c4 <_vfiprintf_r+0x20>
 8018404:	4b79      	ldr	r3, [pc, #484]	; (80185ec <_vfiprintf_r+0x248>)
 8018406:	429d      	cmp	r5, r3
 8018408:	bf08      	it	eq
 801840a:	68f5      	ldreq	r5, [r6, #12]
 801840c:	e7da      	b.n	80183c4 <_vfiprintf_r+0x20>
 801840e:	89ab      	ldrh	r3, [r5, #12]
 8018410:	0598      	lsls	r0, r3, #22
 8018412:	d4ed      	bmi.n	80183f0 <_vfiprintf_r+0x4c>
 8018414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018416:	f000 fd56 	bl	8018ec6 <__retarget_lock_release_recursive>
 801841a:	e7e9      	b.n	80183f0 <_vfiprintf_r+0x4c>
 801841c:	2300      	movs	r3, #0
 801841e:	9309      	str	r3, [sp, #36]	; 0x24
 8018420:	2320      	movs	r3, #32
 8018422:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018426:	f8cd 800c 	str.w	r8, [sp, #12]
 801842a:	2330      	movs	r3, #48	; 0x30
 801842c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80185f0 <_vfiprintf_r+0x24c>
 8018430:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018434:	f04f 0901 	mov.w	r9, #1
 8018438:	4623      	mov	r3, r4
 801843a:	469a      	mov	sl, r3
 801843c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018440:	b10a      	cbz	r2, 8018446 <_vfiprintf_r+0xa2>
 8018442:	2a25      	cmp	r2, #37	; 0x25
 8018444:	d1f9      	bne.n	801843a <_vfiprintf_r+0x96>
 8018446:	ebba 0b04 	subs.w	fp, sl, r4
 801844a:	d00b      	beq.n	8018464 <_vfiprintf_r+0xc0>
 801844c:	465b      	mov	r3, fp
 801844e:	4622      	mov	r2, r4
 8018450:	4629      	mov	r1, r5
 8018452:	4630      	mov	r0, r6
 8018454:	f7ff ff93 	bl	801837e <__sfputs_r>
 8018458:	3001      	adds	r0, #1
 801845a:	f000 80aa 	beq.w	80185b2 <_vfiprintf_r+0x20e>
 801845e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018460:	445a      	add	r2, fp
 8018462:	9209      	str	r2, [sp, #36]	; 0x24
 8018464:	f89a 3000 	ldrb.w	r3, [sl]
 8018468:	2b00      	cmp	r3, #0
 801846a:	f000 80a2 	beq.w	80185b2 <_vfiprintf_r+0x20e>
 801846e:	2300      	movs	r3, #0
 8018470:	f04f 32ff 	mov.w	r2, #4294967295
 8018474:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018478:	f10a 0a01 	add.w	sl, sl, #1
 801847c:	9304      	str	r3, [sp, #16]
 801847e:	9307      	str	r3, [sp, #28]
 8018480:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018484:	931a      	str	r3, [sp, #104]	; 0x68
 8018486:	4654      	mov	r4, sl
 8018488:	2205      	movs	r2, #5
 801848a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801848e:	4858      	ldr	r0, [pc, #352]	; (80185f0 <_vfiprintf_r+0x24c>)
 8018490:	f7e7 febe 	bl	8000210 <memchr>
 8018494:	9a04      	ldr	r2, [sp, #16]
 8018496:	b9d8      	cbnz	r0, 80184d0 <_vfiprintf_r+0x12c>
 8018498:	06d1      	lsls	r1, r2, #27
 801849a:	bf44      	itt	mi
 801849c:	2320      	movmi	r3, #32
 801849e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80184a2:	0713      	lsls	r3, r2, #28
 80184a4:	bf44      	itt	mi
 80184a6:	232b      	movmi	r3, #43	; 0x2b
 80184a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80184ac:	f89a 3000 	ldrb.w	r3, [sl]
 80184b0:	2b2a      	cmp	r3, #42	; 0x2a
 80184b2:	d015      	beq.n	80184e0 <_vfiprintf_r+0x13c>
 80184b4:	9a07      	ldr	r2, [sp, #28]
 80184b6:	4654      	mov	r4, sl
 80184b8:	2000      	movs	r0, #0
 80184ba:	f04f 0c0a 	mov.w	ip, #10
 80184be:	4621      	mov	r1, r4
 80184c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80184c4:	3b30      	subs	r3, #48	; 0x30
 80184c6:	2b09      	cmp	r3, #9
 80184c8:	d94e      	bls.n	8018568 <_vfiprintf_r+0x1c4>
 80184ca:	b1b0      	cbz	r0, 80184fa <_vfiprintf_r+0x156>
 80184cc:	9207      	str	r2, [sp, #28]
 80184ce:	e014      	b.n	80184fa <_vfiprintf_r+0x156>
 80184d0:	eba0 0308 	sub.w	r3, r0, r8
 80184d4:	fa09 f303 	lsl.w	r3, r9, r3
 80184d8:	4313      	orrs	r3, r2
 80184da:	9304      	str	r3, [sp, #16]
 80184dc:	46a2      	mov	sl, r4
 80184de:	e7d2      	b.n	8018486 <_vfiprintf_r+0xe2>
 80184e0:	9b03      	ldr	r3, [sp, #12]
 80184e2:	1d19      	adds	r1, r3, #4
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	9103      	str	r1, [sp, #12]
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	bfbb      	ittet	lt
 80184ec:	425b      	neglt	r3, r3
 80184ee:	f042 0202 	orrlt.w	r2, r2, #2
 80184f2:	9307      	strge	r3, [sp, #28]
 80184f4:	9307      	strlt	r3, [sp, #28]
 80184f6:	bfb8      	it	lt
 80184f8:	9204      	strlt	r2, [sp, #16]
 80184fa:	7823      	ldrb	r3, [r4, #0]
 80184fc:	2b2e      	cmp	r3, #46	; 0x2e
 80184fe:	d10c      	bne.n	801851a <_vfiprintf_r+0x176>
 8018500:	7863      	ldrb	r3, [r4, #1]
 8018502:	2b2a      	cmp	r3, #42	; 0x2a
 8018504:	d135      	bne.n	8018572 <_vfiprintf_r+0x1ce>
 8018506:	9b03      	ldr	r3, [sp, #12]
 8018508:	1d1a      	adds	r2, r3, #4
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	9203      	str	r2, [sp, #12]
 801850e:	2b00      	cmp	r3, #0
 8018510:	bfb8      	it	lt
 8018512:	f04f 33ff 	movlt.w	r3, #4294967295
 8018516:	3402      	adds	r4, #2
 8018518:	9305      	str	r3, [sp, #20]
 801851a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018600 <_vfiprintf_r+0x25c>
 801851e:	7821      	ldrb	r1, [r4, #0]
 8018520:	2203      	movs	r2, #3
 8018522:	4650      	mov	r0, sl
 8018524:	f7e7 fe74 	bl	8000210 <memchr>
 8018528:	b140      	cbz	r0, 801853c <_vfiprintf_r+0x198>
 801852a:	2340      	movs	r3, #64	; 0x40
 801852c:	eba0 000a 	sub.w	r0, r0, sl
 8018530:	fa03 f000 	lsl.w	r0, r3, r0
 8018534:	9b04      	ldr	r3, [sp, #16]
 8018536:	4303      	orrs	r3, r0
 8018538:	3401      	adds	r4, #1
 801853a:	9304      	str	r3, [sp, #16]
 801853c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018540:	482c      	ldr	r0, [pc, #176]	; (80185f4 <_vfiprintf_r+0x250>)
 8018542:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018546:	2206      	movs	r2, #6
 8018548:	f7e7 fe62 	bl	8000210 <memchr>
 801854c:	2800      	cmp	r0, #0
 801854e:	d03f      	beq.n	80185d0 <_vfiprintf_r+0x22c>
 8018550:	4b29      	ldr	r3, [pc, #164]	; (80185f8 <_vfiprintf_r+0x254>)
 8018552:	bb1b      	cbnz	r3, 801859c <_vfiprintf_r+0x1f8>
 8018554:	9b03      	ldr	r3, [sp, #12]
 8018556:	3307      	adds	r3, #7
 8018558:	f023 0307 	bic.w	r3, r3, #7
 801855c:	3308      	adds	r3, #8
 801855e:	9303      	str	r3, [sp, #12]
 8018560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018562:	443b      	add	r3, r7
 8018564:	9309      	str	r3, [sp, #36]	; 0x24
 8018566:	e767      	b.n	8018438 <_vfiprintf_r+0x94>
 8018568:	fb0c 3202 	mla	r2, ip, r2, r3
 801856c:	460c      	mov	r4, r1
 801856e:	2001      	movs	r0, #1
 8018570:	e7a5      	b.n	80184be <_vfiprintf_r+0x11a>
 8018572:	2300      	movs	r3, #0
 8018574:	3401      	adds	r4, #1
 8018576:	9305      	str	r3, [sp, #20]
 8018578:	4619      	mov	r1, r3
 801857a:	f04f 0c0a 	mov.w	ip, #10
 801857e:	4620      	mov	r0, r4
 8018580:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018584:	3a30      	subs	r2, #48	; 0x30
 8018586:	2a09      	cmp	r2, #9
 8018588:	d903      	bls.n	8018592 <_vfiprintf_r+0x1ee>
 801858a:	2b00      	cmp	r3, #0
 801858c:	d0c5      	beq.n	801851a <_vfiprintf_r+0x176>
 801858e:	9105      	str	r1, [sp, #20]
 8018590:	e7c3      	b.n	801851a <_vfiprintf_r+0x176>
 8018592:	fb0c 2101 	mla	r1, ip, r1, r2
 8018596:	4604      	mov	r4, r0
 8018598:	2301      	movs	r3, #1
 801859a:	e7f0      	b.n	801857e <_vfiprintf_r+0x1da>
 801859c:	ab03      	add	r3, sp, #12
 801859e:	9300      	str	r3, [sp, #0]
 80185a0:	462a      	mov	r2, r5
 80185a2:	4b16      	ldr	r3, [pc, #88]	; (80185fc <_vfiprintf_r+0x258>)
 80185a4:	a904      	add	r1, sp, #16
 80185a6:	4630      	mov	r0, r6
 80185a8:	f3af 8000 	nop.w
 80185ac:	4607      	mov	r7, r0
 80185ae:	1c78      	adds	r0, r7, #1
 80185b0:	d1d6      	bne.n	8018560 <_vfiprintf_r+0x1bc>
 80185b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80185b4:	07d9      	lsls	r1, r3, #31
 80185b6:	d405      	bmi.n	80185c4 <_vfiprintf_r+0x220>
 80185b8:	89ab      	ldrh	r3, [r5, #12]
 80185ba:	059a      	lsls	r2, r3, #22
 80185bc:	d402      	bmi.n	80185c4 <_vfiprintf_r+0x220>
 80185be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80185c0:	f000 fc81 	bl	8018ec6 <__retarget_lock_release_recursive>
 80185c4:	89ab      	ldrh	r3, [r5, #12]
 80185c6:	065b      	lsls	r3, r3, #25
 80185c8:	f53f af12 	bmi.w	80183f0 <_vfiprintf_r+0x4c>
 80185cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80185ce:	e711      	b.n	80183f4 <_vfiprintf_r+0x50>
 80185d0:	ab03      	add	r3, sp, #12
 80185d2:	9300      	str	r3, [sp, #0]
 80185d4:	462a      	mov	r2, r5
 80185d6:	4b09      	ldr	r3, [pc, #36]	; (80185fc <_vfiprintf_r+0x258>)
 80185d8:	a904      	add	r1, sp, #16
 80185da:	4630      	mov	r0, r6
 80185dc:	f000 f880 	bl	80186e0 <_printf_i>
 80185e0:	e7e4      	b.n	80185ac <_vfiprintf_r+0x208>
 80185e2:	bf00      	nop
 80185e4:	0801aa50 	.word	0x0801aa50
 80185e8:	0801aa70 	.word	0x0801aa70
 80185ec:	0801aa30 	.word	0x0801aa30
 80185f0:	0801a9fc 	.word	0x0801a9fc
 80185f4:	0801aa06 	.word	0x0801aa06
 80185f8:	00000000 	.word	0x00000000
 80185fc:	0801837f 	.word	0x0801837f
 8018600:	0801aa02 	.word	0x0801aa02

08018604 <_printf_common>:
 8018604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018608:	4616      	mov	r6, r2
 801860a:	4699      	mov	r9, r3
 801860c:	688a      	ldr	r2, [r1, #8]
 801860e:	690b      	ldr	r3, [r1, #16]
 8018610:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018614:	4293      	cmp	r3, r2
 8018616:	bfb8      	it	lt
 8018618:	4613      	movlt	r3, r2
 801861a:	6033      	str	r3, [r6, #0]
 801861c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018620:	4607      	mov	r7, r0
 8018622:	460c      	mov	r4, r1
 8018624:	b10a      	cbz	r2, 801862a <_printf_common+0x26>
 8018626:	3301      	adds	r3, #1
 8018628:	6033      	str	r3, [r6, #0]
 801862a:	6823      	ldr	r3, [r4, #0]
 801862c:	0699      	lsls	r1, r3, #26
 801862e:	bf42      	ittt	mi
 8018630:	6833      	ldrmi	r3, [r6, #0]
 8018632:	3302      	addmi	r3, #2
 8018634:	6033      	strmi	r3, [r6, #0]
 8018636:	6825      	ldr	r5, [r4, #0]
 8018638:	f015 0506 	ands.w	r5, r5, #6
 801863c:	d106      	bne.n	801864c <_printf_common+0x48>
 801863e:	f104 0a19 	add.w	sl, r4, #25
 8018642:	68e3      	ldr	r3, [r4, #12]
 8018644:	6832      	ldr	r2, [r6, #0]
 8018646:	1a9b      	subs	r3, r3, r2
 8018648:	42ab      	cmp	r3, r5
 801864a:	dc26      	bgt.n	801869a <_printf_common+0x96>
 801864c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018650:	1e13      	subs	r3, r2, #0
 8018652:	6822      	ldr	r2, [r4, #0]
 8018654:	bf18      	it	ne
 8018656:	2301      	movne	r3, #1
 8018658:	0692      	lsls	r2, r2, #26
 801865a:	d42b      	bmi.n	80186b4 <_printf_common+0xb0>
 801865c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018660:	4649      	mov	r1, r9
 8018662:	4638      	mov	r0, r7
 8018664:	47c0      	blx	r8
 8018666:	3001      	adds	r0, #1
 8018668:	d01e      	beq.n	80186a8 <_printf_common+0xa4>
 801866a:	6823      	ldr	r3, [r4, #0]
 801866c:	68e5      	ldr	r5, [r4, #12]
 801866e:	6832      	ldr	r2, [r6, #0]
 8018670:	f003 0306 	and.w	r3, r3, #6
 8018674:	2b04      	cmp	r3, #4
 8018676:	bf08      	it	eq
 8018678:	1aad      	subeq	r5, r5, r2
 801867a:	68a3      	ldr	r3, [r4, #8]
 801867c:	6922      	ldr	r2, [r4, #16]
 801867e:	bf0c      	ite	eq
 8018680:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018684:	2500      	movne	r5, #0
 8018686:	4293      	cmp	r3, r2
 8018688:	bfc4      	itt	gt
 801868a:	1a9b      	subgt	r3, r3, r2
 801868c:	18ed      	addgt	r5, r5, r3
 801868e:	2600      	movs	r6, #0
 8018690:	341a      	adds	r4, #26
 8018692:	42b5      	cmp	r5, r6
 8018694:	d11a      	bne.n	80186cc <_printf_common+0xc8>
 8018696:	2000      	movs	r0, #0
 8018698:	e008      	b.n	80186ac <_printf_common+0xa8>
 801869a:	2301      	movs	r3, #1
 801869c:	4652      	mov	r2, sl
 801869e:	4649      	mov	r1, r9
 80186a0:	4638      	mov	r0, r7
 80186a2:	47c0      	blx	r8
 80186a4:	3001      	adds	r0, #1
 80186a6:	d103      	bne.n	80186b0 <_printf_common+0xac>
 80186a8:	f04f 30ff 	mov.w	r0, #4294967295
 80186ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186b0:	3501      	adds	r5, #1
 80186b2:	e7c6      	b.n	8018642 <_printf_common+0x3e>
 80186b4:	18e1      	adds	r1, r4, r3
 80186b6:	1c5a      	adds	r2, r3, #1
 80186b8:	2030      	movs	r0, #48	; 0x30
 80186ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80186be:	4422      	add	r2, r4
 80186c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80186c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80186c8:	3302      	adds	r3, #2
 80186ca:	e7c7      	b.n	801865c <_printf_common+0x58>
 80186cc:	2301      	movs	r3, #1
 80186ce:	4622      	mov	r2, r4
 80186d0:	4649      	mov	r1, r9
 80186d2:	4638      	mov	r0, r7
 80186d4:	47c0      	blx	r8
 80186d6:	3001      	adds	r0, #1
 80186d8:	d0e6      	beq.n	80186a8 <_printf_common+0xa4>
 80186da:	3601      	adds	r6, #1
 80186dc:	e7d9      	b.n	8018692 <_printf_common+0x8e>
	...

080186e0 <_printf_i>:
 80186e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80186e4:	7e0f      	ldrb	r7, [r1, #24]
 80186e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80186e8:	2f78      	cmp	r7, #120	; 0x78
 80186ea:	4691      	mov	r9, r2
 80186ec:	4680      	mov	r8, r0
 80186ee:	460c      	mov	r4, r1
 80186f0:	469a      	mov	sl, r3
 80186f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80186f6:	d807      	bhi.n	8018708 <_printf_i+0x28>
 80186f8:	2f62      	cmp	r7, #98	; 0x62
 80186fa:	d80a      	bhi.n	8018712 <_printf_i+0x32>
 80186fc:	2f00      	cmp	r7, #0
 80186fe:	f000 80d8 	beq.w	80188b2 <_printf_i+0x1d2>
 8018702:	2f58      	cmp	r7, #88	; 0x58
 8018704:	f000 80a3 	beq.w	801884e <_printf_i+0x16e>
 8018708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801870c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018710:	e03a      	b.n	8018788 <_printf_i+0xa8>
 8018712:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018716:	2b15      	cmp	r3, #21
 8018718:	d8f6      	bhi.n	8018708 <_printf_i+0x28>
 801871a:	a101      	add	r1, pc, #4	; (adr r1, 8018720 <_printf_i+0x40>)
 801871c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018720:	08018779 	.word	0x08018779
 8018724:	0801878d 	.word	0x0801878d
 8018728:	08018709 	.word	0x08018709
 801872c:	08018709 	.word	0x08018709
 8018730:	08018709 	.word	0x08018709
 8018734:	08018709 	.word	0x08018709
 8018738:	0801878d 	.word	0x0801878d
 801873c:	08018709 	.word	0x08018709
 8018740:	08018709 	.word	0x08018709
 8018744:	08018709 	.word	0x08018709
 8018748:	08018709 	.word	0x08018709
 801874c:	08018899 	.word	0x08018899
 8018750:	080187bd 	.word	0x080187bd
 8018754:	0801887b 	.word	0x0801887b
 8018758:	08018709 	.word	0x08018709
 801875c:	08018709 	.word	0x08018709
 8018760:	080188bb 	.word	0x080188bb
 8018764:	08018709 	.word	0x08018709
 8018768:	080187bd 	.word	0x080187bd
 801876c:	08018709 	.word	0x08018709
 8018770:	08018709 	.word	0x08018709
 8018774:	08018883 	.word	0x08018883
 8018778:	682b      	ldr	r3, [r5, #0]
 801877a:	1d1a      	adds	r2, r3, #4
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	602a      	str	r2, [r5, #0]
 8018780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018788:	2301      	movs	r3, #1
 801878a:	e0a3      	b.n	80188d4 <_printf_i+0x1f4>
 801878c:	6820      	ldr	r0, [r4, #0]
 801878e:	6829      	ldr	r1, [r5, #0]
 8018790:	0606      	lsls	r6, r0, #24
 8018792:	f101 0304 	add.w	r3, r1, #4
 8018796:	d50a      	bpl.n	80187ae <_printf_i+0xce>
 8018798:	680e      	ldr	r6, [r1, #0]
 801879a:	602b      	str	r3, [r5, #0]
 801879c:	2e00      	cmp	r6, #0
 801879e:	da03      	bge.n	80187a8 <_printf_i+0xc8>
 80187a0:	232d      	movs	r3, #45	; 0x2d
 80187a2:	4276      	negs	r6, r6
 80187a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80187a8:	485e      	ldr	r0, [pc, #376]	; (8018924 <_printf_i+0x244>)
 80187aa:	230a      	movs	r3, #10
 80187ac:	e019      	b.n	80187e2 <_printf_i+0x102>
 80187ae:	680e      	ldr	r6, [r1, #0]
 80187b0:	602b      	str	r3, [r5, #0]
 80187b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80187b6:	bf18      	it	ne
 80187b8:	b236      	sxthne	r6, r6
 80187ba:	e7ef      	b.n	801879c <_printf_i+0xbc>
 80187bc:	682b      	ldr	r3, [r5, #0]
 80187be:	6820      	ldr	r0, [r4, #0]
 80187c0:	1d19      	adds	r1, r3, #4
 80187c2:	6029      	str	r1, [r5, #0]
 80187c4:	0601      	lsls	r1, r0, #24
 80187c6:	d501      	bpl.n	80187cc <_printf_i+0xec>
 80187c8:	681e      	ldr	r6, [r3, #0]
 80187ca:	e002      	b.n	80187d2 <_printf_i+0xf2>
 80187cc:	0646      	lsls	r6, r0, #25
 80187ce:	d5fb      	bpl.n	80187c8 <_printf_i+0xe8>
 80187d0:	881e      	ldrh	r6, [r3, #0]
 80187d2:	4854      	ldr	r0, [pc, #336]	; (8018924 <_printf_i+0x244>)
 80187d4:	2f6f      	cmp	r7, #111	; 0x6f
 80187d6:	bf0c      	ite	eq
 80187d8:	2308      	moveq	r3, #8
 80187da:	230a      	movne	r3, #10
 80187dc:	2100      	movs	r1, #0
 80187de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80187e2:	6865      	ldr	r5, [r4, #4]
 80187e4:	60a5      	str	r5, [r4, #8]
 80187e6:	2d00      	cmp	r5, #0
 80187e8:	bfa2      	ittt	ge
 80187ea:	6821      	ldrge	r1, [r4, #0]
 80187ec:	f021 0104 	bicge.w	r1, r1, #4
 80187f0:	6021      	strge	r1, [r4, #0]
 80187f2:	b90e      	cbnz	r6, 80187f8 <_printf_i+0x118>
 80187f4:	2d00      	cmp	r5, #0
 80187f6:	d04d      	beq.n	8018894 <_printf_i+0x1b4>
 80187f8:	4615      	mov	r5, r2
 80187fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80187fe:	fb03 6711 	mls	r7, r3, r1, r6
 8018802:	5dc7      	ldrb	r7, [r0, r7]
 8018804:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018808:	4637      	mov	r7, r6
 801880a:	42bb      	cmp	r3, r7
 801880c:	460e      	mov	r6, r1
 801880e:	d9f4      	bls.n	80187fa <_printf_i+0x11a>
 8018810:	2b08      	cmp	r3, #8
 8018812:	d10b      	bne.n	801882c <_printf_i+0x14c>
 8018814:	6823      	ldr	r3, [r4, #0]
 8018816:	07de      	lsls	r6, r3, #31
 8018818:	d508      	bpl.n	801882c <_printf_i+0x14c>
 801881a:	6923      	ldr	r3, [r4, #16]
 801881c:	6861      	ldr	r1, [r4, #4]
 801881e:	4299      	cmp	r1, r3
 8018820:	bfde      	ittt	le
 8018822:	2330      	movle	r3, #48	; 0x30
 8018824:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018828:	f105 35ff 	addle.w	r5, r5, #4294967295
 801882c:	1b52      	subs	r2, r2, r5
 801882e:	6122      	str	r2, [r4, #16]
 8018830:	f8cd a000 	str.w	sl, [sp]
 8018834:	464b      	mov	r3, r9
 8018836:	aa03      	add	r2, sp, #12
 8018838:	4621      	mov	r1, r4
 801883a:	4640      	mov	r0, r8
 801883c:	f7ff fee2 	bl	8018604 <_printf_common>
 8018840:	3001      	adds	r0, #1
 8018842:	d14c      	bne.n	80188de <_printf_i+0x1fe>
 8018844:	f04f 30ff 	mov.w	r0, #4294967295
 8018848:	b004      	add	sp, #16
 801884a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801884e:	4835      	ldr	r0, [pc, #212]	; (8018924 <_printf_i+0x244>)
 8018850:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8018854:	6829      	ldr	r1, [r5, #0]
 8018856:	6823      	ldr	r3, [r4, #0]
 8018858:	f851 6b04 	ldr.w	r6, [r1], #4
 801885c:	6029      	str	r1, [r5, #0]
 801885e:	061d      	lsls	r5, r3, #24
 8018860:	d514      	bpl.n	801888c <_printf_i+0x1ac>
 8018862:	07df      	lsls	r7, r3, #31
 8018864:	bf44      	itt	mi
 8018866:	f043 0320 	orrmi.w	r3, r3, #32
 801886a:	6023      	strmi	r3, [r4, #0]
 801886c:	b91e      	cbnz	r6, 8018876 <_printf_i+0x196>
 801886e:	6823      	ldr	r3, [r4, #0]
 8018870:	f023 0320 	bic.w	r3, r3, #32
 8018874:	6023      	str	r3, [r4, #0]
 8018876:	2310      	movs	r3, #16
 8018878:	e7b0      	b.n	80187dc <_printf_i+0xfc>
 801887a:	6823      	ldr	r3, [r4, #0]
 801887c:	f043 0320 	orr.w	r3, r3, #32
 8018880:	6023      	str	r3, [r4, #0]
 8018882:	2378      	movs	r3, #120	; 0x78
 8018884:	4828      	ldr	r0, [pc, #160]	; (8018928 <_printf_i+0x248>)
 8018886:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801888a:	e7e3      	b.n	8018854 <_printf_i+0x174>
 801888c:	0659      	lsls	r1, r3, #25
 801888e:	bf48      	it	mi
 8018890:	b2b6      	uxthmi	r6, r6
 8018892:	e7e6      	b.n	8018862 <_printf_i+0x182>
 8018894:	4615      	mov	r5, r2
 8018896:	e7bb      	b.n	8018810 <_printf_i+0x130>
 8018898:	682b      	ldr	r3, [r5, #0]
 801889a:	6826      	ldr	r6, [r4, #0]
 801889c:	6961      	ldr	r1, [r4, #20]
 801889e:	1d18      	adds	r0, r3, #4
 80188a0:	6028      	str	r0, [r5, #0]
 80188a2:	0635      	lsls	r5, r6, #24
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	d501      	bpl.n	80188ac <_printf_i+0x1cc>
 80188a8:	6019      	str	r1, [r3, #0]
 80188aa:	e002      	b.n	80188b2 <_printf_i+0x1d2>
 80188ac:	0670      	lsls	r0, r6, #25
 80188ae:	d5fb      	bpl.n	80188a8 <_printf_i+0x1c8>
 80188b0:	8019      	strh	r1, [r3, #0]
 80188b2:	2300      	movs	r3, #0
 80188b4:	6123      	str	r3, [r4, #16]
 80188b6:	4615      	mov	r5, r2
 80188b8:	e7ba      	b.n	8018830 <_printf_i+0x150>
 80188ba:	682b      	ldr	r3, [r5, #0]
 80188bc:	1d1a      	adds	r2, r3, #4
 80188be:	602a      	str	r2, [r5, #0]
 80188c0:	681d      	ldr	r5, [r3, #0]
 80188c2:	6862      	ldr	r2, [r4, #4]
 80188c4:	2100      	movs	r1, #0
 80188c6:	4628      	mov	r0, r5
 80188c8:	f7e7 fca2 	bl	8000210 <memchr>
 80188cc:	b108      	cbz	r0, 80188d2 <_printf_i+0x1f2>
 80188ce:	1b40      	subs	r0, r0, r5
 80188d0:	6060      	str	r0, [r4, #4]
 80188d2:	6863      	ldr	r3, [r4, #4]
 80188d4:	6123      	str	r3, [r4, #16]
 80188d6:	2300      	movs	r3, #0
 80188d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80188dc:	e7a8      	b.n	8018830 <_printf_i+0x150>
 80188de:	6923      	ldr	r3, [r4, #16]
 80188e0:	462a      	mov	r2, r5
 80188e2:	4649      	mov	r1, r9
 80188e4:	4640      	mov	r0, r8
 80188e6:	47d0      	blx	sl
 80188e8:	3001      	adds	r0, #1
 80188ea:	d0ab      	beq.n	8018844 <_printf_i+0x164>
 80188ec:	6823      	ldr	r3, [r4, #0]
 80188ee:	079b      	lsls	r3, r3, #30
 80188f0:	d413      	bmi.n	801891a <_printf_i+0x23a>
 80188f2:	68e0      	ldr	r0, [r4, #12]
 80188f4:	9b03      	ldr	r3, [sp, #12]
 80188f6:	4298      	cmp	r0, r3
 80188f8:	bfb8      	it	lt
 80188fa:	4618      	movlt	r0, r3
 80188fc:	e7a4      	b.n	8018848 <_printf_i+0x168>
 80188fe:	2301      	movs	r3, #1
 8018900:	4632      	mov	r2, r6
 8018902:	4649      	mov	r1, r9
 8018904:	4640      	mov	r0, r8
 8018906:	47d0      	blx	sl
 8018908:	3001      	adds	r0, #1
 801890a:	d09b      	beq.n	8018844 <_printf_i+0x164>
 801890c:	3501      	adds	r5, #1
 801890e:	68e3      	ldr	r3, [r4, #12]
 8018910:	9903      	ldr	r1, [sp, #12]
 8018912:	1a5b      	subs	r3, r3, r1
 8018914:	42ab      	cmp	r3, r5
 8018916:	dcf2      	bgt.n	80188fe <_printf_i+0x21e>
 8018918:	e7eb      	b.n	80188f2 <_printf_i+0x212>
 801891a:	2500      	movs	r5, #0
 801891c:	f104 0619 	add.w	r6, r4, #25
 8018920:	e7f5      	b.n	801890e <_printf_i+0x22e>
 8018922:	bf00      	nop
 8018924:	0801aa0d 	.word	0x0801aa0d
 8018928:	0801aa1e 	.word	0x0801aa1e

0801892c <_sbrk_r>:
 801892c:	b538      	push	{r3, r4, r5, lr}
 801892e:	4d06      	ldr	r5, [pc, #24]	; (8018948 <_sbrk_r+0x1c>)
 8018930:	2300      	movs	r3, #0
 8018932:	4604      	mov	r4, r0
 8018934:	4608      	mov	r0, r1
 8018936:	602b      	str	r3, [r5, #0]
 8018938:	f7e9 ff04 	bl	8002744 <_sbrk>
 801893c:	1c43      	adds	r3, r0, #1
 801893e:	d102      	bne.n	8018946 <_sbrk_r+0x1a>
 8018940:	682b      	ldr	r3, [r5, #0]
 8018942:	b103      	cbz	r3, 8018946 <_sbrk_r+0x1a>
 8018944:	6023      	str	r3, [r4, #0]
 8018946:	bd38      	pop	{r3, r4, r5, pc}
 8018948:	20006494 	.word	0x20006494

0801894c <_raise_r>:
 801894c:	291f      	cmp	r1, #31
 801894e:	b538      	push	{r3, r4, r5, lr}
 8018950:	4604      	mov	r4, r0
 8018952:	460d      	mov	r5, r1
 8018954:	d904      	bls.n	8018960 <_raise_r+0x14>
 8018956:	2316      	movs	r3, #22
 8018958:	6003      	str	r3, [r0, #0]
 801895a:	f04f 30ff 	mov.w	r0, #4294967295
 801895e:	bd38      	pop	{r3, r4, r5, pc}
 8018960:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018962:	b112      	cbz	r2, 801896a <_raise_r+0x1e>
 8018964:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018968:	b94b      	cbnz	r3, 801897e <_raise_r+0x32>
 801896a:	4620      	mov	r0, r4
 801896c:	f000 f830 	bl	80189d0 <_getpid_r>
 8018970:	462a      	mov	r2, r5
 8018972:	4601      	mov	r1, r0
 8018974:	4620      	mov	r0, r4
 8018976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801897a:	f000 b817 	b.w	80189ac <_kill_r>
 801897e:	2b01      	cmp	r3, #1
 8018980:	d00a      	beq.n	8018998 <_raise_r+0x4c>
 8018982:	1c59      	adds	r1, r3, #1
 8018984:	d103      	bne.n	801898e <_raise_r+0x42>
 8018986:	2316      	movs	r3, #22
 8018988:	6003      	str	r3, [r0, #0]
 801898a:	2001      	movs	r0, #1
 801898c:	e7e7      	b.n	801895e <_raise_r+0x12>
 801898e:	2400      	movs	r4, #0
 8018990:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018994:	4628      	mov	r0, r5
 8018996:	4798      	blx	r3
 8018998:	2000      	movs	r0, #0
 801899a:	e7e0      	b.n	801895e <_raise_r+0x12>

0801899c <raise>:
 801899c:	4b02      	ldr	r3, [pc, #8]	; (80189a8 <raise+0xc>)
 801899e:	4601      	mov	r1, r0
 80189a0:	6818      	ldr	r0, [r3, #0]
 80189a2:	f7ff bfd3 	b.w	801894c <_raise_r>
 80189a6:	bf00      	nop
 80189a8:	20000064 	.word	0x20000064

080189ac <_kill_r>:
 80189ac:	b538      	push	{r3, r4, r5, lr}
 80189ae:	4d07      	ldr	r5, [pc, #28]	; (80189cc <_kill_r+0x20>)
 80189b0:	2300      	movs	r3, #0
 80189b2:	4604      	mov	r4, r0
 80189b4:	4608      	mov	r0, r1
 80189b6:	4611      	mov	r1, r2
 80189b8:	602b      	str	r3, [r5, #0]
 80189ba:	f7e9 fe3b 	bl	8002634 <_kill>
 80189be:	1c43      	adds	r3, r0, #1
 80189c0:	d102      	bne.n	80189c8 <_kill_r+0x1c>
 80189c2:	682b      	ldr	r3, [r5, #0]
 80189c4:	b103      	cbz	r3, 80189c8 <_kill_r+0x1c>
 80189c6:	6023      	str	r3, [r4, #0]
 80189c8:	bd38      	pop	{r3, r4, r5, pc}
 80189ca:	bf00      	nop
 80189cc:	20006494 	.word	0x20006494

080189d0 <_getpid_r>:
 80189d0:	f7e9 be28 	b.w	8002624 <_getpid>

080189d4 <__swbuf_r>:
 80189d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189d6:	460e      	mov	r6, r1
 80189d8:	4614      	mov	r4, r2
 80189da:	4605      	mov	r5, r0
 80189dc:	b118      	cbz	r0, 80189e6 <__swbuf_r+0x12>
 80189de:	6983      	ldr	r3, [r0, #24]
 80189e0:	b90b      	cbnz	r3, 80189e6 <__swbuf_r+0x12>
 80189e2:	f000 f9d1 	bl	8018d88 <__sinit>
 80189e6:	4b21      	ldr	r3, [pc, #132]	; (8018a6c <__swbuf_r+0x98>)
 80189e8:	429c      	cmp	r4, r3
 80189ea:	d12b      	bne.n	8018a44 <__swbuf_r+0x70>
 80189ec:	686c      	ldr	r4, [r5, #4]
 80189ee:	69a3      	ldr	r3, [r4, #24]
 80189f0:	60a3      	str	r3, [r4, #8]
 80189f2:	89a3      	ldrh	r3, [r4, #12]
 80189f4:	071a      	lsls	r2, r3, #28
 80189f6:	d52f      	bpl.n	8018a58 <__swbuf_r+0x84>
 80189f8:	6923      	ldr	r3, [r4, #16]
 80189fa:	b36b      	cbz	r3, 8018a58 <__swbuf_r+0x84>
 80189fc:	6923      	ldr	r3, [r4, #16]
 80189fe:	6820      	ldr	r0, [r4, #0]
 8018a00:	1ac0      	subs	r0, r0, r3
 8018a02:	6963      	ldr	r3, [r4, #20]
 8018a04:	b2f6      	uxtb	r6, r6
 8018a06:	4283      	cmp	r3, r0
 8018a08:	4637      	mov	r7, r6
 8018a0a:	dc04      	bgt.n	8018a16 <__swbuf_r+0x42>
 8018a0c:	4621      	mov	r1, r4
 8018a0e:	4628      	mov	r0, r5
 8018a10:	f000 f926 	bl	8018c60 <_fflush_r>
 8018a14:	bb30      	cbnz	r0, 8018a64 <__swbuf_r+0x90>
 8018a16:	68a3      	ldr	r3, [r4, #8]
 8018a18:	3b01      	subs	r3, #1
 8018a1a:	60a3      	str	r3, [r4, #8]
 8018a1c:	6823      	ldr	r3, [r4, #0]
 8018a1e:	1c5a      	adds	r2, r3, #1
 8018a20:	6022      	str	r2, [r4, #0]
 8018a22:	701e      	strb	r6, [r3, #0]
 8018a24:	6963      	ldr	r3, [r4, #20]
 8018a26:	3001      	adds	r0, #1
 8018a28:	4283      	cmp	r3, r0
 8018a2a:	d004      	beq.n	8018a36 <__swbuf_r+0x62>
 8018a2c:	89a3      	ldrh	r3, [r4, #12]
 8018a2e:	07db      	lsls	r3, r3, #31
 8018a30:	d506      	bpl.n	8018a40 <__swbuf_r+0x6c>
 8018a32:	2e0a      	cmp	r6, #10
 8018a34:	d104      	bne.n	8018a40 <__swbuf_r+0x6c>
 8018a36:	4621      	mov	r1, r4
 8018a38:	4628      	mov	r0, r5
 8018a3a:	f000 f911 	bl	8018c60 <_fflush_r>
 8018a3e:	b988      	cbnz	r0, 8018a64 <__swbuf_r+0x90>
 8018a40:	4638      	mov	r0, r7
 8018a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a44:	4b0a      	ldr	r3, [pc, #40]	; (8018a70 <__swbuf_r+0x9c>)
 8018a46:	429c      	cmp	r4, r3
 8018a48:	d101      	bne.n	8018a4e <__swbuf_r+0x7a>
 8018a4a:	68ac      	ldr	r4, [r5, #8]
 8018a4c:	e7cf      	b.n	80189ee <__swbuf_r+0x1a>
 8018a4e:	4b09      	ldr	r3, [pc, #36]	; (8018a74 <__swbuf_r+0xa0>)
 8018a50:	429c      	cmp	r4, r3
 8018a52:	bf08      	it	eq
 8018a54:	68ec      	ldreq	r4, [r5, #12]
 8018a56:	e7ca      	b.n	80189ee <__swbuf_r+0x1a>
 8018a58:	4621      	mov	r1, r4
 8018a5a:	4628      	mov	r0, r5
 8018a5c:	f000 f80c 	bl	8018a78 <__swsetup_r>
 8018a60:	2800      	cmp	r0, #0
 8018a62:	d0cb      	beq.n	80189fc <__swbuf_r+0x28>
 8018a64:	f04f 37ff 	mov.w	r7, #4294967295
 8018a68:	e7ea      	b.n	8018a40 <__swbuf_r+0x6c>
 8018a6a:	bf00      	nop
 8018a6c:	0801aa50 	.word	0x0801aa50
 8018a70:	0801aa70 	.word	0x0801aa70
 8018a74:	0801aa30 	.word	0x0801aa30

08018a78 <__swsetup_r>:
 8018a78:	4b32      	ldr	r3, [pc, #200]	; (8018b44 <__swsetup_r+0xcc>)
 8018a7a:	b570      	push	{r4, r5, r6, lr}
 8018a7c:	681d      	ldr	r5, [r3, #0]
 8018a7e:	4606      	mov	r6, r0
 8018a80:	460c      	mov	r4, r1
 8018a82:	b125      	cbz	r5, 8018a8e <__swsetup_r+0x16>
 8018a84:	69ab      	ldr	r3, [r5, #24]
 8018a86:	b913      	cbnz	r3, 8018a8e <__swsetup_r+0x16>
 8018a88:	4628      	mov	r0, r5
 8018a8a:	f000 f97d 	bl	8018d88 <__sinit>
 8018a8e:	4b2e      	ldr	r3, [pc, #184]	; (8018b48 <__swsetup_r+0xd0>)
 8018a90:	429c      	cmp	r4, r3
 8018a92:	d10f      	bne.n	8018ab4 <__swsetup_r+0x3c>
 8018a94:	686c      	ldr	r4, [r5, #4]
 8018a96:	89a3      	ldrh	r3, [r4, #12]
 8018a98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018a9c:	0719      	lsls	r1, r3, #28
 8018a9e:	d42c      	bmi.n	8018afa <__swsetup_r+0x82>
 8018aa0:	06dd      	lsls	r5, r3, #27
 8018aa2:	d411      	bmi.n	8018ac8 <__swsetup_r+0x50>
 8018aa4:	2309      	movs	r3, #9
 8018aa6:	6033      	str	r3, [r6, #0]
 8018aa8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018aac:	81a3      	strh	r3, [r4, #12]
 8018aae:	f04f 30ff 	mov.w	r0, #4294967295
 8018ab2:	e03e      	b.n	8018b32 <__swsetup_r+0xba>
 8018ab4:	4b25      	ldr	r3, [pc, #148]	; (8018b4c <__swsetup_r+0xd4>)
 8018ab6:	429c      	cmp	r4, r3
 8018ab8:	d101      	bne.n	8018abe <__swsetup_r+0x46>
 8018aba:	68ac      	ldr	r4, [r5, #8]
 8018abc:	e7eb      	b.n	8018a96 <__swsetup_r+0x1e>
 8018abe:	4b24      	ldr	r3, [pc, #144]	; (8018b50 <__swsetup_r+0xd8>)
 8018ac0:	429c      	cmp	r4, r3
 8018ac2:	bf08      	it	eq
 8018ac4:	68ec      	ldreq	r4, [r5, #12]
 8018ac6:	e7e6      	b.n	8018a96 <__swsetup_r+0x1e>
 8018ac8:	0758      	lsls	r0, r3, #29
 8018aca:	d512      	bpl.n	8018af2 <__swsetup_r+0x7a>
 8018acc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018ace:	b141      	cbz	r1, 8018ae2 <__swsetup_r+0x6a>
 8018ad0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018ad4:	4299      	cmp	r1, r3
 8018ad6:	d002      	beq.n	8018ade <__swsetup_r+0x66>
 8018ad8:	4630      	mov	r0, r6
 8018ada:	f7ff fb59 	bl	8018190 <_free_r>
 8018ade:	2300      	movs	r3, #0
 8018ae0:	6363      	str	r3, [r4, #52]	; 0x34
 8018ae2:	89a3      	ldrh	r3, [r4, #12]
 8018ae4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018ae8:	81a3      	strh	r3, [r4, #12]
 8018aea:	2300      	movs	r3, #0
 8018aec:	6063      	str	r3, [r4, #4]
 8018aee:	6923      	ldr	r3, [r4, #16]
 8018af0:	6023      	str	r3, [r4, #0]
 8018af2:	89a3      	ldrh	r3, [r4, #12]
 8018af4:	f043 0308 	orr.w	r3, r3, #8
 8018af8:	81a3      	strh	r3, [r4, #12]
 8018afa:	6923      	ldr	r3, [r4, #16]
 8018afc:	b94b      	cbnz	r3, 8018b12 <__swsetup_r+0x9a>
 8018afe:	89a3      	ldrh	r3, [r4, #12]
 8018b00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018b08:	d003      	beq.n	8018b12 <__swsetup_r+0x9a>
 8018b0a:	4621      	mov	r1, r4
 8018b0c:	4630      	mov	r0, r6
 8018b0e:	f000 fa01 	bl	8018f14 <__smakebuf_r>
 8018b12:	89a0      	ldrh	r0, [r4, #12]
 8018b14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018b18:	f010 0301 	ands.w	r3, r0, #1
 8018b1c:	d00a      	beq.n	8018b34 <__swsetup_r+0xbc>
 8018b1e:	2300      	movs	r3, #0
 8018b20:	60a3      	str	r3, [r4, #8]
 8018b22:	6963      	ldr	r3, [r4, #20]
 8018b24:	425b      	negs	r3, r3
 8018b26:	61a3      	str	r3, [r4, #24]
 8018b28:	6923      	ldr	r3, [r4, #16]
 8018b2a:	b943      	cbnz	r3, 8018b3e <__swsetup_r+0xc6>
 8018b2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018b30:	d1ba      	bne.n	8018aa8 <__swsetup_r+0x30>
 8018b32:	bd70      	pop	{r4, r5, r6, pc}
 8018b34:	0781      	lsls	r1, r0, #30
 8018b36:	bf58      	it	pl
 8018b38:	6963      	ldrpl	r3, [r4, #20]
 8018b3a:	60a3      	str	r3, [r4, #8]
 8018b3c:	e7f4      	b.n	8018b28 <__swsetup_r+0xb0>
 8018b3e:	2000      	movs	r0, #0
 8018b40:	e7f7      	b.n	8018b32 <__swsetup_r+0xba>
 8018b42:	bf00      	nop
 8018b44:	20000064 	.word	0x20000064
 8018b48:	0801aa50 	.word	0x0801aa50
 8018b4c:	0801aa70 	.word	0x0801aa70
 8018b50:	0801aa30 	.word	0x0801aa30

08018b54 <__sflush_r>:
 8018b54:	898a      	ldrh	r2, [r1, #12]
 8018b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b5a:	4605      	mov	r5, r0
 8018b5c:	0710      	lsls	r0, r2, #28
 8018b5e:	460c      	mov	r4, r1
 8018b60:	d458      	bmi.n	8018c14 <__sflush_r+0xc0>
 8018b62:	684b      	ldr	r3, [r1, #4]
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	dc05      	bgt.n	8018b74 <__sflush_r+0x20>
 8018b68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	dc02      	bgt.n	8018b74 <__sflush_r+0x20>
 8018b6e:	2000      	movs	r0, #0
 8018b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018b76:	2e00      	cmp	r6, #0
 8018b78:	d0f9      	beq.n	8018b6e <__sflush_r+0x1a>
 8018b7a:	2300      	movs	r3, #0
 8018b7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018b80:	682f      	ldr	r7, [r5, #0]
 8018b82:	602b      	str	r3, [r5, #0]
 8018b84:	d032      	beq.n	8018bec <__sflush_r+0x98>
 8018b86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018b88:	89a3      	ldrh	r3, [r4, #12]
 8018b8a:	075a      	lsls	r2, r3, #29
 8018b8c:	d505      	bpl.n	8018b9a <__sflush_r+0x46>
 8018b8e:	6863      	ldr	r3, [r4, #4]
 8018b90:	1ac0      	subs	r0, r0, r3
 8018b92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018b94:	b10b      	cbz	r3, 8018b9a <__sflush_r+0x46>
 8018b96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018b98:	1ac0      	subs	r0, r0, r3
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	4602      	mov	r2, r0
 8018b9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018ba0:	6a21      	ldr	r1, [r4, #32]
 8018ba2:	4628      	mov	r0, r5
 8018ba4:	47b0      	blx	r6
 8018ba6:	1c43      	adds	r3, r0, #1
 8018ba8:	89a3      	ldrh	r3, [r4, #12]
 8018baa:	d106      	bne.n	8018bba <__sflush_r+0x66>
 8018bac:	6829      	ldr	r1, [r5, #0]
 8018bae:	291d      	cmp	r1, #29
 8018bb0:	d82c      	bhi.n	8018c0c <__sflush_r+0xb8>
 8018bb2:	4a2a      	ldr	r2, [pc, #168]	; (8018c5c <__sflush_r+0x108>)
 8018bb4:	40ca      	lsrs	r2, r1
 8018bb6:	07d6      	lsls	r6, r2, #31
 8018bb8:	d528      	bpl.n	8018c0c <__sflush_r+0xb8>
 8018bba:	2200      	movs	r2, #0
 8018bbc:	6062      	str	r2, [r4, #4]
 8018bbe:	04d9      	lsls	r1, r3, #19
 8018bc0:	6922      	ldr	r2, [r4, #16]
 8018bc2:	6022      	str	r2, [r4, #0]
 8018bc4:	d504      	bpl.n	8018bd0 <__sflush_r+0x7c>
 8018bc6:	1c42      	adds	r2, r0, #1
 8018bc8:	d101      	bne.n	8018bce <__sflush_r+0x7a>
 8018bca:	682b      	ldr	r3, [r5, #0]
 8018bcc:	b903      	cbnz	r3, 8018bd0 <__sflush_r+0x7c>
 8018bce:	6560      	str	r0, [r4, #84]	; 0x54
 8018bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018bd2:	602f      	str	r7, [r5, #0]
 8018bd4:	2900      	cmp	r1, #0
 8018bd6:	d0ca      	beq.n	8018b6e <__sflush_r+0x1a>
 8018bd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018bdc:	4299      	cmp	r1, r3
 8018bde:	d002      	beq.n	8018be6 <__sflush_r+0x92>
 8018be0:	4628      	mov	r0, r5
 8018be2:	f7ff fad5 	bl	8018190 <_free_r>
 8018be6:	2000      	movs	r0, #0
 8018be8:	6360      	str	r0, [r4, #52]	; 0x34
 8018bea:	e7c1      	b.n	8018b70 <__sflush_r+0x1c>
 8018bec:	6a21      	ldr	r1, [r4, #32]
 8018bee:	2301      	movs	r3, #1
 8018bf0:	4628      	mov	r0, r5
 8018bf2:	47b0      	blx	r6
 8018bf4:	1c41      	adds	r1, r0, #1
 8018bf6:	d1c7      	bne.n	8018b88 <__sflush_r+0x34>
 8018bf8:	682b      	ldr	r3, [r5, #0]
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d0c4      	beq.n	8018b88 <__sflush_r+0x34>
 8018bfe:	2b1d      	cmp	r3, #29
 8018c00:	d001      	beq.n	8018c06 <__sflush_r+0xb2>
 8018c02:	2b16      	cmp	r3, #22
 8018c04:	d101      	bne.n	8018c0a <__sflush_r+0xb6>
 8018c06:	602f      	str	r7, [r5, #0]
 8018c08:	e7b1      	b.n	8018b6e <__sflush_r+0x1a>
 8018c0a:	89a3      	ldrh	r3, [r4, #12]
 8018c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c10:	81a3      	strh	r3, [r4, #12]
 8018c12:	e7ad      	b.n	8018b70 <__sflush_r+0x1c>
 8018c14:	690f      	ldr	r7, [r1, #16]
 8018c16:	2f00      	cmp	r7, #0
 8018c18:	d0a9      	beq.n	8018b6e <__sflush_r+0x1a>
 8018c1a:	0793      	lsls	r3, r2, #30
 8018c1c:	680e      	ldr	r6, [r1, #0]
 8018c1e:	bf08      	it	eq
 8018c20:	694b      	ldreq	r3, [r1, #20]
 8018c22:	600f      	str	r7, [r1, #0]
 8018c24:	bf18      	it	ne
 8018c26:	2300      	movne	r3, #0
 8018c28:	eba6 0807 	sub.w	r8, r6, r7
 8018c2c:	608b      	str	r3, [r1, #8]
 8018c2e:	f1b8 0f00 	cmp.w	r8, #0
 8018c32:	dd9c      	ble.n	8018b6e <__sflush_r+0x1a>
 8018c34:	6a21      	ldr	r1, [r4, #32]
 8018c36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018c38:	4643      	mov	r3, r8
 8018c3a:	463a      	mov	r2, r7
 8018c3c:	4628      	mov	r0, r5
 8018c3e:	47b0      	blx	r6
 8018c40:	2800      	cmp	r0, #0
 8018c42:	dc06      	bgt.n	8018c52 <__sflush_r+0xfe>
 8018c44:	89a3      	ldrh	r3, [r4, #12]
 8018c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c4a:	81a3      	strh	r3, [r4, #12]
 8018c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8018c50:	e78e      	b.n	8018b70 <__sflush_r+0x1c>
 8018c52:	4407      	add	r7, r0
 8018c54:	eba8 0800 	sub.w	r8, r8, r0
 8018c58:	e7e9      	b.n	8018c2e <__sflush_r+0xda>
 8018c5a:	bf00      	nop
 8018c5c:	20400001 	.word	0x20400001

08018c60 <_fflush_r>:
 8018c60:	b538      	push	{r3, r4, r5, lr}
 8018c62:	690b      	ldr	r3, [r1, #16]
 8018c64:	4605      	mov	r5, r0
 8018c66:	460c      	mov	r4, r1
 8018c68:	b913      	cbnz	r3, 8018c70 <_fflush_r+0x10>
 8018c6a:	2500      	movs	r5, #0
 8018c6c:	4628      	mov	r0, r5
 8018c6e:	bd38      	pop	{r3, r4, r5, pc}
 8018c70:	b118      	cbz	r0, 8018c7a <_fflush_r+0x1a>
 8018c72:	6983      	ldr	r3, [r0, #24]
 8018c74:	b90b      	cbnz	r3, 8018c7a <_fflush_r+0x1a>
 8018c76:	f000 f887 	bl	8018d88 <__sinit>
 8018c7a:	4b14      	ldr	r3, [pc, #80]	; (8018ccc <_fflush_r+0x6c>)
 8018c7c:	429c      	cmp	r4, r3
 8018c7e:	d11b      	bne.n	8018cb8 <_fflush_r+0x58>
 8018c80:	686c      	ldr	r4, [r5, #4]
 8018c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d0ef      	beq.n	8018c6a <_fflush_r+0xa>
 8018c8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018c8c:	07d0      	lsls	r0, r2, #31
 8018c8e:	d404      	bmi.n	8018c9a <_fflush_r+0x3a>
 8018c90:	0599      	lsls	r1, r3, #22
 8018c92:	d402      	bmi.n	8018c9a <_fflush_r+0x3a>
 8018c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c96:	f000 f915 	bl	8018ec4 <__retarget_lock_acquire_recursive>
 8018c9a:	4628      	mov	r0, r5
 8018c9c:	4621      	mov	r1, r4
 8018c9e:	f7ff ff59 	bl	8018b54 <__sflush_r>
 8018ca2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018ca4:	07da      	lsls	r2, r3, #31
 8018ca6:	4605      	mov	r5, r0
 8018ca8:	d4e0      	bmi.n	8018c6c <_fflush_r+0xc>
 8018caa:	89a3      	ldrh	r3, [r4, #12]
 8018cac:	059b      	lsls	r3, r3, #22
 8018cae:	d4dd      	bmi.n	8018c6c <_fflush_r+0xc>
 8018cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018cb2:	f000 f908 	bl	8018ec6 <__retarget_lock_release_recursive>
 8018cb6:	e7d9      	b.n	8018c6c <_fflush_r+0xc>
 8018cb8:	4b05      	ldr	r3, [pc, #20]	; (8018cd0 <_fflush_r+0x70>)
 8018cba:	429c      	cmp	r4, r3
 8018cbc:	d101      	bne.n	8018cc2 <_fflush_r+0x62>
 8018cbe:	68ac      	ldr	r4, [r5, #8]
 8018cc0:	e7df      	b.n	8018c82 <_fflush_r+0x22>
 8018cc2:	4b04      	ldr	r3, [pc, #16]	; (8018cd4 <_fflush_r+0x74>)
 8018cc4:	429c      	cmp	r4, r3
 8018cc6:	bf08      	it	eq
 8018cc8:	68ec      	ldreq	r4, [r5, #12]
 8018cca:	e7da      	b.n	8018c82 <_fflush_r+0x22>
 8018ccc:	0801aa50 	.word	0x0801aa50
 8018cd0:	0801aa70 	.word	0x0801aa70
 8018cd4:	0801aa30 	.word	0x0801aa30

08018cd8 <std>:
 8018cd8:	2300      	movs	r3, #0
 8018cda:	b510      	push	{r4, lr}
 8018cdc:	4604      	mov	r4, r0
 8018cde:	e9c0 3300 	strd	r3, r3, [r0]
 8018ce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018ce6:	6083      	str	r3, [r0, #8]
 8018ce8:	8181      	strh	r1, [r0, #12]
 8018cea:	6643      	str	r3, [r0, #100]	; 0x64
 8018cec:	81c2      	strh	r2, [r0, #14]
 8018cee:	6183      	str	r3, [r0, #24]
 8018cf0:	4619      	mov	r1, r3
 8018cf2:	2208      	movs	r2, #8
 8018cf4:	305c      	adds	r0, #92	; 0x5c
 8018cf6:	f7ff fa43 	bl	8018180 <memset>
 8018cfa:	4b05      	ldr	r3, [pc, #20]	; (8018d10 <std+0x38>)
 8018cfc:	6263      	str	r3, [r4, #36]	; 0x24
 8018cfe:	4b05      	ldr	r3, [pc, #20]	; (8018d14 <std+0x3c>)
 8018d00:	62a3      	str	r3, [r4, #40]	; 0x28
 8018d02:	4b05      	ldr	r3, [pc, #20]	; (8018d18 <std+0x40>)
 8018d04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018d06:	4b05      	ldr	r3, [pc, #20]	; (8018d1c <std+0x44>)
 8018d08:	6224      	str	r4, [r4, #32]
 8018d0a:	6323      	str	r3, [r4, #48]	; 0x30
 8018d0c:	bd10      	pop	{r4, pc}
 8018d0e:	bf00      	nop
 8018d10:	08018fad 	.word	0x08018fad
 8018d14:	08018fcf 	.word	0x08018fcf
 8018d18:	08019007 	.word	0x08019007
 8018d1c:	0801902b 	.word	0x0801902b

08018d20 <_cleanup_r>:
 8018d20:	4901      	ldr	r1, [pc, #4]	; (8018d28 <_cleanup_r+0x8>)
 8018d22:	f000 b8af 	b.w	8018e84 <_fwalk_reent>
 8018d26:	bf00      	nop
 8018d28:	08018c61 	.word	0x08018c61

08018d2c <__sfmoreglue>:
 8018d2c:	b570      	push	{r4, r5, r6, lr}
 8018d2e:	2268      	movs	r2, #104	; 0x68
 8018d30:	1e4d      	subs	r5, r1, #1
 8018d32:	4355      	muls	r5, r2
 8018d34:	460e      	mov	r6, r1
 8018d36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018d3a:	f7ff fa95 	bl	8018268 <_malloc_r>
 8018d3e:	4604      	mov	r4, r0
 8018d40:	b140      	cbz	r0, 8018d54 <__sfmoreglue+0x28>
 8018d42:	2100      	movs	r1, #0
 8018d44:	e9c0 1600 	strd	r1, r6, [r0]
 8018d48:	300c      	adds	r0, #12
 8018d4a:	60a0      	str	r0, [r4, #8]
 8018d4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018d50:	f7ff fa16 	bl	8018180 <memset>
 8018d54:	4620      	mov	r0, r4
 8018d56:	bd70      	pop	{r4, r5, r6, pc}

08018d58 <__sfp_lock_acquire>:
 8018d58:	4801      	ldr	r0, [pc, #4]	; (8018d60 <__sfp_lock_acquire+0x8>)
 8018d5a:	f000 b8b3 	b.w	8018ec4 <__retarget_lock_acquire_recursive>
 8018d5e:	bf00      	nop
 8018d60:	20006491 	.word	0x20006491

08018d64 <__sfp_lock_release>:
 8018d64:	4801      	ldr	r0, [pc, #4]	; (8018d6c <__sfp_lock_release+0x8>)
 8018d66:	f000 b8ae 	b.w	8018ec6 <__retarget_lock_release_recursive>
 8018d6a:	bf00      	nop
 8018d6c:	20006491 	.word	0x20006491

08018d70 <__sinit_lock_acquire>:
 8018d70:	4801      	ldr	r0, [pc, #4]	; (8018d78 <__sinit_lock_acquire+0x8>)
 8018d72:	f000 b8a7 	b.w	8018ec4 <__retarget_lock_acquire_recursive>
 8018d76:	bf00      	nop
 8018d78:	20006492 	.word	0x20006492

08018d7c <__sinit_lock_release>:
 8018d7c:	4801      	ldr	r0, [pc, #4]	; (8018d84 <__sinit_lock_release+0x8>)
 8018d7e:	f000 b8a2 	b.w	8018ec6 <__retarget_lock_release_recursive>
 8018d82:	bf00      	nop
 8018d84:	20006492 	.word	0x20006492

08018d88 <__sinit>:
 8018d88:	b510      	push	{r4, lr}
 8018d8a:	4604      	mov	r4, r0
 8018d8c:	f7ff fff0 	bl	8018d70 <__sinit_lock_acquire>
 8018d90:	69a3      	ldr	r3, [r4, #24]
 8018d92:	b11b      	cbz	r3, 8018d9c <__sinit+0x14>
 8018d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d98:	f7ff bff0 	b.w	8018d7c <__sinit_lock_release>
 8018d9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018da0:	6523      	str	r3, [r4, #80]	; 0x50
 8018da2:	4b13      	ldr	r3, [pc, #76]	; (8018df0 <__sinit+0x68>)
 8018da4:	4a13      	ldr	r2, [pc, #76]	; (8018df4 <__sinit+0x6c>)
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	62a2      	str	r2, [r4, #40]	; 0x28
 8018daa:	42a3      	cmp	r3, r4
 8018dac:	bf04      	itt	eq
 8018dae:	2301      	moveq	r3, #1
 8018db0:	61a3      	streq	r3, [r4, #24]
 8018db2:	4620      	mov	r0, r4
 8018db4:	f000 f820 	bl	8018df8 <__sfp>
 8018db8:	6060      	str	r0, [r4, #4]
 8018dba:	4620      	mov	r0, r4
 8018dbc:	f000 f81c 	bl	8018df8 <__sfp>
 8018dc0:	60a0      	str	r0, [r4, #8]
 8018dc2:	4620      	mov	r0, r4
 8018dc4:	f000 f818 	bl	8018df8 <__sfp>
 8018dc8:	2200      	movs	r2, #0
 8018dca:	60e0      	str	r0, [r4, #12]
 8018dcc:	2104      	movs	r1, #4
 8018dce:	6860      	ldr	r0, [r4, #4]
 8018dd0:	f7ff ff82 	bl	8018cd8 <std>
 8018dd4:	68a0      	ldr	r0, [r4, #8]
 8018dd6:	2201      	movs	r2, #1
 8018dd8:	2109      	movs	r1, #9
 8018dda:	f7ff ff7d 	bl	8018cd8 <std>
 8018dde:	68e0      	ldr	r0, [r4, #12]
 8018de0:	2202      	movs	r2, #2
 8018de2:	2112      	movs	r1, #18
 8018de4:	f7ff ff78 	bl	8018cd8 <std>
 8018de8:	2301      	movs	r3, #1
 8018dea:	61a3      	str	r3, [r4, #24]
 8018dec:	e7d2      	b.n	8018d94 <__sinit+0xc>
 8018dee:	bf00      	nop
 8018df0:	0801a9f8 	.word	0x0801a9f8
 8018df4:	08018d21 	.word	0x08018d21

08018df8 <__sfp>:
 8018df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018dfa:	4607      	mov	r7, r0
 8018dfc:	f7ff ffac 	bl	8018d58 <__sfp_lock_acquire>
 8018e00:	4b1e      	ldr	r3, [pc, #120]	; (8018e7c <__sfp+0x84>)
 8018e02:	681e      	ldr	r6, [r3, #0]
 8018e04:	69b3      	ldr	r3, [r6, #24]
 8018e06:	b913      	cbnz	r3, 8018e0e <__sfp+0x16>
 8018e08:	4630      	mov	r0, r6
 8018e0a:	f7ff ffbd 	bl	8018d88 <__sinit>
 8018e0e:	3648      	adds	r6, #72	; 0x48
 8018e10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018e14:	3b01      	subs	r3, #1
 8018e16:	d503      	bpl.n	8018e20 <__sfp+0x28>
 8018e18:	6833      	ldr	r3, [r6, #0]
 8018e1a:	b30b      	cbz	r3, 8018e60 <__sfp+0x68>
 8018e1c:	6836      	ldr	r6, [r6, #0]
 8018e1e:	e7f7      	b.n	8018e10 <__sfp+0x18>
 8018e20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018e24:	b9d5      	cbnz	r5, 8018e5c <__sfp+0x64>
 8018e26:	4b16      	ldr	r3, [pc, #88]	; (8018e80 <__sfp+0x88>)
 8018e28:	60e3      	str	r3, [r4, #12]
 8018e2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018e2e:	6665      	str	r5, [r4, #100]	; 0x64
 8018e30:	f000 f847 	bl	8018ec2 <__retarget_lock_init_recursive>
 8018e34:	f7ff ff96 	bl	8018d64 <__sfp_lock_release>
 8018e38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018e3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018e40:	6025      	str	r5, [r4, #0]
 8018e42:	61a5      	str	r5, [r4, #24]
 8018e44:	2208      	movs	r2, #8
 8018e46:	4629      	mov	r1, r5
 8018e48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018e4c:	f7ff f998 	bl	8018180 <memset>
 8018e50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018e54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018e58:	4620      	mov	r0, r4
 8018e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e5c:	3468      	adds	r4, #104	; 0x68
 8018e5e:	e7d9      	b.n	8018e14 <__sfp+0x1c>
 8018e60:	2104      	movs	r1, #4
 8018e62:	4638      	mov	r0, r7
 8018e64:	f7ff ff62 	bl	8018d2c <__sfmoreglue>
 8018e68:	4604      	mov	r4, r0
 8018e6a:	6030      	str	r0, [r6, #0]
 8018e6c:	2800      	cmp	r0, #0
 8018e6e:	d1d5      	bne.n	8018e1c <__sfp+0x24>
 8018e70:	f7ff ff78 	bl	8018d64 <__sfp_lock_release>
 8018e74:	230c      	movs	r3, #12
 8018e76:	603b      	str	r3, [r7, #0]
 8018e78:	e7ee      	b.n	8018e58 <__sfp+0x60>
 8018e7a:	bf00      	nop
 8018e7c:	0801a9f8 	.word	0x0801a9f8
 8018e80:	ffff0001 	.word	0xffff0001

08018e84 <_fwalk_reent>:
 8018e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e88:	4606      	mov	r6, r0
 8018e8a:	4688      	mov	r8, r1
 8018e8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018e90:	2700      	movs	r7, #0
 8018e92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018e96:	f1b9 0901 	subs.w	r9, r9, #1
 8018e9a:	d505      	bpl.n	8018ea8 <_fwalk_reent+0x24>
 8018e9c:	6824      	ldr	r4, [r4, #0]
 8018e9e:	2c00      	cmp	r4, #0
 8018ea0:	d1f7      	bne.n	8018e92 <_fwalk_reent+0xe>
 8018ea2:	4638      	mov	r0, r7
 8018ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ea8:	89ab      	ldrh	r3, [r5, #12]
 8018eaa:	2b01      	cmp	r3, #1
 8018eac:	d907      	bls.n	8018ebe <_fwalk_reent+0x3a>
 8018eae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018eb2:	3301      	adds	r3, #1
 8018eb4:	d003      	beq.n	8018ebe <_fwalk_reent+0x3a>
 8018eb6:	4629      	mov	r1, r5
 8018eb8:	4630      	mov	r0, r6
 8018eba:	47c0      	blx	r8
 8018ebc:	4307      	orrs	r7, r0
 8018ebe:	3568      	adds	r5, #104	; 0x68
 8018ec0:	e7e9      	b.n	8018e96 <_fwalk_reent+0x12>

08018ec2 <__retarget_lock_init_recursive>:
 8018ec2:	4770      	bx	lr

08018ec4 <__retarget_lock_acquire_recursive>:
 8018ec4:	4770      	bx	lr

08018ec6 <__retarget_lock_release_recursive>:
 8018ec6:	4770      	bx	lr

08018ec8 <__swhatbuf_r>:
 8018ec8:	b570      	push	{r4, r5, r6, lr}
 8018eca:	460e      	mov	r6, r1
 8018ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ed0:	2900      	cmp	r1, #0
 8018ed2:	b096      	sub	sp, #88	; 0x58
 8018ed4:	4614      	mov	r4, r2
 8018ed6:	461d      	mov	r5, r3
 8018ed8:	da08      	bge.n	8018eec <__swhatbuf_r+0x24>
 8018eda:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8018ede:	2200      	movs	r2, #0
 8018ee0:	602a      	str	r2, [r5, #0]
 8018ee2:	061a      	lsls	r2, r3, #24
 8018ee4:	d410      	bmi.n	8018f08 <__swhatbuf_r+0x40>
 8018ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018eea:	e00e      	b.n	8018f0a <__swhatbuf_r+0x42>
 8018eec:	466a      	mov	r2, sp
 8018eee:	f000 f8c3 	bl	8019078 <_fstat_r>
 8018ef2:	2800      	cmp	r0, #0
 8018ef4:	dbf1      	blt.n	8018eda <__swhatbuf_r+0x12>
 8018ef6:	9a01      	ldr	r2, [sp, #4]
 8018ef8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018efc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018f00:	425a      	negs	r2, r3
 8018f02:	415a      	adcs	r2, r3
 8018f04:	602a      	str	r2, [r5, #0]
 8018f06:	e7ee      	b.n	8018ee6 <__swhatbuf_r+0x1e>
 8018f08:	2340      	movs	r3, #64	; 0x40
 8018f0a:	2000      	movs	r0, #0
 8018f0c:	6023      	str	r3, [r4, #0]
 8018f0e:	b016      	add	sp, #88	; 0x58
 8018f10:	bd70      	pop	{r4, r5, r6, pc}
	...

08018f14 <__smakebuf_r>:
 8018f14:	898b      	ldrh	r3, [r1, #12]
 8018f16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018f18:	079d      	lsls	r5, r3, #30
 8018f1a:	4606      	mov	r6, r0
 8018f1c:	460c      	mov	r4, r1
 8018f1e:	d507      	bpl.n	8018f30 <__smakebuf_r+0x1c>
 8018f20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018f24:	6023      	str	r3, [r4, #0]
 8018f26:	6123      	str	r3, [r4, #16]
 8018f28:	2301      	movs	r3, #1
 8018f2a:	6163      	str	r3, [r4, #20]
 8018f2c:	b002      	add	sp, #8
 8018f2e:	bd70      	pop	{r4, r5, r6, pc}
 8018f30:	ab01      	add	r3, sp, #4
 8018f32:	466a      	mov	r2, sp
 8018f34:	f7ff ffc8 	bl	8018ec8 <__swhatbuf_r>
 8018f38:	9900      	ldr	r1, [sp, #0]
 8018f3a:	4605      	mov	r5, r0
 8018f3c:	4630      	mov	r0, r6
 8018f3e:	f7ff f993 	bl	8018268 <_malloc_r>
 8018f42:	b948      	cbnz	r0, 8018f58 <__smakebuf_r+0x44>
 8018f44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f48:	059a      	lsls	r2, r3, #22
 8018f4a:	d4ef      	bmi.n	8018f2c <__smakebuf_r+0x18>
 8018f4c:	f023 0303 	bic.w	r3, r3, #3
 8018f50:	f043 0302 	orr.w	r3, r3, #2
 8018f54:	81a3      	strh	r3, [r4, #12]
 8018f56:	e7e3      	b.n	8018f20 <__smakebuf_r+0xc>
 8018f58:	4b0d      	ldr	r3, [pc, #52]	; (8018f90 <__smakebuf_r+0x7c>)
 8018f5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8018f5c:	89a3      	ldrh	r3, [r4, #12]
 8018f5e:	6020      	str	r0, [r4, #0]
 8018f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f64:	81a3      	strh	r3, [r4, #12]
 8018f66:	9b00      	ldr	r3, [sp, #0]
 8018f68:	6163      	str	r3, [r4, #20]
 8018f6a:	9b01      	ldr	r3, [sp, #4]
 8018f6c:	6120      	str	r0, [r4, #16]
 8018f6e:	b15b      	cbz	r3, 8018f88 <__smakebuf_r+0x74>
 8018f70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018f74:	4630      	mov	r0, r6
 8018f76:	f000 f891 	bl	801909c <_isatty_r>
 8018f7a:	b128      	cbz	r0, 8018f88 <__smakebuf_r+0x74>
 8018f7c:	89a3      	ldrh	r3, [r4, #12]
 8018f7e:	f023 0303 	bic.w	r3, r3, #3
 8018f82:	f043 0301 	orr.w	r3, r3, #1
 8018f86:	81a3      	strh	r3, [r4, #12]
 8018f88:	89a0      	ldrh	r0, [r4, #12]
 8018f8a:	4305      	orrs	r5, r0
 8018f8c:	81a5      	strh	r5, [r4, #12]
 8018f8e:	e7cd      	b.n	8018f2c <__smakebuf_r+0x18>
 8018f90:	08018d21 	.word	0x08018d21

08018f94 <__malloc_lock>:
 8018f94:	4801      	ldr	r0, [pc, #4]	; (8018f9c <__malloc_lock+0x8>)
 8018f96:	f7ff bf95 	b.w	8018ec4 <__retarget_lock_acquire_recursive>
 8018f9a:	bf00      	nop
 8018f9c:	20006490 	.word	0x20006490

08018fa0 <__malloc_unlock>:
 8018fa0:	4801      	ldr	r0, [pc, #4]	; (8018fa8 <__malloc_unlock+0x8>)
 8018fa2:	f7ff bf90 	b.w	8018ec6 <__retarget_lock_release_recursive>
 8018fa6:	bf00      	nop
 8018fa8:	20006490 	.word	0x20006490

08018fac <__sread>:
 8018fac:	b510      	push	{r4, lr}
 8018fae:	460c      	mov	r4, r1
 8018fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018fb4:	f000 f894 	bl	80190e0 <_read_r>
 8018fb8:	2800      	cmp	r0, #0
 8018fba:	bfab      	itete	ge
 8018fbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018fbe:	89a3      	ldrhlt	r3, [r4, #12]
 8018fc0:	181b      	addge	r3, r3, r0
 8018fc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018fc6:	bfac      	ite	ge
 8018fc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8018fca:	81a3      	strhlt	r3, [r4, #12]
 8018fcc:	bd10      	pop	{r4, pc}

08018fce <__swrite>:
 8018fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018fd2:	461f      	mov	r7, r3
 8018fd4:	898b      	ldrh	r3, [r1, #12]
 8018fd6:	05db      	lsls	r3, r3, #23
 8018fd8:	4605      	mov	r5, r0
 8018fda:	460c      	mov	r4, r1
 8018fdc:	4616      	mov	r6, r2
 8018fde:	d505      	bpl.n	8018fec <__swrite+0x1e>
 8018fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018fe4:	2302      	movs	r3, #2
 8018fe6:	2200      	movs	r2, #0
 8018fe8:	f000 f868 	bl	80190bc <_lseek_r>
 8018fec:	89a3      	ldrh	r3, [r4, #12]
 8018fee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018ff2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018ff6:	81a3      	strh	r3, [r4, #12]
 8018ff8:	4632      	mov	r2, r6
 8018ffa:	463b      	mov	r3, r7
 8018ffc:	4628      	mov	r0, r5
 8018ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019002:	f000 b817 	b.w	8019034 <_write_r>

08019006 <__sseek>:
 8019006:	b510      	push	{r4, lr}
 8019008:	460c      	mov	r4, r1
 801900a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801900e:	f000 f855 	bl	80190bc <_lseek_r>
 8019012:	1c43      	adds	r3, r0, #1
 8019014:	89a3      	ldrh	r3, [r4, #12]
 8019016:	bf15      	itete	ne
 8019018:	6560      	strne	r0, [r4, #84]	; 0x54
 801901a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801901e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019022:	81a3      	strheq	r3, [r4, #12]
 8019024:	bf18      	it	ne
 8019026:	81a3      	strhne	r3, [r4, #12]
 8019028:	bd10      	pop	{r4, pc}

0801902a <__sclose>:
 801902a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801902e:	f000 b813 	b.w	8019058 <_close_r>
	...

08019034 <_write_r>:
 8019034:	b538      	push	{r3, r4, r5, lr}
 8019036:	4d07      	ldr	r5, [pc, #28]	; (8019054 <_write_r+0x20>)
 8019038:	4604      	mov	r4, r0
 801903a:	4608      	mov	r0, r1
 801903c:	4611      	mov	r1, r2
 801903e:	2200      	movs	r2, #0
 8019040:	602a      	str	r2, [r5, #0]
 8019042:	461a      	mov	r2, r3
 8019044:	f7e9 fb2d 	bl	80026a2 <_write>
 8019048:	1c43      	adds	r3, r0, #1
 801904a:	d102      	bne.n	8019052 <_write_r+0x1e>
 801904c:	682b      	ldr	r3, [r5, #0]
 801904e:	b103      	cbz	r3, 8019052 <_write_r+0x1e>
 8019050:	6023      	str	r3, [r4, #0]
 8019052:	bd38      	pop	{r3, r4, r5, pc}
 8019054:	20006494 	.word	0x20006494

08019058 <_close_r>:
 8019058:	b538      	push	{r3, r4, r5, lr}
 801905a:	4d06      	ldr	r5, [pc, #24]	; (8019074 <_close_r+0x1c>)
 801905c:	2300      	movs	r3, #0
 801905e:	4604      	mov	r4, r0
 8019060:	4608      	mov	r0, r1
 8019062:	602b      	str	r3, [r5, #0]
 8019064:	f7e9 fb39 	bl	80026da <_close>
 8019068:	1c43      	adds	r3, r0, #1
 801906a:	d102      	bne.n	8019072 <_close_r+0x1a>
 801906c:	682b      	ldr	r3, [r5, #0]
 801906e:	b103      	cbz	r3, 8019072 <_close_r+0x1a>
 8019070:	6023      	str	r3, [r4, #0]
 8019072:	bd38      	pop	{r3, r4, r5, pc}
 8019074:	20006494 	.word	0x20006494

08019078 <_fstat_r>:
 8019078:	b538      	push	{r3, r4, r5, lr}
 801907a:	4d07      	ldr	r5, [pc, #28]	; (8019098 <_fstat_r+0x20>)
 801907c:	2300      	movs	r3, #0
 801907e:	4604      	mov	r4, r0
 8019080:	4608      	mov	r0, r1
 8019082:	4611      	mov	r1, r2
 8019084:	602b      	str	r3, [r5, #0]
 8019086:	f7e9 fb34 	bl	80026f2 <_fstat>
 801908a:	1c43      	adds	r3, r0, #1
 801908c:	d102      	bne.n	8019094 <_fstat_r+0x1c>
 801908e:	682b      	ldr	r3, [r5, #0]
 8019090:	b103      	cbz	r3, 8019094 <_fstat_r+0x1c>
 8019092:	6023      	str	r3, [r4, #0]
 8019094:	bd38      	pop	{r3, r4, r5, pc}
 8019096:	bf00      	nop
 8019098:	20006494 	.word	0x20006494

0801909c <_isatty_r>:
 801909c:	b538      	push	{r3, r4, r5, lr}
 801909e:	4d06      	ldr	r5, [pc, #24]	; (80190b8 <_isatty_r+0x1c>)
 80190a0:	2300      	movs	r3, #0
 80190a2:	4604      	mov	r4, r0
 80190a4:	4608      	mov	r0, r1
 80190a6:	602b      	str	r3, [r5, #0]
 80190a8:	f7e9 fb33 	bl	8002712 <_isatty>
 80190ac:	1c43      	adds	r3, r0, #1
 80190ae:	d102      	bne.n	80190b6 <_isatty_r+0x1a>
 80190b0:	682b      	ldr	r3, [r5, #0]
 80190b2:	b103      	cbz	r3, 80190b6 <_isatty_r+0x1a>
 80190b4:	6023      	str	r3, [r4, #0]
 80190b6:	bd38      	pop	{r3, r4, r5, pc}
 80190b8:	20006494 	.word	0x20006494

080190bc <_lseek_r>:
 80190bc:	b538      	push	{r3, r4, r5, lr}
 80190be:	4d07      	ldr	r5, [pc, #28]	; (80190dc <_lseek_r+0x20>)
 80190c0:	4604      	mov	r4, r0
 80190c2:	4608      	mov	r0, r1
 80190c4:	4611      	mov	r1, r2
 80190c6:	2200      	movs	r2, #0
 80190c8:	602a      	str	r2, [r5, #0]
 80190ca:	461a      	mov	r2, r3
 80190cc:	f7e9 fb2c 	bl	8002728 <_lseek>
 80190d0:	1c43      	adds	r3, r0, #1
 80190d2:	d102      	bne.n	80190da <_lseek_r+0x1e>
 80190d4:	682b      	ldr	r3, [r5, #0]
 80190d6:	b103      	cbz	r3, 80190da <_lseek_r+0x1e>
 80190d8:	6023      	str	r3, [r4, #0]
 80190da:	bd38      	pop	{r3, r4, r5, pc}
 80190dc:	20006494 	.word	0x20006494

080190e0 <_read_r>:
 80190e0:	b538      	push	{r3, r4, r5, lr}
 80190e2:	4d07      	ldr	r5, [pc, #28]	; (8019100 <_read_r+0x20>)
 80190e4:	4604      	mov	r4, r0
 80190e6:	4608      	mov	r0, r1
 80190e8:	4611      	mov	r1, r2
 80190ea:	2200      	movs	r2, #0
 80190ec:	602a      	str	r2, [r5, #0]
 80190ee:	461a      	mov	r2, r3
 80190f0:	f7e9 faba 	bl	8002668 <_read>
 80190f4:	1c43      	adds	r3, r0, #1
 80190f6:	d102      	bne.n	80190fe <_read_r+0x1e>
 80190f8:	682b      	ldr	r3, [r5, #0]
 80190fa:	b103      	cbz	r3, 80190fe <_read_r+0x1e>
 80190fc:	6023      	str	r3, [r4, #0]
 80190fe:	bd38      	pop	{r3, r4, r5, pc}
 8019100:	20006494 	.word	0x20006494

08019104 <_init>:
 8019104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019106:	bf00      	nop
 8019108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801910a:	bc08      	pop	{r3}
 801910c:	469e      	mov	lr, r3
 801910e:	4770      	bx	lr

08019110 <_fini>:
 8019110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019112:	bf00      	nop
 8019114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019116:	bc08      	pop	{r3}
 8019118:	469e      	mov	lr, r3
 801911a:	4770      	bx	lr
